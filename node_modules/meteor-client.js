__meteor_runtime_config__ = {
  "meteorEnv": {},
  "DDP_DEFAULT_CONNECTION_URL": "http://localhost:3000"
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var _exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
    // field on it, instead of in the global namespace.  See also post.js.                                   // 2
    _exports = {}; // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2                                                                               // 1
    //     http://underscorejs.org                                                                           // 2
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
    //     Underscore may be freely distributed under the MIT license.                                       // 4
    // 5
    (function () {
      // 6
      // 7
      // Baseline setup                                                                                      // 8
      // --------------                                                                                      // 9
      // 10
      // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
      var root = this; // 12
      // 13
      // Save the previous value of the `_` variable.                                                        // 14
      var previousUnderscore = root._; // 15
      // 16
      // Establish the object that gets returned to break out of a loop iteration.                           // 17
      var breaker = {}; // 18
      // 19
      // Save bytes in the minified (but not gzipped) version:                                               // 20
      var ArrayProto = Array.prototype,
          ObjProto = Object.prototype,
          FuncProto = Function.prototype; // 21
      // 22
      // Create quick reference variables for speed access to core prototypes.                               // 23
      var // 24
      push = ArrayProto.push,
          // 25
      slice = ArrayProto.slice,
          // 26
      concat = ArrayProto.concat,
          // 27
      toString = ObjProto.toString,
          // 28
      hasOwnProperty = ObjProto.hasOwnProperty; // 29
      // 30
      // All **ECMAScript 5** native function implementations that we hope to use                            // 31
      // are declared here.                                                                                  // 32
      var // 33
      nativeForEach = ArrayProto.forEach,
          // 34
      nativeMap = ArrayProto.map,
          // 35
      nativeReduce = ArrayProto.reduce,
          // 36
      nativeReduceRight = ArrayProto.reduceRight,
          // 37
      nativeFilter = ArrayProto.filter,
          // 38
      nativeEvery = ArrayProto.every,
          // 39
      nativeSome = ArrayProto.some,
          // 40
      nativeIndexOf = ArrayProto.indexOf,
          // 41
      nativeLastIndexOf = ArrayProto.lastIndexOf,
          // 42
      nativeIsArray = Array.isArray,
          // 43
      nativeKeys = Object.keys,
          // 44
      nativeBind = FuncProto.bind; // 45
      // 46
      // Create a safe reference to the Underscore object for use below.                                     // 47
      var _ = function (obj) {
        // 48
        if (obj instanceof _) return obj; // 49
        if (!(this instanceof _)) return new _(obj); // 50
        this._wrapped = obj; // 51
      }; // 52
      // 53
      // Export the Underscore object for **Node.js**, with                                                  // 54
      // backwards-compatibility for the old `require()` API. If we're in                                    // 55
      // the browser, add `_` as a global object via a string identifier,                                    // 56
      // for Closure Compiler "advanced" mode.                                                               // 57
      if (typeof _exports !== 'undefined') {
        // 58
        if (typeof module !== 'undefined' && module.exports) {
          // 59
          _exports = module.exports = _; // 60
        } // 61
        _exports._ = _; // 62
      } else {
        // 63
        root._ = _; // 64
      } // 65
      // 66
      // Current version.                                                                                    // 67
      _.VERSION = '1.5.2'; // 68
      // 69
      // Collection Functions                                                                                // 70
      // --------------------                                                                                // 71
      // 72
      // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
      // _.isArguments which is defined using each. In looksLikeArray                                        // 74
      // (which each depends on), we then use _isArguments instead of                                        // 75
      // _.isArguments.                                                                                      // 76
      var _isArguments = function (obj) {
        // 77
        return toString.call(obj) === '[object Arguments]'; // 78
      }; // 79
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
      // there isn't any inspectable "Arguments" type.                                                       // 81
      if (!_isArguments(arguments)) {
        // 82
        _isArguments = function (obj) {
          // 83
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function'); // 84
        }; // 85
      } // 86
      // 87
      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
      // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
      // all instances of `obj.length === +obj.length`.                                                      // 90
      // https://github.com/meteor/meteor/issues/594                                                         // 91
      // https://github.com/jashkenas/underscore/issues/770                                                  // 92
      var looksLikeArray = function (obj) {
        // 93
        return obj.length === +obj.length // 94
        // _.isArguments not yet necessarily defined here                                            // 95
        && (_isArguments(obj) || obj.constructor !== Object); // 96
      }; // 97
      // 98
      // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
      // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
      // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
      var each = _.each = _.forEach = function (obj, iterator, context) {
        // 102
        if (obj == null) return; // 103
        if (nativeForEach && obj.forEach === nativeForEach) {
          // 104
          obj.forEach(iterator, context); // 105
        } else if (looksLikeArray(obj)) {
          // 106
          for (var i = 0, length = obj.length; i < length; i++) {
            // 107
            if (iterator.call(context, obj[i], i, obj) === breaker) return; // 108
          } // 109
        } else {
          // 110
          var keys = _.keys(obj); // 111
          for (var i = 0, length = keys.length; i < length; i++) {
            // 112
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return; // 113
          } // 114
        } // 115
      }; // 116
      // 117
      // Return the results of applying the iterator to each element.                                        // 118
      // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
      _.map = _.collect = function (obj, iterator, context) {
        // 120
        var results = []; // 121
        if (obj == null) return results; // 122
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context); // 123
        each(obj, function (value, index, list) {
          // 124
          results.push(iterator.call(context, value, index, list)); // 125
        }); // 126
        return results; // 127
      }; // 128
      // 129
      var reduceError = 'Reduce of empty array with no initial value'; // 130
      // 131
      // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        // 134
        var initial = arguments.length > 2; // 135
        if (obj == null) obj = []; // 136
        if (nativeReduce && obj.reduce === nativeReduce) {
          // 137
          if (context) iterator = _.bind(iterator, context); // 138
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator); // 139
        } // 140
        each(obj, function (value, index, list) {
          // 141
          if (!initial) {
            // 142
            memo = value; // 143
            initial = true; // 144
          } else {
            // 145
            memo = iterator.call(context, memo, value, index, list); // 146
          } // 147
        }); // 148
        if (!initial) throw new TypeError(reduceError); // 149
        return memo; // 150
      }; // 151
      // 152
      // The right-associative version of reduce, also known as `foldr`.                                     // 153
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        // 155
        var initial = arguments.length > 2; // 156
        if (obj == null) obj = []; // 157
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          // 158
          if (context) iterator = _.bind(iterator, context); // 159
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator); // 160
        } // 161
        var length = obj.length; // 162
        if (!looksLikeArray(obj)) {
          // 163
          var keys = _.keys(obj); // 164
          length = keys.length; // 165
        } // 166
        each(obj, function (value, index, list) {
          // 167
          index = keys ? keys[--length] : --length; // 168
          if (!initial) {
            // 169
            memo = obj[index]; // 170
            initial = true; // 171
          } else {
            // 172
            memo = iterator.call(context, memo, obj[index], index, list); // 173
          } // 174
        }); // 175
        if (!initial) throw new TypeError(reduceError); // 176
        return memo; // 177
      }; // 178
      // 179
      // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
      _.find = _.detect = function (obj, iterator, context) {
        // 181
        var result; // 182
        any(obj, function (value, index, list) {
          // 183
          if (iterator.call(context, value, index, list)) {
            // 184
            result = value; // 185
            return true; // 186
          } // 187
        }); // 188
        return result; // 189
      }; // 190
      // 191
      // Return all the elements that pass a truth test.                                                     // 192
      // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
      // Aliased as `select`.                                                                                // 194
      _.filter = _.select = function (obj, iterator, context) {
        // 195
        var results = []; // 196
        if (obj == null) return results; // 197
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context); // 198
        each(obj, function (value, index, list) {
          // 199
          if (iterator.call(context, value, index, list)) results.push(value); // 200
        }); // 201
        return results; // 202
      }; // 203
      // 204
      // Return all the elements for which a truth test fails.                                               // 205
      _.reject = function (obj, iterator, context) {
        // 206
        return _.filter(obj, function (value, index, list) {
          // 207
          return !iterator.call(context, value, index, list); // 208
        }, context); // 209
      }; // 210
      // 211
      // Determine whether all of the elements match a truth test.                                           // 212
      // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
      // Aliased as `all`.                                                                                   // 214
      _.every = _.all = function (obj, iterator, context) {
        // 215
        iterator || (iterator = _.identity); // 216
        var result = true; // 217
        if (obj == null) return result; // 218
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context); // 219
        each(obj, function (value, index, list) {
          // 220
          if (!(result = result && iterator.call(context, value, index, list))) return breaker; // 221
        }); // 222
        return !!result; // 223
      }; // 224
      // 225
      // Determine if at least one element in the object matches a truth test.                               // 226
      // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
      // Aliased as `any`.                                                                                   // 228
      var any = _.some = _.any = function (obj, iterator, context) {
        // 229
        iterator || (iterator = _.identity); // 230
        var result = false; // 231
        if (obj == null) return result; // 232
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context); // 233
        each(obj, function (value, index, list) {
          // 234
          if (result || (result = iterator.call(context, value, index, list))) return breaker; // 235
        }); // 236
        return !!result; // 237
      }; // 238
      // 239
      // Determine if the array or object contains a given value (using `===`).                              // 240
      // Aliased as `include`.                                                                               // 241
      _.contains = _.include = function (obj, target) {
        // 242
        if (obj == null) return false; // 243
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1; // 244
        return any(obj, function (value) {
          // 245
          return value === target; // 246
        }); // 247
      }; // 248
      // 249
      // Invoke a method (with arguments) on every item in a collection.                                     // 250
      _.invoke = function (obj, method) {
        // 251
        var args = slice.call(arguments, 2); // 252
        var isFunc = _.isFunction(method); // 253
        return _.map(obj, function (value) {
          // 254
          return (isFunc ? method : value[method]).apply(value, args); // 255
        }); // 256
      }; // 257
      // 258
      // Convenience version of a common use case of `map`: fetching a property.                             // 259
      _.pluck = function (obj, key) {
        // 260
        return _.map(obj, function (value) {
          return value[key];
        }); // 261
      }; // 262
      // 263
      // Convenience version of a common use case of `filter`: selecting only objects                        // 264
      // containing specific `key:value` pairs.                                                              // 265
      _.where = function (obj, attrs, first) {
        // 266
        if (_.isEmpty(attrs)) return first ? void 0 : []; // 267
        return _[first ? 'find' : 'filter'](obj, function (value) {
          // 268
          for (var key in attrs) {
            // 269
            if (attrs[key] !== value[key]) return false; // 270
          } // 271
          return true; // 272
        }); // 273
      }; // 274
      // 275
      // Convenience version of a common use case of `find`: getting the first object                        // 276
      // containing specific `key:value` pairs.                                                              // 277
      _.findWhere = function (obj, attrs) {
        // 278
        return _.where(obj, attrs, true); // 279
      }; // 280
      // 281
      // Return the maximum element or (element-based computation).                                          // 282
      // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
      _.max = function (obj, iterator, context) {
        // 285
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          // 286
          return Math.max.apply(Math, obj); // 287
        } // 288
        if (!iterator && _.isEmpty(obj)) return -Infinity; // 289
        var result = { computed: -Infinity, value: -Infinity }; // 290
        each(obj, function (value, index, list) {
          // 291
          var computed = iterator ? iterator.call(context, value, index, list) : value; // 292
          computed > result.computed && (result = { value: value, computed: computed }); // 293
        }); // 294
        return result.value; // 295
      }; // 296
      // 297
      // Return the minimum element (or element-based computation).                                          // 298
      _.min = function (obj, iterator, context) {
        // 299
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          // 300
          return Math.min.apply(Math, obj); // 301
        } // 302
        if (!iterator && _.isEmpty(obj)) return Infinity; // 303
        var result = { computed: Infinity, value: Infinity }; // 304
        each(obj, function (value, index, list) {
          // 305
          var computed = iterator ? iterator.call(context, value, index, list) : value; // 306
          computed < result.computed && (result = { value: value, computed: computed }); // 307
        }); // 308
        return result.value; // 309
      }; // 310
      // 311
      // Shuffle an array, using the modern version of the                                                   // 312
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
      _.shuffle = function (obj) {
        // 314
        var rand; // 315
        var index = 0; // 316
        var shuffled = []; // 317
        each(obj, function (value) {
          // 318
          rand = _.random(index++); // 319
          shuffled[index - 1] = shuffled[rand]; // 320
          shuffled[rand] = value; // 321
        }); // 322
        return shuffled; // 323
      }; // 324
      // 325
      // Sample **n** random values from an array.                                                           // 326
      // If **n** is not specified, returns a single random element from the array.                          // 327
      // The internal `guard` argument allows it to work with `map`.                                         // 328
      _.sample = function (obj, n, guard) {
        // 329
        if (arguments.length < 2 || guard) {
          // 330
          return obj[_.random(obj.length - 1)]; // 331
        } // 332
        return _.shuffle(obj).slice(0, Math.max(0, n)); // 333
      }; // 334
      // 335
      // An internal function to generate lookup iterators.                                                  // 336
      var lookupIterator = function (value) {
        // 337
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        }; // 338
      }; // 339
      // 340
      // Sort the object's values by a criterion produced by an iterator.                                    // 341
      _.sortBy = function (obj, value, context) {
        // 342
        var iterator = lookupIterator(value); // 343
        return _.pluck(_.map(obj, function (value, index, list) {
          // 344
          return { // 345
            value: value, // 346
            index: index, // 347
            criteria: iterator.call(context, value, index, list) // 348
          }; // 349
        }).sort(function (left, right) {
          // 350
          var a = left.criteria; // 351
          var b = right.criteria; // 352
          if (a !== b) {
            // 353
            if (a > b || a === void 0) return 1; // 354
            if (a < b || b === void 0) return -1; // 355
          } // 356
          return left.index - right.index; // 357
        }), 'value'); // 358
      }; // 359
      // 360
      // An internal function used for aggregate "group by" operations.                                      // 361
      var group = function (behavior) {
        // 362
        return function (obj, value, context) {
          // 363
          var result = {}; // 364
          var iterator = value == null ? _.identity : lookupIterator(value); // 365
          each(obj, function (value, index) {
            // 366
            var key = iterator.call(context, value, index, obj); // 367
            behavior(result, key, value); // 368
          }); // 369
          return result; // 370
        }; // 371
      }; // 372
      // 373
      // Groups the object's values by a criterion. Pass either a string attribute                           // 374
      // to group by, or a function that returns the criterion.                                              // 375
      _.groupBy = group(function (result, key, value) {
        // 376
        (_.has(result, key) ? result[key] : result[key] = []).push(value); // 377
      }); // 378
      // 379
      // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
      // when you know that your index values will be unique.                                                // 381
      _.indexBy = group(function (result, key, value) {
        // 382
        result[key] = value; // 383
      }); // 384
      // 385
      // Counts instances of an object that group by a certain criterion. Pass                               // 386
      // either a string attribute to count by, or a function that returns the                               // 387
      // criterion.                                                                                          // 388
      _.countBy = group(function (result, key) {
        // 389
        _.has(result, key) ? result[key]++ : result[key] = 1; // 390
      }); // 391
      // 392
      // Use a comparator function to figure out the smallest index at which                                 // 393
      // an object should be inserted so as to maintain order. Uses binary search.                           // 394
      _.sortedIndex = function (array, obj, iterator, context) {
        // 395
        iterator = iterator == null ? _.identity : lookupIterator(iterator); // 396
        var value = iterator.call(context, obj); // 397
        var low = 0,
            high = array.length; // 398
        while (low < high) {
          // 399
          var mid = low + high >>> 1; // 400
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid; // 401
        } // 402
        return low; // 403
      }; // 404
      // 405
      // Safely create a real, live array from anything iterable.                                            // 406
      _.toArray = function (obj) {
        // 407
        if (!obj) return []; // 408
        if (_.isArray(obj)) return slice.call(obj); // 409
        if (looksLikeArray(obj)) return _.map(obj, _.identity); // 410
        return _.values(obj); // 411
      }; // 412
      // 413
      // Return the number of elements in an object.                                                         // 414
      _.size = function (obj) {
        // 415
        if (obj == null) return 0; // 416
        return looksLikeArray(obj) ? obj.length : _.keys(obj).length; // 417
      }; // 418
      // 419
      // Array Functions                                                                                     // 420
      // ---------------                                                                                     // 421
      // 422
      // Get the first element of an array. Passing **n** will return the first N                            // 423
      // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
      // allows it to work with `_.map`.                                                                     // 425
      _.first = _.head = _.take = function (array, n, guard) {
        // 426
        if (array == null) return void 0; // 427
        return n == null || guard ? array[0] : slice.call(array, 0, n); // 428
      }; // 429
      // 430
      // Returns everything but the last entry of the array. Especially useful on                            // 431
      // the arguments object. Passing **n** will return all the values in                                   // 432
      // the array, excluding the last N. The **guard** check allows it to work with                         // 433
      // `_.map`.                                                                                            // 434
      _.initial = function (array, n, guard) {
        // 435
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n)); // 436
      }; // 437
      // 438
      // Get the last element of an array. Passing **n** will return the last N                              // 439
      // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
      _.last = function (array, n, guard) {
        // 441
        if (array == null) return void 0; // 442
        if (n == null || guard) {
          // 443
          return array[array.length - 1]; // 444
        } else {
          // 445
          return slice.call(array, Math.max(array.length - n, 0)); // 446
        } // 447
      }; // 448
      // 449
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
      // Especially useful on the arguments object. Passing an **n** will return                             // 451
      // the rest N values in the array. The **guard**                                                       // 452
      // check allows it to work with `_.map`.                                                               // 453
      _.rest = _.tail = _.drop = function (array, n, guard) {
        // 454
        return slice.call(array, n == null || guard ? 1 : n); // 455
      }; // 456
      // 457
      // Trim out all falsy values from an array.                                                            // 458
      _.compact = function (array) {
        // 459
        return _.filter(array, _.identity); // 460
      }; // 461
      // 462
      // Internal implementation of a recursive `flatten` function.                                          // 463
      var flatten = function (input, shallow, output) {
        // 464
        if (shallow && _.every(input, _.isArray)) {
          // 465
          return concat.apply(output, input); // 466
        } // 467
        each(input, function (value) {
          // 468
          if (_.isArray(value) || _.isArguments(value)) {
            // 469
            shallow ? push.apply(output, value) : flatten(value, shallow, output); // 470
          } else {
            // 471
            output.push(value); // 472
          } // 473
        }); // 474
        return output; // 475
      }; // 476
      // 477
      // Flatten out an array, either recursively (by default), or just one level.                           // 478
      _.flatten = function (array, shallow) {
        // 479
        return flatten(array, shallow, []); // 480
      }; // 481
      // 482
      // Return a version of the array that does not contain the specified value(s).                         // 483
      _.without = function (array) {
        // 484
        return _.difference(array, slice.call(arguments, 1)); // 485
      }; // 486
      // 487
      // Produce a duplicate-free version of the array. If the array has already                             // 488
      // been sorted, you have the option of using a faster algorithm.                                       // 489
      // Aliased as `unique`.                                                                                // 490
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        // 491
        if (_.isFunction(isSorted)) {
          // 492
          context = iterator; // 493
          iterator = isSorted; // 494
          isSorted = false; // 495
        } // 496
        var initial = iterator ? _.map(array, iterator, context) : array; // 497
        var results = []; // 498
        var seen = []; // 499
        each(initial, function (value, index) {
          // 500
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            // 501
            seen.push(value); // 502
            results.push(array[index]); // 503
          } // 504
        }); // 505
        return results; // 506
      }; // 507
      // 508
      // Produce an array that contains the union: each distinct element from all of                         // 509
      // the passed-in arrays.                                                                               // 510
      _.union = function () {
        // 511
        return _.uniq(_.flatten(arguments, true)); // 512
      }; // 513
      // 514
      // Produce an array that contains every item shared between all the                                    // 515
      // passed-in arrays.                                                                                   // 516
      _.intersection = function (array) {
        // 517
        var rest = slice.call(arguments, 1); // 518
        return _.filter(_.uniq(array), function (item) {
          // 519
          return _.every(rest, function (other) {
            // 520
            return _.indexOf(other, item) >= 0; // 521
          }); // 522
        }); // 523
      }; // 524
      // 525
      // Take the difference between one array and a number of other arrays.                                 // 526
      // Only the elements present in just the first array will remain.                                      // 527
      _.difference = function (array) {
        // 528
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1)); // 529
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        }); // 530
      }; // 531
      // 532
      // Zip together multiple lists into a single array -- elements that share                              // 533
      // an index go together.                                                                               // 534
      _.zip = function () {
        // 535
        var length = _.max(_.pluck(arguments, "length").concat(0)); // 536
        var results = new Array(length); // 537
        for (var i = 0; i < length; i++) {
          // 538
          results[i] = _.pluck(arguments, '' + i); // 539
        } // 540
        return results; // 541
      }; // 542
      // 543
      // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
      // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
      // the corresponding values.                                                                           // 546
      _.object = function (list, values) {
        // 547
        if (list == null) return {}; // 548
        var result = {}; // 549
        for (var i = 0, length = list.length; i < length; i++) {
          // 550
          if (values) {
            // 551
            result[list[i]] = values[i]; // 552
          } else {
            // 553
            result[list[i][0]] = list[i][1]; // 554
          } // 555
        } // 556
        return result; // 557
      }; // 558
      // 559
      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
      // we need this function. Return the position of the first occurrence of an                            // 561
      // item in an array, or -1 if the item is not included in the array.                                   // 562
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
      // If the array is large and already in sort order, pass `true`                                        // 564
      // for **isSorted** to use binary search.                                                              // 565
      _.indexOf = function (array, item, isSorted) {
        // 566
        if (array == null) return -1; // 567
        var i = 0,
            length = array.length; // 568
        if (isSorted) {
          // 569
          if (typeof isSorted == 'number') {
            // 570
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted; // 571
          } else {
            // 572
            i = _.sortedIndex(array, item); // 573
            return array[i] === item ? i : -1; // 574
          } // 575
        } // 576
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted); // 577
        for (; i < length; i++) if (array[i] === item) return i; // 578
        return -1; // 579
      }; // 580
      // 581
      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
      _.lastIndexOf = function (array, item, from) {
        // 583
        if (array == null) return -1; // 584
        var hasIndex = from != null; // 585
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          // 586
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item); // 587
        } // 588
        var i = hasIndex ? from : array.length; // 589
        while (i--) if (array[i] === item) return i; // 590
        return -1; // 591
      }; // 592
      // 593
      // Generate an integer Array containing an arithmetic progression. A port of                           // 594
      // the native Python `range()` function. See                                                           // 595
      // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
      _.range = function (start, stop, step) {
        // 597
        if (arguments.length <= 1) {
          // 598
          stop = start || 0; // 599
          start = 0; // 600
        } // 601
        step = arguments[2] || 1; // 602
        // 603
        var length = Math.max(Math.ceil((stop - start) / step), 0); // 604
        var idx = 0; // 605
        var range = new Array(length); // 606
        // 607
        while (idx < length) {
          // 608
          range[idx++] = start; // 609
          start += step; // 610
        } // 611
        // 612
        return range; // 613
      }; // 614
      // 615
      // Function (ahem) Functions                                                                           // 616
      // ------------------                                                                                  // 617
      // 618
      // Reusable constructor function for prototype setting.                                                // 619
      var ctor = function () {}; // 620
      // 621
      // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
      // available.                                                                                          // 624
      _.bind = function (func, context) {
        // 625
        var args, bound; // 626
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError(); // 628
        args = slice.call(arguments, 2); // 629
        return bound = function () {
          // 630
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments))); // 631
          ctor.prototype = func.prototype; // 632
          var self = new ctor(); // 633
          ctor.prototype = null; // 634
          var result = func.apply(self, args.concat(slice.call(arguments))); // 635
          if (Object(result) === result) return result; // 636
          return self; // 637
        }; // 638
      }; // 639
      // 640
      // Partially apply a function by creating a version that has had some of its                           // 641
      // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
      _.partial = function (func) {
        // 643
        var args = slice.call(arguments, 1); // 644
        return function () {
          // 645
          return func.apply(this, args.concat(slice.call(arguments))); // 646
        }; // 647
      }; // 648
      // 649
      // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
      // all callbacks defined on an object belong to it.                                                    // 651
      _.bindAll = function (obj) {
        // 652
        var funcs = slice.call(arguments, 1); // 653
        if (funcs.length === 0) throw new Error("bindAll must be passed function names"); // 654
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        }); // 655
        return obj; // 656
      }; // 657
      // 658
      // Memoize an expensive function by storing its results.                                               // 659
      _.memoize = function (func, hasher) {
        // 660
        var memo = {}; // 661
        hasher || (hasher = _.identity); // 662
        return function () {
          // 663
          var key = hasher.apply(this, arguments); // 664
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments); // 665
        }; // 666
      }; // 667
      // 668
      // Delays a function for the given number of milliseconds, and then calls                              // 669
      // it with the arguments supplied.                                                                     // 670
      _.delay = function (func, wait) {
        // 671
        var args = slice.call(arguments, 2); // 672
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait); // 673
      }; // 674
      // 675
      // Defers a function, scheduling it to run after the current call stack has                            // 676
      // cleared.                                                                                            // 677
      _.defer = function (func) {
        // 678
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1))); // 679
      }; // 680
      // 681
      // Returns a function, that, when invoked, will only be triggered at most once                         // 682
      // during a given window of time. Normally, the throttled function will run                            // 683
      // as much as it can, without ever going more than once per `wait` duration;                           // 684
      // but if you'd like to disable the execution on the leading edge, pass                                // 685
      // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
      _.throttle = function (func, wait, options) {
        // 687
        var context, args, result; // 688
        var timeout = null; // 689
        var previous = 0; // 690
        options || (options = {}); // 691
        var later = function () {
          // 692
          previous = options.leading === false ? 0 : new Date(); // 693
          timeout = null; // 694
          result = func.apply(context, args); // 695
        }; // 696
        return function () {
          // 697
          var now = new Date(); // 698
          if (!previous && options.leading === false) previous = now; // 699
          var remaining = wait - (now - previous); // 700
          context = this; // 701
          args = arguments; // 702
          if (remaining <= 0) {
            // 703
            clearTimeout(timeout); // 704
            timeout = null; // 705
            previous = now; // 706
            result = func.apply(context, args); // 707
          } else if (!timeout && options.trailing !== false) {
            // 708
            timeout = setTimeout(later, remaining); // 709
          } // 710
          return result; // 711
        }; // 712
      }; // 713
      // 714
      // Returns a function, that, as long as it continues to be invoked, will not                           // 715
      // be triggered. The function will be called after it stops being called for                           // 716
      // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
      // leading edge, instead of the trailing.                                                              // 718
      _.debounce = function (func, wait, immediate) {
        // 719
        var timeout, args, context, timestamp, result; // 720
        return function () {
          // 721
          context = this; // 722
          args = arguments; // 723
          timestamp = new Date(); // 724
          var later = function () {
            // 725
            var last = new Date() - timestamp; // 726
            if (last < wait) {
              // 727
              timeout = setTimeout(later, wait - last); // 728
            } else {
              // 729
              timeout = null; // 730
              if (!immediate) result = func.apply(context, args); // 731
            } // 732
          }; // 733
          var callNow = immediate && !timeout; // 734
          if (!timeout) {
            // 735
            timeout = setTimeout(later, wait); // 736
          } // 737
          if (callNow) result = func.apply(context, args); // 738
          return result; // 739
        }; // 740
      }; // 741
      // 742
      // Returns a function that will be executed at most one time, no matter how                            // 743
      // often you call it. Useful for lazy initialization.                                                  // 744
      _.once = function (func) {
        // 745
        var ran = false,
            memo; // 746
        return function () {
          // 747
          if (ran) return memo; // 748
          ran = true; // 749
          memo = func.apply(this, arguments); // 750
          func = null; // 751
          return memo; // 752
        }; // 753
      }; // 754
      // 755
      // Returns the first function passed as an argument to the second,                                     // 756
      // allowing you to adjust arguments, run code before and after, and                                    // 757
      // conditionally execute the original function.                                                        // 758
      _.wrap = function (func, wrapper) {
        // 759
        return function () {
          // 760
          var args = [func]; // 761
          push.apply(args, arguments); // 762
          return wrapper.apply(this, args); // 763
        }; // 764
      }; // 765
      // 766
      // Returns a function that is the composition of a list of functions, each                             // 767
      // consuming the return value of the function that follows.                                            // 768
      _.compose = function () {
        // 769
        var funcs = arguments; // 770
        return function () {
          // 771
          var args = arguments; // 772
          for (var i = funcs.length - 1; i >= 0; i--) {
            // 773
            args = [funcs[i].apply(this, args)]; // 774
          } // 775
          return args[0]; // 776
        }; // 777
      }; // 778
      // 779
      // Returns a function that will only be executed after being called N times.                           // 780
      _.after = function (times, func) {
        // 781
        return function () {
          // 782
          if (--times < 1) {
            // 783
            return func.apply(this, arguments); // 784
          } // 785
        }; // 786
      }; // 787
      // 788
      // Object Functions                                                                                    // 789
      // ----------------                                                                                    // 790
      // 791
      // Retrieve the names of an object's properties.                                                       // 792
      // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
      _.keys = nativeKeys || function (obj) {
        // 794
        if (obj !== Object(obj)) throw new TypeError('Invalid object'); // 795
        var keys = []; // 796
        for (var key in obj) if (_.has(obj, key)) keys.push(key); // 797
        return keys; // 798
      }; // 799
      // 800
      // Retrieve the values of an object's properties.                                                      // 801
      _.values = function (obj) {
        // 802
        var keys = _.keys(obj); // 803
        var length = keys.length; // 804
        var values = new Array(length); // 805
        for (var i = 0; i < length; i++) {
          // 806
          values[i] = obj[keys[i]]; // 807
        } // 808
        return values; // 809
      }; // 810
      // 811
      // Convert an object into a list of `[key, value]` pairs.                                              // 812
      _.pairs = function (obj) {
        // 813
        var keys = _.keys(obj); // 814
        var length = keys.length; // 815
        var pairs = new Array(length); // 816
        for (var i = 0; i < length; i++) {
          // 817
          pairs[i] = [keys[i], obj[keys[i]]]; // 818
        } // 819
        return pairs; // 820
      }; // 821
      // 822
      // Invert the keys and values of an object. The values must be serializable.                           // 823
      _.invert = function (obj) {
        // 824
        var result = {}; // 825
        var keys = _.keys(obj); // 826
        for (var i = 0, length = keys.length; i < length; i++) {
          // 827
          result[obj[keys[i]]] = keys[i]; // 828
        } // 829
        return result; // 830
      }; // 831
      // 832
      // Return a sorted list of the function names available on the object.                                 // 833
      // Aliased as `methods`                                                                                // 834
      _.functions = _.methods = function (obj) {
        // 835
        var names = []; // 836
        for (var key in obj) {
          // 837
          if (_.isFunction(obj[key])) names.push(key); // 838
        } // 839
        return names.sort(); // 840
      }; // 841
      // 842
      // Extend a given object with all the properties in passed-in object(s).                               // 843
      _.extend = function (obj) {
        // 844
        each(slice.call(arguments, 1), function (source) {
          // 845
          if (source) {
            // 846
            for (var prop in source) {
              // 847
              obj[prop] = source[prop]; // 848
            } // 849
          } // 850
        }); // 851
        return obj; // 852
      }; // 853
      // 854
      // Return a copy of the object only containing the whitelisted properties.                             // 855
      _.pick = function (obj) {
        // 856
        var copy = {}; // 857
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1)); // 858
        each(keys, function (key) {
          // 859
          if (key in obj) copy[key] = obj[key]; // 860
        }); // 861
        return copy; // 862
      }; // 863
      // 864
      // Return a copy of the object without the blacklisted properties.                                    // 865
      _.omit = function (obj) {
        // 866
        var copy = {}; // 867
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1)); // 868
        for (var key in obj) {
          // 869
          if (!_.contains(keys, key)) copy[key] = obj[key]; // 870
        } // 871
        return copy; // 872
      }; // 873
      // 874
      // Fill in a given object with default properties.                                                     // 875
      _.defaults = function (obj) {
        // 876
        each(slice.call(arguments, 1), function (source) {
          // 877
          if (source) {
            // 878
            for (var prop in source) {
              // 879
              if (obj[prop] === void 0) obj[prop] = source[prop]; // 880
            } // 881
          } // 882
        }); // 883
        return obj; // 884
      }; // 885
      // 886
      // Create a (shallow-cloned) duplicate of an object.                                                   // 887
      _.clone = function (obj) {
        // 888
        if (!_.isObject(obj)) return obj; // 889
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj); // 890
      }; // 891
      // 892
      // Invokes interceptor with the obj, and then returns obj.                                             // 893
      // The primary purpose of this method is to "tap into" a method chain, in                              // 894
      // order to perform operations on intermediate results within the chain.                               // 895
      _.tap = function (obj, interceptor) {
        // 896
        interceptor(obj); // 897
        return obj; // 898
      }; // 899
      // 900
      // Internal recursive comparison function for `isEqual`.                                               // 901
      var eq = function (a, b, aStack, bStack) {
        // 902
        // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
        if (a === b) return a !== 0 || 1 / a == 1 / b; // 905
        // A strict comparison is necessary because `null == undefined`.                                     // 906
        if (a == null || b == null) return a === b; // 907
        // Unwrap any wrapped objects.                                                                       // 908
        if (a instanceof _) a = a._wrapped; // 909
        if (b instanceof _) b = b._wrapped; // 910
        // Compare `[[Class]]` names.                                                                        // 911
        var className = toString.call(a); // 912
        if (className != toString.call(b)) return false; // 913
        switch (className) {// 914
          // Strings, numbers, dates, and booleans are compared by value.                                    // 915
          case '[object String]':
            // 916
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
            // equivalent to `new String("5")`.                                                              // 918
            return a == String(b); // 919
          case '[object Number]':
            // 920
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
            // other numeric values.                                                                         // 922
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b; // 923
          case '[object Date]': // 924
          case '[object Boolean]':
            // 925
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
            // millisecond representations. Note that invalid dates with millisecond representations         // 927
            // of `NaN` are not equivalent.                                                                  // 928
            return +a == +b; // 929
          // RegExps are compared by their source patterns and flags.                                        // 930
          case '[object RegExp]':
            // 931
            return a.source == b.source && // 932
            a.global == b.global && // 933
            a.multiline == b.multiline && // 934
            a.ignoreCase == b.ignoreCase; // 935
        } // 936
        if (typeof a != 'object' || typeof b != 'object') return false; // 937
        // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
        var length = aStack.length; // 940
        while (length--) {
          // 941
          // Linear search. Performance is inversely proportional to the number of                           // 942
          // unique nested structures.                                                                       // 943
          if (aStack[length] == a) return bStack[length] == b; // 944
        } // 945
        // Objects with different constructors are not equivalent, but `Object`s                             // 946
        // from different frames are.                                                                        // 947
        var aCtor = a.constructor,
            bCtor = b.constructor; // 948
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && // 949
        _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          // 950
          return false; // 951
        } // 952
        // Add the first object to the stack of traversed objects.                                           // 953
        aStack.push(a); // 954
        bStack.push(b); // 955
        var size = 0,
            result = true; // 956
        // Recursively compare objects and arrays.                                                           // 957
        if (className == '[object Array]') {
          // 958
          // Compare array lengths to determine if a deep comparison is necessary.                           // 959
          size = a.length; // 960
          result = size == b.length; // 961
          if (result) {
            // 962
            // Deep compare the contents, ignoring non-numeric properties.                                   // 963
            while (size--) {
              // 964
              if (!(result = eq(a[size], b[size], aStack, bStack))) break; // 965
            } // 966
          } // 967
        } else {
          // 968
          // Deep compare objects.                                                                           // 969
          for (var key in a) {
            // 970
            if (_.has(a, key)) {
              // 971
              // Count the expected number of properties.                                                    // 972
              size++; // 973
              // Deep compare each member.                                                                   // 974
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break; // 975
            } // 976
          } // 977
          // Ensure that both objects contain the same number of properties.                                 // 978
          if (result) {
            // 979
            for (key in b) {
              // 980
              if (_.has(b, key) && !size--) break; // 981
            } // 982
            result = !size; // 983
          } // 984
        } // 985
        // Remove the first object from the stack of traversed objects.                                      // 986
        aStack.pop(); // 987
        bStack.pop(); // 988
        return result; // 989
      }; // 990
      // 991
      // Perform a deep comparison to check if two objects are equal.                                        // 992
      _.isEqual = function (a, b) {
        // 993
        return eq(a, b, [], []); // 994
      }; // 995
      // 996
      // Is a given array, string, or object empty?                                                          // 997
      // An "empty" object has no enumerable own-properties.                                                 // 998
      _.isEmpty = function (obj) {
        // 999
        if (obj == null) return true; // 1000
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0; // 1001
        for (var key in obj) if (_.has(obj, key)) return false; // 1002
        return true; // 1003
      }; // 1004
      // 1005
      // Is a given value a DOM element?                                                                     // 1006
      _.isElement = function (obj) {
        // 1007
        return !!(obj && obj.nodeType === 1); // 1008
      }; // 1009
      // 1010
      // Is a given value an array?                                                                          // 1011
      // Delegates to ECMA5's native Array.isArray                                                           // 1012
      _.isArray = nativeIsArray || function (obj) {
        // 1013
        return toString.call(obj) == '[object Array]'; // 1014
      }; // 1015
      // 1016
      // Is a given variable an object?                                                                      // 1017
      _.isObject = function (obj) {
        // 1018
        return obj === Object(obj); // 1019
      }; // 1020
      // 1021
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
        // 1023
        _['is' + name] = function (obj) {
          // 1024
          return toString.call(obj) == '[object ' + name + ']'; // 1025
        }; // 1026
      }); // 1027
      // 1028
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
      // there isn't any inspectable "Arguments" type.                                                       // 1030
      if (!_.isArguments(arguments)) {
        // 1031
        _.isArguments = function (obj) {
          // 1032
          return !!(obj && _.has(obj, 'callee')); // 1033
        }; // 1034
      } // 1035
      // 1036
      // Optimize `isFunction` if appropriate.                                                               // 1037
      if (typeof /./ !== 'function') {
        // 1038
        _.isFunction = function (obj) {
          // 1039
          return typeof obj === 'function'; // 1040
        }; // 1041
      } // 1042
      // 1043
      // Is a given object a finite number?                                                                  // 1044
      _.isFinite = function (obj) {
        // 1045
        return isFinite(obj) && !isNaN(parseFloat(obj)); // 1046
      }; // 1047
      // 1048
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
      _.isNaN = function (obj) {
        // 1050
        return _.isNumber(obj) && obj != +obj; // 1051
      }; // 1052
      // 1053
      // Is a given value a boolean?                                                                         // 1054
      _.isBoolean = function (obj) {
        // 1055
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]'; // 1056
      }; // 1057
      // 1058
      // Is a given value equal to null?                                                                     // 1059
      _.isNull = function (obj) {
        // 1060
        return obj === null; // 1061
      }; // 1062
      // 1063
      // Is a given variable undefined?                                                                      // 1064
      _.isUndefined = function (obj) {
        // 1065
        return obj === void 0; // 1066
      }; // 1067
      // 1068
      // Shortcut function for checking if an object has a given property directly                           // 1069
      // on itself (in other words, not on a prototype).                                                     // 1070
      _.has = function (obj, key) {
        // 1071
        return hasOwnProperty.call(obj, key); // 1072
      }; // 1073
      // 1074
      // Utility Functions                                                                                   // 1075
      // -----------------                                                                                   // 1076
      // 1077
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
      // previous owner. Returns a reference to the Underscore object.                                       // 1079
      _.noConflict = function () {
        // 1080
        root._ = previousUnderscore; // 1081
        return this; // 1082
      }; // 1083
      // 1084
      // Keep the identity function around for default iterators.                                            // 1085
      _.identity = function (value) {
        // 1086
        return value; // 1087
      }; // 1088
      // 1089
      // Run a function **n** times.                                                                         // 1090
      _.times = function (n, iterator, context) {
        // 1091
        var accum = Array(Math.max(0, n)); // 1092
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i); // 1093
        return accum; // 1094
      }; // 1095
      // 1096
      // Return a random integer between min and max (inclusive).                                            // 1097
      _.random = function (min, max) {
        // 1098
        if (max == null) {
          // 1099
          max = min; // 1100
          min = 0; // 1101
        } // 1102
        return min + Math.floor(Math.random() * (max - min + 1)); // 1103
      }; // 1104
      // 1105
      // List of HTML entities for escaping.                                                                 // 1106
      var entityMap = { // 1107
        escape: { // 1108
          '&': '&amp;', // 1109
          '<': '&lt;', // 1110
          '>': '&gt;', // 1111
          '"': '&quot;', // 1112
          "'": '&#x27;' // 1113
          // 1114
        } }; // 1115
      entityMap.unescape = _.invert(entityMap.escape); // 1116
      // 1117
      // Regexes containing the keys and values listed immediately above.                                    // 1118
      var entityRegexes = { // 1119
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'), // 1120
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g') // 1121
      }; // 1122
      // 1123
      // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
      _.each(['escape', 'unescape'], function (method) {
        // 1125
        _[method] = function (string) {
          // 1126
          if (string == null) return ''; // 1127
          return ('' + string).replace(entityRegexes[method], function (match) {
            // 1128
            return entityMap[method][match]; // 1129
          }); // 1130
        }; // 1131
      }); // 1132
      // 1133
      // If the value of the named `property` is a function then invoke it with the                          // 1134
      // `object` as context; otherwise, return it.                                                          // 1135
      _.result = function (object, property) {
        // 1136
        if (object == null) return void 0; // 1137
        var value = object[property]; // 1138
        return _.isFunction(value) ? value.call(object) : value; // 1139
      }; // 1140
      // 1141
      // Add your own custom functions to the Underscore object.                                             // 1142
      _.mixin = function (obj) {
        // 1143
        each(_.functions(obj), function (name) {
          // 1144
          var func = _[name] = obj[name]; // 1145
          _.prototype[name] = function () {
            // 1146
            var args = [this._wrapped]; // 1147
            push.apply(args, arguments); // 1148
            return result.call(this, func.apply(_, args)); // 1149
          }; // 1150
        }); // 1151
      }; // 1152
      // 1153
      // Generate a unique integer id (unique within the entire client session).                             // 1154
      // Useful for temporary DOM ids.                                                                       // 1155
      var idCounter = 0; // 1156
      _.uniqueId = function (prefix) {
        // 1157
        var id = ++idCounter + ''; // 1158
        return prefix ? prefix + id : id; // 1159
      }; // 1160
      // 1161
      // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
      // following template settings to use alternative delimiters.                                          // 1163
      _.templateSettings = { // 1164
        evaluate: /<%([\s\S]+?)%>/g, // 1165
        interpolate: /<%=([\s\S]+?)%>/g, // 1166
        escape: /<%-([\s\S]+?)%>/g // 1167
      }; // 1168
      // 1169
      // When customizing `templateSettings`, if you don't want to define an                                 // 1170
      // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
      // guaranteed not to match.                                                                            // 1172
      var noMatch = /(.)^/; // 1173
      // 1174
      // Certain characters need to be escaped so that they can be put into a                                // 1175
      // string literal.                                                                                     // 1176
      var escapes = { // 1177
        "'": "'", // 1178
        '\\': '\\', // 1179
        '\r': 'r', // 1180
        '\n': 'n', // 1181
        '\t': 't', // 1182
        '\u2028': 'u2028', // 1183
        '\u2029': 'u2029' // 1184
      }; // 1185
      // 1186
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g; // 1187
      // 1188
      // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
      // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
      // and correctly escapes quotes within interpolated code.                                              // 1191
      _.template = function (text, data, settings) {
        // 1192
        var render; // 1193
        settings = _.defaults({}, settings, _.templateSettings); // 1194
        // 1195
        // Combine delimiters into one regular expression via alternation.                                   // 1196
        var matcher = new RegExp([// 1197
        (settings.escape || noMatch).source, // 1198
        (settings.interpolate || noMatch).source, // 1199
        (settings.evaluate || noMatch).source // 1200
        ].join('|') + '|$', 'g'); // 1201
        // 1202
        // Compile the template source, escaping string literals appropriately.                              // 1203
        var index = 0; // 1204
        var source = "__p+='"; // 1205
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          // 1206
          source += text.slice(index, offset) // 1207
          .replace(escaper, function (match) {
            return '\\' + escapes[match];
          }); // 1208
          // 1209
          if (escape) {
            // 1210
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"; // 1211
          } // 1212
          if (interpolate) {
            // 1213
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"; // 1214
          } // 1215
          if (evaluate) {
            // 1216
            source += "';\n" + evaluate + "\n__p+='"; // 1217
          } // 1218
          index = offset + match.length; // 1219
          return match; // 1220
        }); // 1221
        source += "';\n"; // 1222
        // 1223
        // If a variable is not specified, place data values in local scope.                                 // 1224
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n'; // 1225
        // 1226
        source = "var __t,__p='',__j=Array.prototype.join," + // 1227
        "print=function(){__p+=__j.call(arguments,'');};\n" + // 1228
        source + "return __p;\n"; // 1229
        // 1230
        try {
          // 1231
          render = new Function(settings.variable || 'obj', '_', source); // 1232
        } catch (e) {
          // 1233
          e.source = source; // 1234
          throw e; // 1235
        } // 1236
        // 1237
        if (data) return render(data, _); // 1238
        var template = function (data) {
          // 1239
          return render.call(this, data, _); // 1240
        }; // 1241
        // 1242
        // Provide the compiled function source as a convenience for precompilation.                         // 1243
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}'; // 1244
        // 1245
        return template; // 1246
      }; // 1247
      // 1248
      // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
      _.chain = function (obj) {
        // 1250
        return _(obj).chain(); // 1251
      }; // 1252
      // 1253
      // OOP                                                                                                 // 1254
      // ---------------                                                                                     // 1255
      // If Underscore is called as a function, it returns a wrapped object that                             // 1256
      // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
      // underscore functions. Wrapped objects may be chained.                                               // 1258
      // 1259
      // Helper function to continue chaining intermediate results.                                          // 1260
      var result = function (obj) {
        // 1261
        return this._chain ? _(obj).chain() : obj; // 1262
      }; // 1263
      // 1264
      // Add all of the Underscore functions to the wrapper object.                                          // 1265
      _.mixin(_); // 1266
      // 1267
      // Add all mutator Array functions to the wrapper.                                                     // 1268
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
        // 1269
        var method = ArrayProto[name]; // 1270
        _.prototype[name] = function () {
          // 1271
          var obj = this._wrapped; // 1272
          method.apply(obj, arguments); // 1273
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0]; // 1274
          return result.call(this, obj); // 1275
        }; // 1276
      }); // 1277
      // 1278
      // Add all accessor Array functions to the wrapper.                                                    // 1279
      each(['concat', 'join', 'slice'], function (name) {
        // 1280
        var method = ArrayProto[name]; // 1281
        _.prototype[name] = function () {
          // 1282
          return result.call(this, method.apply(this._wrapped, arguments)); // 1283
        }; // 1284
      }); // 1285
      // 1286
      _.extend(_.prototype, { // 1287
        // 1288
        // Start chaining a wrapped Underscore object.                                                       // 1289
        chain: function () {
          // 1290
          this._chain = true; // 1291
          return this; // 1292
        }, // 1293
        // 1294
        // Extracts the result from a wrapped and chained object.                                            // 1295
        value: function () {
          // 1296
          return this._wrapped; // 1297
        } // 1298
        // 1299
      }); // 1300
      // 1301
    }).call(this); // 1302
    // 1303
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
    // into the package-scope variable `_`, which will get exported.                                         // 2
    _ = _exports._; // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.underscore = {}, {
    _: _
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var _ = Package.underscore._;

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/global.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    global = this; // 1
    // 2
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/client_environment.js                                                                  //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    meteorEnv = __meteor_runtime_config__.meteorEnv; // 1
    // 2
    /**                                                                                                       // 3
     * @summary The Meteor namespace                                                                          // 4
     * @namespace Meteor                                                                                      // 5
     */ // 6
    Meteor = { // 7
      /**                                                                                                     // 8
       * @summary Boolean variable.  True if running in production environment.                               // 9
       * @locus Anywhere                                                                                      // 10
       * @static                                                                                              // 11
       * @type {Boolean}                                                                                      // 12
       */ // 13
      isProduction: meteorEnv.NODE_ENV === "production", // 14
      // 15
      /**                                                                                                     // 16
       * @summary Boolean variable.  True if running in development environment.                              // 17
       * @locus Anywhere                                                                                      // 18
       * @static                                                                                              // 19
       * @type {Boolean}                                                                                      // 20
       */ // 21
      isDevelopment: meteorEnv.NODE_ENV !== "production", // 22
      // 23
      /**                                                                                                     // 24
       * @summary Boolean variable.  True if running in client environment.                                   // 25
       * @locus Anywhere                                                                                      // 26
       * @static                                                                                              // 27
       * @type {Boolean}                                                                                      // 28
       */ // 29
      isClient: true, // 30
      // 31
      /**                                                                                                     // 32
       * @summary Boolean variable.  True if running in server environment.                                   // 33
       * @locus Anywhere                                                                                      // 34
       * @static                                                                                              // 35
       * @type {Boolean}                                                                                      // 36
       */ // 37
      isServer: false, // 38
      isCordova: false // 39
    }; // 40
    // 41
    if (typeof __meteor_runtime_config__ === 'object' && // 42
    __meteor_runtime_config__.PUBLIC_SETTINGS) {
      // 43
      /**                                                                                                     // 44
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere                                                                                      // 46
       * @type {Object}                                                                                       // 47
       */ // 48
      Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS }; // 49
    } // 50
    // 51
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/helpers.js                                                                             //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) // 1
      var Future = Npm.require('fibers/future'); // 2
    // 3
    if (typeof __meteor_runtime_config__ === 'object' && // 4
    __meteor_runtime_config__.meteorRelease) {
      // 5
      /**                                                                                                     // 6
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere                                                                                      // 8
       * @type {String}                                                                                       // 9
       */ // 10
      Meteor.release = __meteor_runtime_config__.meteorRelease; // 11
    } // 12
    // 13
    // XXX find a better home for these? Ideally they would be _.get,                                         // 14
    // _.ensure, _.delete..                                                                                   // 15
    // 16
    _.extend(Meteor, { // 17
      // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18
      // a[b][c] doesn't exist.                                                                               // 19
      //                                                                                                      // 20
      _get: function (obj /*, arguments */) {
        // 21
        for (var i = 1; i < arguments.length; i++) {
          // 22
          if (!(arguments[i] in obj)) // 23
            return undefined; // 24
          obj = obj[arguments[i]]; // 25
        } // 26
        return obj; // 27
      }, // 28
      // 29
      // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30
      // it is created and set to {}. Either way, it is returned.                                             // 31
      //                                                                                                      // 32
      _ensure: function (obj /*, arguments */) {
        // 33
        for (var i = 1; i < arguments.length; i++) {
          // 34
          var key = arguments[i]; // 35
          if (!(key in obj)) // 36
            obj[key] = {}; // 37
          obj = obj[key]; // 38
        } // 39
        // 40
        return obj; // 41
      }, // 42
      // 43
      // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44
      // isn't empty, then a[b] unless it isn't empty.                                                        // 45
      //                                                                                                      // 46
      _delete: function (obj /*, arguments */) {
        // 47
        var stack = [obj]; // 48
        var leaf = true; // 49
        for (var i = 1; i < arguments.length - 1; i++) {
          // 50
          var key = arguments[i]; // 51
          if (!(key in obj)) {
            // 52
            leaf = false; // 53
            break; // 54
          } // 55
          obj = obj[key]; // 56
          if (typeof obj !== "object") // 57
            break; // 58
          stack.push(obj); // 59
        } // 60
        // 61
        for (var i = stack.length - 1; i >= 0; i--) {
          // 62
          var key = arguments[i + 1]; // 63
          // 64
          if (leaf) // 65
            leaf = false; // 66
          else // 67
            for (var other in stack[i][key]) // 68
            return; // not empty -- we're done                                                              // 69
          // 70
          delete stack[i][key]; // 71
        } // 72
      }, // 73
      // 74
      // wrapAsync can wrap any function that takes some number of arguments that                             // 75
      // can't be undefined, followed by some optional arguments, where the callback                          // 76
      // is the last optional argument.                                                                       // 77
      // e.g. fs.readFile(pathname, [callback]),                                                              // 78
      // fs.open(pathname, flags, [mode], [callback])                                                         // 79
      // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80
      // functions where the callback is the only argument of type Function.                                  // 81
      // 82
      /**                                                                                                     // 83
       * @memberOf Meteor                                                                                     // 84
       * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
       * @locus Anywhere                                                                                      // 86
       * @param {Function} func A function that takes a callback as its final parameter                       // 87
       * @param {Object} [context] Optional `this` object against which the original function will be invoked
       */ // 89
      wrapAsync: function (fn, context) {
        // 90
        return function () /* arguments */{
          // 91
          var self = context || this; // 92
          var newArgs = _.toArray(arguments); // 93
          var callback; // 94
          // 95
          for (var i = newArgs.length - 1; i >= 0; --i) {
            // 96
            var arg = newArgs[i]; // 97
            var type = typeof arg; // 98
            if (type !== "undefined") {
              // 99
              if (type === "function") {
                // 100
                callback = arg; // 101
              } // 102
              break; // 103
            } // 104
          } // 105
          // 106
          if (!callback) {
            // 107
            if (Meteor.isClient) {
              // 108
              callback = logErr; // 109
            } else {
              // 110
              var fut = new Future(); // 111
              callback = fut.resolver(); // 112
            } // 113
            ++i; // Insert the callback just after arg.                                                       // 114
          } // 115
          // 116
          newArgs[i] = Meteor.bindEnvironment(callback); // 117
          var result = fn.apply(self, newArgs); // 118
          return fut ? fut.wait() : result; // 119
        }; // 120
      }, // 121
      // 122
      // Sets child's prototype to a new object whose prototype is parent's                                   // 123
      // prototype. Used as:                                                                                  // 124
      //   Meteor._inherits(ClassB, ClassA).                                                                  // 125
      //   _.extend(ClassB.prototype, { ... })                                                                // 126
      // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127
      _inherits: function (Child, Parent) {
        // 128
        // copy Parent static properties                                                                      // 129
        for (var key in Parent) {
          // 130
          // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131
          // properties                                                                                       // 132
          if (_.has(Parent, key)) // 133
            Child[key] = Parent[key]; // 134
        } // 135
        // 136
        // a middle member of prototype chain: takes the prototype from the Parent                            // 137
        var Middle = function () {
          // 138
          this.constructor = Child; // 139
        }; // 140
        Middle.prototype = Parent.prototype; // 141
        Child.prototype = new Middle(); // 142
        Child.__super__ = Parent.prototype; // 143
        return Child; // 144
      } // 145
    }); // 146
    // 147
    var warnedAboutWrapAsync = false; // 148
    // 149
    /**                                                                                                       // 150
     * @deprecated in 0.9.3                                                                                   // 151
     */ // 152
    Meteor._wrapAsync = function (fn, context) {
      // 153
      if (!warnedAboutWrapAsync) {
        // 154
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync"); // 155
        warnedAboutWrapAsync = true; // 156
      } // 157
      return Meteor.wrapAsync.apply(Meteor, arguments); // 158
    }; // 159
    // 160
    function logErr(err) {
      // 161
      if (err) {
        // 162
        return Meteor._debug( // 163
        "Exception in callback of async function", // 164
        err.stack ? err.stack : err // 165
        ); // 166
      } // 167
    } // 168
    // 169
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/setimmediate.js                                                                        //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Chooses one of three setImmediate implementations:                                                     // 1
    //                                                                                                        // 2
    // * Native setImmediate (IE 10, Node 0.9+)                                                               // 3
    //                                                                                                        // 4
    // * postMessage (many browsers)                                                                          // 5
    //                                                                                                        // 6
    // * setTimeout  (fallback)                                                                               // 7
    //                                                                                                        // 8
    // The postMessage implementation is based on                                                             // 9
    // https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10
    //                                                                                                        // 11
    // Don't use `nextTick` for Node since it runs its callbacks before                                       // 12
    // I/O, which is stricter than we're looking for.                                                         // 13
    //                                                                                                        // 14
    // Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15
    // Since we're not trying to be a polyfill, we have some                                                  // 16
    // simplifications:                                                                                       // 17
    //                                                                                                        // 18
    // If one invocation of a setImmediate callback pauses itself by a                                        // 19
    // call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20
    // implementation ensured that no setImmedate callback would run until                                    // 21
    // the first invocation completed.  While correct per the spec, what it                                   // 22
    // would mean for us in practice is that any reactive updates relying                                     // 23
    // on Meteor.defer would be hung in the main window until the modal                                       // 24
    // dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25
    // function is called in a later event loop.                                                              // 26
    //                                                                                                        // 27
    // We don't need to support using a string to be eval'ed for the                                          // 28
    // callback, arguments to the function, or clearImmediate.                                                // 29
    // 30
    "use strict"; // 31
    // 32

    var global = this; // 33
    // 34
    // 35
    // IE 10, Node >= 9.1                                                                                     // 36
    // 37
    function useSetImmediate() {
      // 38
      if (!global.setImmediate) // 39
        return null; // 40
      else {
          // 41
          var setImmediate = function (fn) {
            // 42
            global.setImmediate(fn); // 43
          }; // 44
          setImmediate.implementation = 'setImmediate'; // 45
          return setImmediate; // 46
        } // 47
    } // 48
    // 49
    // 50
    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51
    // 52
    function usePostMessage() {
      // 53
      // The test against `importScripts` prevents this implementation                                        // 54
      // from being installed inside a web worker, where                                                      // 55
      // `global.postMessage` means something completely different and                                        // 56
      // can't be used for this purpose.                                                                      // 57
      // 58
      if (!global.postMessage || global.importScripts) {
        // 59
        return null; // 60
      } // 61
      // 62
      // Avoid synchronous post message implementations.                                                      // 63
      // 64
      var postMessageIsAsynchronous = true; // 65
      var oldOnMessage = global.onmessage; // 66
      global.onmessage = function () {
        // 67
        postMessageIsAsynchronous = false; // 68
      }; // 69
      global.postMessage("", "*"); // 70
      global.onmessage = oldOnMessage; // 71
      // 72
      if (!postMessageIsAsynchronous) // 73
        return null; // 74
      // 75
      var funcIndex = 0; // 76
      var funcs = {}; // 77
      // 78
      // Installs an event handler on `global` for the `message` event: see                                   // 79
      // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81
      // 82
      // XXX use Random.id() here?                                                                            // 83
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.'; // 84
      // 85
      function isStringAndStartsWith(string, putativeStart) {
        // 86
        return typeof string === "string" && // 87
        string.substring(0, putativeStart.length) === putativeStart; // 88
      } // 89
      // 90
      function onGlobalMessage(event) {
        // 91
        // This will catch all incoming messages (even from other                                             // 92
        // windows!), so we need to try reasonably hard to avoid letting                                      // 93
        // anyone else trick us into firing off. We test the origin is                                        // 94
        // still this window, and that a (randomly generated)                                                 // 95
        // unpredictable identifying prefix is present.                                                       // 96
        if (event.source === global && // 97
        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          // 98
          var index = event.data.substring(MESSAGE_PREFIX.length); // 99
          try {
            // 100
            if (funcs[index]) // 101
              funcs[index](); // 102
          } // 103
          finally {
            // 104
            delete funcs[index]; // 105
          } // 106
        } // 107
      } // 108
      // 109
      if (global.addEventListener) {
        // 110
        global.addEventListener("message", onGlobalMessage, false); // 111
      } else {
        // 112
        global.attachEvent("onmessage", onGlobalMessage); // 113
      } // 114
      // 115
      var setImmediate = function (fn) {
        // 116
        // Make `global` post a message to itself with the handle and                                         // 117
        // identifying prefix, thus asynchronously invoking our                                               // 118
        // onGlobalMessage listener above.                                                                    // 119
        ++funcIndex; // 120
        funcs[funcIndex] = fn; // 121
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*"); // 122
      }; // 123
      setImmediate.implementation = 'postMessage'; // 124
      return setImmediate; // 125
    } // 126
    // 127
    // 128
    function useTimeout() {
      // 129
      var setImmediate = function (fn) {
        // 130
        global.setTimeout(fn, 0); // 131
      }; // 132
      setImmediate.implementation = 'setTimeout'; // 133
      return setImmediate; // 134
    } // 135
    // 136
    // 137
    Meteor._setImmediate = // 138
    useSetImmediate() || // 139
    usePostMessage() || // 140
    useTimeout(); // 141
    // 142
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/timers.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var withoutInvocation = function (f) {
      // 1
      if (Package.ddp) {
        // 2
        var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation; // 3
        if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation) // 4
          throw new Error("Can't set timers inside simulations"); // 5
        return function () {
          _CurrentInvocation.withValue(null, f);
        }; // 6
      } // 7
      else // 8
        return f; // 9
    }; // 10
    // 11
    var bindAndCatch = function (context, f) {
      // 12
      return Meteor.bindEnvironment(withoutInvocation(f), context); // 13
    }; // 14
    // 15
    _.extend(Meteor, { // 16
      // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17
      // inside a server method are not part of the method invocation and                                     // 18
      // should clear out the CurrentInvocation environment variable.                                         // 19
      // 20
      /**                                                                                                     // 21
       * @memberOf Meteor                                                                                     // 22
       * @summary Call a function in the future after waiting for a specified delay.                          // 23
       * @locus Anywhere                                                                                      // 24
       * @param {Function} func The function to run                                                           // 25
       * @param {Number} delay Number of milliseconds to wait before calling function                         // 26
       */ // 27
      setTimeout: function (f, duration) {
        // 28
        return setTimeout(bindAndCatch("setTimeout callback", f), duration); // 29
      }, // 30
      // 31
      /**                                                                                                     // 32
       * @memberOf Meteor                                                                                     // 33
       * @summary Call a function repeatedly, with a time delay between calls.                                // 34
       * @locus Anywhere                                                                                      // 35
       * @param {Function} func The function to run                                                           // 36
       * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37
       */ // 38
      setInterval: function (f, duration) {
        // 39
        return setInterval(bindAndCatch("setInterval callback", f), duration); // 40
      }, // 41
      // 42
      /**                                                                                                     // 43
       * @memberOf Meteor                                                                                     // 44
       * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45
       * @locus Anywhere                                                                                      // 46
       * @param {Object} id The handle returned by `Meteor.setInterval`                                       // 47
       */ // 48
      clearInterval: function (x) {
        // 49
        return clearInterval(x); // 50
      }, // 51
      // 52
      /**                                                                                                     // 53
       * @memberOf Meteor                                                                                     // 54
       * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55
       * @locus Anywhere                                                                                      // 56
       * @param {Object} id The handle returned by `Meteor.setTimeout`                                        // 57
       */ // 58
      clearTimeout: function (x) {
        // 59
        return clearTimeout(x); // 60
      }, // 61
      // 62
      // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63
      // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64
      //    callSomethingThatDefersSomeWork();                                                                // 65
      //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66
      // 67
      /**                                                                                                     // 68
       * @memberOf Meteor                                                                                     // 69
       * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
       * @locus Anywhere                                                                                      // 71
       * @param {Function} func The function to run                                                           // 72
       */ // 73
      defer: function (f) {
        // 74
        Meteor._setImmediate(bindAndCatch("defer callback", f)); // 75
      } // 76
    }); // 77
    // 78
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/errors.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most                                  // 1
    // environments. constructor can set fields on `this` (and should probably set                            // 2
    // `message`, which is what gets displayed at the top of a stack trace).                                  // 3
    //                                                                                                        // 4
    Meteor.makeErrorType = function (name, constructor) {
      // 5
      var errorClass = function () /*arguments*/{
        // 6
        // Ensure we get a proper stack trace in most Javascript environments                                 // 7
        if (Error.captureStackTrace) {
          // 8
          // V8 environments (Chrome and Node.js)                                                             // 9
          Error.captureStackTrace(this, errorClass); // 10
        } else {
          // 11
          // Borrow the .stack property of a native Error object.                                             // 12
          this.stack = new Error().stack; // 13
        } // 14
        // Safari magically works.                                                                            // 15
        // 16
        constructor.apply(this, arguments); // 17
        // 18
        this.errorType = name; // 19
      }; // 20
      // 21
      Meteor._inherits(errorClass, Error); // 22
      // 23
      return errorClass; // 24
    }; // 25
    // 26
    // This should probably be in the livedata package, but we don't want                                     // 27
    // to require you to use the livedata package to get it. Eventually we                                    // 28
    // should probably rename it to DDP.Error and put it back in the                                          // 29
    // 'livedata' package (which we should rename to 'ddp' also.)                                             // 30
    //                                                                                                        // 31
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 32
    // containing 'error' and optionally 'reason' and 'details'.                                              // 33
    // The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 34
    // EJSON.addType here because the type is determined by location in the                                   // 35
    // protocol, not text on the wire.)                                                                       // 36
    // 37
    /**                                                                                                       // 38
     * @summary This class represents a symbolic error thrown by a method.                                    // 39
     * @locus Anywhere                                                                                        // 40
     * @class                                                                                                 // 41
     * @param {String} error A string code uniquely identifying this kind of error.                           // 42
     * This string should be used by callers of the method to determine the                                   // 43
     * appropriate action to take, instead of attempting to parse the reason                                  // 44
     * or details fields. For example:                                                                        // 45
     *                                                                                                        // 46
     * ```                                                                                                    // 47
     * // on the server, pick a code unique to this error                                                     // 48
     * // the reason field should be a useful debug message                                                   // 49
     * throw new Meteor.Error("logged-out",                                                                   // 50
     *   "The user must be logged in to post a comment.");                                                    // 51
     *                                                                                                        // 52
     * // on the client                                                                                       // 53
     * Meteor.call("methodName", function (error) {                                                           // 54
     *   // identify the error                                                                                // 55
     *   if (error && error.error === "logged-out") {                                                         // 56
     *     // show a nice error message                                                                       // 57
     *     Session.set("errorMessage", "Please log in to post a comment.");                                   // 58
     *   }                                                                                                    // 59
     * });                                                                                                    // 60
     * ```                                                                                                    // 61
     *                                                                                                        // 62
     * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 63
     * errors with a number in this field.                                                                    // 64
     *                                                                                                        // 65
     * @param {String} [reason] Optional.  A short human-readable summary of the                              // 66
     * error, like 'Not Found'.                                                                               // 67
     * @param {String} [details] Optional.  Additional information about the error,                           // 68
     * like a textual stack trace.                                                                            // 69
     */ // 70
    Meteor.Error = Meteor.makeErrorType( // 71
    "Meteor.Error", // 72
    function (error, reason, details) {
      // 73
      var self = this; // 74
      // 75
      // String code uniquely identifying this kind of error.                                               // 76
      self.error = error; // 77
      // 78
      // Optional: A short human-readable summary of the error. Not                                         // 79
      // intended to be shown to end users, just developers. ("Not Found",                                  // 80
      // "Internal Server Error")                                                                           // 81
      self.reason = reason; // 82
      // 83
      // Optional: Additional information about the error, say for                                          // 84
      // debugging. It might be a (textual) stack trace if the server is                                    // 85
      // willing to provide one. The corresponding thing in HTTP would be                                   // 86
      // the body of a 404 or 500 response. (The difference is that we                                      // 87
      // never expect this to be shown to end users, only developers, so                                    // 88
      // it doesn't need to be pretty.)                                                                     // 89
      self.details = details; // 90
      // 91
      // This is what gets displayed at the top of a stack trace. Current                                   // 92
      // format is "[404]" (if no reason is set) or "File not found [404]"                                  // 93
      if (self.reason) // 94
        self.message = self.reason + ' [' + self.error + ']'; // 95
      else // 96
        self.message = '[' + self.error + ']'; // 97
    }); // 98
    // 99
    // Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 100
    // properly EJSON-clone it. This is especially important because if a                                     // 101
    // Meteor.Error is thrown through a Future, the error, reason, and details                                // 102
    // properties become non-enumerable so a standard Object clone won't preserve                             // 103
    // them and they will be lost from DDP.                                                                   // 104
    Meteor.Error.prototype.clone = function () {
      // 105
      var self = this; // 106
      return new Meteor.Error(self.error, self.reason, self.details); // 107
    }; // 108
    // 109
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/fiber_stubs_client.js                                                                  //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1
    // to use a queue too, and also to call noYieldsAllowed.                                                  // 2
    // 3
    // The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4
    //                                                                                                        // 5
    Meteor._noYieldsAllowed = function (f) {
      // 6
      return f(); // 7
    }; // 8
    // 9
    // An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10
    // runs all the tasks when you call runTask or flush, synchronously.                                      // 11
    //                                                                                                        // 12
    Meteor._SynchronousQueue = function () {
      // 13
      var self = this; // 14
      self._tasks = []; // 15
      self._running = false; // 16
      self._runTimeout = null; // 17
    }; // 18
    // 19
    _.extend(Meteor._SynchronousQueue.prototype, { // 20
      runTask: function (task) {
        // 21
        var self = this; // 22
        if (!self.safeToRunTask()) // 23
          throw new Error("Could not synchronously run a task from a running task"); // 24
        self._tasks.push(task); // 25
        var tasks = self._tasks; // 26
        self._tasks = []; // 27
        self._running = true; // 28
        // 29
        if (self._runTimeout) {
          // 30
          // Since we're going to drain the queue, we can forget about the timeout                            // 31
          // which tries to run it.  (But if one of our tasks queues something else,                          // 32
          // the timeout will be correctly re-created.)                                                       // 33
          clearTimeout(self._runTimeout); // 34
          self._runTimeout = null; // 35
        } // 36
        // 37
        try {
          // 38
          while (!_.isEmpty(tasks)) {
            // 39
            var t = tasks.shift(); // 40
            try {
              // 41
              t(); // 42
            } catch (e) {
              // 43
              if (_.isEmpty(tasks)) {
                // 44
                // this was the last task, that is, the one we're calling runTask                             // 45
                // for.                                                                                       // 46
                throw e; // 47
              } else {
                // 48
                Meteor._debug("Exception in queued task: " + (e.stack || e)); // 49
              } // 50
            } // 51
          } // 52
        } finally {
          // 53
          self._running = false; // 54
        } // 55
      }, // 56
      // 57
      queueTask: function (task) {
        // 58
        var self = this; // 59
        self._tasks.push(task); // 60
        // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61
        // in stubs for now.                                                                                  // 62
        if (!self._runTimeout) {
          // 63
          self._runTimeout = setTimeout(_.bind(self.flush, self), 0); // 64
        } // 65
      }, // 66
      // 67
      flush: function () {
        // 68
        var self = this; // 69
        self.runTask(function () {}); // 70
      }, // 71
      // 72
      drain: function () {
        // 73
        var self = this; // 74
        if (!self.safeToRunTask()) // 75
          return; // 76
        while (!_.isEmpty(self._tasks)) {
          // 77
          self.flush(); // 78
        } // 79
      }, // 80
      // 81
      safeToRunTask: function () {
        // 82
        var self = this; // 83
        return !self._running; // 84
      } // 85
    }); // 86
    // 87
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/startup_client.js                                                                      //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = []; // 1
    var isLoadingCompleted = false; // 2
    var isReady = false; // 3
    // 4
    // Keeps track of how many events to wait for in addition to loading completing,                          // 5
    // before we're considered ready.                                                                         // 6
    var readyHoldsCount = 0; // 7
    // 8
    var holdReady = function () {
      // 9
      readyHoldsCount++; // 10
    }; // 11
    // 12
    var releaseReadyHold = function () {
      // 13
      readyHoldsCount--; // 14
      maybeReady(); // 15
    }; // 16
    // 17
    var maybeReady = function () {
      // 18
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) // 19
        return; // 20
      // 21
      isReady = true; // 22
      // 23
      // Run startup callbacks                                                                                // 24
      while (callbackQueue.length) // 25
      callbackQueue.shift()(); // 26
      // 27
      if (Meteor.isCordova) {
        // 28
        // Notify the WebAppLocalServer plugin that startup was completed successfully,                       // 29
        // so we can roll back faulty versions if this doesn't happen                                         // 30
        WebAppLocalServer.startupDidComplete(); // 31
      } // 32
    }; // 33
    // 34
    var loadingCompleted = function () {
      // 35
      if (!isLoadingCompleted) {
        // 36
        isLoadingCompleted = true; // 37
        maybeReady(); // 38
      } // 39
    }; // 40
    // 41
    if (Meteor.isCordova) {
      // 42
      holdReady(); // 43
      document.addEventListener('deviceready', releaseReadyHold, false); // 44
    } // 45
    // 46
    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // 47
      // Loading has completed,                                                                               // 48
      // but allow other scripts the opportunity to hold ready                                                // 49
      window.setTimeout(loadingCompleted); // 50
    } else {
      // Attach event listeners to wait for loading to complete                                        // 51
      if (document.addEventListener) {
        // 52
        document.addEventListener('DOMContentLoaded', loadingCompleted, false); // 53
        window.addEventListener('load', loadingCompleted, false); // 54
      } else {
        // Use IE event model for < IE9                                                                // 55
        document.attachEvent('onreadystatechange', function () {
          // 56
          if (document.readyState === "complete") {
            // 57
            loadingCompleted(); // 58
          } // 59
        }); // 60
        window.attachEvent('load', loadingCompleted); // 61
      } // 62
    } // 63
    // 64
    /**                                                                                                       // 65
     * @summary Run code when a client or a server starts.                                                    // 66
     * @locus Anywhere                                                                                        // 67
     * @param {Function} func A function to run on startup.                                                   // 68
     */ // 69
    Meteor.startup = function (callback) {
      // 70
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/                                      // 71
      var doScroll = !document.addEventListener && // 72
      document.documentElement.doScroll; // 73
      // 74
      if (!doScroll || window !== top) {
        // 75
        if (isReady) // 76
          callback(); // 77
        else // 78
          callbackQueue.push(callback); // 79
      } else {
        // 80
        try {
          doScroll('left');
        } // 81
        catch (error) {
          // 82
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50); // 83
          return; // 84
        }; // 85
        callback(); // 86
      } // 87
    }; // 88
    // 89
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/debug.js                                                                               //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0; // 1
    // 2
    // replacement for console.log. This is a temporary API. We should                                        // 3
    // provide a real logging API soon (possibly just a polyfill for                                          // 4
    // console?)                                                                                              // 5
    //                                                                                                        // 6
    // NOTE: this is used on the server to print the warning about                                            // 7
    // having autopublish enabled when you probably meant to turn it                                          // 8
    // off. it's not really the proper use of something called                                                // 9
    // _debug. the intent is for this message to go to the terminal and                                       // 10
    // be very visible. if you change _debug to go someplace else, etc,                                       // 11
    // please fix the autopublish code to do something reasonable.                                            // 12
    //                                                                                                        // 13
    Meteor._debug = function () /* arguments */{
      // 14
      if (suppress) {
        // 15
        suppress--; // 16
        return; // 17
      } // 18
      if (typeof console !== 'undefined' && // 19
      typeof console.log !== 'undefined') {
        // 20
        if (arguments.length == 0) {
          // IE Companion breaks otherwise                                         // 21
          // IE10 PP4 requires at least one argument                                                          // 22
          console.log(''); // 23
        } else {
          // 24
          // IE doesn't have console.log.apply, it's not a real Object.                                       // 25
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26
          // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27
          if (typeof console.log.apply === "function") {
            // 28
            // Most browsers                                                                                  // 29
            // 30
            // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31
            // console.log, so try to call it with one argument if possible.                                  // 32
            // Approach taken here: If all arguments are strings, join them on space.                         // 33
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34
            var allArgumentsOfTypeString = true; // 35
            for (var i = 0; i < arguments.length; i++) // 36
            if (typeof arguments[i] !== "string") // 37
              allArgumentsOfTypeString = false; // 38
            // 39
            if (allArgumentsOfTypeString) // 40
              console.log.apply(console, [Array.prototype.join.call(arguments, " ")]); // 41
            else // 42
              console.log.apply(console, arguments); // 43
            // 44
          } else if (typeof Function.prototype.bind === "function") {
            // 45
            // IE9                                                                                            // 46
            var log = Function.prototype.bind.call(console.log, console); // 47
            log.apply(console, arguments); // 48
          } else {
            // 49
            // IE8                                                                                            // 50
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments)); // 51
          } // 52
        } // 53
      } // 54
    }; // 55
    // 56
    // Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57
    // stop tests from spamming the console.                                                                  // 58
    //                                                                                                        // 59
    Meteor._suppress_log = function (count) {
      // 60
      suppress += count; // 61
    }; // 62
    // 63
    Meteor._suppressed_log_expected = function () {
      // 64
      return suppress !== 0; // 65
    }; // 66
    // 67
    // 68
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/string_utils.js                                                                        //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1
    // Code taken from                                                                                        // 2
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3
    Meteor._escapeRegExp = function (string) {
      // 4
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // 5
    }; // 6
    // 7
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/test_environment.js                                                                    //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR; // 1
    if (Meteor.isClient) {
      // 2
      TEST_METADATA_STR = meteorEnv.TEST_METADATA; // 3
    } else {
      // 4
      TEST_METADATA_STR = process.env.TEST_METADATA; // 5
    } // 6
    // 7
    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}"); // 8
    var testDriverPackageName = TEST_METADATA.driverPackage; // 9
    // 10
    // Note that if we are in test-packages mode neither of these will be set,                                // 11
    // but we will have a test driver package                                                                 // 12
    Meteor.isTest = !!TEST_METADATA.isTest; // 13
    Meteor.isAppTest = !!TEST_METADATA.isAppTest; // 14
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest; // 15
    // 16
    if (typeof testDriverPackageName === "string") {
      // 17
      Meteor.startup(function () {
        // 18
        var testDriverPackage = Package[testDriverPackageName]; // 19
        if (!testDriverPackage) {
          // 20
          throw new Error("Can't find test driver package: " + testDriverPackageName); // 21
        } // 22
        // 23
        // On the client, the test driver *must* define `runTests`                                            // 24
        if (Meteor.isClient) {
          // 25
          if (typeof testDriverPackage.runTests !== "function") {
            // 26
            throw new Error("Test driver package " + testDriverPackageName // 27
            + " missing `runTests` export"); // 28
          } // 29
          testDriverPackage.runTests(); // 30
        } else {
          // 31
          // The server can optionally define `start`                                                         // 32
          if (typeof testDriverPackage.start === "function") {
            // 33
            testDriverPackage.start(); // 34
          } // 35
        } // 36
      }); // 37
    } // 38
    // 39
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/dynamics_browser.js                                                                    //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers                                          // 1
    // 2
    var nextSlot = 0; // 3
    var currentValues = []; // 4
    // 5
    Meteor.EnvironmentVariable = function () {
      // 6
      this.slot = nextSlot++; // 7
    }; // 8
    // 9
    _.extend(Meteor.EnvironmentVariable.prototype, { // 10
      get: function () {
        // 11
        return currentValues[this.slot]; // 12
      }, // 13
      // 14
      getOrNullIfOutsideFiber: function () {
        // 15
        return this.get(); // 16
      }, // 17
      // 18
      withValue: function (value, func) {
        // 19
        var saved = currentValues[this.slot]; // 20
        try {
          // 21
          currentValues[this.slot] = value; // 22
          var ret = func(); // 23
        } finally {
          // 24
          currentValues[this.slot] = saved; // 25
        } // 26
        return ret; // 27
      } // 28
    }); // 29
    // 30
    Meteor.bindEnvironment = function (func, onException, _this) {
      // 31
      // needed in order to be able to create closures inside func and                                        // 32
      // have the closed variables not change back to their original                                          // 33
      // values                                                                                               // 34
      var boundValues = _.clone(currentValues); // 35
      // 36
      if (!onException || typeof onException === 'string') {
        // 37
        var description = onException || "callback of async function"; // 38
        onException = function (error) {
          // 39
          Meteor._debug( // 40
          "Exception in " + description + ":", // 41
          error && error.stack || error // 42
          ); // 43
        }; // 44
      } // 45
      // 46
      return function () /* arguments */{
        // 47
        var savedValues = currentValues; // 48
        try {
          // 49
          currentValues = boundValues; // 50
          var ret = func.apply(_this, _.toArray(arguments)); // 51
        } catch (e) {
          // 52
          // note: callback-hook currently relies on the fact that if onException                             // 53
          // throws in the browser, the wrapped call throws.                                                  // 54
          onException(e); // 55
        } finally {
          // 56
          currentValues = savedValues; // 57
        } // 58
        return ret; // 59
      }; // 60
    }; // 61
    // 62
    Meteor._nodeCodeMustBeInFiber = function () {// 63
      // no-op on browser                                                                                     // 64
    }; // 65
    // 66
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/url_common.js                                                                          //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                       // 1
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere                                                                                        // 3
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".               // 4
     * @param {Object} [options]                                                                              // 5
     * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */ // 9
    Meteor.absoluteUrl = function (path, options) {
      // 10
      // path is optional                                                                                     // 11
      if (!options && typeof path === 'object') {
        // 12
        options = path; // 13
        path = undefined; // 14
      } // 15
      // merge options with defaults                                                                          // 16
      options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {}); // 17
      // 18
      var url = options.rootUrl; // 19
      if (!url) // 20
        throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment"); // 21
      // 22
      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23
        url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24
      // 25
      if (!/\/$/.test(url)) // url ends with '/'                                                              // 26
        url += '/'; // 27
      // 28
      if (path) // 29
        url += path; // 30
      // 31
      // turn http to https if secure option is set, and we're not talking                                    // 32
      // to localhost.                                                                                        // 33
      if (options.secure && // 34
      /^http:/.test(url) && // url starts with 'http:'                                                    // 35
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                                  // 36
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                            // 37
        url = url.replace(/^http:/, 'https:'); // 38
      // 39
      if (options.replaceLocalhost) // 40
        url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1'); // 41
      // 42
      return url; // 43
    }; // 44
    // 45
    // allow later packages to override default options                                                       // 46
    Meteor.absoluteUrl.defaultOptions = {}; // 47
    if (typeof __meteor_runtime_config__ === "object" && // 48
    __meteor_runtime_config__.ROOT_URL) // 49
      Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL; // 50
    // 51
    // 52
    Meteor._relativeToSiteRootUrl = function (link) {
      // 53
      if (typeof __meteor_runtime_config__ === "object" && // 54
      link.substr(0, 1) === "/") // 55
        link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link; // 56
      return link; // 57
    }; // 58
    // 59
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.meteor = {}, {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['meteor-base'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['mobile-experience'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['babel-compiler'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package.ecmascript = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Base64;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                      //
    // packages/base64/base64.js                                                            //
    //                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////
    //
    // Base 64 encoding                                                                     // 1
    // 2
    var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // 4
    var BASE_64_VALS = {}; // 5
    // 6
    for (var i = 0; i < BASE_64_CHARS.length; i++) {
      // 7
      BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i; // 8
    }; // 9
    // 10
    Base64 = {}; // 11
    // 12
    Base64.encode = function (array) {
      // 13
      // 14
      if (typeof array === "string") {
        // 15
        var str = array; // 16
        array = Base64.newBinary(str.length); // 17
        for (var i = 0; i < str.length; i++) {
          // 18
          var ch = str.charCodeAt(i); // 19
          if (ch > 0xFF) {
            // 20
            throw new Error( // 21
            "Not ascii. Base64.encode can only take ascii strings."); // 22
          } // 23
          array[i] = ch; // 24
        } // 25
      } // 26
      // 27
      var answer = []; // 28
      var a = null; // 29
      var b = null; // 30
      var c = null; // 31
      var d = null; // 32
      for (var i = 0; i < array.length; i++) {
        // 33
        switch (i % 3) {// 34
          case 0:
            // 35
            a = array[i] >> 2 & 0x3F; // 36
            b = (array[i] & 0x03) << 4; // 37
            break; // 38
          case 1:
            // 39
            b = b | array[i] >> 4 & 0xF; // 40
            c = (array[i] & 0xF) << 2; // 41
            break; // 42
          case 2:
            // 43
            c = c | array[i] >> 6 & 0x03; // 44
            d = array[i] & 0x3F; // 45
            answer.push(getChar(a)); // 46
            answer.push(getChar(b)); // 47
            answer.push(getChar(c)); // 48
            answer.push(getChar(d)); // 49
            a = null; // 50
            b = null; // 51
            c = null; // 52
            d = null; // 53
            break; // 54
        } // 55
      } // 56
      if (a != null) {
        // 57
        answer.push(getChar(a)); // 58
        answer.push(getChar(b)); // 59
        if (c == null) // 60
          answer.push('='); // 61
        else // 62
          answer.push(getChar(c)); // 63
        if (d == null) // 64
          answer.push('='); // 65
      } // 66
      return answer.join(""); // 67
    }; // 68
    // 69
    var getChar = function (val) {
      // 70
      return BASE_64_CHARS.charAt(val); // 71
    }; // 72
    // 73
    var getVal = function (ch) {
      // 74
      if (ch === '=') {
        // 75
        return -1; // 76
      } // 77
      return BASE_64_VALS[ch]; // 78
    }; // 79
    // 80
    // XXX This is a weird place for this to live, but it's used both by                    // 81
    // this package and 'ejson', and we can't put it in 'ejson' without                     // 82
    // introducing a circular dependency. It should probably be in its own                  // 83
    // package or as a helper in a package that both 'base64' and 'ejson'                   // 84
    // use.                                                                                 // 85
    Base64.newBinary = function (len) {
      // 86
      if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
        // 87
        var ret = []; // 88
        for (var i = 0; i < len; i++) {
          // 89
          ret.push(0); // 90
        } // 91
        ret.$Uint8ArrayPolyfill = true; // 92
        return ret; // 93
      } // 94
      return new Uint8Array(new ArrayBuffer(len)); // 95
    }; // 96
    // 97
    Base64.decode = function (str) {
      // 98
      var len = Math.floor(str.length * 3 / 4); // 99
      if (str.charAt(str.length - 1) == '=') {
        // 100
        len--; // 101
        if (str.charAt(str.length - 2) == '=') // 102
          len--; // 103
      } // 104
      var arr = Base64.newBinary(len); // 105
      // 106
      var one = null; // 107
      var two = null; // 108
      var three = null; // 109
      // 110
      var j = 0; // 111
      // 112
      for (var i = 0; i < str.length; i++) {
        // 113
        var c = str.charAt(i); // 114
        var v = getVal(c); // 115
        switch (i % 4) {// 116
          case 0:
            // 117
            if (v < 0) // 118
              throw new Error('invalid base64 string'); // 119
            one = v << 2; // 120
            break; // 121
          case 1:
            // 122
            if (v < 0) // 123
              throw new Error('invalid base64 string'); // 124
            one = one | v >> 4; // 125
            arr[j++] = one; // 126
            two = (v & 0x0F) << 4; // 127
            break; // 128
          case 2:
            // 129
            if (v >= 0) {
              // 130
              two = two | v >> 2; // 131
              arr[j++] = two; // 132
              three = (v & 0x03) << 6; // 133
            } // 134
            break; // 135
          case 3:
            // 136
            if (v >= 0) {
              // 137
              arr[j++] = three | v; // 138
            } // 139
            break; // 140
        } // 141
      } // 142
      return arr; // 143
    }; // 144
    // 145
    //////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.base64 = {}, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Base64 = Package.base64.Base64;

  /* Package-scope variables */
  var EJSON, EJSONTest;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                   //
    // packages/ejson/ejson.js                                                                                           //
    //                                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                                  // 1
     * @namespace                                                                                                        // 2
     * @summary Namespace for EJSON functions                                                                            // 3
     */ // 4
    EJSON = {}; // 5
    EJSONTest = {}; // 6
    // 7
    // 8
    // 9
    // Custom type interface definition                                                                                  // 10
    /**                                                                                                                  // 11
     * @class CustomType                                                                                                 // 12
     * @instanceName customType                                                                                          // 13
     * @memberOf EJSON                                                                                                   // 14
     * @summary The interface that a class must satisfy to be able to become an                                          // 15
     * EJSON custom type via EJSON.addType.                                                                              // 16
     */ // 17
    // 18
    /**                                                                                                                  // 19
     * @function typeName                                                                                                // 20
     * @memberOf EJSON.CustomType                                                                                        // 21
     * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).
     * @locus Anywhere                                                                                                   // 23
     * @instance                                                                                                         // 24
     */ // 25
    // 26
    /**                                                                                                                  // 27
     * @function toJSONValue                                                                                             // 28
     * @memberOf EJSON.CustomType                                                                                        // 29
     * @summary Serialize this instance into a JSON-compatible value.                                                    // 30
     * @locus Anywhere                                                                                                   // 31
     * @instance                                                                                                         // 32
     */ // 33
    // 34
    /**                                                                                                                  // 35
     * @function clone                                                                                                   // 36
     * @memberOf EJSON.CustomType                                                                                        // 37
     * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.
     * @locus Anywhere                                                                                                   // 39
     * @instance                                                                                                         // 40
     */ // 41
    // 42
    /**                                                                                                                  // 43
     * @function equals                                                                                                  // 44
     * @memberOf EJSON.CustomType                                                                                        // 45
     * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46
     * @locus Anywhere                                                                                                   // 47
     * @param {Object} other Another object to compare this to.                                                          // 48
     * @instance                                                                                                         // 49
     */ // 50
    // 51
    // 52
    var customTypes = {}; // 53
    // Add a custom type, using a method of your choice to get to and                                                    // 54
    // from a basic JSON-able representation.  The factory argument                                                      // 55
    // is a function of JSON-able --> your object                                                                        // 56
    // The type you add must have:                                                                                       // 57
    // - A toJSONValue() method, so that Meteor can serialize it                                                         // 58
    // - a typeName() method, to show how to look it up in our type table.                                               // 59
    // It is okay if these methods are monkey-patched on.                                                                // 60
    // EJSON.clone will use toJSONValue and the given factory to produce                                                 // 61
    // a clone, but you may specify a method clone() that will be                                                        // 62
    // used instead.                                                                                                     // 63
    // Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                 // 64
    // but you may provide a method equals() instead.                                                                    // 65
    /**                                                                                                                  // 66
     * @summary Add a custom datatype to EJSON.                                                                          // 67
     * @locus Anywhere                                                                                                   // 68
     * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.
     * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.
     */ // 71
    EJSON.addType = function (name, factory) {
      // 72
      if (_.has(customTypes, name)) // 73
        throw new Error("Type " + name + " already present"); // 74
      customTypes[name] = factory; // 75
    }; // 76
    // 77
    var isInfOrNan = function (obj) {
      // 78
      return _.isNaN(obj) || obj === Infinity || obj === -Infinity; // 79
    }; // 80
    // 81
    var builtinConverters = [// 82
    { // Date                                                                                                          // 83
      matchJSONValue: function (obj) {
        // 84
        return _.has(obj, '$date') && _.size(obj) === 1; // 85
      }, // 86
      matchObject: function (obj) {
        // 87
        return obj instanceof Date; // 88
      }, // 89
      toJSONValue: function (obj) {
        // 90
        return { $date: obj.getTime() }; // 91
      }, // 92
      fromJSONValue: function (obj) {
        // 93
        return new Date(obj.$date); // 94
      } // 95
    }, // 96
    { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                          // 97
      // which we match.)                                                                                              // 98
      matchJSONValue: function (obj) {
        // 99
        return _.has(obj, '$InfNaN') && _.size(obj) === 1; // 100
      }, // 101
      matchObject: isInfOrNan, // 102
      toJSONValue: function (obj) {
        // 103
        var sign; // 104
        if (_.isNaN(obj)) // 105
          sign = 0; // 106
        else if (obj === Infinity) // 107
            sign = 1; // 108
          else // 109
            sign = -1; // 110
        return { $InfNaN: sign }; // 111
      }, // 112
      fromJSONValue: function (obj) {
        // 113
        return obj.$InfNaN / 0; // 114
      } // 115
    }, // 116
    { // Binary                                                                                                        // 117
      matchJSONValue: function (obj) {
        // 118
        return _.has(obj, '$binary') && _.size(obj) === 1; // 119
      }, // 120
      matchObject: function (obj) {
        // 121
        return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array // 122
        || obj && _.has(obj, '$Uint8ArrayPolyfill'); // 123
      }, // 124
      toJSONValue: function (obj) {
        // 125
        return { $binary: Base64.encode(obj) }; // 126
      }, // 127
      fromJSONValue: function (obj) {
        // 128
        return Base64.decode(obj.$binary); // 129
      } // 130
    }, // 131
    { // Escaping one level                                                                                            // 132
      matchJSONValue: function (obj) {
        // 133
        return _.has(obj, '$escape') && _.size(obj) === 1; // 134
      }, // 135
      matchObject: function (obj) {
        // 136
        if (_.isEmpty(obj) || _.size(obj) > 2) {
          // 137
          return false; // 138
        } // 139
        return _.any(builtinConverters, function (converter) {
          // 140
          return converter.matchJSONValue(obj); // 141
        }); // 142
      }, // 143
      toJSONValue: function (obj) {
        // 144
        var newObj = {}; // 145
        _.each(obj, function (value, key) {
          // 146
          newObj[key] = EJSON.toJSONValue(value); // 147
        }); // 148
        return { $escape: newObj }; // 149
      }, // 150
      fromJSONValue: function (obj) {
        // 151
        var newObj = {}; // 152
        _.each(obj.$escape, function (value, key) {
          // 153
          newObj[key] = EJSON.fromJSONValue(value); // 154
        }); // 155
        return newObj; // 156
      } // 157
    }, // 158
    { // Custom                                                                                                        // 159
      matchJSONValue: function (obj) {
        // 160
        return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2; // 161
      }, // 162
      matchObject: function (obj) {
        // 163
        return EJSON._isCustomType(obj); // 164
      }, // 165
      toJSONValue: function (obj) {
        // 166
        var jsonValue = Meteor._noYieldsAllowed(function () {
          // 167
          return obj.toJSONValue(); // 168
        }); // 169
        return { $type: obj.typeName(), $value: jsonValue }; // 170
      }, // 171
      fromJSONValue: function (obj) {
        // 172
        var typeName = obj.$type; // 173
        if (!_.has(customTypes, typeName)) // 174
          throw new Error("Custom EJSON type " + typeName + " is not defined"); // 175
        var converter = customTypes[typeName]; // 176
        return Meteor._noYieldsAllowed(function () {
          // 177
          return converter(obj.$value); // 178
        }); // 179
      } // 180
      // 181
    }]; // 182
    // 183
    EJSON._isCustomType = function (obj) {
      // 184
      return obj && // 185
      typeof obj.toJSONValue === 'function' && // 186
      typeof obj.typeName === 'function' && // 187
      _.has(customTypes, obj.typeName()); // 188
    }; // 189
    // 190
    EJSON._getTypes = function () {
      // 191
      return customTypes; // 192
    }; // 193
    // 194
    EJSON._getConverters = function () {
      // 195
      return builtinConverters; // 196
    }; // 197
    // 198
    // for both arrays and objects, in-place modification.                                                               // 199
    var adjustTypesToJSONValue = // 200
    EJSON._adjustTypesToJSONValue = function (obj) {
      // 201
      // Is it an atom that we need to adjust?                                                                           // 202
      if (obj === null) // 203
        return null; // 204
      var maybeChanged = toJSONValueHelper(obj); // 205
      if (maybeChanged !== undefined) // 206
        return maybeChanged; // 207
      // 208
      // Other atoms are unchanged.                                                                                      // 209
      if (typeof obj !== 'object') // 210
        return obj; // 211
      // 212
      // Iterate over array or object structure.                                                                         // 213
      _.each(obj, function (value, key) {
        // 214
        if (typeof value !== 'object' && value !== undefined && // 215
        !isInfOrNan(value)) // 216
          return; // continue                                                                                            // 217
        // 218
        var changed = toJSONValueHelper(value); // 219
        if (changed) {
          // 220
          obj[key] = changed; // 221
          return; // on to the next key                                                                                  // 222
        } // 223
        // if we get here, value is an object but not adjustable                                                         // 224
        // at this level.  recurse.                                                                                      // 225
        adjustTypesToJSONValue(value); // 226
      }); // 227
      return obj; // 228
    }; // 229
    // 230
    // Either return the JSON-compatible version of the argument, or undefined (if                                       // 231
    // the item isn't itself replaceable, but maybe some fields in it are)                                               // 232
    var toJSONValueHelper = function (item) {
      // 233
      for (var i = 0; i < builtinConverters.length; i++) {
        // 234
        var converter = builtinConverters[i]; // 235
        if (converter.matchObject(item)) {
          // 236
          return converter.toJSONValue(item); // 237
        } // 238
      } // 239
      return undefined; // 240
    }; // 241
    // 242
    /**                                                                                                                  // 243
     * @summary Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244
     * @locus Anywhere                                                                                                   // 245
     * @param {EJSON} val A value to serialize to plain JSON.                                                            // 246
     */ // 247
    EJSON.toJSONValue = function (item) {
      // 248
      var changed = toJSONValueHelper(item); // 249
      if (changed !== undefined) // 250
        return changed; // 251
      if (typeof item === 'object') {
        // 252
        item = EJSON.clone(item); // 253
        adjustTypesToJSONValue(item); // 254
      } // 255
      return item; // 256
    }; // 257
    // 258
    // for both arrays and objects. Tries its best to just                                                               // 259
    // use the object you hand it, but may return something                                                              // 260
    // different if the object you hand it itself needs changing.                                                        // 261
    //                                                                                                                   // 262
    var adjustTypesFromJSONValue = // 263
    EJSON._adjustTypesFromJSONValue = function (obj) {
      // 264
      if (obj === null) // 265
        return null; // 266
      var maybeChanged = fromJSONValueHelper(obj); // 267
      if (maybeChanged !== obj) // 268
        return maybeChanged; // 269
      // 270
      // Other atoms are unchanged.                                                                                      // 271
      if (typeof obj !== 'object') // 272
        return obj; // 273
      // 274
      _.each(obj, function (value, key) {
        // 275
        if (typeof value === 'object') {
          // 276
          var changed = fromJSONValueHelper(value); // 277
          if (value !== changed) {
            // 278
            obj[key] = changed; // 279
            return; // 280
          } // 281
          // if we get here, value is an object but not adjustable                                                       // 282
          // at this level.  recurse.                                                                                    // 283
          adjustTypesFromJSONValue(value); // 284
        } // 285
      }); // 286
      return obj; // 287
    }; // 288
    // 289
    // Either return the argument changed to have the non-json                                                           // 290
    // rep of itself (the Object version) or the argument itself.                                                        // 291
    // 292
    // DOES NOT RECURSE.  For actually getting the fully-changed value, use                                              // 293
    // EJSON.fromJSONValue                                                                                               // 294
    var fromJSONValueHelper = function (value) {
      // 295
      if (typeof value === 'object' && value !== null) {
        // 296
        if (_.size(value) <= 2 // 297
        && _.all(value, function (v, k) {
          // 298
          return typeof k === 'string' && k.substr(0, 1) === '$'; // 299
        })) {
          // 300
          for (var i = 0; i < builtinConverters.length; i++) {
            // 301
            var converter = builtinConverters[i]; // 302
            if (converter.matchJSONValue(value)) {
              // 303
              return converter.fromJSONValue(value); // 304
            } // 305
          } // 306
        } // 307
      } // 308
      return value; // 309
    }; // 310
    // 311
    /**                                                                                                                  // 312
     * @summary Deserialize an EJSON value from its plain JSON representation.                                           // 313
     * @locus Anywhere                                                                                                   // 314
     * @param {JSONCompatible} val A value to deserialize into EJSON.                                                    // 315
     */ // 316
    EJSON.fromJSONValue = function (item) {
      // 317
      var changed = fromJSONValueHelper(item); // 318
      if (changed === item && typeof item === 'object') {
        // 319
        item = EJSON.clone(item); // 320
        adjustTypesFromJSONValue(item); // 321
        return item; // 322
      } else {
        // 323
        return changed; // 324
      } // 325
    }; // 326
    // 327
    /**                                                                                                                  // 328
     * @summary Serialize a value to a string.                                                                           // 329
                                                                                                                         // 330
    For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.
     * @locus Anywhere                                                                                                   // 332
     * @param {EJSON} val A value to stringify.                                                                          // 333
     * @param {Object} [options]                                                                                         // 334
     * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.
     * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.                    // 336
     */ // 337
    EJSON.stringify = function (item, options) {
      // 338
      var json = EJSON.toJSONValue(item); // 339
      if (options && (options.canonical || options.indent)) {
        // 340
        return EJSON._canonicalStringify(json, options); // 341
      } else {
        // 342
        return JSON.stringify(json); // 343
      } // 344
    }; // 345
    // 346
    /**                                                                                                                  // 347
     * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348
     * @locus Anywhere                                                                                                   // 349
     * @param {String} str A string to parse into an EJSON value.                                                        // 350
     */ // 351
    EJSON.parse = function (item) {
      // 352
      if (typeof item !== 'string') // 353
        throw new Error("EJSON.parse argument should be a string"); // 354
      return EJSON.fromJSONValue(JSON.parse(item)); // 355
    }; // 356
    // 357
    /**                                                                                                                  // 358
     * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).
     * @param {Object} x The variable to check.                                                                          // 360
     * @locus Anywhere                                                                                                   // 361
     */ // 362
    EJSON.isBinary = function (obj) {
      // 363
      return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || // 364
      obj && obj.$Uint8ArrayPolyfill); // 365
    }; // 366
    // 367
    /**                                                                                                                  // 368
     * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.
     * @locus Anywhere                                                                                                   // 370
     * @param {EJSON} a                                                                                                  // 371
     * @param {EJSON} b                                                                                                  // 372
     * @param {Object} [options]                                                                                         // 373
     * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.
     */ // 375
    EJSON.equals = function (a, b, options) {
      // 376
      var i; // 377
      var keyOrderSensitive = !!(options && options.keyOrderSensitive); // 378
      if (a === b) // 379
        return true; // 380
      if (_.isNaN(a) && _.isNaN(b)) // 381
        return true; // This differs from the IEEE spec for NaN equality, b/c we don't want                              // 382
      // anything ever with a NaN to be poisoned from becoming equal to anything.                         // 383
      if (!a || !b) // if either one is falsy, they'd have to be === to be equal                                         // 384
        return false; // 385
      if (!(typeof a === 'object' && typeof b === 'object')) // 386
        return false; // 387
      if (a instanceof Date && b instanceof Date) // 388
        return a.valueOf() === b.valueOf(); // 389
      if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
        // 390
        if (a.length !== b.length) // 391
          return false; // 392
        for (i = 0; i < a.length; i++) {
          // 393
          if (a[i] !== b[i]) // 394
            return false; // 395
        } // 396
        return true; // 397
      } // 398
      if (typeof a.equals === 'function') // 399
        return a.equals(b, options); // 400
      if (typeof b.equals === 'function') // 401
        return b.equals(a, options); // 402
      if (a instanceof Array) {
        // 403
        if (!(b instanceof Array)) // 404
          return false; // 405
        if (a.length !== b.length) // 406
          return false; // 407
        for (i = 0; i < a.length; i++) {
          // 408
          if (!EJSON.equals(a[i], b[i], options)) // 409
            return false; // 410
        } // 411
        return true; // 412
      } // 413
      // fallback for custom types that don't implement their own equals                                                 // 414
      switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {// 415
        case 1:
          return false; // 416
        case 2:
          return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b)); // 417
      } // 418
      // fall back to structural equality of objects                                                                     // 419
      var ret; // 420
      if (keyOrderSensitive) {
        // 421
        var bKeys = []; // 422
        _.each(b, function (val, x) {
          // 423
          bKeys.push(x); // 424
        }); // 425
        i = 0; // 426
        ret = _.all(a, function (val, x) {
          // 427
          if (i >= bKeys.length) {
            // 428
            return false; // 429
          } // 430
          if (x !== bKeys[i]) {
            // 431
            return false; // 432
          } // 433
          if (!EJSON.equals(val, b[bKeys[i]], options)) {
            // 434
            return false; // 435
          } // 436
          i++; // 437
          return true; // 438
        }); // 439
        return ret && i === bKeys.length; // 440
      } else {
        // 441
        i = 0; // 442
        ret = _.all(a, function (val, key) {
          // 443
          if (!_.has(b, key)) {
            // 444
            return false; // 445
          } // 446
          if (!EJSON.equals(val, b[key], options)) {
            // 447
            return false; // 448
          } // 449
          i++; // 450
          return true; // 451
        }); // 452
        return ret && _.size(b) === i; // 453
      } // 454
    }; // 455
    // 456
    /**                                                                                                                  // 457
     * @summary Return a deep copy of `val`.                                                                             // 458
     * @locus Anywhere                                                                                                   // 459
     * @param {EJSON} val A value to copy.                                                                               // 460
     */ // 461
    EJSON.clone = function (v) {
      // 462
      var ret; // 463
      if (typeof v !== "object") // 464
        return v; // 465
      if (v === null) // 466
        return null; // null has typeof "object"                                                                         // 467
      if (v instanceof Date) // 468
        return new Date(v.getTime()); // 469
      // RegExps are not really EJSON elements (eg we don't define a serialization                                       // 470
      // for them), but they're immutable anyway, so we can support them in clone.                                       // 471
      if (v instanceof RegExp) // 472
        return v; // 473
      if (EJSON.isBinary(v)) {
        // 474
        ret = EJSON.newBinary(v.length); // 475
        for (var i = 0; i < v.length; i++) {
          // 476
          ret[i] = v[i]; // 477
        } // 478
        return ret; // 479
      } // 480
      // XXX: Use something better than underscore's isArray                                                             // 481
      if (_.isArray(v) || _.isArguments(v)) {
        // 482
        // For some reason, _.map doesn't work in this context on Opera (weird test                                      // 483
        // failures).                                                                                                    // 484
        ret = []; // 485
        for (i = 0; i < v.length; i++) // 486
        ret[i] = EJSON.clone(v[i]); // 487
        return ret; // 488
      } // 489
      // handle general user-defined typed Objects if they have a clone method                                           // 490
      if (typeof v.clone === 'function') {
        // 491
        return v.clone(); // 492
      } // 493
      // handle other custom types                                                                                       // 494
      if (EJSON._isCustomType(v)) {
        // 495
        return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true); // 496
      } // 497
      // handle other objects                                                                                            // 498
      ret = {}; // 499
      _.each(v, function (value, key) {
        // 500
        ret[key] = EJSON.clone(value); // 501
      }); // 502
      return ret; // 503
    }; // 504
    // 505
    /**                                                                                                                  // 506
     * @summary Allocate a new buffer of binary data that EJSON can serialize.                                           // 507
     * @locus Anywhere                                                                                                   // 508
     * @param {Number} size The number of bytes of binary data to allocate.                                              // 509
     */ // 510
    // EJSON.newBinary is the public documented API for this functionality,                                              // 511
    // but the implementation is in the 'base64' package to avoid                                                        // 512
    // introducing a circular dependency. (If the implementation were here,                                              // 513
    // then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                                // 514
    // also have to use 'base64'.)                                                                                       // 515
    EJSON.newBinary = Base64.newBinary; // 516
    // 517
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                   //
    // packages/ejson/stringify.js                                                                                       //
    //                                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Based on json2.js from https://github.com/douglascrockford/JSON-js                                                // 1
    //                                                                                                                   // 2
    //    json2.js                                                                                                       // 3
    //    2012-10-08                                                                                                     // 4
    //                                                                                                                   // 5
    //    Public Domain.                                                                                                 // 6
    //                                                                                                                   // 7
    //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                        // 8
    // 9
    function quote(string) {
      // 10
      return JSON.stringify(string); // 11
    } // 12
    // 13
    var str = function (key, holder, singleIndent, outerIndent, canonical) {
      // 14
      // 15
      // Produce a string from holder[key].                                                                              // 16
      // 17
      var i; // The loop counter.                                                                               // 18
      var k; // The member key.                                                                                 // 19
      var v; // The member value.                                                                               // 20
      var length; // 21
      var innerIndent = outerIndent; // 22
      var partial; // 23
      var value = holder[key]; // 24
      // 25
      // What happens next depends on the value's type.                                                                  // 26
      // 27
      switch (typeof value) {// 28
        case 'string':
          // 29
          return quote(value); // 30
        case 'number':
          // 31
          // JSON numbers must be finite. Encode non-finite numbers as null.                                               // 32
          return isFinite(value) ? String(value) : 'null'; // 33
        case 'boolean':
          // 34
          return String(value); // 35
        // If the type is 'object', we might be dealing with an object or an array or                                      // 36
        // null.                                                                                                           // 37
        case 'object':
          // 38
          // Due to a specification blunder in ECMAScript, typeof null is 'object',                                        // 39
          // so watch out for that case.                                                                                   // 40
          if (!value) {
            // 41
            return 'null'; // 42
          } // 43
          // Make an array to hold the partial results of stringifying this object value.                                  // 44
          innerIndent = outerIndent + singleIndent; // 45
          partial = []; // 46
          // 47
          // Is the value an array?                                                                                        // 48
          if (_.isArray(value) || _.isArguments(value)) {
            // 49
            // 50
            // The value is an array. Stringify every element. Use null as a placeholder                                   // 51
            // for non-JSON values.                                                                                        // 52
            // 53
            length = value.length; // 54
            for (i = 0; i < length; i += 1) {
              // 55
              partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null'; // 56
            } // 57
            // 58
            // Join all of the elements together, separated with commas, and wrap them in                                  // 59
            // brackets.                                                                                                   // 60
            // 61
            if (partial.length === 0) {
              // 62
              v = '[]'; // 63
            } else if (innerIndent) {
              // 64
              v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']'; // 65
            } else {
              // 66
              v = '[' + partial.join(',') + ']'; // 67
            } // 68
            return v; // 69
          } // 70
          // 71
          // 72
          // Iterate through all of the keys in the object.                                                                // 73
          var keys = _.keys(value); // 74
          if (canonical) // 75
            keys = keys.sort(); // 76
          _.each(keys, function (k) {
            // 77
            v = str(k, value, singleIndent, innerIndent, canonical); // 78
            if (v) {
              // 79
              partial.push(quote(k) + (innerIndent ? ': ' : ':') + v); // 80
            } // 81
          }); // 82
          // 83
          // 84
          // Join all of the member texts together, separated with commas,                                                 // 85
          // and wrap them in braces.                                                                                      // 86
          // 87
          if (partial.length === 0) {
            // 88
            v = '{}'; // 89
          } else if (innerIndent) {
            // 90
            v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}'; // 91
          } else {
            // 92
            v = '{' + partial.join(',') + '}'; // 93
          } // 94
          return v; // 95
      } // 96
    }; // 97
    // 98
    // If the JSON object does not yet have a stringify method, give it one.                                             // 99
    // 100
    EJSON._canonicalStringify = function (value, options) {
      // 101
      // Make a fake root object containing our value under the key of ''.                                               // 102
      // Return the result of stringifying the value.                                                                    // 103
      options = _.extend({ // 104
        indent: "", // 105
        canonical: false // 106
      }, options); // 107
      if (options.indent === true) {
        // 108
        options.indent = "  "; // 109
      } else if (typeof options.indent === 'number') {
        // 110
        var newIndent = ""; // 111
        for (var i = 0; i < options.indent; i++) {
          // 112
          newIndent += ' '; // 113
        } // 114
        options.indent = newIndent; // 115
      } // 116
      return str('', { '': value }, options.indent, "", options.canonical); // 117
    }; // 118
    // 119
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.ejson = {}, {
    EJSON: EJSON,
    EJSONTest: EJSONTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var IdMap;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////
    //                                                                            //
    // packages/id-map/id-map.js                                                  //
    //                                                                            //
    ////////////////////////////////////////////////////////////////////////////////
    //
    IdMap = function (idStringify, idParse) {
      // 1
      var self = this; // 2
      self._map = {}; // 3
      self._idStringify = idStringify || JSON.stringify; // 4
      self._idParse = idParse || JSON.parse; // 5
    }; // 6
    // 7
    // Some of these methods are designed to match methods on OrderedDict, since  // 8
    // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
    // (Conceivably, this should be replaced with "UnorderedDict" with a specific
    // set of methods that overlap between the two.)                              // 11
    // 12
    _.extend(IdMap.prototype, { // 13
      get: function (id) {
        // 14
        var self = this; // 15
        var key = self._idStringify(id); // 16
        return self._map[key]; // 17
      }, // 18
      set: function (id, value) {
        // 19
        var self = this; // 20
        var key = self._idStringify(id); // 21
        self._map[key] = value; // 22
      }, // 23
      remove: function (id) {
        // 24
        var self = this; // 25
        var key = self._idStringify(id); // 26
        delete self._map[key]; // 27
      }, // 28
      has: function (id) {
        // 29
        var self = this; // 30
        var key = self._idStringify(id); // 31
        return _.has(self._map, key); // 32
      }, // 33
      empty: function () {
        // 34
        var self = this; // 35
        return _.isEmpty(self._map); // 36
      }, // 37
      clear: function () {
        // 38
        var self = this; // 39
        self._map = {}; // 40
      }, // 41
      // Iterates over the items in the map. Return `false` to break the loop.    // 42
      forEach: function (iterator) {
        // 43
        var self = this; // 44
        // don't use _.each, because we can't break out of it.                    // 45
        var keys = _.keys(self._map); // 46
        for (var i = 0; i < keys.length; i++) {
          // 47
          var breakIfFalse = iterator.call(null, self._map[keys[i]], // 48
          self._idParse(keys[i])); // 49
          if (breakIfFalse === false) // 50
            return; // 51
        } // 52
      }, // 53
      size: function () {
        // 54
        var self = this; // 55
        return _.size(self._map); // 56
      }, // 57
      setDefault: function (id, def) {
        // 58
        var self = this; // 59
        var key = self._idStringify(id); // 60
        if (_.has(self._map, key)) // 61
          return self._map[key]; // 62
        self._map[key] = def; // 63
        return def; // 64
      }, // 65
      // Assumes that values are EJSON-cloneable, and that we don't need to clone
      // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
      clone: function () {
        // 68
        var self = this; // 69
        var clone = new IdMap(self._idStringify, self._idParse); // 70
        self.forEach(function (value, id) {
          // 71
          clone.set(id, EJSON.clone(value)); // 72
        }); // 73
        return clone; // 74
      } // 75
    }); // 76
    // 77
    // 78
    ////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['id-map'] = {}, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var OrderedDict;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/ordered-dict/ordered_dict.js                                         //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    // This file defines an ordered dictionary abstraction that is useful for        // 1
    // maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
    // by specifying the item they now come before.                                  // 3
    // 4
    // The implementation is a dictionary that contains nodes of a doubly-linked     // 5
    // list as its values.                                                           // 6
    // 7
    // constructs a new element struct                                               // 8
    // next and prev are whole elements, not keys.                                   // 9
    var element = function (key, value, next, prev) {
      // 10
      return { // 11
        key: key, // 12
        value: value, // 13
        next: next, // 14
        prev: prev // 15
      }; // 16
    }; // 17
    OrderedDict = function () /* ... */{
      // 18
      var self = this; // 19
      self._dict = {}; // 20
      self._first = null; // 21
      self._last = null; // 22
      self._size = 0; // 23
      var args = _.toArray(arguments); // 24
      self._stringify = function (x) {
        return x;
      }; // 25
      if (typeof args[0] === 'function') // 26
        self._stringify = args.shift(); // 27
      _.each(args, function (kv) {
        // 28
        self.putBefore(kv[0], kv[1], null); // 29
      }); // 30
    }; // 31
    // 32
    _.extend(OrderedDict.prototype, { // 33
      // the "prefix keys with a space" thing comes from here                        // 34
      // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649
      _k: function (key) {
        return " " + this._stringify(key);
      }, // 36
      // 37
      empty: function () {
        // 38
        var self = this; // 39
        return !self._first; // 40
      }, // 41
      size: function () {
        // 42
        var self = this; // 43
        return self._size; // 44
      }, // 45
      _linkEltIn: function (elt) {
        // 46
        var self = this; // 47
        if (!elt.next) {
          // 48
          elt.prev = self._last; // 49
          if (self._last) // 50
            self._last.next = elt; // 51
          self._last = elt; // 52
        } else {
          // 53
          elt.prev = elt.next.prev; // 54
          elt.next.prev = elt; // 55
          if (elt.prev) // 56
            elt.prev.next = elt; // 57
        } // 58
        if (self._first === null || self._first === elt.next) // 59
          self._first = elt; // 60
      }, // 61
      _linkEltOut: function (elt) {
        // 62
        var self = this; // 63
        if (elt.next) // 64
          elt.next.prev = elt.prev; // 65
        if (elt.prev) // 66
          elt.prev.next = elt.next; // 67
        if (elt === self._last) // 68
          self._last = elt.prev; // 69
        if (elt === self._first) // 70
          self._first = elt.next; // 71
      }, // 72
      putBefore: function (key, item, before) {
        // 73
        var self = this; // 74
        if (self._dict[self._k(key)]) // 75
          throw new Error("Item " + key + " already present in OrderedDict"); // 76
        var elt = before ? // 77
        element(key, item, self._dict[self._k(before)]) : // 78
        element(key, item, null); // 79
        if (elt.next === undefined) // 80
          throw new Error("could not find item to put this one before"); // 81
        self._linkEltIn(elt); // 82
        self._dict[self._k(key)] = elt; // 83
        self._size++; // 84
      }, // 85
      append: function (key, item) {
        // 86
        var self = this; // 87
        self.putBefore(key, item, null); // 88
      }, // 89
      remove: function (key) {
        // 90
        var self = this; // 91
        var elt = self._dict[self._k(key)]; // 92
        if (elt === undefined) // 93
          throw new Error("Item " + key + " not present in OrderedDict"); // 94
        self._linkEltOut(elt); // 95
        self._size--; // 96
        delete self._dict[self._k(key)]; // 97
        return elt.value; // 98
      }, // 99
      get: function (key) {
        // 100
        var self = this; // 101
        if (self.has(key)) // 102
          return self._dict[self._k(key)].value; // 103
        return undefined; // 104
      }, // 105
      has: function (key) {
        // 106
        var self = this; // 107
        return _.has(self._dict, self._k(key)); // 108
      }, // 109
      // Iterate through the items in this dictionary in order, calling              // 110
      // iter(value, key, index) on each one.                                        // 111
      // 112
      // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
      forEach: function (iter) {
        // 114
        var self = this; // 115
        var i = 0; // 116
        var elt = self._first; // 117
        while (elt !== null) {
          // 118
          var b = iter(elt.value, elt.key, i); // 119
          if (b === OrderedDict.BREAK) // 120
            return; // 121
          elt = elt.next; // 122
          i++; // 123
        } // 124
      }, // 125
      first: function () {
        // 126
        var self = this; // 127
        if (self.empty()) // 128
          return undefined; // 129
        return self._first.key; // 130
      }, // 131
      firstValue: function () {
        // 132
        var self = this; // 133
        if (self.empty()) // 134
          return undefined; // 135
        return self._first.value; // 136
      }, // 137
      last: function () {
        // 138
        var self = this; // 139
        if (self.empty()) // 140
          return undefined; // 141
        return self._last.key; // 142
      }, // 143
      lastValue: function () {
        // 144
        var self = this; // 145
        if (self.empty()) // 146
          return undefined; // 147
        return self._last.value; // 148
      }, // 149
      prev: function (key) {
        // 150
        var self = this; // 151
        if (self.has(key)) {
          // 152
          var elt = self._dict[self._k(key)]; // 153
          if (elt.prev) // 154
            return elt.prev.key; // 155
        } // 156
        return null; // 157
      }, // 158
      next: function (key) {
        // 159
        var self = this; // 160
        if (self.has(key)) {
          // 161
          var elt = self._dict[self._k(key)]; // 162
          if (elt.next) // 163
            return elt.next.key; // 164
        } // 165
        return null; // 166
      }, // 167
      moveBefore: function (key, before) {
        // 168
        var self = this; // 169
        var elt = self._dict[self._k(key)]; // 170
        var eltBefore = before ? self._dict[self._k(before)] : null; // 171
        if (elt === undefined) // 172
          throw new Error("Item to move is not present"); // 173
        if (eltBefore === undefined) {
          // 174
          throw new Error("Could not find element to move this one before"); // 175
        } // 176
        if (eltBefore === elt.next) // no moving necessary                           // 177
          return; // 178
        // remove from its old place                                                 // 179
        self._linkEltOut(elt); // 180
        // patch into its new place                                                  // 181
        elt.next = eltBefore; // 182
        self._linkEltIn(elt); // 183
      }, // 184
      // Linear, sadly.                                                              // 185
      indexOf: function (key) {
        // 186
        var self = this; // 187
        var ret = null; // 188
        self.forEach(function (v, k, i) {
          // 189
          if (self._k(k) === self._k(key)) {
            // 190
            ret = i; // 191
            return OrderedDict.BREAK; // 192
          } // 193
          return undefined; // 194
        }); // 195
        return ret; // 196
      }, // 197
      _checkRep: function () {
        // 198
        var self = this; // 199
        _.each(self._dict, function (k, v) {
          // 200
          if (v.next === v) // 201
            throw new Error("Next is a loop"); // 202
          if (v.prev === v) // 203
            throw new Error("Prev is a loop"); // 204
        }); // 205
      } // 206
      // 207
    }); // 208
    OrderedDict.BREAK = { "break": true }; // 209
    // 210
    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ordered-dict'] = {}, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Tracker, Deps;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/tracker.js                                                                                        //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /////////////////////////////////////////////////////                                                                 // 1
    // Package docs at http://docs.meteor.com/#tracker //                                                                 // 2
    /////////////////////////////////////////////////////                                                                 // 3
    // 4
    /**                                                                                                                   // 5
     * @namespace Tracker                                                                                                 // 6
     * @summary The namespace for Tracker-related methods.                                                                // 7
     */ // 8
    Tracker = {}; // 9
    // 10
    // http://docs.meteor.com/#tracker_active                                                                             // 11
    // 12
    /**                                                                                                                   // 13
     * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
     * @locus Client                                                                                                      // 15
     * @type {Boolean}                                                                                                    // 16
     */ // 17
    Tracker.active = false; // 18
    // 19
    // http://docs.meteor.com/#tracker_currentcomputation                                                                 // 20
    // 21
    /**                                                                                                                   // 22
     * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
     * @locus Client                                                                                                      // 24
     * @type {Tracker.Computation}                                                                                        // 25
     */ // 26
    Tracker.currentComputation = null; // 27
    // 28
    var setCurrentComputation = function (c) {
      // 29
      Tracker.currentComputation = c; // 30
      Tracker.active = !!c; // 31
    }; // 32
    // 33
    var _debugFunc = function () {
      // 34
      // We want this code to work without Meteor, and also without                                                       // 35
      // "console" (which is technically non-standard and may be missing                                                  // 36
      // on some browser we come across, like it was on IE 7).                                                            // 37
      //                                                                                                                  // 38
      // Lazy evaluation because `Meteor` does not exist right away.(??)                                                  // 39
      return typeof Meteor !== "undefined" ? Meteor._debug : // 40
      typeof console !== "undefined" && console.error ? // 41
      function () {
        console.error.apply(console, arguments);
      } : // 42
      function () {}; // 43
    }; // 44
    // 45
    var _maybeSuppressMoreLogs = function (messagesLength) {
      // 46
      // Sometimes when running tests, we intentionally suppress logs on expected                                         // 47
      // printed errors. Since the current implementation of _throwOrLog can log                                          // 48
      // multiple separate log messages, suppress all of them if at least one suppress                                    // 49
      // is expected as we still want them to count as one.                                                               // 50
      if (typeof Meteor !== "undefined") {
        // 51
        if (Meteor._suppressed_log_expected()) {
          // 52
          Meteor._suppress_log(messagesLength - 1); // 53
        } // 54
      } // 55
    }; // 56
    // 57
    var _throwOrLog = function (from, e) {
      // 58
      if (throwFirstError) {
        // 59
        throw e; // 60
      } else {
        // 61
        var printArgs = ["Exception from Tracker " + from + " function:"]; // 62
        if (e.stack && e.message && e.name) {
          // 63
          var idx = e.stack.indexOf(e.message); // 64
          if (idx < 0 || idx > e.name.length + 2) {
            // check for "Error: "                                                // 65
            // message is not part of the stack                                                                           // 66
            var message = e.name + ": " + e.message; // 67
            printArgs.push(message); // 68
          } // 69
        } // 70
        printArgs.push(e.stack); // 71
        _maybeSuppressMoreLogs(printArgs.length); // 72
        // 73
        for (var i = 0; i < printArgs.length; i++) {
          // 74
          _debugFunc()(printArgs[i]); // 75
        } // 76
      } // 77
    }; // 78
    // 79
    // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`                                                  // 80
    // block if we are running on the server. On the client, returns the                                                  // 81
    // original function (since `Meteor._noYieldsAllowed` is a                                                            // 82
    // no-op). This has the benefit of not adding an unnecessary stack                                                    // 83
    // frame on the client.                                                                                               // 84
    var withNoYieldsAllowed = function (f) {
      // 85
      if (typeof Meteor === 'undefined' || Meteor.isClient) {
        // 86
        return f; // 87
      } else {
        // 88
        return function () {
          // 89
          var args = arguments; // 90
          Meteor._noYieldsAllowed(function () {
            // 91
            f.apply(null, args); // 92
          }); // 93
        }; // 94
      } // 95
    }; // 96
    // 97
    var nextId = 1; // 98
    // computations whose callbacks we should call at flush time                                                          // 99
    var pendingComputations = []; // 100
    // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now                                          // 101
    var willFlush = false; // 102
    // `true` if we are in Tracker.flush now                                                                              // 103
    var inFlush = false; // 104
    // `true` if we are computing a computation now, either first time                                                    // 105
    // or recompute.  This matches Tracker.active unless we are inside                                                    // 106
    // Tracker.nonreactive, which nullfies currentComputation even though                                                 // 107
    // an enclosing computation may still be running.                                                                     // 108
    var inCompute = false; // 109
    // `true` if the `_throwFirstError` option was passed in to the call                                                  // 110
    // to Tracker.flush that we are in. When set, throw rather than log the                                               // 111
    // first error encountered while flushing. Before throwing the error,                                                 // 112
    // finish flushing (from a finally block), logging any subsequent                                                     // 113
    // errors.                                                                                                            // 114
    var throwFirstError = false; // 115
    // 116
    var afterFlushCallbacks = []; // 117
    // 118
    var requireFlush = function () {
      // 119
      if (!willFlush) {
        // 120
        // We want this code to work without Meteor, see debugFunc above                                                  // 121
        if (typeof Meteor !== "undefined") // 122
          Meteor._setImmediate(Tracker._runFlush); // 123
        else // 124
          setTimeout(Tracker._runFlush, 0); // 125
        willFlush = true; // 126
      } // 127
    }; // 128
    // 129
    // Tracker.Computation constructor is visible but private                                                             // 130
    // (throws an error if you try to call it)                                                                            // 131
    var constructingComputation = false; // 132
    // 133
    //                                                                                                                    // 134
    // http://docs.meteor.com/#tracker_computation                                                                        // 135
    // 136
    /**                                                                                                                   // 137
     * @summary A Computation object represents code that is repeatedly rerun                                             // 138
     * in response to                                                                                                     // 139
     * reactive data changes. Computations don't have return values; they just                                            // 140
     * perform actions, such as rerendering a template on the screen. Computations                                        // 141
     * are created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 142
     * computation.                                                                                                       // 143
     * @instancename computation                                                                                          // 144
     */ // 145
    Tracker.Computation = function (f, parent, onError) {
      // 146
      if (!constructingComputation) // 147
        throw new Error( // 148
        "Tracker.Computation constructor is private; use Tracker.autorun"); // 149
      constructingComputation = false; // 150
      // 151
      var self = this; // 152
      // 153
      // http://docs.meteor.com/#computation_stopped                                                                      // 154
      // 155
      /**                                                                                                                 // 156
       * @summary True if this computation has been stopped.                                                              // 157
       * @locus Client                                                                                                    // 158
       * @memberOf Tracker.Computation                                                                                    // 159
       * @instance                                                                                                        // 160
       * @name  stopped                                                                                                   // 161
       */ // 162
      self.stopped = false; // 163
      // 164
      // http://docs.meteor.com/#computation_invalidated                                                                  // 165
      // 166
      /**                                                                                                                 // 167
       * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 168
       * @locus Client                                                                                                    // 169
       * @memberOf Tracker.Computation                                                                                    // 170
       * @instance                                                                                                        // 171
       * @name  invalidated                                                                                               // 172
       * @type {Boolean}                                                                                                  // 173
       */ // 174
      self.invalidated = false; // 175
      // 176
      // http://docs.meteor.com/#computation_firstrun                                                                     // 177
      // 178
      /**                                                                                                                 // 179
       * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
       * @locus Client                                                                                                    // 181
       * @memberOf Tracker.Computation                                                                                    // 182
       * @instance                                                                                                        // 183
       * @name  firstRun                                                                                                  // 184
       * @type {Boolean}                                                                                                  // 185
       */ // 186
      self.firstRun = true; // 187
      // 188
      self._id = nextId++; // 189
      self._onInvalidateCallbacks = []; // 190
      self._onStopCallbacks = []; // 191
      // the plan is at some point to use the parent relation                                                             // 192
      // to constrain the order that computations are processed                                                           // 193
      self._parent = parent; // 194
      self._func = f; // 195
      self._onError = onError; // 196
      self._recomputing = false; // 197
      // 198
      var errored = true; // 199
      try {
        // 200
        self._compute(); // 201
        errored = false; // 202
      } finally {
        // 203
        self.firstRun = false; // 204
        if (errored) // 205
          self.stop(); // 206
      } // 207
    }; // 208
    // 209
    // http://docs.meteor.com/#computation_oninvalidate                                                                   // 210
    // 211
    /**                                                                                                                   // 212
     * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
     * @locus Client                                                                                                      // 214
     * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
     */ // 216
    Tracker.Computation.prototype.onInvalidate = function (f) {
      // 217
      var self = this; // 218
      // 219
      if (typeof f !== 'function') // 220
        throw new Error("onInvalidate requires a function"); // 221
      // 222
      if (self.invalidated) {
        // 223
        Tracker.nonreactive(function () {
          // 224
          withNoYieldsAllowed(f)(self); // 225
        }); // 226
      } else {
        // 227
        self._onInvalidateCallbacks.push(f); // 228
      } // 229
    }; // 230
    // 231
    /**                                                                                                                   // 232
     * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
     * @locus Client                                                                                                      // 234
     * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
     */ // 236
    Tracker.Computation.prototype.onStop = function (f) {
      // 237
      var self = this; // 238
      // 239
      if (typeof f !== 'function') // 240
        throw new Error("onStop requires a function"); // 241
      // 242
      if (self.stopped) {
        // 243
        Tracker.nonreactive(function () {
          // 244
          withNoYieldsAllowed(f)(self); // 245
        }); // 246
      } else {
        // 247
        self._onStopCallbacks.push(f); // 248
      } // 249
    }; // 250
    // 251
    // http://docs.meteor.com/#computation_invalidate                                                                     // 252
    // 253
    /**                                                                                                                   // 254
     * @summary Invalidates this computation so that it will be rerun.                                                    // 255
     * @locus Client                                                                                                      // 256
     */ // 257
    Tracker.Computation.prototype.invalidate = function () {
      // 258
      var self = this; // 259
      if (!self.invalidated) {
        // 260
        // if we're currently in _recompute(), don't enqueue                                                              // 261
        // ourselves, since we'll rerun immediately anyway.                                                               // 262
        if (!self._recomputing && !self.stopped) {
          // 263
          requireFlush(); // 264
          pendingComputations.push(this); // 265
        } // 266
        // 267
        self.invalidated = true; // 268
        // 269
        // callbacks can't add callbacks, because                                                                         // 270
        // self.invalidated === true.                                                                                     // 271
        for (var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {
          // 272
          Tracker.nonreactive(function () {
            // 273
            withNoYieldsAllowed(f)(self); // 274
          }); // 275
        } // 276
        self._onInvalidateCallbacks = []; // 277
      } // 278
    }; // 279
    // 280
    // http://docs.meteor.com/#computation_stop                                                                           // 281
    // 282
    /**                                                                                                                   // 283
     * @summary Prevents this computation from rerunning.                                                                 // 284
     * @locus Client                                                                                                      // 285
     */ // 286
    Tracker.Computation.prototype.stop = function () {
      // 287
      var self = this; // 288
      // 289
      if (!self.stopped) {
        // 290
        self.stopped = true; // 291
        self.invalidate(); // 292
        for (var i = 0, f; f = self._onStopCallbacks[i]; i++) {
          // 293
          Tracker.nonreactive(function () {
            // 294
            withNoYieldsAllowed(f)(self); // 295
          }); // 296
        } // 297
        self._onStopCallbacks = []; // 298
      } // 299
    }; // 300
    // 301
    Tracker.Computation.prototype._compute = function () {
      // 302
      var self = this; // 303
      self.invalidated = false; // 304
      // 305
      var previous = Tracker.currentComputation; // 306
      setCurrentComputation(self); // 307
      var previousInCompute = inCompute; // 308
      inCompute = true; // 309
      try {
        // 310
        withNoYieldsAllowed(self._func)(self); // 311
      } finally {
        // 312
        setCurrentComputation(previous); // 313
        inCompute = previousInCompute; // 314
      } // 315
    }; // 316
    // 317
    Tracker.Computation.prototype._needsRecompute = function () {
      // 318
      var self = this; // 319
      return self.invalidated && !self.stopped; // 320
    }; // 321
    // 322
    Tracker.Computation.prototype._recompute = function () {
      // 323
      var self = this; // 324
      // 325
      self._recomputing = true; // 326
      try {
        // 327
        if (self._needsRecompute()) {
          // 328
          try {
            // 329
            self._compute(); // 330
          } catch (e) {
            // 331
            if (self._onError) {
              // 332
              self._onError(e); // 333
            } else {
              // 334
              _throwOrLog("recompute", e); // 335
            } // 336
          } // 337
        } // 338
      } finally {
        // 339
        self._recomputing = false; // 340
      } // 341
    }; // 342
    // 343
    /**                                                                                                                   // 344
     * @summary Process the reactive updates for this computation immediately                                             // 345
     * and ensure that the computation is rerun. The computation is rerun only                                            // 346
     * if it is invalidated.                                                                                              // 347
     * @locus Client                                                                                                      // 348
     */ // 349
    Tracker.Computation.prototype.flush = function () {
      // 350
      var self = this; // 351
      // 352
      if (self._recomputing) // 353
        return; // 354
      // 355
      self._recompute(); // 356
    }; // 357
    // 358
    /**                                                                                                                   // 359
     * @summary Causes the function inside this computation to run and                                                    // 360
     * synchronously process all reactive updtes.                                                                         // 361
     * @locus Client                                                                                                      // 362
     */ // 363
    Tracker.Computation.prototype.run = function () {
      // 364
      var self = this; // 365
      self.invalidate(); // 366
      self.flush(); // 367
    }; // 368
    // 369
    //                                                                                                                    // 370
    // http://docs.meteor.com/#tracker_dependency                                                                         // 371
    // 372
    /**                                                                                                                   // 373
     * @summary A Dependency represents an atomic unit of reactive data that a                                            // 374
     * computation might depend on. Reactive data sources such as Session or                                              // 375
     * Minimongo internally create different Dependency objects for different                                             // 376
     * pieces of data, each of which may be depended on by multiple computations.                                         // 377
     * When the data changes, the computations are invalidated.                                                           // 378
     * @class                                                                                                             // 379
     * @instanceName dependency                                                                                           // 380
     */ // 381
    Tracker.Dependency = function () {
      // 382
      this._dependentsById = {}; // 383
    }; // 384
    // 385
    // http://docs.meteor.com/#dependency_depend                                                                          // 386
    //                                                                                                                    // 387
    // Adds `computation` to this set if it is not already                                                                // 388
    // present.  Returns true if `computation` is a new member of the set.                                                // 389
    // If no argument, defaults to currentComputation, or does nothing                                                    // 390
    // if there is no currentComputation.                                                                                 // 391
    // 392
    /**                                                                                                                   // 393
     * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                                                                                                                          // 395
    If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 396
                                                                                                                          // 397
    Returns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 398
     * @locus Client                                                                                                      // 399
     * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
     * @returns {Boolean}                                                                                                 // 401
     */ // 402
    Tracker.Dependency.prototype.depend = function (computation) {
      // 403
      if (!computation) {
        // 404
        if (!Tracker.active) // 405
          return false; // 406
        // 407
        computation = Tracker.currentComputation; // 408
      } // 409
      var self = this; // 410
      var id = computation._id; // 411
      if (!(id in self._dependentsById)) {
        // 412
        self._dependentsById[id] = computation; // 413
        computation.onInvalidate(function () {
          // 414
          delete self._dependentsById[id]; // 415
        }); // 416
        return true; // 417
      } // 418
      return false; // 419
    }; // 420
    // 421
    // http://docs.meteor.com/#dependency_changed                                                                         // 422
    // 423
    /**                                                                                                                   // 424
     * @summary Invalidate all dependent computations immediately and remove them as dependents.                          // 425
     * @locus Client                                                                                                      // 426
     */ // 427
    Tracker.Dependency.prototype.changed = function () {
      // 428
      var self = this; // 429
      for (var id in self._dependentsById) // 430
      self._dependentsById[id].invalidate(); // 431
    }; // 432
    // 433
    // http://docs.meteor.com/#dependency_hasdependents                                                                   // 434
    // 435
    /**                                                                                                                   // 436
     * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
     * @locus Client                                                                                                      // 438
     * @returns {Boolean}                                                                                                 // 439
     */ // 440
    Tracker.Dependency.prototype.hasDependents = function () {
      // 441
      var self = this; // 442
      for (var id in self._dependentsById) // 443
      return true; // 444
      return false; // 445
    }; // 446
    // 447
    // http://docs.meteor.com/#tracker_flush                                                                              // 448
    // 449
    /**                                                                                                                   // 450
     * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 451
     * @locus Client                                                                                                      // 452
     */ // 453
    Tracker.flush = function (options) {
      // 454
      Tracker._runFlush({ finishSynchronously: true, // 455
        throwFirstError: options && options._throwFirstError }); // 456
    }; // 457
    // 458
    /**                                                                                                                   // 459
     * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
     * @locus Client                                                                                                      // 461
     * @returns {Boolean}                                                                                                 // 462
     */ // 463
    Tracker.inFlush = function () {
      // 464
      return inFlush; // 465
    }; // 466
    // 467
    // Run all pending computations and afterFlush callbacks.  If we were not called                                      // 468
    // directly via Tracker.flush, this may return before they're all done to allow                                       // 469
    // the event loop to run a little before continuing.                                                                  // 470
    Tracker._runFlush = function (options) {
      // 471
      // XXX What part of the comment below is still true? (We no longer                                                  // 472
      // have Spark)                                                                                                      // 473
      //                                                                                                                  // 474
      // Nested flush could plausibly happen if, say, a flush causes                                                      // 475
      // DOM mutation, which causes a "blur" event, which runs an                                                         // 476
      // app event handler that calls Tracker.flush.  At the moment                                                       // 477
      // Spark blocks event handlers during DOM mutation anyway,                                                          // 478
      // because the LiveRange tree isn't valid.  And we don't have                                                       // 479
      // any useful notion of a nested flush.                                                                             // 480
      //                                                                                                                  // 481
      // https://app.asana.com/0/159908330244/385138233856                                                                // 482
      if (Tracker.inFlush()) // 483
        throw new Error("Can't call Tracker.flush while flushing"); // 484
      // 485
      if (inCompute) // 486
        throw new Error("Can't flush inside Tracker.autorun"); // 487
      // 488
      options = options || {}; // 489
      // 490
      inFlush = true; // 491
      willFlush = true; // 492
      throwFirstError = !!options.throwFirstError; // 493
      // 494
      var recomputedCount = 0; // 495
      var finishedTry = false; // 496
      try {
        // 497
        while (pendingComputations.length || // 498
        afterFlushCallbacks.length) {
          // 499
          // 500
          // recompute all pending computations                                                                           // 501
          while (pendingComputations.length) {
            // 502
            var comp = pendingComputations.shift(); // 503
            comp._recompute(); // 504
            if (comp._needsRecompute()) {
              // 505
              pendingComputations.unshift(comp); // 506
            } // 507
            // 508
            if (!options.finishSynchronously && ++recomputedCount > 1000) {
              // 509
              finishedTry = true; // 510
              return; // 511
            } // 512
          } // 513
          // 514
          if (afterFlushCallbacks.length) {
            // 515
            // call one afterFlush callback, which may                                                                    // 516
            // invalidate more computations                                                                               // 517
            var func = afterFlushCallbacks.shift(); // 518
            try {
              // 519
              func(); // 520
            } catch (e) {
              // 521
              _throwOrLog("afterFlush", e); // 522
            } // 523
          } // 524
        } // 525
        finishedTry = true; // 526
      } finally {
        // 527
        if (!finishedTry) {
          // 528
          // we're erroring due to throwFirstError being true.                                                            // 529
          inFlush = false; // needed before calling `Tracker.flush()` again                                               // 530
          // finish flushing                                                                                              // 531
          Tracker._runFlush({ // 532
            finishSynchronously: options.finishSynchronously, // 533
            throwFirstError: false // 534
          }); // 535
        } // 536
        willFlush = false; // 537
        inFlush = false; // 538
        if (pendingComputations.length || afterFlushCallbacks.length) {
          // 539
          // We're yielding because we ran a bunch of computations and we aren't                                          // 540
          // required to finish synchronously, so we'd like to give the event loop a                                      // 541
          // chance. We should flush again soon.                                                                          // 542
          if (options.finishSynchronously) {
            // 543
            throw new Error("still have more to do?"); // shouldn't happen                                               // 544
          } // 545
          setTimeout(requireFlush, 10); // 546
        } // 547
      } // 548
    }; // 549
    // 550
    // http://docs.meteor.com/#tracker_autorun                                                                            // 551
    //                                                                                                                    // 552
    // Run f(). Record its dependencies. Rerun it whenever the                                                            // 553
    // dependencies change.                                                                                               // 554
    //                                                                                                                    // 555
    // Returns a new Computation, which is also passed to f.                                                              // 556
    //                                                                                                                    // 557
    // Links the computation to the current computation                                                                   // 558
    // so that it is stopped if the current computation is invalidated.                                                   // 559
    // 560
    /**                                                                                                                   // 561
     * @callback Tracker.ComputationFunction                                                                              // 562
     * @param {Tracker.Computation}                                                                                       // 563
     */ // 564
    /**                                                                                                                   // 565
     * @summary Run a function now and rerun it later whenever its dependencies                                           // 566
     * change. Returns a Computation object that can be used to stop or observe the                                       // 567
     * rerunning.                                                                                                         // 568
     * @locus Client                                                                                                      // 569
     * @param {Tracker.ComputationFunction} runFunc The function to run. It receives                                      // 570
     * one argument: the Computation object that will be returned.                                                        // 571
     * @param {Object} [options]                                                                                          // 572
     * @param {Function} options.onError Optional. The function to run when an error                                      // 573
     * happens in the Computation. The only argument it receives is the Error                                             // 574
     * thrown. Defaults to the error being logged to the console.                                                         // 575
     * @returns {Tracker.Computation}                                                                                     // 576
     */ // 577
    Tracker.autorun = function (f, options) {
      // 578
      if (typeof f !== 'function') // 579
        throw new Error('Tracker.autorun requires a function argument'); // 580
      // 581
      options = options || {}; // 582
      // 583
      constructingComputation = true; // 584
      var c = new Tracker.Computation( // 585
      f, Tracker.currentComputation, options.onError); // 586
      // 587
      if (Tracker.active) // 588
        Tracker.onInvalidate(function () {
          // 589
          c.stop(); // 590
        }); // 591
      // 592
      return c; // 593
    }; // 594
    // 595
    // http://docs.meteor.com/#tracker_nonreactive                                                                        // 596
    //                                                                                                                    // 597
    // Run `f` with no current computation, returning the return value                                                    // 598
    // of `f`.  Used to turn off reactivity for the duration of `f`,                                                      // 599
    // so that reactive data sources accessed by `f` will not result in any                                               // 600
    // computations being invalidated.                                                                                    // 601
    // 602
    /**                                                                                                                   // 603
     * @summary Run a function without tracking dependencies.                                                             // 604
     * @locus Client                                                                                                      // 605
     * @param {Function} func A function to call immediately.                                                             // 606
     */ // 607
    Tracker.nonreactive = function (f) {
      // 608
      var previous = Tracker.currentComputation; // 609
      setCurrentComputation(null); // 610
      try {
        // 611
        return f(); // 612
      } finally {
        // 613
        setCurrentComputation(previous); // 614
      } // 615
    }; // 616
    // 617
    // http://docs.meteor.com/#tracker_oninvalidate                                                                       // 618
    // 619
    /**                                                                                                                   // 620
     * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
     * @locus Client                                                                                                      // 622
     * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
     */ // 624
    Tracker.onInvalidate = function (f) {
      // 625
      if (!Tracker.active) // 626
        throw new Error("Tracker.onInvalidate requires a currentComputation"); // 627
      // 628
      Tracker.currentComputation.onInvalidate(f); // 629
    }; // 630
    // 631
    // http://docs.meteor.com/#tracker_afterflush                                                                         // 632
    // 633
    /**                                                                                                                   // 634
     * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
     * @locus Client                                                                                                      // 636
     * @param {Function} callback A function to call at flush time.                                                       // 637
     */ // 638
    Tracker.afterFlush = function (f) {
      // 639
      afterFlushCallbacks.push(f); // 640
      requireFlush(); // 641
    }; // 642
    // 643
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/deprecated.js                                                                                     //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Deprecated functions.                                                                                              // 1
    // 2
    // These functions used to be on the Meteor object (and worked slightly                                               // 3
    // differently).                                                                                                      // 4
    // XXX COMPAT WITH 0.5.7                                                                                              // 5
    Meteor.flush = Tracker.flush; // 6
    Meteor.autorun = Tracker.autorun; // 7
    // 8
    // We used to require a special "autosubscribe" call to reactively subscribe to                                       // 9
    // things. Now, it works with autorun.                                                                                // 10
    // XXX COMPAT WITH 0.5.4                                                                                              // 11
    Meteor.autosubscribe = Tracker.autorun; // 12
    // 13
    // This Tracker API briefly existed in 0.5.8 and 0.5.9                                                                // 14
    // XXX COMPAT WITH 0.5.9                                                                                              // 15
    Tracker.depend = function (d) {
      // 16
      return d.depend(); // 17
    }; // 18
    // 19
    Deps = Tracker; // 20
    // 21
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.tracker = {}, {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, makeInstallerOptions, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {
    // 1
    "use strict"; // 2
    // 3

    options = options || {}; // 4
    // 5
    // These file extensions will be appended to required module identifiers   // 6
    // if they do not exactly match an installed module.                       // 7
    var defaultExtensions = options.extensions || [".js", ".json"]; // 8
    // 9
    // If defined, the options.onInstall function will be called any time      // 10
    // new modules are installed.                                              // 11
    var onInstall = options.onInstall; // 12
    // 13
    // If defined, each module-specific require function will be passed to     // 14
    // this function, along with the module object of the parent module, and   // 15
    // the result will be used in place of the original require function.      // 16
    var wrapRequire = options.wrapRequire; // 17
    // 18
    // If defined, the options.override function will be called before         // 19
    // looking up any top-level package identifiers in node_modules            // 20
    // directories. It can either return a string to provide an alternate      // 21
    // package identifier, or a non-string value to prevent the lookup from    // 22
    // proceeding.                                                             // 23
    var override = options.override; // 24
    // 25
    // If defined, the options.fallback function will be called when no        // 26
    // installed module is found for a required module identifier. Often       // 27
    // options.fallback will be implemented in terms of the native Node        // 28
    // require function, which has the ability to load binary modules.         // 29
    var fallback = options.fallback; // 30
    // 31
    // List of fields to look for in package.json files to determine the       // 32
    // main entry module of the package. The first field listed here whose     // 33
    // value is a string will be used to resolve the entry module.             // 34
    var mainFields = options.mainFields || ( // 35
    // If options.mainFields is absent and options.browser is truthy,        // 36
    // package resolution will prefer the "browser" field of package.json    // 37
    // files to the "main" field. Note that this only supports               // 38
    // string-valued "browser" fields for now, though in the future it       // 39
    // might make sense to support the object version, a la browserify.      // 40
    options.browser ? ["browser", "main"] : ["main"]); // 41
    // 42
    // Called below as hasOwn.call(obj, key).                                  // 43
    var hasOwn = {}.hasOwnProperty; // 44
    // 45
    // Cache for looking up File objects given absolute module identifiers.    // 46
    // Invariants:                                                             // 47
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)          // 48
    //   filesByModuleId[module.id].module === module                          // 49
    var filesByModuleId = {}; // 50
    // 51
    // The file object representing the root directory of the installed        // 52
    // module tree.                                                            // 53
    var root = new File("/", new File("/..")); // 54
    var rootRequire = makeRequire(root); // 55
    // 56
    // Merges the given tree of directories and module factory functions       // 57
    // into the tree of installed modules and returns a require function       // 58
    // that behaves as if called from a module in the root directory.          // 59
    function install(tree, options) {
      // 60
      if (isObject(tree)) {
        // 61
        fileMergeContents(root, tree, options); // 62
        if (isFunction(onInstall)) {
          // 63
          onInstall(rootRequire); // 64
        } // 65
      } // 66
      return rootRequire; // 67
    } // 68
    // 69
    // Replace this function to enable Module.prototype.prefetch.              // 70
    install.fetch = function (ids) {
      // 71
      throw new Error("fetch not implemented"); // 72
    }; // 73
    // 74
    // This constructor will be used to instantiate the module objects         // 75
    // passed to module factory functions (i.e. the third argument after       // 76
    // require and exports), and is exposed as install.Module in case the      // 77
    // caller of makeInstaller wishes to modify Module.prototype.              // 78
    function Module(id) {
      // 79
      this.id = id; // 80
      // 81
      // The Node implementation of module.children unfortunately includes     // 82
      // only those child modules that were imported for the first time by     // 83
      // this parent module (i.e., child.parent === this).                     // 84
      this.children = []; // 85
      // 86
      // This object is an install.js extension that includes all child        // 87
      // modules imported by this module, even if this module is not the       // 88
      // first to import them.                                                 // 89
      this.childrenById = {}; // 90
    } // 91
    // 92
    Module.prototype.resolve = function (id) {
      // 93
      return this.require.resolve(id); // 94
    }; // 95
    // 96
    var resolvedPromise; // 97
    var lastPrefetchPromise; // 98
    // 99
    Module.prototype.prefetch = function (id) {
      // 100
      var _module = this; // 101
      var parentFile = getOwn(filesByModuleId, _module.id); // 102
      var missing; // Initialized to {} only if necessary.                     // 103
      // 104
      resolvedPromise = resolvedPromise || Promise.resolve(); // 105
      lastPrefetchPromise = lastPrefetchPromise || resolvedPromise; // 106
      var previousPromise = lastPrefetchPromise; // 107
      // 108
      function walk(_module2) {
        // 109
        var file = getOwn(filesByModuleId, _module2.id); // 110
        if (fileIsDynamic(file) && !file.pending) {
          // 111
          file.pending = true; // 112
          missing = missing || {}; // 113
          // 114
          // These are the data that will be exposed to the install.fetch      // 115
          // callback, so it's worth documenting each item with a comment.     // 116
          missing[_module2.id] = { // 117
            // The CommonJS module object that will be exposed to this         // 118
            // dynamic module when it is evaluated. Note that install.fetch    // 119
            // could decide to populate module.exports directly, instead of    // 120
            // fetching anything. In that case, install.fetch should omit      // 121
            // this module from the tree that it produces.                     // 122
            module: file.module, // 123
            // List of module identifier strings imported by this module.      // 124
            // Note that the missing object already contains all available     // 125
            // dependencies (including transitive dependencies), so            // 126
            // install.fetch should not need to traverse these dependencies    // 127
            // in most cases; however, they may be useful for other reasons.   // 128
            // Though the strings are unique, note that two different          // 129
            // strings could resolve to the same module.                       // 130
            deps: Object.keys(file.deps), // 131
            // The options (if any) that were passed as the second argument    // 132
            // to the install(tree, options) function when this stub was       // 133
            // first registered. Typically contains options.extensions, but    // 134
            // could contain any information appropriate for the entire tree   // 135
            // as originally installed. These options will be automatically    // 136
            // inherited by the newly fetched modules, so install.fetch        // 137
            // should not need to modify them.                                 // 138
            options: file.options, // 139
            // Any stub data included in the array notation from the           // 140
            // original entry for this dynamic module. Typically contains      // 141
            // "main" and/or "browser" fields for package.json files, and is   // 142
            // otherwise undefined.                                            // 143
            stub: file.stub // 144
          }; // 145
          // 146
          each(file.deps, function (parentId, id) {
            // 147
            fileResolve(file, id); // 148
          }); // 149
          // 150
          each(_module2.childrenById, walk); // 151
        } // 152
      } // 153
      // 154
      return lastPrefetchPromise = resolvedPromise.then(function () {
        // 155
        var absChildId = _module.resolve(id); // 156
        each(_module.childrenById, walk); // 157
        // 158
        return Promise.resolve( // 159
        // The install.fetch function takes an object mapping missing        // 160
        // dynamic module identifiers to options objects, and should         // 161
        // return a Promise that resolves to a module tree that can be       // 162
        // installed. As an optimization, if there were no missing dynamic   // 163
        // modules, then we can skip calling install.fetch entirely.         // 164
        missing && install.fetch(missing) // 165
        // 166
        ).then(function (tree) {
          // 167
          function both() {
            // 168
            if (tree) install(tree); // 169
            return absChildId; // 170
          } // 171
          // 172
          // Although we want multiple install.fetch calls to run in           // 173
          // parallel, it is important that the promises returned by           // 174
          // module.prefetch are resolved in the same order as the original    // 175
          // calls to module.prefetch, because previous fetches may include    // 176
          // modules assumed to exist by more recent module.prefetch calls.    // 177
          // Whether previousPromise was resolved or rejected, carry on with   // 178
          // the installation regardless.                                      // 179
          return previousPromise.then(both, both); // 180
        }); // 181
      }); // 182
    }; // 183
    // 184
    install.Module = Module; // 185
    // 186
    function getOwn(obj, key) {
      // 187
      return hasOwn.call(obj, key) && obj[key]; // 188
    } // 189
    // 190
    function isObject(value) {
      // 191
      return typeof value === "object" && value !== null; // 192
    } // 193
    // 194
    function isFunction(value) {
      // 195
      return typeof value === "function"; // 196
    } // 197
    // 198
    function isString(value) {
      // 199
      return typeof value === "string"; // 200
    } // 201
    // 202
    function makeMissingError(id) {
      // 203
      return new Error("Cannot find module '" + id + "'"); // 204
    } // 205
    // 206
    function makeRequire(file) {
      // 207
      function _require(id) {
        // 208
        var result = fileResolve(file, id); // 209
        if (result) {
          // 210
          return fileEvaluate(result, file.module); // 211
        } // 212
        // 213
        var error = makeMissingError(id); // 214
        // 215
        if (isFunction(fallback)) {
          // 216
          return fallback( // 217
          id, // The missing module identifier.                              // 218
          file.module.id, // The path of the requiring file.                 // 219
          error // The error we would have thrown.                           // 220
          ); // 221
        } // 222
        // 223
        throw error; // 224
      } // 225
      // 226
      if (isFunction(wrapRequire)) {
        // 227
        _require = wrapRequire(_require, file.module); // 228
      } // 229
      // 230
      _require.extensions = fileGetExtensions(file).slice(0); // 231
      // 232
      _require.resolve = function (id) {
        // 233
        var f = fileResolve(file, id); // 234
        if (f) return f.module.id; // 235
        var error = makeMissingError(id); // 236
        if (fallback && isFunction(fallback.resolve)) {
          // 237
          return fallback.resolve(id, file.module.id, error); // 238
        } // 239
        throw error; // 240
      }; // 241
      // 242
      return _require; // 243
    } // 244
    // 245
    // File objects represent either directories or modules that have been     // 246
    // installed. When a `File` respresents a directory, its `.contents`       // 247
    // property is an object containing the names of the files (or             // 248
    // directories) that it contains. When a `File` represents a module, its   // 249
    // `.contents` property is a function that can be invoked with the         // 250
    // appropriate `(require, exports, module)` arguments to evaluate the      // 251
    // module. If the `.contents` property is a string, that string will be    // 252
    // resolved as a module identifier, and the exports of the resulting       // 253
    // module will provide the exports of the original file. The `.parent`     // 254
    // property of a File is either a directory `File` or `null`. Note that    // 255
    // a child may claim another `File` as its parent even if the parent       // 256
    // does not have an entry for that child in its `.contents` object.        // 257
    // This is important for implementing anonymous files, and preventing      // 258
    // child modules from using `../relative/identifier` syntax to examine     // 259
    // unrelated modules.                                                      // 260
    function File(moduleId, parent) {
      // 261
      var file = this; // 262
      // 263
      // Link to the parent file.                                              // 264
      file.parent = parent = parent || null; // 265
      // 266
      // The module object for this File, which will eventually boast an       // 267
      // .exports property when/if the file is evaluated.                      // 268
      file.module = new Module(moduleId); // 269
      filesByModuleId[moduleId] = file; // 270
      // 271
      // The .contents of the file can be either (1) an object, if the file    // 272
      // represents a directory containing other files; (2) a factory          // 273
      // function, if the file represents a module that can be imported; (3)   // 274
      // a string, if the file is an alias for another file; or (4) null, if   // 275
      // the file's contents are not (yet) available.                          // 276
      file.contents = null; // 277
      // 278
      // Set of module identifiers imported by this module. Note that this     // 279
      // set is not necessarily complete, so don't rely on it unless you       // 280
      // know what you're doing.                                               // 281
      file.deps = {}; // 282
    } // 283
    // 284
    function fileEvaluate(file, parentModule) {
      // 285
      var _module3 = file.module; // 286
      if (!hasOwn.call(_module3, "exports")) {
        // 287
        var contents = file.contents; // 288
        if (!contents) {
          // 289
          // If this file was installed with array notation, and the array     // 290
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for     // 292
          // file.module.exports. This is particularly important for partial   // 293
          // package.json modules, so that the resolution logic can know the   // 294
          // value of the "main" and/or "browser" fields, at least, even if    // 295
          // the rest of the package.json file is not (yet) available.         // 296
          if (file.stub) {
            // 297
            return file.stub; // 298
          } // 299
          // 300
          throw makeMissingError(_module3.id); // 301
        } // 302
        // 303
        if (parentModule) {
          // 304
          _module3.parent = parentModule; // 305
          var children = parentModule.children; // 306
          if (Array.isArray(children)) {
            // 307
            children.push(_module3); // 308
          } // 309
        } // 310
        // 311
        // If a Module.prototype.useNode method is defined, give it a chance   // 312
        // to define module.exports based on module.id using Node.             // 313
        if (!isFunction(_module3.useNode) || // 314
        !_module3.useNode()) {
          // 315
          contents( // 316
          _module3.require = _module3.require || makeRequire(file), // 317
          // If the file had a .stub, reuse the same object for exports.     // 318
          _module3.exports = file.stub || {}, // 319
          _module3, // 320
          file.module.id, // 321
          file.parent.module.id // 322
          ); // 323
        } // 324
        // 325
        _module3.loaded = true; // 326
      } // 327
      // 328
      // The module.runModuleSetters method will be deprecated in favor of     // 329
      // just module.runSetters: https://github.com/benjamn/reify/pull/160     // 330
      var runSetters = _module3.runSetters || _module3.runModuleSetters; // 331
      if (isFunction(runSetters)) {
        // 332
        runSetters.call(_module3); // 333
      } // 334
      // 335
      return _module3.exports; // 336
    } // 337
    // 338
    function fileIsDirectory(file) {
      // 339
      return file && isObject(file.contents); // 340
    } // 341
    // 342
    function fileIsDynamic(file) {
      // 343
      return file && file.contents === null; // 344
    } // 345
    // 346
    function fileMergeContents(file, contents, options) {
      // 347
      if (Array.isArray(contents)) {
        // 348
        contents.forEach(function (item) {
          // 349
          if (isString(item)) {
            // 350
            file.deps[item] = file.module.id; // 351
          } else if (isFunction(item)) {
            // 352
            contents = item; // 353
          } else if (isObject(item)) {
            // 354
            file.stub = file.stub || {}; // 355
            each(item, function (value, key) {
              // 356
              file.stub[key] = value; // 357
            }); // 358
          } // 359
        }); // 360
        // 361
        if (!isFunction(contents)) {
          // 362
          // If the array did not contain a function, merge nothing.           // 363
          contents = null; // 364
        } // 365
        // 366
      } else if (!isFunction(contents) && // 367
      !isString(contents) && // 368
      !isObject(contents)) {
        // 369
        // If contents is neither an array nor a function nor a string nor     // 370
        // an object, just give up and merge nothing.                          // 371
        contents = null; // 372
      } // 373
      // 374
      if (contents) {
        // 375
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          // 377
          each(contents, function (value, key) {
            // 378
            if (key === "..") {
              // 379
              child = file.parent; // 380
              // 381
            } else {
              // 382
              var child = getOwn(file.contents, key); // 383
              // 384
              if (!child) {
                // 385
                child = file.contents[key] = new File( // 386
                file.module.id.replace(/\/*$/, "/") + key, // 387
                file // 388
                ); // 389
                // 390
                child.options = options; // 391
              } // 392
            } // 393
            // 394
            fileMergeContents(child, value, options); // 395
          }); // 396
        } // 397
      } // 398
    } // 399
    // 400
    function each(obj, callback, context) {
      // 401
      Object.keys(obj).forEach(function (key) {
        // 402
        callback.call(this, obj[key], key); // 403
      }, context); // 404
    } // 405
    // 406
    function fileGetExtensions(file) {
      // 407
      return file.options // 408
      && file.options.extensions // 409
      || defaultExtensions; // 410
    } // 411
    // 412
    function fileAppendIdPart(file, part, extensions) {
      // 413
      // Always append relative to a directory.                                // 414
      while (file && !fileIsDirectory(file)) {
        // 415
        file = file.parent; // 416
      } // 417
      // 418
      if (!file || !part || part === ".") {
        // 419
        return file; // 420
      } // 421
      // 422
      if (part === "..") {
        // 423
        return file.parent; // 424
      } // 425
      // 426
      var exactChild = getOwn(file.contents, part); // 427
      // 428
      // Only consider multiple file extensions if this part is the last       // 429
      // part of a module identifier and not equal to `.` or `..`, and there   // 430
      // was no exact match or the exact match was a directory.                // 431
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        // 432
        for (var e = 0; e < extensions.length; ++e) {
          // 433
          var child = getOwn(file.contents, part + extensions[e]); // 434
          if (child && !fileIsDirectory(child)) {
            // 435
            return child; // 436
          } // 437
        } // 438
      } // 439
      // 440
      return exactChild; // 441
    } // 442
    // 443
    function fileAppendId(file, id, extensions) {
      // 444
      var parts = id.split("/"); // 445
      // 446
      // Use `Array.prototype.every` to terminate iteration early if           // 447
      // `fileAppendIdPart` returns a falsy value.                             // 448
      parts.every(function (part, i) {
        // 449
        return file = i < parts.length - 1 // 450
        ? fileAppendIdPart(file, part) // 451
        : fileAppendIdPart(file, part, extensions); // 452
      }); // 453
      // 454
      return file; // 455
    } // 456
    // 457
    function recordChild(parentModule, childFile) {
      // 458
      var childModule = childFile && childFile.module; // 459
      if (parentModule && childModule) {
        // 460
        parentModule.childrenById[childModule.id] = childModule; // 461
      } // 462
    } // 463
    // 464
    function fileResolve(file, id, parentModule, seenDirFiles) {
      // 465
      var parentModule = parentModule || file.module; // 466
      var extensions = fileGetExtensions(file); // 467
      // 468
      file = // 469
      // Absolute module identifiers (i.e. those that begin with a `/`       // 470
      // character) are interpreted relative to the root directory, which    // 471
      // is a slight deviation from Node, which has access to the entire     // 472
      // file system.                                                        // 473
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) : // 474
      // Relative module identifiers are interpreted relative to the         // 475
      // current file, naturally.                                            // 476
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) : // 477
      // Top-level module identifiers are interpreted as referring to        // 478
      // packages in `node_modules` directories.                             // 479
      nodeModulesLookup(file, id, extensions); // 480
      // 481
      // If the identifier resolves to a directory, we use the same logic as   // 482
      // Node to find an `index.js` or `package.json` file to evaluate.        // 483
      while (fileIsDirectory(file)) {
        // 484
        seenDirFiles = seenDirFiles || []; // 485
        // 486
        // If the "main" field of a `package.json` file resolves to a          // 487
        // directory we've already considered, then we should not attempt to   // 488
        // read the same `package.json` file again. Using an array as a set    // 489
        // is acceptable here because the number of directories to consider    // 490
        // is rarely greater than 1 or 2. Also, using indexOf allows us to     // 491
        // store File objects instead of strings.                              // 492
        if (seenDirFiles.indexOf(file) < 0) {
          // 493
          seenDirFiles.push(file); // 494
          // 495
          var pkgJsonFile = fileAppendIdPart(file, "package.json"),
              main; // 496
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule); // 497
          if (pkg && // 498
          mainFields.some(function (name) {
            // 499
            return isString(main = pkg[name]); // 500
          })) {
            // 501
            recordChild(parentModule, pkgJsonFile); // 502
            // 503
            // The "main" field of package.json does not have to begin with    // 504
            // ./ to be considered relative, so first we try simply            // 505
            // appending it to the directory path before falling back to a     // 506
            // full fileResolve, which might return a package from a           // 507
            // node_modules directory.                                         // 508
            file = fileAppendId(file, main, extensions) || // 509
            fileResolve(file, main, parentModule, seenDirFiles); // 510
            // 511
            if (file) {
              // 512
              // The fileAppendId call above may have returned a directory,    // 513
              // so continue the loop to make sure we resolve it to a          // 514
              // non-directory file.                                           // 515
              continue; // 516
            } // 517
          } // 518
        } // 519
        // 520
        // If we didn't find a `package.json` file, or it didn't have a        // 521
        // resolvable `.main` property, the only possibility left to           // 522
        // consider is that this directory contains an `index.js` module.      // 523
        // This assignment almost always terminates the while loop, because    // 524
        // there's very little chance `fileIsDirectory(file)` will be true     // 525
        // for the result of `fileAppendIdPart(file, "index.js")`. However,    // 526
        // in principle it is remotely possible that a file called             // 527
        // `index.js` could be a directory instead of a file.                  // 528
        file = fileAppendIdPart(file, "index.js"); // 529
      } // 530
      // 531
      if (file && isString(file.contents)) {
        // 532
        file = fileResolve(file, file.contents, parentModule, seenDirFiles); // 533
      } // 534
      // 535
      recordChild(parentModule, file); // 536
      // 537
      return file; // 538
    }; // 539
    // 540
    function nodeModulesLookup(file, id, extensions) {
      // 541
      if (isFunction(override)) {
        // 542
        id = override(id, file.module.id); // 543
      } // 544
      // 545
      if (isString(id)) {
        // 546
        for (var resolved; file && !resolved; file = file.parent) {
          // 547
          resolved = fileIsDirectory(file) && // 548
          fileAppendId(file, "node_modules/" + id, extensions); // 549
        } // 550
        // 551
        return resolved; // 552
      } // 553
    } // 554
    // 555
    return install; // 556
  }; // 557
  // 558
  if (typeof exports === "object") {
    // 559
    exports.makeInstaller = makeInstaller; // 560
  } // 561
  // 562
  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/options.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    makeInstallerOptions = {}; // 1
    // 2
    if (typeof Profile === "function" && // 3
    process.env.METEOR_PROFILE) {
      // 4
      makeInstallerOptions.wrapRequire = function (require) {
        // 5
        return Profile(function (id) {
          // 6
          return "require(" + JSON.stringify(id) + ")"; // 7
        }, require); // 8
      }; // 9
    } // 10
    // 11
    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/client.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    // On the client, make package resolution prefer the "browser" field of      // 1
    // package.json files to the "main" field.                                   // 2
    makeInstallerOptions.browser = true; // 3
    // 4
    meteorInstall = makeInstaller(makeInstallerOptions); // 5
    // 6
    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['modules-runtime'] = {}, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  /* Package-scope variables */
  var process;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/client.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js"); // 1
            _require("./stubs.js"); // 2
            _require("./process.js"); // 3
            _require("./reify.js"); // 4
            // 5
            _exports.addStyles = _require("./css").addStyles; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function (_require3, _exports3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/css.js                                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document; // 1
            var head = doc.getElementsByTagName("head").item(0); // 2
            // 3
            _exports3.addStyles = function (css) {
              // 4
              var style = doc.createElement("style"); // 5
              // 6
              style.setAttribute("type", "text/css"); // 7
              // 8
              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
              var internetExplorerSheetObject = // 10
              style.sheet || // Edge/IE11.                                                                                       // 11
              style.styleSheet; // Older IEs.                                                                                    // 12
              // 13
              if (internetExplorerSheetObject) {
                // 14
                internetExplorerSheetObject.cssText = css; // 15
              } else {
                // 16
                style.appendChild(doc.createTextNode(css)); // 17
              } // 18
              // 19
              return head.appendChild(style); // 20
            }; // 21
            // 22
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function (_require4, _exports4, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/install-packages.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              // 1
              var meteorDir = {}; // 2
              // 3
              // Given a package name <name>, install a stub module in the                                                         // 4
              // /node_modules/meteor directory called <name>.js, so that                                                          // 5
              // require.resolve("meteor/<name>") will always return                                                               // 6
              // /node_modules/meteor/<name>.js instead of something like                                                          // 7
              // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
              // that the package contains a file called index.js (#6590).                                                         // 9
              // 10
              if (typeof mainModule === "string") {
                // 11
                // Set up an alias from /node_modules/meteor/<package>.js to the main                                              // 12
                // module, e.g. meteor/<package>/index.js.                                                                         // 13
                meteorDir[name + ".js"] = mainModule; // 14
              } else {
                // 15
                // back compat with old Meteor packages                                                                            // 16
                meteorDir[name + ".js"] = function (r, e, _module2) {
                  // 17
                  _module2.exports = Package[name]; // 18
                }; // 19
              } // 20
              // 21
              meteorInstall({ // 22
                node_modules: { // 23
                  meteor: meteorDir // 24
                  // 25
                } }); // 26
            } // 27
            // 28
            // This file will be modified during computeJsOutputFilesMap to include                                                // 29
            // install(<name>) calls for every Meteor package.                                                                     // 30
            // 31
            install("underscore"); // 32
            install("meteor"); // 33
            install("meteor-base"); // 34
            install("mobile-experience"); // 35
            install("babel-compiler"); // 36
            install("ecmascript"); // 37
            install("base64"); // 38
            install("ejson"); // 39
            install("id-map"); // 40
            install("ordered-dict"); // 41
            install("tracker"); // 42
            install("modules-runtime"); // 43
            install("modules", "meteor/modules/client.js"); // 44
            install("ecmascript-runtime"); // 45
            install("es5-shim", "meteor/es5-shim/client.js"); // 46
            install("promise", "meteor/promise/client.js"); // 47
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js"); // 48
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/runtime.js"); // 49
            install("random"); // 50
            install("mongo-id"); // 51
            install("diff-sequence"); // 52
            install("geojson-utils", "meteor/geojson-utils/main.js"); // 53
            install("minimongo"); // 54
            install("check", "meteor/check/match.js"); // 55
            install("retry"); // 56
            install("ddp-common"); // 57
            install("reload"); // 58
            install("ddp-client", "meteor/ddp-client/namespace.js"); // 59
            install("ddp"); // 60
            install("ddp-server"); // 61
            install("allow-deny"); // 62
            install("insecure"); // 63
            install("mongo"); // 64
            install("blaze-html-templates"); // 65
            install("reactive-var"); // 66
            install("standard-minifier-css"); // 67
            install("standard-minifier-js"); // 68
            install("shell-server"); // 69
            install("autopublish"); // 70
            install("barbatus:typescript-compiler"); // 71
            install("barbatus:typescript"); // 72
            install("webapp"); // 73
            install("livedata"); // 74
            install("dynamic-import", "meteor/dynamic-import/client.js"); // 75
            install("hot-code-push"); // 76
            install("jquery", "meteor/jquery/main.js"); // 77
            install("observe-sequence"); // 78
            install("deps"); // 79
            install("htmljs"); // 80
            install("blaze"); // 81
            install("spacebars"); // 82
            install("templating-compiler"); // 83
            install("templating-runtime"); // 84
            install("templating"); // 85
            install("launch-screen"); // 86
            install("ui"); // 87
            install("barbatus:typescript-runtime"); // 88
            install("autoupdate"); // 89
            // 90
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function (_require5, _exports5, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/process.js                                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              // 1
              // The application can run `npm install process` to provide its own                                                  // 2
              // process stub; otherwise this module will provide a partial stub.                                                  // 3
              process = global.process || _require5("process"); // 4
            } catch (noProcess) {
              // 5
              process = {}; // 6
            } // 7
            // 8
            if (Meteor.isServer) {
              // 9
              // Make require("process") work on the server in all versions of Node.                                               // 10
              meteorInstall({ // 11
                node_modules: { // 12
                  "process.js": function (r, e, _module4) {
                    // 13
                    _module4.exports = process; // 14
                  } // 15
                  // 16
                } }); // 17
            } else {
              // 18
              process.platform = "browser"; // 19
              process.nextTick = process.nextTick || Meteor._setImmediate; // 20
            } // 21
            // 22
            if (typeof process.env !== "object") {
              // 23
              process.env = {}; // 24
            } // 25
            // 26
            var hasOwn = Object.prototype.hasOwnProperty; // 27
            for (var key in meteorEnv) {
              // 28
              if (hasOwn.call(meteorEnv, key)) {
                // 29
                process.env[key] = meteorEnv[key]; // 30
              } // 31
            } // 32
            // 33
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/reify.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module5.constructor; // 1
            var Mp = Module.prototype; // 2
            _require6("reify/lib/runtime").enable(Mp); // 3
            Mp.importSync = Mp.importSync || Mp.import; // 4
            Mp.import = Mp.import || Mp.importSync; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function (_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/stubs.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false; // 1
            try {
              // 2
              _require7.resolve("meteor-node-stubs"); // 3
              haveStubs = true; // 4
            } catch (noStubs) {} // 5
            // 6
            if (haveStubs) {
              // 7
              // When meteor-node-stubs is installed in the application's root                                                     // 8
              // node_modules directory, requiring it here installs aliases for stubs                                              // 9
              // for all Node built-in modules, such as fs, util, and http.                                                        // 10
              _require7("meteor-node-stubs"); // 11
            } // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function (_require8, _exports7, _module6) {

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                                                                                                     //
                    // node_modules/meteor/modules/node_modules/reify/lib/runtime/index.js                                                 //
                    //                                                                                                                     //
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //
                    "use strict"; // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7

                    var utils = _require8("./utils.js"); // 8
                    var Entry = _require8("./entry.js"); // 9
                    // 10
                    // The exports.enable method can be used to enable the Reify runtime for                                               // 11
                    // specific module objects, or for Module.prototype (where implemented),                                               // 12
                    // to make the runtime available throughout the entire module system.                                                  // 13
                    _exports7.enable = function (mod) {
                      // 14
                      if (typeof mod.export !== "function" || // 15
                      typeof mod.importSync !== "function") {
                        // 16
                        mod.export = moduleExport; // 17
                        mod.exportDefault = moduleExportDefault; // 18
                        mod.runSetters = runSetters; // 19
                        mod.watch = moduleWatch; // 20
                        // 21
                        // Used for copying the properties of a namespace object to                                                        // 22
                        // mod.exports to implement `export * from "module"` syntax.                                                       // 23
                        mod.makeNsSetter = moduleMakeNsSetter; // 24
                        // 25
                        // To be deprecated:                                                                                               // 26
                        mod.runModuleSetters = runSetters; // 27
                        mod.importSync = importSync; // 28
                        // 29
                        return true; // 30
                      } // 31
                      // 32
                      return false; // 33
                    }; // 34
                    // 35
                    function moduleWatch(exported, setters, key) {
                      // 36
                      utils.setESModule(this.exports); // 37
                      Entry.getOrCreate(this.exports, this); // 38
                      // 39
                      if (utils.isObject(setters)) {
                        // 40
                        Entry.getOrCreate(exported).addSetters(this, setters, key); // 41
                      } // 42
                    } // 43
                    // 44
                    // If key is provided, it will be used to identify the given setters so                                                // 45
                    // that they can be replaced if module.importSync is called again with the                                             // 46
                    // same key. This avoids potential memory leaks from import declarations                                               // 47
                    // inside loops. The compiler generates these keys automatically (and                                                  // 48
                    // deterministically) when compiling nested import declarations.                                                       // 49
                    function importSync(id, setters, key) {
                      // 50
                      return this.watch(this.require(id), setters, key); // 51
                    } // 52
                    // 53
                    // Register getter functions for local variables in the scope of an export                                             // 54
                    // statement. Pass true as the second argument to indicate that the getter                                             // 55
                    // functions always return the same values.                                                                            // 56
                    function moduleExport(getters, constant) {
                      // 57
                      utils.setESModule(this.exports); // 58
                      var entry = Entry.getOrCreate(this.exports, this); // 59
                      entry.addGetters(getters, constant); // 60
                      if (this.loaded) {
                        // 61
                        // If the module has already been evaluated, then we need to trigger                                               // 62
                        // another round of entry.runSetters calls, which begins by calling                                                // 63
                        // entry.runModuleGetters(module).                                                                                 // 64
                        entry.runSetters(); // 65
                      } // 66
                    } // 67
                    // 68
                    // Register a getter function that always returns the given value.                                                     // 69
                    function moduleExportDefault(value) {
                      // 70
                      return this.export({ // 71
                        default: function () {
                          // 72
                          return value; // 73
                        } // 74
                      }, true); // 75
                    } // 76
                    // 77
                    // Platform-specific code should find a way to call this method whenever                                               // 78
                    // the module system is about to return module.exports from require. This                                              // 79
                    // might happen more than once per module, in case of dependency cycles,                                               // 80
                    // so we want Module.prototype.runSetters to run each time.                                                            // 81
                    function runSetters(valueToPassThrough) {
                      // 82
                      var entry = Entry.get(this.exports); // 83
                      if (entry !== null) {
                        // 84
                        entry.runSetters(); // 85
                      } // 86
                      // 87
                      if (this.loaded) {
                        // 88
                        // If this module has finished loading, then we must create an Entry                                               // 89
                        // object here, so that we can add this module to entry.ownerModules                                               // 90
                        // by passing it as the second argument to Entry.getOrCreate.                                                      // 91
                        Entry.getOrCreate(this.exports, this); // 92
                      } // 93
                      // 94
                      // Assignments to exported local variables get wrapped with calls to                                                 // 95
                      // module.runSetters, so module.runSetters returns the                                                               // 96
                      // valueToPassThrough parameter to allow the value of the original                                                   // 97
                      // expression to pass through. For example,                                                                          // 98
                      //                                                                                                                   // 99
                      //   export var a = 1;                                                                                               // 100
                      //   console.log(a += 3);                                                                                            // 101
                      //                                                                                                                   // 102
                      // becomes                                                                                                           // 103
                      //                                                                                                                   // 104
                      //   module.export("a", () => a);                                                                                    // 105
                      //   var a = 1;                                                                                                      // 106
                      //   console.log(module.runSetters(a += 3));                                                                         // 107
                      //                                                                                                                   // 108
                      // This ensures module.runSetters runs immediately after the assignment,                                             // 109
                      // and does not interfere with the larger computation.                                                               // 110
                      return valueToPassThrough; // 111
                    } // 112
                    // 113
                    // Returns a function that takes a namespace object and copies the                                                     // 114
                    // properties of the namespace to module.exports, which is useful for                                                  // 115
                    // implementing `export * from "module"` syntax.                                                                       // 116
                    function moduleMakeNsSetter() {
                      // 117
                      var _module7 = this; // 118
                      return function (namespace) {
                        // 119
                        utils.assign(_module7.exports, namespace); // 120
                      }; // 121
                    } // 122
                    // 123
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function (_require9, _exports8, _module8) {

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                                                                                                     //
                    // node_modules/meteor/modules/node_modules/reify/lib/runtime/utils.js                                                 //
                    //                                                                                                                     //
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //
                    "use strict"; // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7

                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function"; // 8
                    var useSymbol = typeof Symbol === "function"; // 9
                    // 10
                    var esStrKey = "__esModule"; // 11
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null; // 12
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol"; // 13
                    var useGetOwnPropDesc = // 14
                    typeof Object.getOwnPropertyDescriptor === "function"; // 15
                    var hasOwn = Object.prototype.hasOwnProperty; // 16
                    // 17
                    _exports8.assign = function (target) {
                      // 18
                      var argCount = arguments.length; // 19
                      var sourcesByKey = Object.create(null); // 20
                      // 21
                      for (var i = 0; i < argCount; ++i) {
                        // 22
                        var source = arguments[i]; // 23
                        if (isObjectLike(source)) {
                          // 24
                          Object.keys(source).forEach(function (key) {
                            // 25
                            sourcesByKey[key] = source; // 26
                          }); // 27
                        } // 28
                      } // 29
                      // 30
                      Object.keys(sourcesByKey).forEach(function (key) {
                        // 31
                        copyKey(key, target, sourcesByKey[key]); // 32
                      }); // 33
                      // 34
                      return target; // 35
                    }; // 36
                    // 37
                    function copyKey(key, target, source) {
                      // 38
                      if (useGetOwnPropDesc) {
                        // 39
                        var desc = Object.getOwnPropertyDescriptor(source, key); // 40
                        desc.configurable = true; // Allow redefinition.                                                                   // 41
                        Object.defineProperty(target, key, desc); // 42
                      } else {
                        // 43
                        target[key] = source[key]; // 44
                      } // 45
                    } // 46
                    // 47
                    _exports8.copyKey = copyKey; // 48
                    // 49
                    function getESModule(exported) {
                      // 50
                      if (isObjectLike(exported)) {
                        // 51
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          // 52
                          return !!exported[esSymKey]; // 53
                        } // 54
                        // 55
                        if (hasOwn.call(exported, esStrKey)) {
                          // 56
                          return !!exported[esStrKey]; // 57
                        } // 58
                      } // 59
                      // 60
                      return false; // 61
                    } // 62
                    // 63
                    _exports8.getESModule = getESModule; // 64
                    // 65
                    function setESModule(exported) {
                      // 66
                      if (isObjectLike(exported)) {
                        // 67
                        if (useSymbol) {
                          // 68
                          exported[esSymKey] = true; // 69
                        } else {
                          // 70
                          Object.defineProperty(exported, esStrKey, { // 71
                            configurable: true, // 72
                            enumerable: false, // 73
                            value: true, // 74
                            writable: false // 75
                          }); // 76
                        } // 77
                      } // 78
                    } // 79
                    // 80
                    _exports8.setESModule = setESModule; // 81
                    // 82
                    function isObject(value) {
                      // 83
                      return typeof value === "object" && value !== null; // 84
                    } // 85
                    // 86
                    _exports8.isObject = isObject; // 87
                    // 88
                    function isObjectLike(value) {
                      // 89
                      var type = typeof value; // 90
                      return type === "function" || type === "object" && value !== null; // 91
                    } // 92
                    // 93
                    _exports8.isObjectLike = isObjectLike; // 94
                    // 95
                    function createNamespace() {
                      // 96
                      var namespace = Object.create(null); // 97
                      // 98
                      if (useToStringTag) {
                        // 99
                        Object.defineProperty(namespace, Symbol.toStringTag, { // 100
                          value: "Module", // 101
                          configurable: false, // 102
                          enumerable: false, // 103
                          writable: false // 104
                        }); // 105
                      } // 106
                      // 107
                      setESModule(namespace); // 108
                      // 109
                      return namespace; // 110
                    } // 111
                    // 112
                    _exports8.createNamespace = createNamespace; // 113
                    // 114
                    function setPrototypeOf(object, proto) {
                      // 115
                      if (useSetPrototypeOf) {
                        // 116
                        Object.setPrototypeOf(object, proto); // 117
                      } else {
                        // 118
                        object.__proto__ = proto; // 119
                      } // 120
                      return object; // 121
                    } // 122
                    // 123
                    _exports8.setPrototypeOf = setPrototypeOf; // 124
                    // 125
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function (_require10, _exports9, _module9) {

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                                                                                                     //
                    // node_modules/meteor/modules/node_modules/reify/lib/runtime/entry.js                                                 //
                    //                                                                                                                     //
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //
                    "use strict"; // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7

                    var utils = _require10("./utils.js"); // 8
                    // 9
                    var GETTER_ERROR = {}; // 10
                    var NAN = {}; // 11
                    var UNDEFINED = {}; // 12
                    var hasOwn = Object.prototype.hasOwnProperty; // 13
                    var keySalt = 0; // 14
                    // 15
                    function Entry(exported) {
                      // 16
                      // The module.exports of the module this Entry is managing.                                                          // 17
                      this.exports = exported; // 18
                      // Getters for local variables exported from the managed module.                                                     // 19
                      this.getters = Object.create(null); // 20
                      // Setters for assigning to local variables in parent modules.                                                       // 21
                      this.setters = Object.create(null); // 22
                      // The normalized namespace object that importers receive when they use                                              // 23
                      // `import * as namespace from "..."` syntax.                                                                        // 24
                      this.namespace = utils.createNamespace(); // 25
                      // Map from module.id string to module object for each module this Entry                                             // 26
                      // is managing.                                                                                                      // 27
                      this.ownerModules = Object.create(null); // 28
                      // Boolean indicating whether all the modules this Entry is managing                                                 // 29
                      // have finished loading yet. Call entry.hasLoaded() to compute.                                                     // 30
                      this._loaded = false; // 31
                    } // 32
                    // 33
                    var Ep = utils.setPrototypeOf(Entry.prototype, null); // 34
                    // 35
                    var weakEntryMap = typeof WeakMap === "function" // 36
                    ? new WeakMap() // 37
                    : new function FakeWeakMap() {
                      // 38
                      // A barely functional WeakMap polyfill, just in case. This                                                        // 39
                      // implementation needs to be logically correct only in the specific                                               // 40
                      // ways that the Entry class uses it. It isn't even "weak" in the                                                  // 41
                      // garbage-collection sense of the word, but that's fine.                                                          // 42
                      var keys = []; // 43
                      var values = []; // 44
                      // 45
                      this.get = function (obj) {
                        // 46
                        var index = keys.indexOf(obj); // 47
                        if (index >= 0) {
                          // 48
                          return values[index]; // 49
                        } // 50
                      }; // 51
                      // 52
                      this.set = function (obj, value) {
                        // 53
                        var index = keys.indexOf(obj); // 54
                        if (index >= 0) {
                          // 55
                          values[index] = value; // 56
                        } else {
                          // 57
                          keys.push(obj); // 58
                          values.push(value); // 59
                        } // 60
                      }; // 61
                    }(); // 62
                    // 63
                    Entry.get = function (exported) {
                      // 64
                      if (utils.isObjectLike(exported)) {
                        // 65
                        var entry = weakEntryMap.get(exported); // 66
                        if (entry !== void 0) {
                          // 67
                          return entry; // 68
                        } // 69
                      } // 70
                      return null; // 71
                    }; // 72
                    // 73
                    Entry.getOrCreate = function (exported, mod) {
                      // 74
                      var entry = getOrCreate(exported); // 75
                      // 76
                      if (utils.isObject(mod)) {
                        // 77
                        entry.ownerModules[mod.id] = mod; // 78
                      } // 79
                      // 80
                      return entry; // 81
                    }; // 82
                    // 83
                    function getOrCreate(exported) {
                      // 84
                      if (!utils.isObjectLike(exported)) {
                        // 85
                        // In case the child module modified module.exports, create a temporary                                            // 86
                        // Entry object so that we can call the entry.addSetters method once,                                              // 87
                        // which will trigger entry.runSetters(names), so that module.importSync                                           // 88
                        // behaves as expected.                                                                                            // 89
                        return new Entry(exported); // 90
                      } // 91
                      // 92
                      var entry = weakEntryMap.get(exported); // 93
                      if (entry !== void 0) {
                        // 94
                        return entry; // 95
                      } // 96
                      // 97
                      var entry = new Entry(exported); // 98
                      weakEntryMap.set(exported, entry); // 99
                      return entry; // 100
                    }; // 101
                    // 102
                    function safeKeys(obj) {
                      // 103
                      var keys = Object.keys(obj); // 104
                      var esModuleIndex = keys.indexOf("__esModule"); // 105
                      if (esModuleIndex >= 0) {
                        // 106
                        keys.splice(esModuleIndex, 1); // 107
                      } // 108
                      return keys; // 109
                    } // 110
                    // 111
                    Ep.addGetters = function (getters, constant) {
                      // 112
                      var names = safeKeys(getters); // 113
                      var nameCount = names.length; // 114
                      constant = !!constant; // 115
                      // 116
                      for (var i = 0; i < nameCount; ++i) {
                        // 117
                        var name = names[i]; // 118
                        var getter = getters[name]; // 119
                        // 120
                        if (typeof getter === "function" && // 121
                        // Should this throw if this.getters[name] exists?                                                             // 122
                        !(name in this.getters)) {
                          // 123
                          this.getters[name] = getter; // 124
                          getter.constant = constant; // 125
                          getter.runCount = 0; // 126
                        } // 127
                      } // 128
                    }; // 129
                    // 130
                    Ep.addSetters = function (parent, setters, key) {
                      // 131
                      var names = safeKeys(setters); // 132
                      var nameCount = names.length; // 133
                      // 134
                      if (!nameCount) {
                        // 135
                        return; // 136
                      } // 137
                      // 138
                      // If no key is provided, make a unique key. Otherwise, make sure the key is                                         // 139
                      // distinct from keys provided by other parent modules.                                                              // 140
                      key = key === void 0 // 141
                      ? makeUniqueKey() // 142
                      : parent.id + ":" + key; // 143
                      // 144
                      for (var i = 0; i < nameCount; ++i) {
                        // 145
                        var name = names[i]; // 146
                        var setter = setters[name]; // 147
                        // 148
                        if (typeof setter === "function") {
                          // 149
                          setter.parent = parent; // 150
                          if (!(name in this.setters)) {
                            // 151
                            this.setters[name] = Object.create(null); // 152
                          } // 153
                          this.setters[name][key] = setter; // 154
                        } // 155
                      } // 156
                      // 157
                      this.runSetters(names); // 158
                    }; // 159
                    // 160
                    Ep.runGetters = function (names) {
                      // 161
                      // Before running getters, copy anything added to the exports object                                                 // 162
                      // over to the namespace. Values returned by getters take precedence                                                 // 163
                      // over these values, but we don't want to miss anything.                                                            // 164
                      syncExportsToNamespace(this, names); // 165
                      // 166
                      if (names === void 0 || // 167
                      names.indexOf("*") >= 0) {
                        // 168
                        names = Object.keys(this.getters); // 169
                      } // 170
                      // 171
                      var nameCount = names.length; // 172
                      // 173
                      for (var i = 0; i < nameCount; ++i) {
                        // 174
                        var name = names[i]; // 175
                        var value = runGetter(this, name); // 176
                        // 177
                        // If the getter is run without error, update both entry.namespace and                                             // 178
                        // module.exports with the current value so that CommonJS require                                                  // 179
                        // calls remain consistent with module.watch.                                                                      // 180
                        if (value !== GETTER_ERROR) {
                          // 181
                          this.namespace[name] = value; // 182
                          this.exports[name] = value; // 183
                        } // 184
                      } // 185
                    }; // 186
                    // 187
                    function syncExportsToNamespace(entry, names) {
                      // 188
                      var setDefault = false; // 189
                      // 190
                      if (!utils.getESModule(entry.exports)) {
                        // 191
                        // If the module entry is managing overrides module.exports, that                                                  // 192
                        // value should be exposed as the .default property of the namespace,                                              // 193
                        // unless module.exports is marked as an ECMASCript module.                                                        // 194
                        entry.namespace.default = entry.exports; // 195
                        setDefault = true; // 196
                      } // 197
                      // 198
                      if (!utils.isObjectLike(entry.exports)) {
                        // 199
                        return; // 200
                      } // 201
                      // 202
                      if (names === void 0 || // 203
                      names.indexOf("*") >= 0) {
                        // 204
                        names = Object.keys(entry.exports); // 205
                      } // 206
                      // 207
                      names.forEach(function (key) {
                        // 208
                        // Don't set any properties for which a getter function exists in                                                  // 209
                        // entry.getters, don't accidentally override entry.namespace.default,                                             // 210
                        // and only copy own properties from entry.exports.                                                                // 211
                        if (!hasOwn.call(entry.getters, key) && // 212
                        !(setDefault && key === "default") && // 213
                        hasOwn.call(entry.exports, key)) {
                          // 214
                          utils.copyKey(key, entry.namespace, entry.exports); // 215
                        } // 216
                      }); // 217
                    } // 218
                    // 219
                    // Called by module.runSetters once the module this Entry is managing has                                              // 220
                    // finished loading.                                                                                                   // 221
                    Ep.hasLoaded = function () {
                      // 222
                      if (this._loaded) {
                        // 223
                        return true; // 224
                      } // 225
                      // 226
                      var ids = Object.keys(this.ownerModules); // 227
                      var idCount = ids.length; // 228
                      // 229
                      for (var i = 0; i < idCount; ++i) {
                        // 230
                        var owner = this.ownerModules[ids[i]]; // 231
                        if (!owner.loaded && owner.exports === this.exports) {
                          // 232
                          // At least one owner module whose exports are still ===                                                         // 233
                          // this.exports has not finished loading, so this this Entry cannot                                              // 234
                          // be marked as loaded yet.                                                                                      // 235
                          return false; // 236
                        } // 237
                      } // 238
                      // 239
                      // Set entry._loaded = true only if all the modules in                                                               // 240
                      // entry.ownerModules that are still associated with entry.exports have                                              // 241
                      // finished loading.                                                                                                 // 242
                      return this._loaded = true; // 243
                    }; // 244
                    // 245
                    // Called whenever module.exports might have changed, to trigger any                                                   // 246
                    // setters associated with the newly exported values. The names parameter                                              // 247
                    // is optional; without it, all getters and setters will run.                                                          // 248
                    Ep.runSetters = function (names) {
                      // 249
                      // Make sure entry.namespace and module.exports are up to date before we                                             // 250
                      // call getExportByName(entry, name).                                                                                // 251
                      this.runGetters(names); // 252
                      // 253
                      // Lazily-initialized object mapping parent module identifiers to parent                                             // 254
                      // module objects whose setters we might need to run.                                                                // 255
                      var parents; // 256
                      // 257
                      forEachSetter(this, names, function (setter, name, value) {
                        // 258
                        if (parents === void 0) {
                          // 259
                          parents = Object.create(null); // 260
                        } // 261
                        parents[setter.parent.id] = setter.parent; // 262
                        // 263
                        // The param order for setters is `value` then `name` because the `name`                                           // 264
                        // param is only used by namespace exports.                                                                        // 265
                        setter(value, name); // 266
                      }); // 267
                      // 268
                      if (!parents) {
                        // 269
                        return; // 270
                      } // 271
                      // 272
                      // If any of the setters updated the module.exports of a parent module,                                              // 273
                      // or updated local variables that are exported by that parent module,                                               // 274
                      // then we must re-run any setters registered by that parent module.                                                 // 275
                      var parentIDs = Object.keys(parents); // 276
                      var parentIDCount = parentIDs.length; // 277
                      // 278
                      for (var i = 0; i < parentIDCount; ++i) {
                        // 279
                        // What happens if parents[parentIDs[id]] === module, or if                                                        // 280
                        // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 281
                        // bookkeeping above, the runSetters broadcast will only proceed                                                   // 282
                        // as far as there are any actual changes to report.                                                               // 283
                        var parent = parents[parentIDs[i]]; // 284
                        var parentEntry = Entry.get(parent.exports); // 285
                        if (parentEntry) {
                          // 286
                          parentEntry.runSetters(); // 287
                        } // 288
                      } // 289
                    }; // 290
                    // 291
                    function callSetterIfNecessary(setter, name, value, callback) {
                      // 292
                      if (name === "__esModule") {
                        // 293
                        // Ignore setters asking for module.exports.__esModule.                                                            // 294
                        return; // 295
                      } // 296
                      // 297
                      var shouldCall = false; // 298
                      // 299
                      if (setter.last === void 0) {
                        // 300
                        setter.last = Object.create(null); // 301
                        // Always call the setter if it has never been called before.                                                      // 302
                        shouldCall = true; // 303
                      } // 304
                      // 305
                      function changed(name, value) {
                        // 306
                        var valueToCompare = value; // 307
                        if (valueToCompare !== valueToCompare) {
                          // 308
                          valueToCompare = NAN; // 309
                        } else if (valueToCompare === void 0) {
                          // 310
                          valueToCompare = UNDEFINED; // 311
                        } // 312
                        // 313
                        if (setter.last[name] === valueToCompare) {
                          // 314
                          return false; // 315
                        } // 316
                        // 317
                        setter.last[name] = valueToCompare; // 318
                        return true; // 319
                      } // 320
                      // 321
                      if (name === "*") {
                        // 322
                        var keys = safeKeys(value); // 323
                        var keyCount = keys.length; // 324
                        for (var i = 0; i < keyCount; ++i) {
                          // 325
                          var key = keys[i]; // 326
                          if (changed(key, value[key])) {
                            // 327
                            shouldCall = true; // 328
                          } // 329
                        } // 330
                      } else if (changed(name, value)) {
                        // 331
                        shouldCall = true; // 332
                      } // 333
                      // 334
                      if (shouldCall) {
                        // 335
                        // Only invoke the callback if we have not called this setter                                                      // 336
                        // (with a value of this name) before, or the current value is                                                     // 337
                        // different from the last value we passed to this setter.                                                         // 338
                        return callback(setter, name, value); // 339
                      } // 340
                    } // 341
                    // 342
                    // Invoke the given callback once for every (setter, name, value) that needs to                                        // 343
                    // be called. Note that forEachSetter does not call any setters itself, only the                                       // 344
                    // given callback.                                                                                                     // 345
                    function forEachSetter(entry, names, callback) {
                      // 346
                      var needToCheckNames = true; // 347
                      // 348
                      if (names === void 0) {
                        // 349
                        names = Object.keys(entry.setters); // 350
                        needToCheckNames = false; // 351
                      } // 352
                      // 353
                      var nameCount = names.length; // 354
                      // 355
                      for (var i = 0; i < nameCount; ++i) {
                        // 356
                        var name = names[i]; // 357
                        // 358
                        if (needToCheckNames && // 359
                        !hasOwn.call(entry.setters, name)) {
                          // 360
                          continue; // 361
                        } // 362
                        // 363
                        var setters = entry.setters[name]; // 364
                        var keys = Object.keys(setters); // 365
                        var keyCount = keys.length; // 366
                        // 367
                        for (var j = 0; j < keyCount; ++j) {
                          // 368
                          var key = keys[j]; // 369
                          var value = getExportByName(entry, name); // 370
                          // 371
                          callSetterIfNecessary(setters[key], name, value, callback); // 372
                          // 373
                          var getter = entry.getters[name]; // 374
                          if (typeof getter === "function" && // 375
                          // Sometimes a getter function will throw because it's called                                                // 376
                          // before the variable it's supposed to return has been                                                      // 377
                          // initialized, so we need to know that the getter function has                                              // 378
                          // run to completion at least once.                                                                          // 379
                          getter.runCount > 0 && // 380
                          getter.constant) {
                            // 381
                            // If we happen to know that this getter function has run                                                      // 382
                            // successfully, and will never return a different value, then we                                              // 383
                            // can forget the corresponding setter, because we've already                                                  // 384
                            // reported that constant value. Note that we can't forget the                                                 // 385
                            // getter, because we need to remember the original value in case                                              // 386
                            // anyone tampers with entry.exports[name].                                                                    // 387
                            delete setters[key]; // 388
                          } // 389
                        } // 390
                      } // 391
                    } // 392
                    // 393
                    function getExportByName(entry, name) {
                      // 394
                      if (name === "*") {
                        // 395
                        return entry.namespace; // 396
                      } // 397
                      // 398
                      if (hasOwn.call(entry.namespace, name)) {
                        // 399
                        return entry.namespace[name]; // 400
                      } // 401
                      // 402
                      var exported = entry.exports; // 403
                      // 404
                      if (name === "default" && // 405
                      !(utils.getESModule(exported) && // 406
                      "default" in exported)) {
                        // 407
                        return exported; // 408
                      } // 409
                      // 410
                      if (exported == null) {
                        // 411
                        return; // 412
                      } // 413
                      // 414
                      return exported[name]; // 415
                    } // 416
                    // 417
                    function makeUniqueKey() {
                      // 418
                      return Math.random() // 419
                      .toString(36) // 420
                      // Add an incrementing salt to help track key ordering and also                                                    // 421
                      // absolutely guarantee we never return the same key twice.                                                        // 422
                      .replace("0.", ++keySalt + "$"); // 423
                    } // 424
                    // 425
                    function runGetter(entry, name) {
                      // 426
                      var getter = entry.getters[name]; // 427
                      try {
                        // 428
                        var result = getter(); // 429
                        ++getter.runCount; // 430
                        return result; // 431
                      } catch (e) {} // 432
                      return GETTER_ERROR; // 433
                    } // 434
                    // 435
                    _module9.exports = Entry; // 436
                    // 437
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } }, "meteor-node-stubs": { "package.json": function (_require11, _exports10) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/package.json                                                                         //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _exports10.name = "meteor-node-stubs"; // 1
          _exports10.version = "0.2.11"; // 2
          _exports10.main = "index.js"; // 3
          // 4
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function (_require12, _exports11, _module10) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/index.js                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          var map = _require12("./map.json"); // 1
          var meteorAliases = {}; // 2
          // 3
          Object.keys(map).forEach(function (id) {
            // 4
            if (typeof map[id] === "string") {
              // 5
              var aliasParts = _module10.id.split("/"); // 6
              aliasParts.pop(); // 7
              aliasParts.push("node_modules", map[id]); // 8
              _exports11[id] = meteorAliases[id + ".js"] = // 9
              aliasParts.join("/"); // 10
            } else {
              // 11
              _exports11[id] = map[id]; // 12
              meteorAliases[id + ".js"] = function () {}; // 13
            } // 14
          }); // 15
          // 16
          if (typeof meteorInstall === "function") {
            // 17
            meteorInstall({ // 18
              // Install the aliases into a node_modules directory one level up from                                             // 19
              // the root directory, so that they do not clutter the namespace                                                   // 20
              // available to apps and packages.                                                                                 // 21
              "..": { // 22
                node_modules: meteorAliases // 23
                // 24
              } }); // 25
          } // 26
          // 27
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "map.json": function (_require13, _exports12, _module11) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/map.json                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module11.exports = { // 1
            "assert": "assert/", // 2
            "buffer": "buffer/", // 3
            "child_process": null, // 4
            "cluster": null, // 5
            "console": "console-browserify", // 6
            "constants": "constants-browserify", // 7
            "crypto": "../wrappers/crypto.js", // 8
            "dgram": null, // 9
            "dns": null, // 10
            "domain": "domain-browser", // 11
            "events": "events/", // 12
            "fs": null, // 13
            "http": "http-browserify", // 14
            "https": "https-browserify", // 15
            "module": "../wrappers/module.js", // 16
            "net": null, // 17
            "os": "os-browserify/browser.js", // 18
            "path": "path-browserify", // 19
            "process": "process/browser.js", // 20
            "punycode": "punycode/", // 21
            "querystring": "querystring-es3/", // 22
            "readline": null, // 23
            "repl": null, // 24
            "stream": "stream-browserify", // 25
            "_stream_duplex": "readable-stream/duplex.js", // 26
            "_stream_passthrough": "readable-stream/passthrough.js", // 27
            "_stream_readable": "readable-stream/readable.js", // 28
            "_stream_transform": "readable-stream/transform.js", // 29
            "_stream_writable": "readable-stream/writable.js", // 30
            "string_decoder": "string_decoder/", // 31
            "sys": "util/util.js", // 32
            "timers": "timers-browserify", // 33
            "tls": null, // 34
            "tty": "tty-browserify", // 35
            "url": "url/", // 36
            "util": "util/util.js", // 37
            "vm": "vm-browserify", // 38
            "zlib": "browserify-zlib" // 39
          }; // 40
          // 41
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "deps": { "process.js": function (_require14) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/meteor-node-stubs/deps/process.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require14("process/browser.js"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "domain.js": function (_require15) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/meteor-node-stubs/deps/domain.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require15("domain-browser"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "node_modules": { "process": { "browser.js": function (_require16, _exports13, _module12) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // shim for using process in browser                                                                                   // 1
              var process = _module12.exports = {}; // 2
              // 3
              // cached from whatever global is present so that test runners that stub it                                            // 4
              // don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
              // wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
              // function because try/catches deoptimize in certain engines.                                                         // 7
              // 8
              var cachedSetTimeout; // 9
              var cachedClearTimeout; // 10
              // 11
              function defaultSetTimout() {
                // 12
                throw new Error('setTimeout has not been defined'); // 13
              } // 14
              function defaultClearTimeout() {
                // 15
                throw new Error('clearTimeout has not been defined'); // 16
              } // 17
              (function () {
                // 18
                try {
                  // 19
                  if (typeof setTimeout === 'function') {
                    // 20
                    cachedSetTimeout = setTimeout; // 21
                  } else {
                    // 22
                    cachedSetTimeout = defaultSetTimout; // 23
                  } // 24
                } catch (e) {
                  // 25
                  cachedSetTimeout = defaultSetTimout; // 26
                } // 27
                try {
                  // 28
                  if (typeof clearTimeout === 'function') {
                    // 29
                    cachedClearTimeout = clearTimeout; // 30
                  } else {
                    // 31
                    cachedClearTimeout = defaultClearTimeout; // 32
                  } // 33
                } catch (e) {
                  // 34
                  cachedClearTimeout = defaultClearTimeout; // 35
                } // 36
              })(); // 37
              function runTimeout(fun) {
                // 38
                if (cachedSetTimeout === setTimeout) {
                  // 39
                  //normal enviroments in sane situations                                                                        // 40
                  return setTimeout(fun, 0); // 41
                } // 42
                // if setTimeout wasn't available but was latter defined                                                           // 43
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  // 44
                  cachedSetTimeout = setTimeout; // 45
                  return setTimeout(fun, 0); // 46
                } // 47
                try {
                  // 48
                  // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
                  return cachedSetTimeout(fun, 0); // 50
                } catch (e) {
                  // 51
                  try {
                    // 52
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0); // 54
                  } catch (e) {
                    // 55
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0); // 57
                  } // 58
                } // 59
                // 60
                // 61
              } // 62
              function runClearTimeout(marker) {
                // 63
                if (cachedClearTimeout === clearTimeout) {
                  // 64
                  //normal enviroments in sane situations                                                                        // 65
                  return clearTimeout(marker); // 66
                } // 67
                // if clearTimeout wasn't available but was latter defined                                                         // 68
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  // 69
                  cachedClearTimeout = clearTimeout; // 70
                  return clearTimeout(marker); // 71
                } // 72
                try {
                  // 73
                  // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
                  return cachedClearTimeout(marker); // 75
                } catch (e) {
                  // 76
                  try {
                    // 77
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker); // 79
                  } catch (e) {
                    // 80
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
                    return cachedClearTimeout.call(this, marker); // 83
                  } // 84
                } // 85
                // 86
                // 87
                // 88
              } // 89
              var queue = []; // 90
              var draining = false; // 91
              var currentQueue; // 92
              var queueIndex = -1; // 93
              // 94
              function cleanUpNextTick() {
                // 95
                if (!draining || !currentQueue) {
                  // 96
                  return; // 97
                } // 98
                draining = false; // 99
                if (currentQueue.length) {
                  // 100
                  queue = currentQueue.concat(queue); // 101
                } else {
                  // 102
                  queueIndex = -1; // 103
                } // 104
                if (queue.length) {
                  // 105
                  drainQueue(); // 106
                } // 107
              } // 108
              // 109
              function drainQueue() {
                // 110
                if (draining) {
                  // 111
                  return; // 112
                } // 113
                var timeout = runTimeout(cleanUpNextTick); // 114
                draining = true; // 115
                // 116
                var len = queue.length; // 117
                while (len) {
                  // 118
                  currentQueue = queue; // 119
                  queue = []; // 120
                  while (++queueIndex < len) {
                    // 121
                    if (currentQueue) {
                      // 122
                      currentQueue[queueIndex].run(); // 123
                    } // 124
                  } // 125
                  queueIndex = -1; // 126
                  len = queue.length; // 127
                } // 128
                currentQueue = null; // 129
                draining = false; // 130
                runClearTimeout(timeout); // 131
              } // 132
              // 133
              process.nextTick = function (fun) {
                // 134
                var args = new Array(arguments.length - 1); // 135
                if (arguments.length > 1) {
                  // 136
                  for (var i = 1; i < arguments.length; i++) {
                    // 137
                    args[i - 1] = arguments[i]; // 138
                  } // 139
                } // 140
                queue.push(new Item(fun, args)); // 141
                if (queue.length === 1 && !draining) {
                  // 142
                  runTimeout(drainQueue); // 143
                } // 144
              }; // 145
              // 146
              // v8 likes predictible objects                                                                                        // 147
              function Item(fun, array) {
                // 148
                this.fun = fun; // 149
                this.array = array; // 150
              } // 151
              Item.prototype.run = function () {
                // 152
                this.fun.apply(null, this.array); // 153
              }; // 154
              process.title = 'browser'; // 155
              process.browser = true; // 156
              process.env = {}; // 157
              process.argv = []; // 158
              process.version = ''; // empty string to avoid regexp issues                                                           // 159
              process.versions = {}; // 160
              // 161
              function noop() {} // 162
              // 163
              process.on = noop; // 164
              process.addListener = noop; // 165
              process.once = noop; // 166
              process.off = noop; // 167
              process.removeListener = noop; // 168
              process.removeAllListeners = noop; // 169
              process.emit = noop; // 170
              // 171
              process.binding = function (name) {
                // 172
                throw new Error('process.binding is not supported'); // 173
              }; // 174
              // 175
              process.cwd = function () {
                return '/';
              }; // 176
              process.chdir = function (dir) {
                // 177
                throw new Error('process.chdir is not supported'); // 178
              }; // 179
              process.umask = function () {
                return 0;
              }; // 180
              // 181
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "domain-browser": { "package.json": function (_require17, _exports14) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports14.name = "domain-browser"; // 1
              _exports14.version = "1.1.7"; // 2
              _exports14.main = "./index.js"; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "index.js": function (_require18, _exports15, _module13) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // This file should be ES5 compatible                                                                                  // 1
              /* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */ // 2
              'use strict'; // 3

              _module13.exports = function () {
                // 4
                // Import Events                                                                                                      // 5
                var events = _require18('events'); // 6
                // 7
                // Export Domain                                                                                                      // 8
                var domain = {}; // 9
                domain.createDomain = domain.create = function () {
                  // 10
                  var d = new events.EventEmitter(); // 11
                  // 12
                  function emitError(e) {
                    // 13
                    d.emit('error', e); // 14
                  } // 15
                  // 16
                  d.add = function (emitter) {
                    // 17
                    emitter.on('error', emitError); // 18
                  }; // 19
                  d.remove = function (emitter) {
                    // 20
                    emitter.removeListener('error', emitError); // 21
                  }; // 22
                  d.bind = function (fn) {
                    // 23
                    return function () {
                      // 24
                      var args = Array.prototype.slice.call(arguments); // 25
                      try {
                        // 26
                        fn.apply(null, args); // 27
                      } // 28
                      catch (err) {
                        // 29
                        emitError(err); // 30
                      } // 31
                    }; // 32
                  }; // 33
                  d.intercept = function (fn) {
                    // 34
                    return function (err) {
                      // 35
                      if (err) {
                        // 36
                        emitError(err); // 37
                      } // 38
                      else {
                          // 39
                          var args = Array.prototype.slice.call(arguments, 1); // 40
                          try {
                            // 41
                            fn.apply(null, args); // 42
                          } // 43
                          catch (err) {
                            // 44
                            emitError(err); // 45
                          } // 46
                        } // 47
                    }; // 48
                  }; // 49
                  d.run = function (fn) {
                    // 50
                    try {
                      // 51
                      fn(); // 52
                    } // 53
                    catch (err) {
                      // 54
                      emitError(err); // 55
                    } // 56
                    return this; // 57
                  }; // 58
                  d.dispose = function () {
                    // 59
                    this.removeAllListeners(); // 60
                    return this; // 61
                  }; // 62
                  d.enter = d.exit = function () {
                    // 63
                    return this; // 64
                  }; // 65
                  return d; // 66
                }; // 67
                return domain; // 68
              }.call(this); // 69
              // 70
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "events": { "package.json": function (_require19, _exports16) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports16.name = "events"; // 1
              _exports16.version = "1.1.1"; // 2
              _exports16.main = "./events.js"; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "events.js": function (_require20, _exports17, _module14) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
              //                                                                                                                     // 2
              // Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
              // copy of this software and associated documentation files (the                                                       // 4
              // "Software"), to deal in the Software without restriction, including                                                 // 5
              // without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
              // distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
              // persons to whom the Software is furnished to do so, subject to the                                                  // 8
              // following conditions:                                                                                               // 9
              //                                                                                                                     // 10
              // The above copyright notice and this permission notice shall be included                                             // 11
              // in all copies or substantial portions of the Software.                                                              // 12
              //                                                                                                                     // 13
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
              // USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
              // 21
              function EventEmitter() {
                // 22
                this._events = this._events || {}; // 23
                this._maxListeners = this._maxListeners || undefined; // 24
              } // 25
              _module14.exports = EventEmitter; // 26
              // 27
              // Backwards-compat with node 0.10.x                                                                                   // 28
              EventEmitter.EventEmitter = EventEmitter; // 29
              // 30
              EventEmitter.prototype._events = undefined; // 31
              EventEmitter.prototype._maxListeners = undefined; // 32
              // 33
              // By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
              // added to it. This is a useful default which helps finding memory leaks.                                             // 35
              EventEmitter.defaultMaxListeners = 10; // 36
              // 37
              // Obviously not all Emitters should be limited to 10. This function allows                                            // 38
              // that to be increased. Set to zero for unlimited.                                                                    // 39
              EventEmitter.prototype.setMaxListeners = function (n) {
                // 40
                if (!isNumber(n) || n < 0 || isNaN(n)) // 41
                  throw TypeError('n must be a positive number'); // 42
                this._maxListeners = n; // 43
                return this; // 44
              }; // 45
              // 46
              EventEmitter.prototype.emit = function (type) {
                // 47
                var er, handler, len, args, i, listeners; // 48
                // 49
                if (!this._events) // 50
                  this._events = {}; // 51
                // 52
                // If there is no 'error' event listener then throw.                                                                 // 53
                if (type === 'error') {
                  // 54
                  if (!this._events.error || // 55
                  isObject(this._events.error) && !this._events.error.length) {
                    // 56
                    er = arguments[1]; // 57
                    if (er instanceof Error) {
                      // 58
                      throw er; // Unhandled 'error' event                                                                           // 59
                    } else {
                      // 60
                      // At least give some kind of context to the user                                                              // 61
                      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')'); // 62
                      err.context = er; // 63
                      throw err; // 64
                    } // 65
                  } // 66
                } // 67
                // 68
                handler = this._events[type]; // 69
                // 70
                if (isUndefined(handler)) // 71
                  return false; // 72
                // 73
                if (isFunction(handler)) {
                  // 74
                  switch (arguments.length) {// 75
                    // fast cases                                                                                                    // 76
                    case 1:
                      // 77
                      handler.call(this); // 78
                      break; // 79
                    case 2:
                      // 80
                      handler.call(this, arguments[1]); // 81
                      break; // 82
                    case 3:
                      // 83
                      handler.call(this, arguments[1], arguments[2]); // 84
                      break; // 85
                    // slower                                                                                                        // 86
                    default:
                      // 87
                      args = Array.prototype.slice.call(arguments, 1); // 88
                      handler.apply(this, args); // 89
                  } // 90
                } else if (isObject(handler)) {
                  // 91
                  args = Array.prototype.slice.call(arguments, 1); // 92
                  listeners = handler.slice(); // 93
                  len = listeners.length; // 94
                  for (i = 0; i < len; i++) // 95
                  listeners[i].apply(this, args); // 96
                } // 97
                // 98
                return true; // 99
              }; // 100
              // 101
              EventEmitter.prototype.addListener = function (type, listener) {
                // 102
                var m; // 103
                // 104
                if (!isFunction(listener)) // 105
                  throw TypeError('listener must be a function'); // 106
                // 107
                if (!this._events) // 108
                  this._events = {}; // 109
                // 110
                // To avoid recursion in the case that type === "newListener"! Before                                                // 111
                // adding it to the listeners, first emit "newListener".                                                             // 112
                if (this._events.newListener) // 113
                  this.emit('newListener', type, // 114
                  isFunction(listener.listener) ? // 115
                  listener.listener : listener); // 116
                // 117
                if (!this._events[type]) // 118
                  // Optimize the case of one listener. Don't need the extra array object.                                           // 119
                  this._events[type] = listener; // 120
                else if (isObject(this._events[type])) // 121
                    // If we've already got an array, just append.                                                                     // 122
                    this._events[type].push(listener); // 123
                  else // 124
                    // Adding the second element, need to change to array.                                                             // 125
                    this._events[type] = [this._events[type], listener]; // 126
                // 127
                // Check for listener leak                                                                                           // 128
                if (isObject(this._events[type]) && !this._events[type].warned) {
                  // 129
                  if (!isUndefined(this._maxListeners)) {
                    // 130
                    m = this._maxListeners; // 131
                  } else {
                    // 132
                    m = EventEmitter.defaultMaxListeners; // 133
                  } // 134
                  // 135
                  if (m && m > 0 && this._events[type].length > m) {
                    // 136
                    this._events[type].warned = true; // 137
                    console.error('(node) warning: possible EventEmitter memory ' + // 138
                    'leak detected. %d listeners added. ' + // 139
                    'Use emitter.setMaxListeners() to increase limit.', // 140
                    this._events[type].length); // 141
                    if (typeof console.trace === 'function') {
                      // 142
                      // not supported in IE 10                                                                                      // 143
                      console.trace(); // 144
                    } // 145
                  } // 146
                } // 147
                // 148
                return this; // 149
              }; // 150
              // 151
              EventEmitter.prototype.on = EventEmitter.prototype.addListener; // 152
              // 153
              EventEmitter.prototype.once = function (type, listener) {
                // 154
                if (!isFunction(listener)) // 155
                  throw TypeError('listener must be a function'); // 156
                // 157
                var fired = false; // 158
                // 159
                function g() {
                  // 160
                  this.removeListener(type, g); // 161
                  // 162
                  if (!fired) {
                    // 163
                    fired = true; // 164
                    listener.apply(this, arguments); // 165
                  } // 166
                } // 167
                // 168
                g.listener = listener; // 169
                this.on(type, g); // 170
                // 171
                return this; // 172
              }; // 173
              // 174
              // emits a 'removeListener' event iff the listener was removed                                                         // 175
              EventEmitter.prototype.removeListener = function (type, listener) {
                // 176
                var list, position, length, i; // 177
                // 178
                if (!isFunction(listener)) // 179
                  throw TypeError('listener must be a function'); // 180
                // 181
                if (!this._events || !this._events[type]) // 182
                  return this; // 183
                // 184
                list = this._events[type]; // 185
                length = list.length; // 186
                position = -1; // 187
                // 188
                if (list === listener || // 189
                isFunction(list.listener) && list.listener === listener) {
                  // 190
                  delete this._events[type]; // 191
                  if (this._events.removeListener) // 192
                    this.emit('removeListener', type, listener); // 193
                  // 194
                } else if (isObject(list)) {
                  // 195
                  for (i = length; i-- > 0;) {
                    // 196
                    if (list[i] === listener || // 197
                    list[i].listener && list[i].listener === listener) {
                      // 198
                      position = i; // 199
                      break; // 200
                    } // 201
                  } // 202
                  // 203
                  if (position < 0) // 204
                    return this; // 205
                  // 206
                  if (list.length === 1) {
                    // 207
                    list.length = 0; // 208
                    delete this._events[type]; // 209
                  } else {
                    // 210
                    list.splice(position, 1); // 211
                  } // 212
                  // 213
                  if (this._events.removeListener) // 214
                    this.emit('removeListener', type, listener); // 215
                } // 216
                // 217
                return this; // 218
              }; // 219
              // 220
              EventEmitter.prototype.removeAllListeners = function (type) {
                // 221
                var key, listeners; // 222
                // 223
                if (!this._events) // 224
                  return this; // 225
                // 226
                // not listening for removeListener, no need to emit                                                                 // 227
                if (!this._events.removeListener) {
                  // 228
                  if (arguments.length === 0) // 229
                    this._events = {}; // 230
                  else if (this._events[type]) // 231
                      delete this._events[type]; // 232
                  return this; // 233
                } // 234
                // 235
                // emit removeListener for all listeners on all events                                                               // 236
                if (arguments.length === 0) {
                  // 237
                  for (key in this._events) {
                    // 238
                    if (key === 'removeListener') continue; // 239
                    this.removeAllListeners(key); // 240
                  } // 241
                  this.removeAllListeners('removeListener'); // 242
                  this._events = {}; // 243
                  return this; // 244
                } // 245
                // 246
                listeners = this._events[type]; // 247
                // 248
                if (isFunction(listeners)) {
                  // 249
                  this.removeListener(type, listeners); // 250
                } else if (listeners) {
                  // 251
                  // LIFO order                                                                                                      // 252
                  while (listeners.length) // 253
                  this.removeListener(type, listeners[listeners.length - 1]); // 254
                } // 255
                delete this._events[type]; // 256
                // 257
                return this; // 258
              }; // 259
              // 260
              EventEmitter.prototype.listeners = function (type) {
                // 261
                var ret; // 262
                if (!this._events || !this._events[type]) // 263
                  ret = []; // 264
                else if (isFunction(this._events[type])) // 265
                    ret = [this._events[type]]; // 266
                  else // 267
                    ret = this._events[type].slice(); // 268
                return ret; // 269
              }; // 270
              // 271
              EventEmitter.prototype.listenerCount = function (type) {
                // 272
                if (this._events) {
                  // 273
                  var evlistener = this._events[type]; // 274
                  // 275
                  if (isFunction(evlistener)) // 276
                    return 1; // 277
                  else if (evlistener) // 278
                      return evlistener.length; // 279
                } // 280
                return 0; // 281
              }; // 282
              // 283
              EventEmitter.listenerCount = function (emitter, type) {
                // 284
                return emitter.listenerCount(type); // 285
              }; // 286
              // 287
              function isFunction(arg) {
                // 288
                return typeof arg === 'function'; // 289
              } // 290
              // 291
              function isNumber(arg) {
                // 292
                return typeof arg === 'number'; // 293
              } // 294
              // 295
              function isObject(arg) {
                // 296
                return typeof arg === 'object' && arg !== null; // 297
              } // 298
              // 299
              function isUndefined(arg) {
                // 300
                return arg === void 0; // 301
              } // 302
              // 303
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "babel-runtime": { "regenerator": { "index.js": function (_require21, _exports18, _module15) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/regenerator/index.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module15.exports = _require21("regenerator-runtime"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "helpers": { "typeof.js": function (_require22, _exports19) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/helpers/typeof.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            "use strict"; // 1
            // 2

            _exports19.__esModule = true; // 3
            // 4
            var _iterator = _require22("../core-js/symbol/iterator"); // 5
            // 6
            var _iterator2 = _interopRequireDefault(_iterator); // 7
            // 8
            var _symbol = _require22("../core-js/symbol"); // 9
            // 10
            var _symbol2 = _interopRequireDefault(_symbol); // 11
            // 12
            var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
              return typeof obj;
            } : function (obj) {
              return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
            };
            // 14
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 15
            // 16
            _exports19.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
              return typeof obj === "undefined" ? "undefined" : _typeof(obj); // 18
            } : function (obj) {
              // 19
              return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "toConsumableArray.js": function (_require23, _exports20) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/helpers/toConsumableArray.js                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            "use strict"; // 1
            // 2

            _exports20.__esModule = true; // 3
            // 4
            var _from = _require23("../core-js/array/from"); // 5
            // 6
            var _from2 = _interopRequireDefault(_from); // 7
            // 8
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 9
            // 10
            _exports20.default = function (arr) {
              // 11
              if (Array.isArray(arr)) {
                // 12
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  // 13
                  arr2[i] = arr[i]; // 14
                } // 15
                // 16
                return arr2; // 17
              } else {
                // 18
                return (0, _from2.default)(arr); // 19
              } // 20
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "classCallCheck.js": function (_require24, _exports21) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/helpers/classCallCheck.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            "use strict"; // 1
            // 2

            _exports21.__esModule = true; // 3
            // 4
            _exports21.default = function (instance, Constructor) {
              // 5
              if (!(instance instanceof Constructor)) {
                // 6
                throw new TypeError("Cannot call a class as a function"); // 7
              } // 8
            }; // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "possibleConstructorReturn.js": function (_require25, _exports22) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            "use strict"; // 1
            // 2

            _exports22.__esModule = true; // 3
            // 4
            var _typeof2 = _require25("../helpers/typeof"); // 5
            // 6
            var _typeof3 = _interopRequireDefault(_typeof2); // 7
            // 8
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 9
            // 10
            _exports22.default = function (self, call) {
              // 11
              if (!self) {
                // 12
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); // 13
              } // 14
              // 15
              return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
            }; // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "inherits.js": function (_require26, _exports23) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/helpers/inherits.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            "use strict"; // 1
            // 2

            _exports23.__esModule = true; // 3
            // 4
            var _setPrototypeOf = _require26("../core-js/object/set-prototype-of"); // 5
            // 6
            var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf); // 7
            // 8
            var _create = _require26("../core-js/object/create"); // 9
            // 10
            var _create2 = _interopRequireDefault(_create); // 11
            // 12
            var _typeof2 = _require26("../helpers/typeof"); // 13
            // 14
            var _typeof3 = _interopRequireDefault(_typeof2); // 15
            // 16
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 17
            // 18
            _exports23.default = function (subClass, superClass) {
              // 19
              if (typeof superClass !== "function" && superClass !== null) {
                // 20
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
              } // 22
              // 23
              subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, { // 24
                constructor: { // 25
                  value: subClass, // 26
                  enumerable: false, // 27
                  writable: true, // 28
                  configurable: true // 29
                  // 30
                } }); // 31
              if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
            }; // 33
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "core-js": { "symbol": { "iterator.js": function (_require27, _exports24, _module16) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module16.exports = { "default": _require27("core-js/library/fn/symbol/iterator"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "symbol.js": function (_require28, _exports25, _module17) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/core-js/symbol.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module17.exports = { "default": _require28("core-js/library/fn/symbol"), __esModule: true }; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "array": { "from.js": function (_require29, _exports26, _module18) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/array/from.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module18.exports = { "default": _require29("core-js/library/fn/array/from"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "object": { "set-prototype-of.js": function (_require30, _exports27, _module19) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module19.exports = { "default": _require30("core-js/library/fn/object/set-prototype-of"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "create.js": function (_require31, _exports28, _module20) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/object/create.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module20.exports = { "default": _require31("core-js/library/fn/object/create"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "regenerator-runtime": { "package.json": function (_require32, _exports29, _module21) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/package.json                                                                       //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _exports29.name = "regenerator-runtime"; // 1
          _exports29.version = "0.10.5"; // 2
          _exports29.main = "runtime-module.js"; // 3
          // 4
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "runtime-module.js": function (_require33, _exports30, _module22) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/runtime-module.js                                                                  //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          // This method of obtaining a reference to the global object needs to be                                               // 1
          // kept identical to the way it is obtained in runtime.js                                                              // 2
          var g = // 3
          typeof global === "object" ? global : // 4
          typeof window === "object" ? window : // 5
          typeof self === "object" ? self : this; // 6
          // 7
          // Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8
          // `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9
          var hadRuntime = g.regeneratorRuntime && // 10
          Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0; // 11
          // 12
          // Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13
          var oldRuntime = hadRuntime && g.regeneratorRuntime; // 14
          // 15
          // Force reevalutation of runtime.js.                                                                                  // 16
          g.regeneratorRuntime = undefined; // 17
          // 18
          _module22.exports = _require33("./runtime"); // 19
          // 20
          if (hadRuntime) {
            // 21
            // Restore the original runtime.                                                                                     // 22
            g.regeneratorRuntime = oldRuntime; // 23
          } else {
            // 24
            // Remove the global property added by runtime.js.                                                                   // 25
            try {
              // 26
              delete g.regeneratorRuntime; // 27
            } catch (e) {
              // 28
              g.regeneratorRuntime = undefined; // 29
            } // 30
          } // 31
          // 32
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "runtime.js": function (_require34, _exports31, _module23) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/runtime.js                                                                         //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          /**                                                                                                                    // 1
           * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2
           * All rights reserved.                                                                                                // 3
           *                                                                                                                     // 4
           * This source code is licensed under the BSD-style license found in the                                               // 5
           * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6
           * additional grant of patent rights can be found in the PATENTS file in                                               // 7
           * the same directory.                                                                                                 // 8
           */ // 9
          // 10
          !function (global) {
            // 11
            "use strict"; // 12
            // 13

            var Op = Object.prototype; // 14
            var hasOwn = Op.hasOwnProperty; // 15
            var undefined; // More compressible than void 0.                                                                     // 16
            var $Symbol = typeof Symbol === "function" ? Symbol : {}; // 17
            var iteratorSymbol = $Symbol.iterator || "@@iterator"; // 18
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator"; // 19
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; // 20
            // 21
            var inModule = typeof _module23 === "object"; // 22
            var runtime = global.regeneratorRuntime; // 23
            if (runtime) {
              // 24
              if (inModule) {
                // 25
                // If regeneratorRuntime is defined globally and we're in a module,                                              // 26
                // make the exports object identical to regeneratorRuntime.                                                      // 27
                _module23.exports = runtime; // 28
              } // 29
              // Don't bother evaluating the rest of this file if the runtime was                                                // 30
              // already defined globally.                                                                                       // 31
              return; // 32
            } // 33
            // 34
            // Define the runtime globally (as expected by generated code) as either                                             // 35
            // module.exports (if we're in a module) or a new, empty object.                                                     // 36
            runtime = global.regeneratorRuntime = inModule ? _module23.exports : {}; // 37
            // 38
            function wrap(innerFn, outerFn, self, tryLocsList) {
              // 39
              // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 40
              var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator; // 41
              var generator = Object.create(protoGenerator.prototype); // 42
              var context = new Context(tryLocsList || []); // 43
              // 44
              // The ._invoke method unifies the implementations of the .next,                                                   // 45
              // .throw, and .return methods.                                                                                    // 46
              generator._invoke = makeInvokeMethod(innerFn, self, context); // 47
              // 48
              return generator; // 49
            } // 50
            runtime.wrap = wrap; // 51
            // 52
            // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 53
            // record like context.tryEntries[i].completion. This interface could                                                // 54
            // have been (and was previously) designed to take a closure to be                                                   // 55
            // invoked without arguments, but in all the cases we care about we                                                  // 56
            // already have an existing method we want to call, so there's no need                                               // 57
            // to create a new function object. We can even get away with assuming                                               // 58
            // the method takes exactly one argument, since that happens to be true                                              // 59
            // in every case, so we don't have to touch the arguments object. The                                                // 60
            // only additional allocation required is the completion record, which                                               // 61
            // has a stable shape and so hopefully should be cheap to allocate.                                                  // 62
            function tryCatch(fn, obj, arg) {
              // 63
              try {
                // 64
                return { type: "normal", arg: fn.call(obj, arg) }; // 65
              } catch (err) {
                // 66
                return { type: "throw", arg: err }; // 67
              } // 68
            } // 69
            // 70
            var GenStateSuspendedStart = "suspendedStart"; // 71
            var GenStateSuspendedYield = "suspendedYield"; // 72
            var GenStateExecuting = "executing"; // 73
            var GenStateCompleted = "completed"; // 74
            // 75
            // Returning this object from the innerFn has the same effect as                                                     // 76
            // breaking out of the dispatch switch statement.                                                                    // 77
            var ContinueSentinel = {}; // 78
            // 79
            // Dummy constructor functions that we use as the .constructor and                                                   // 80
            // .constructor.prototype properties for functions that return Generator                                             // 81
            // objects. For full spec compliance, you may wish to configure your                                                 // 82
            // minifier not to mangle the names of these two functions.                                                          // 83
            function Generator() {} // 84
            function GeneratorFunction() {} // 85
            function GeneratorFunctionPrototype() {} // 86
            // 87
            // This is a polyfill for %IteratorPrototype% for environments that                                                  // 88
            // don't natively support it.                                                                                        // 89
            var IteratorPrototype = {}; // 90
            IteratorPrototype[iteratorSymbol] = function () {
              // 91
              return this; // 92
            }; // 93
            // 94
            var getProto = Object.getPrototypeOf; // 95
            var NativeIteratorPrototype = getProto && getProto(getProto(values([]))); // 96
            if (NativeIteratorPrototype && // 97
            NativeIteratorPrototype !== Op && // 98
            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
              // 99
              // This environment has a native %IteratorPrototype%; use it instead                                               // 100
              // of the polyfill.                                                                                                // 101
              IteratorPrototype = NativeIteratorPrototype; // 102
            } // 103
            // 104
            var Gp = GeneratorFunctionPrototype.prototype = // 105
            Generator.prototype = Object.create(IteratorPrototype); // 106
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype; // 107
            GeneratorFunctionPrototype.constructor = GeneratorFunction; // 108
            GeneratorFunctionPrototype[toStringTagSymbol] = // 109
            GeneratorFunction.displayName = "GeneratorFunction"; // 110
            // 111
            // Helper for defining the .next, .throw, and .return methods of the                                                 // 112
            // Iterator interface in terms of a single ._invoke method.                                                          // 113
            function defineIteratorMethods(prototype) {
              // 114
              ["next", "throw", "return"].forEach(function (method) {
                // 115
                prototype[method] = function (arg) {
                  // 116
                  return this._invoke(method, arg); // 117
                }; // 118
              }); // 119
            } // 120
            // 121
            runtime.isGeneratorFunction = function (genFun) {
              // 122
              var ctor = typeof genFun === "function" && genFun.constructor; // 123
              return ctor // 124
              ? ctor === GeneratorFunction || // 125
              // For the native GeneratorFunction constructor, the best we can                                               // 126
              // do is to check its .name property.                                                                          // 127
              (ctor.displayName || ctor.name) === "GeneratorFunction" // 128
              : false; // 129
            }; // 130
            // 131
            runtime.mark = function (genFun) {
              // 132
              if (Object.setPrototypeOf) {
                // 133
                Object.setPrototypeOf(genFun, GeneratorFunctionPrototype); // 134
              } else {
                // 135
                genFun.__proto__ = GeneratorFunctionPrototype; // 136
                if (!(toStringTagSymbol in genFun)) {
                  // 137
                  genFun[toStringTagSymbol] = "GeneratorFunction"; // 138
                } // 139
              } // 140
              genFun.prototype = Object.create(Gp); // 141
              return genFun; // 142
            }; // 143
            // 144
            // Within the body of any async function, `await x` is transformed to                                                // 145
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 146
            // `hasOwn.call(value, "__await")` to determine if the yielded value is                                              // 147
            // meant to be awaited.                                                                                              // 148
            runtime.awrap = function (arg) {
              // 149
              return { __await: arg }; // 150
            }; // 151
            // 152
            function AsyncIterator(generator) {
              // 153
              function invoke(method, arg, resolve, reject) {
                // 154
                var record = tryCatch(generator[method], generator, arg); // 155
                if (record.type === "throw") {
                  // 156
                  reject(record.arg); // 157
                } else {
                  // 158
                  var result = record.arg; // 159
                  var value = result.value; // 160
                  if (value && // 161
                  typeof value === "object" && // 162
                  hasOwn.call(value, "__await")) {
                    // 163
                    return Promise.resolve(value.__await).then(function (value) {
                      // 164
                      invoke("next", value, resolve, reject); // 165
                    }, function (err) {
                      // 166
                      invoke("throw", err, resolve, reject); // 167
                    }); // 168
                  } // 169
                  // 170
                  return Promise.resolve(value).then(function (unwrapped) {
                    // 171
                    // When a yielded Promise is resolved, its final value becomes                                               // 172
                    // the .value of the Promise<{value,done}> result for the                                                    // 173
                    // current iteration. If the Promise is rejected, however, the                                               // 174
                    // result for this iteration will be rejected with the same                                                  // 175
                    // reason. Note that rejections of yielded Promises are not                                                  // 176
                    // thrown back into the generator function, as is the case                                                   // 177
                    // when an awaited Promise is rejected. This difference in                                                   // 178
                    // behavior between yield and await is important, because it                                                 // 179
                    // allows the consumer to decide what to do with the yielded                                                 // 180
                    // rejection (swallow it and continue, manually .throw it back                                               // 181
                    // into the generator, abandon iteration, whatever). With                                                    // 182
                    // await, by contrast, there is no opportunity to examine the                                                // 183
                    // rejection reason outside the generator function, so the                                                   // 184
                    // only option is to throw it from the await expression, and                                                 // 185
                    // let the generator function handle the exception.                                                          // 186
                    result.value = unwrapped; // 187
                    resolve(result); // 188
                  }, reject); // 189
                } // 190
              } // 191
              // 192
              if (typeof global.process === "object" && global.process.domain) {
                // 193
                invoke = global.process.domain.bind(invoke); // 194
              } // 195
              // 196
              var previousPromise; // 197
              // 198
              function enqueue(method, arg) {
                // 199
                function callInvokeWithMethodAndArg() {
                  // 200
                  return new Promise(function (resolve, reject) {
                    // 201
                    invoke(method, arg, resolve, reject); // 202
                  }); // 203
                } // 204
                // 205
                return previousPromise = // 206
                // If enqueue has been called before, then we want to wait until                                               // 207
                // all previous Promises have been resolved before calling invoke,                                             // 208
                // so that results are always delivered in the correct order. If                                               // 209
                // enqueue has not been called before, then it is important to                                                 // 210
                // call invoke immediately, without waiting on a callback to fire,                                             // 211
                // so that the async generator function has the opportunity to do                                              // 212
                // any necessary setup in a predictable way. This predictability                                               // 213
                // is why the Promise constructor synchronously invokes its                                                    // 214
                // executor callback, and why async functions synchronously                                                    // 215
                // execute code before the first await. Since we implement simple                                              // 216
                // async functions in terms of async generators, it is especially                                              // 217
                // important to get this right, even though it requires care.                                                  // 218
                previousPromise ? previousPromise.then( // 219
                callInvokeWithMethodAndArg, // 220
                // Avoid propagating failures to Promises returned by later                                                  // 221
                // invocations of the iterator.                                                                              // 222
                callInvokeWithMethodAndArg // 223
                ) : callInvokeWithMethodAndArg(); // 224
              } // 225
              // 226
              // Define the unified helper method that is used to implement .next,                                               // 227
              // .throw, and .return (see defineIteratorMethods).                                                                // 228
              this._invoke = enqueue; // 229
            } // 230
            // 231
            defineIteratorMethods(AsyncIterator.prototype); // 232
            AsyncIterator.prototype[asyncIteratorSymbol] = function () {
              // 233
              return this; // 234
            }; // 235
            runtime.AsyncIterator = AsyncIterator; // 236
            // 237
            // Note that simple async functions are implemented on top of                                                        // 238
            // AsyncIterator objects; they just return a Promise for the value of                                                // 239
            // the final result produced by the iterator.                                                                        // 240
            runtime.async = function (innerFn, outerFn, self, tryLocsList) {
              // 241
              var iter = new AsyncIterator( // 242
              wrap(innerFn, outerFn, self, tryLocsList) // 243
              ); // 244
              // 245
              return runtime.isGeneratorFunction(outerFn) // 246
              ? iter // If outerFn is a generator, return the full iterator.                                                   // 247
              : iter.next().then(function (result) {
                // 248
                return result.done ? result.value : iter.next(); // 249
              }); // 250
            }; // 251
            // 252
            function makeInvokeMethod(innerFn, self, context) {
              // 253
              var state = GenStateSuspendedStart; // 254
              // 255
              return function invoke(method, arg) {
                // 256
                if (state === GenStateExecuting) {
                  // 257
                  throw new Error("Generator is already running"); // 258
                } // 259
                // 260
                if (state === GenStateCompleted) {
                  // 261
                  if (method === "throw") {
                    // 262
                    throw arg; // 263
                  } // 264
                  // 265
                  // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 266
                  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 267
                  return doneResult(); // 268
                } // 269
                // 270
                context.method = method; // 271
                context.arg = arg; // 272
                // 273
                while (true) {
                  // 274
                  var delegate = context.delegate; // 275
                  if (delegate) {
                    // 276
                    var delegateResult = maybeInvokeDelegate(delegate, context); // 277
                    if (delegateResult) {
                      // 278
                      if (delegateResult === ContinueSentinel) continue; // 279
                      return delegateResult; // 280
                    } // 281
                  } // 282
                  // 283
                  if (context.method === "next") {
                    // 284
                    // Setting context._sent for legacy support of Babel's                                                       // 285
                    // function.sent implementation.                                                                             // 286
                    context.sent = context._sent = context.arg; // 287
                    // 288
                  } else if (context.method === "throw") {
                    // 289
                    if (state === GenStateSuspendedStart) {
                      // 290
                      state = GenStateCompleted; // 291
                      throw context.arg; // 292
                    } // 293
                    // 294
                    context.dispatchException(context.arg); // 295
                    // 296
                  } else if (context.method === "return") {
                    // 297
                    context.abrupt("return", context.arg); // 298
                  } // 299
                  // 300
                  state = GenStateExecuting; // 301
                  // 302
                  var record = tryCatch(innerFn, self, context); // 303
                  if (record.type === "normal") {
                    // 304
                    // If an exception is thrown from innerFn, we leave state ===                                                // 305
                    // GenStateExecuting and loop back for another invocation.                                                   // 306
                    state = context.done // 307
                    ? GenStateCompleted // 308
                    : GenStateSuspendedYield; // 309
                    // 310
                    if (record.arg === ContinueSentinel) {
                      // 311
                      continue; // 312
                    } // 313
                    // 314
                    return { // 315
                      value: record.arg, // 316
                      done: context.done // 317
                    }; // 318
                    // 319
                  } else if (record.type === "throw") {
                    // 320
                    state = GenStateCompleted; // 321
                    // Dispatch the exception by looping back around to the                                                      // 322
                    // context.dispatchException(context.arg) call above.                                                        // 323
                    context.method = "throw"; // 324
                    context.arg = record.arg; // 325
                  } // 326
                } // 327
              }; // 328
            } // 329
            // 330
            // Call delegate.iterator[context.method](context.arg) and handle the                                                // 331
            // result, either by returning a { value, done } result from the                                                     // 332
            // delegate iterator, or by modifying context.method and context.arg,                                                // 333
            // setting context.delegate to null, and returning the ContinueSentinel.                                             // 334
            function maybeInvokeDelegate(delegate, context) {
              // 335
              var method = delegate.iterator[context.method]; // 336
              if (method === undefined) {
                // 337
                // A .throw or .return when the delegate iterator has no .throw                                                  // 338
                // method always terminates the yield* loop.                                                                     // 339
                context.delegate = null; // 340
                // 341
                if (context.method === "throw") {
                  // 342
                  if (delegate.iterator.return) {
                    // 343
                    // If the delegate iterator has a return method, give it a                                                   // 344
                    // chance to clean up.                                                                                       // 345
                    context.method = "return"; // 346
                    context.arg = undefined; // 347
                    maybeInvokeDelegate(delegate, context); // 348
                    // 349
                    if (context.method === "throw") {
                      // 350
                      // If maybeInvokeDelegate(context) changed context.method from                                             // 351
                      // "return" to "throw", let that override the TypeError below.                                             // 352
                      return ContinueSentinel; // 353
                    } // 354
                  } // 355
                  // 356
                  context.method = "throw"; // 357
                  context.arg = new TypeError( // 358
                  "The iterator does not provide a 'throw' method"); // 359
                } // 360
                // 361
                return ContinueSentinel; // 362
              } // 363
              // 364
              var record = tryCatch(method, delegate.iterator, context.arg); // 365
              // 366
              if (record.type === "throw") {
                // 367
                context.method = "throw"; // 368
                context.arg = record.arg; // 369
                context.delegate = null; // 370
                return ContinueSentinel; // 371
              } // 372
              // 373
              var info = record.arg; // 374
              // 375
              if (!info) {
                // 376
                context.method = "throw"; // 377
                context.arg = new TypeError("iterator result is not an object"); // 378
                context.delegate = null; // 379
                return ContinueSentinel; // 380
              } // 381
              // 382
              if (info.done) {
                // 383
                // Assign the result of the finished delegate to the temporary                                                   // 384
                // variable specified by delegate.resultName (see delegateYield).                                                // 385
                context[delegate.resultName] = info.value; // 386
                // 387
                // Resume execution at the desired location (see delegateYield).                                                 // 388
                context.next = delegate.nextLoc; // 389
                // 390
                // If context.method was "throw" but the delegate handled the                                                    // 391
                // exception, let the outer generator proceed normally. If                                                       // 392
                // context.method was "next", forget context.arg since it has been                                               // 393
                // "consumed" by the delegate iterator. If context.method was                                                    // 394
                // "return", allow the original .return call to continue in the                                                  // 395
                // outer generator.                                                                                              // 396
                if (context.method !== "return") {
                  // 397
                  context.method = "next"; // 398
                  context.arg = undefined; // 399
                } // 400
                // 401
              } else {
                // 402
                // Re-yield the result returned by the delegate method.                                                          // 403
                return info; // 404
              } // 405
              // 406
              // The delegate iterator is finished, so forget it and continue with                                               // 407
              // the outer generator.                                                                                            // 408
              context.delegate = null; // 409
              return ContinueSentinel; // 410
            } // 411
            // 412
            // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 413
            // unified ._invoke helper method.                                                                                   // 414
            defineIteratorMethods(Gp); // 415
            // 416
            Gp[toStringTagSymbol] = "Generator"; // 417
            // 418
            // A Generator should always return itself as the iterator object when the                                           // 419
            // @@iterator function is called on it. Some browsers' implementations of the                                        // 420
            // iterator prototype chain incorrectly implement this, causing the Generator                                        // 421
            // object to not be returned from this call. This ensures that doesn't happen.                                       // 422
            // See https://github.com/facebook/regenerator/issues/274 for more details.                                          // 423
            Gp[iteratorSymbol] = function () {
              // 424
              return this; // 425
            }; // 426
            // 427
            Gp.toString = function () {
              // 428
              return "[object Generator]"; // 429
            }; // 430
            // 431
            function pushTryEntry(locs) {
              // 432
              var entry = { tryLoc: locs[0] }; // 433
              // 434
              if (1 in locs) {
                // 435
                entry.catchLoc = locs[1]; // 436
              } // 437
              // 438
              if (2 in locs) {
                // 439
                entry.finallyLoc = locs[2]; // 440
                entry.afterLoc = locs[3]; // 441
              } // 442
              // 443
              this.tryEntries.push(entry); // 444
            } // 445
            // 446
            function resetTryEntry(entry) {
              // 447
              var record = entry.completion || {}; // 448
              record.type = "normal"; // 449
              delete record.arg; // 450
              entry.completion = record; // 451
            } // 452
            // 453
            function Context(tryLocsList) {
              // 454
              // The root entry object (effectively a try statement without a catch                                              // 455
              // or a finally block) gives us a place to store values thrown from                                                // 456
              // locations where there is no enclosing try statement.                                                            // 457
              this.tryEntries = [{ tryLoc: "root" }]; // 458
              tryLocsList.forEach(pushTryEntry, this); // 459
              this.reset(true); // 460
            } // 461
            // 462
            runtime.keys = function (object) {
              // 463
              var keys = []; // 464
              for (var key in object) {
                // 465
                keys.push(key); // 466
              } // 467
              keys.reverse(); // 468
              // 469
              // Rather than returning an object with a next method, we keep                                                     // 470
              // things simple and return the next function itself.                                                              // 471
              return function next() {
                // 472
                while (keys.length) {
                  // 473
                  var key = keys.pop(); // 474
                  if (key in object) {
                    // 475
                    next.value = key; // 476
                    next.done = false; // 477
                    return next; // 478
                  } // 479
                } // 480
                // 481
                // To avoid creating an additional object, we just hang the .value                                               // 482
                // and .done properties off the next function object itself. This                                                // 483
                // also ensures that the minifier will not anonymize the function.                                               // 484
                next.done = true; // 485
                return next; // 486
              }; // 487
            }; // 488
            // 489
            function values(iterable) {
              // 490
              if (iterable) {
                // 491
                var iteratorMethod = iterable[iteratorSymbol]; // 492
                if (iteratorMethod) {
                  // 493
                  return iteratorMethod.call(iterable); // 494
                } // 495
                // 496
                if (typeof iterable.next === "function") {
                  // 497
                  return iterable; // 498
                } // 499
                // 500
                if (!isNaN(iterable.length)) {
                  // 501
                  var i = -1,
                      next = function next() {
                    // 502
                    while (++i < iterable.length) {
                      // 503
                      if (hasOwn.call(iterable, i)) {
                        // 504
                        next.value = iterable[i]; // 505
                        next.done = false; // 506
                        return next; // 507
                      } // 508
                    } // 509
                    // 510
                    next.value = undefined; // 511
                    next.done = true; // 512
                    // 513
                    return next; // 514
                  }; // 515
                  // 516
                  return next.next = next; // 517
                } // 518
              } // 519
              // 520
              // Return an iterator with no values.                                                                              // 521
              return { next: doneResult }; // 522
            } // 523
            runtime.values = values; // 524
            // 525
            function doneResult() {
              // 526
              return { value: undefined, done: true }; // 527
            } // 528
            // 529
            Context.prototype = { // 530
              constructor: Context, // 531
              // 532
              reset: function (skipTempReset) {
                // 533
                this.prev = 0; // 534
                this.next = 0; // 535
                // Resetting context._sent for legacy support of Babel's                                                         // 536
                // function.sent implementation.                                                                                 // 537
                this.sent = this._sent = undefined; // 538
                this.done = false; // 539
                this.delegate = null; // 540
                // 541
                this.method = "next"; // 542
                this.arg = undefined; // 543
                // 544
                this.tryEntries.forEach(resetTryEntry); // 545
                // 546
                if (!skipTempReset) {
                  // 547
                  for (var name in this) {
                    // 548
                    // Not sure about the optimal order of these conditions:                                                     // 549
                    if (name.charAt(0) === "t" && // 550
                    hasOwn.call(this, name) && // 551
                    !isNaN(+name.slice(1))) {
                      // 552
                      this[name] = undefined; // 553
                    } // 554
                  } // 555
                } // 556
              }, // 557
              // 558
              stop: function () {
                // 559
                this.done = true; // 560
                // 561
                var rootEntry = this.tryEntries[0]; // 562
                var rootRecord = rootEntry.completion; // 563
                if (rootRecord.type === "throw") {
                  // 564
                  throw rootRecord.arg; // 565
                } // 566
                // 567
                return this.rval; // 568
              }, // 569
              // 570
              dispatchException: function (exception) {
                // 571
                if (this.done) {
                  // 572
                  throw exception; // 573
                } // 574
                // 575
                var context = this; // 576
                function handle(loc, caught) {
                  // 577
                  record.type = "throw"; // 578
                  record.arg = exception; // 579
                  context.next = loc; // 580
                  // 581
                  if (caught) {
                    // 582
                    // If the dispatched exception was caught by a catch block,                                                  // 583
                    // then let that catch block handle the exception normally.                                                  // 584
                    context.method = "next"; // 585
                    context.arg = undefined; // 586
                  } // 587
                  // 588
                  return !!caught; // 589
                } // 590
                // 591
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 592
                  var entry = this.tryEntries[i]; // 593
                  var record = entry.completion; // 594
                  // 595
                  if (entry.tryLoc === "root") {
                    // 596
                    // Exception thrown outside of any try block that could handle                                               // 597
                    // it, so set the completion value of the entire function to                                                 // 598
                    // throw the exception.                                                                                      // 599
                    return handle("end"); // 600
                  } // 601
                  // 602
                  if (entry.tryLoc <= this.prev) {
                    // 603
                    var hasCatch = hasOwn.call(entry, "catchLoc"); // 604
                    var hasFinally = hasOwn.call(entry, "finallyLoc"); // 605
                    // 606
                    if (hasCatch && hasFinally) {
                      // 607
                      if (this.prev < entry.catchLoc) {
                        // 608
                        return handle(entry.catchLoc, true); // 609
                      } else if (this.prev < entry.finallyLoc) {
                        // 610
                        return handle(entry.finallyLoc); // 611
                      } // 612
                      // 613
                    } else if (hasCatch) {
                      // 614
                      if (this.prev < entry.catchLoc) {
                        // 615
                        return handle(entry.catchLoc, true); // 616
                      } // 617
                      // 618
                    } else if (hasFinally) {
                      // 619
                      if (this.prev < entry.finallyLoc) {
                        // 620
                        return handle(entry.finallyLoc); // 621
                      } // 622
                      // 623
                    } else {
                      // 624
                      throw new Error("try statement without catch or finally"); // 625
                    } // 626
                  } // 627
                } // 628
              }, // 629
              // 630
              abrupt: function (type, arg) {
                // 631
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 632
                  var entry = this.tryEntries[i]; // 633
                  if (entry.tryLoc <= this.prev && // 634
                  hasOwn.call(entry, "finallyLoc") && // 635
                  this.prev < entry.finallyLoc) {
                    // 636
                    var finallyEntry = entry; // 637
                    break; // 638
                  } // 639
                } // 640
                // 641
                if (finallyEntry && ( // 642
                type === "break" || // 643
                type === "continue") && // 644
                finallyEntry.tryLoc <= arg && // 645
                arg <= finallyEntry.finallyLoc) {
                  // 646
                  // Ignore the finally entry if control is not jumping to a                                                     // 647
                  // location outside the try/catch block.                                                                       // 648
                  finallyEntry = null; // 649
                } // 650
                // 651
                var record = finallyEntry ? finallyEntry.completion : {}; // 652
                record.type = type; // 653
                record.arg = arg; // 654
                // 655
                if (finallyEntry) {
                  // 656
                  this.method = "next"; // 657
                  this.next = finallyEntry.finallyLoc; // 658
                  return ContinueSentinel; // 659
                } // 660
                // 661
                return this.complete(record); // 662
              }, // 663
              // 664
              complete: function (record, afterLoc) {
                // 665
                if (record.type === "throw") {
                  // 666
                  throw record.arg; // 667
                } // 668
                // 669
                if (record.type === "break" || // 670
                record.type === "continue") {
                  // 671
                  this.next = record.arg; // 672
                } else if (record.type === "return") {
                  // 673
                  this.rval = this.arg = record.arg; // 674
                  this.method = "return"; // 675
                  this.next = "end"; // 676
                } else if (record.type === "normal" && afterLoc) {
                  // 677
                  this.next = afterLoc; // 678
                } // 679
                // 680
                return ContinueSentinel; // 681
              }, // 682
              // 683
              finish: function (finallyLoc) {
                // 684
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 685
                  var entry = this.tryEntries[i]; // 686
                  if (entry.finallyLoc === finallyLoc) {
                    // 687
                    this.complete(entry.completion, entry.afterLoc); // 688
                    resetTryEntry(entry); // 689
                    return ContinueSentinel; // 690
                  } // 691
                } // 692
              }, // 693
              // 694
              "catch": function (tryLoc) {
                // 695
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 696
                  var entry = this.tryEntries[i]; // 697
                  if (entry.tryLoc === tryLoc) {
                    // 698
                    var record = entry.completion; // 699
                    if (record.type === "throw") {
                      // 700
                      var thrown = record.arg; // 701
                      resetTryEntry(entry); // 702
                    } // 703
                    return thrown; // 704
                  } // 705
                } // 706
                // 707
                // The context.catch method must only be called with a location                                                  // 708
                // argument that corresponds to a known catch block.                                                             // 709
                throw new Error("illegal catch attempt"); // 710
              }, // 711
              // 712
              delegateYield: function (iterable, resultName, nextLoc) {
                // 713
                this.delegate = { // 714
                  iterator: values(iterable), // 715
                  resultName: resultName, // 716
                  nextLoc: nextLoc // 717
                }; // 718
                // 719
                if (this.method === "next") {
                  // 720
                  // Deliberately forget the last sent value so that we don't                                                    // 721
                  // accidentally pass it on to the delegate.                                                                    // 722
                  this.arg = undefined; // 723
                } // 724
                // 725
                return ContinueSentinel; // 726
              } // 727
            }; // 728
          }( // 729
          // Among the various tricks for obtaining a reference to the global                                                  // 730
          // object, this seems to be the most reliable technique that does not                                                // 731
          // use indirect eval (which violates Content Security Policy).                                                       // 732
          typeof global === "object" ? global : // 733
          typeof window === "object" ? window : // 734
          typeof self === "object" ? self : this // 735
          ); // 736
          // 737
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } }, "core-js": { "modules": { "es6.symbol.js": function (_require35) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.symbol.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // ECMAScript 6 symbols shim                                                                                           // 2

            var global = _require35('./_global') // 3
            ,
                has = _require35('./_has') // 4
            ,
                DESCRIPTORS = _require35('./_descriptors') // 5
            ,
                $export = _require35('./_export') // 6
            ,
                redefine = _require35('./_redefine') // 7
            ,
                META = _require35('./_meta').KEY // 8
            ,
                $fails = _require35('./_fails') // 9
            ,
                shared = _require35('./_shared') // 10
            ,
                setToStringTag = _require35('./_set-to-string-tag') // 11
            ,
                uid = _require35('./_uid') // 12
            ,
                wks = _require35('./_wks') // 13
            ,
                wksExt = _require35('./_wks-ext') // 14
            ,
                wksDefine = _require35('./_wks-define') // 15
            ,
                keyOf = _require35('./_keyof') // 16
            ,
                enumKeys = _require35('./_enum-keys') // 17
            ,
                isArray = _require35('./_is-array') // 18
            ,
                anObject = _require35('./_an-object') // 19
            ,
                toIObject = _require35('./_to-iobject') // 20
            ,
                toPrimitive = _require35('./_to-primitive') // 21
            ,
                createDesc = _require35('./_property-desc') // 22
            ,
                _create = _require35('./_object-create') // 23
            ,
                gOPNExt = _require35('./_object-gopn-ext') // 24
            ,
                $GOPD = _require35('./_object-gopd') // 25
            ,
                $DP = _require35('./_object-dp') // 26
            ,
                $keys = _require35('./_object-keys') // 27
            ,
                gOPD = $GOPD.f // 28
            ,
                dP = $DP.f // 29
            ,
                gOPN = gOPNExt.f // 30
            ,
                $Symbol = global.Symbol // 31
            ,
                $JSON = global.JSON // 32
            ,
                _stringify = $JSON && $JSON.stringify // 33
            ,
                PROTOTYPE = 'prototype' // 34
            ,
                HIDDEN = wks('_hidden') // 35
            ,
                TO_PRIMITIVE = wks('toPrimitive') // 36
            ,
                isEnum = {}.propertyIsEnumerable // 37
            ,
                SymbolRegistry = shared('symbol-registry') // 38
            ,
                AllSymbols = shared('symbols') // 39
            ,
                OPSymbols = shared('op-symbols') // 40
            ,
                ObjectProto = Object[PROTOTYPE] // 41
            ,
                USE_NATIVE = typeof $Symbol == 'function' // 42
            ,
                QObject = global.QObject; // 43
            // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // 45
            // 46
            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
            var setSymbolDesc = DESCRIPTORS && $fails(function () {
              // 48
              return _create(dP({}, 'a', { // 49
                get: function () {
                  return dP(this, 'a', { value: 7 }).a;
                } // 50
              })).a != 7; // 51
            }) ? function (it, key, D) {
              // 52
              var protoDesc = gOPD(ObjectProto, key); // 53
              if (protoDesc) delete ObjectProto[key]; // 54
              dP(it, key, D); // 55
              if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc); // 56
            } : dP; // 57
            // 58
            var wrap = function (tag) {
              // 59
              var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]); // 60
              sym._k = tag; // 61
              return sym; // 62
            }; // 63
            // 64
            var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
              // 65
              return typeof it == 'symbol'; // 66
            } : function (it) {
              // 67
              return it instanceof $Symbol; // 68
            }; // 69
            // 70
            var $defineProperty = function defineProperty(it, key, D) {
              // 71
              if (it === ObjectProto) $defineProperty(OPSymbols, key, D); // 72
              anObject(it); // 73
              key = toPrimitive(key, true); // 74
              anObject(D); // 75
              if (has(AllSymbols, key)) {
                // 76
                if (!D.enumerable) {
                  // 77
                  if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {})); // 78
                  it[HIDDEN][key] = true; // 79
                } else {
                  // 80
                  if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false; // 81
                  D = _create(D, { enumerable: createDesc(0, false) }); // 82
                }return setSymbolDesc(it, key, D); // 83
              }return dP(it, key, D); // 84
            }; // 85
            var $defineProperties = function defineProperties(it, P) {
              // 86
              anObject(it); // 87
              var keys = enumKeys(P = toIObject(P)) // 88
              ,
                  i = 0 // 89
              ,
                  l = keys.length // 90
              ,
                  key; // 91
              while (l > i) $defineProperty(it, key = keys[i++], P[key]); // 92
              return it; // 93
            }; // 94
            var $create = function create(it, P) {
              // 95
              return P === undefined ? _create(it) : $defineProperties(_create(it), P); // 96
            }; // 97
            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
              // 98
              var E = isEnum.call(this, key = toPrimitive(key, true)); // 99
              if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false; // 100
              return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true; // 101
            }; // 102
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
              // 103
              it = toIObject(it); // 104
              key = toPrimitive(key, true); // 105
              if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return; // 106
              var D = gOPD(it, key); // 107
              if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true; // 108
              return D; // 109
            }; // 110
            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
              // 111
              var names = gOPN(toIObject(it)) // 112
              ,
                  result = [] // 113
              ,
                  i = 0 // 114
              ,
                  key; // 115
              while (names.length > i) {
                // 116
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key); // 117
              }return result; // 118
            }; // 119
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
              // 120
              var IS_OP = it === ObjectProto // 121
              ,
                  names = gOPN(IS_OP ? OPSymbols : toIObject(it)) // 122
              ,
                  result = [] // 123
              ,
                  i = 0 // 124
              ,
                  key; // 125
              while (names.length > i) {
                // 126
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]); // 127
              }return result; // 128
            }; // 129
            // 130
            // 19.4.1.1 Symbol([description])                                                                                      // 131
            if (!USE_NATIVE) {
              // 132
              $Symbol = function Symbol() {
                // 133
                if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!'); // 134
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined); // 135
                var $set = function (value) {
                  // 136
                  if (this === ObjectProto) $set.call(OPSymbols, value); // 137
                  if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false; // 138
                  setSymbolDesc(this, tag, createDesc(1, value)); // 139
                }; // 140
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set }); // 141
                return wrap(tag); // 142
              }; // 143
              redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                // 144
                return this._k; // 145
              }); // 146
              // 147
              $GOPD.f = $getOwnPropertyDescriptor; // 148
              $DP.f = $defineProperty; // 149
              _require35('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames; // 150
              _require35('./_object-pie').f = $propertyIsEnumerable; // 151
              _require35('./_object-gops').f = $getOwnPropertySymbols; // 152
              // 153
              if (DESCRIPTORS && !_require35('./_library')) {
                // 154
                redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true); // 155
              } // 156
              // 157
              wksExt.f = function (name) {
                // 158
                return wrap(wks(name)); // 159
              }; // 160
            } // 161
            // 162
            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol }); // 163
            // 164
            for (var symbols = // 165
            // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables' // 167
            .split(','), i = 0; symbols.length > i;) wks(symbols[i++]); // 168
            // 169
            for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]); // 170
            // 171
            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', { // 172
              // 19.4.2.1 Symbol.for(key)                                                                                          // 173
              'for': function (key) {
                // 174
                return has(SymbolRegistry, key += '') // 175
                ? SymbolRegistry[key] // 176
                : SymbolRegistry[key] = $Symbol(key); // 177
              }, // 178
              // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
              keyFor: function keyFor(key) {
                // 180
                if (isSymbol(key)) return keyOf(SymbolRegistry, key); // 181
                throw TypeError(key + ' is not a symbol!'); // 182
              }, // 183
              useSetter: function () {
                setter = true;
              }, // 184
              useSimple: function () {
                setter = false;
              } // 185
            }); // 186
            // 187
            $export($export.S + $export.F * !USE_NATIVE, 'Object', { // 188
              // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
              create: $create, // 190
              // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
              defineProperty: $defineProperty, // 192
              // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
              defineProperties: $defineProperties, // 194
              // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor, // 196
              // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
              getOwnPropertyNames: $getOwnPropertyNames, // 198
              // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
              getOwnPropertySymbols: $getOwnPropertySymbols // 200
            }); // 201
            // 202
            // 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
              // 204
              var S = $Symbol(); // 205
              // MS Edge converts symbol values to JSON as {}                                                                      // 206
              // WebKit converts symbol values to JSON as null                                                                     // 207
              // V8 throws on boxed symbols                                                                                        // 208
              return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}'; // 209
            })), 'JSON', { // 210
              stringify: function stringify(it) {
                // 211
                if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined                                     // 212
                var args = [it] // 213
                ,
                    i = 1 // 214
                ,
                    replacer,
                    $replacer; // 215
                while (arguments.length > i) args.push(arguments[i++]); // 216
                replacer = args[1]; // 217
                if (typeof replacer == 'function') $replacer = replacer; // 218
                if ($replacer || !isArray(replacer)) replacer = function (key, value) {
                  // 219
                  if ($replacer) value = $replacer.call(this, key, value); // 220
                  if (!isSymbol(value)) return value; // 221
                }; // 222
                args[1] = replacer; // 223
                return _stringify.apply($JSON, args); // 224
              } // 225
            }); // 226
            // 227
            // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
            $Symbol[PROTOTYPE][TO_PRIMITIVE] || _require35('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 229
            // 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
            setToStringTag($Symbol, 'Symbol'); // 231
            // 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
            setToStringTag(Math, 'Math', true); // 233
            // 24.3.3 JSON[@@toStringTag]                                                                                          // 234
            setToStringTag(global.JSON, 'JSON', true); // 235
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_global.js": function (_require36, _exports32, _module24) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_global.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
            var global = _module24.exports = typeof window != 'undefined' && window.Math == Math // 2
            ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')(); // 3
            if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                                // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_has.js": function (_require37, _exports33, _module25) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_has.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var hasOwnProperty = {}.hasOwnProperty; // 1
            _module25.exports = function (it, key) {
              // 2
              return hasOwnProperty.call(it, key); // 3
            }; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_descriptors.js": function (_require38, _exports34, _module26) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_descriptors.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Thank's IE8 for his funny defineProperty                                                                            // 1
            _module26.exports = !_require38('./_fails')(function () {
              // 2
              return Object.defineProperty({}, 'a', { get: function () {
                  return 7;
                } }).a != 7; // 3
            }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fails.js": function (_require39, _exports35, _module27) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_fails.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module27.exports = function (exec) {
              // 1
              try {
                // 2
                return !!exec(); // 3
              } catch (e) {
                // 4
                return true; // 5
              } // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_export.js": function (_require40, _exports37, _module28) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_export.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require40('./_global') // 1
            ,
                core = _require40('./_core') // 2
            ,
                hide = _require40('./_hide') // 3
            ,
                redefine = _require40('./_redefine') // 4
            ,
                ctx = _require40('./_ctx') // 5
            ,
                PROTOTYPE = 'prototype'; // 6
            // 7
            var $export = function (type, name, source) {
              // 8
              var IS_FORCED = type & $export.F // 9
              ,
                  IS_GLOBAL = type & $export.G // 10
              ,
                  IS_STATIC = type & $export.S // 11
              ,
                  IS_PROTO = type & $export.P // 12
              ,
                  IS_BIND = type & $export.B // 13
              ,
                  target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
                  _exports36 = IS_GLOBAL ? core : core[name] || (core[name] = {}) // 15
              ,
                  expProto = _exports36[PROTOTYPE] || (_exports36[PROTOTYPE] = {}) // 16
              ,
                  key,
                  own,
                  out,
                  exp; // 17
              if (IS_GLOBAL) source = name; // 18
              for (key in source) {
                // 19
                // contains in native                                                                                              // 20
                own = !IS_FORCED && target && target[key] !== undefined; // 21
                // export native or passed                                                                                         // 22
                out = (own ? target : source)[key]; // 23
                // bind timers to global for call from export context                                                              // 24
                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // 25
                // extend global                                                                                                   // 26
                if (target) redefine(target, key, out, type & $export.U); // 27
                // export                                                                                                          // 28
                if (_exports36[key] != out) hide(_exports36, key, exp); // 29
                if (IS_PROTO && expProto[key] != out) expProto[key] = out; // 30
              } // 31
            }; // 32
            global.core = core; // 33
            // type bitmap                                                                                                         // 34
            $export.F = 1; // forced                                                                                             // 35
            $export.G = 2; // global                                                                                             // 36
            $export.S = 4; // static                                                                                             // 37
            $export.P = 8; // proto                                                                                              // 38
            $export.B = 16; // bind                                                                                               // 39
            $export.W = 32; // wrap                                                                                               // 40
            $export.U = 64; // safe                                                                                               // 41
            $export.R = 128; // real proto method for `library`                                                                    // 42
            _module28.exports = $export; // 43
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_core.js": function (_require41, _exports38, _module29) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_core.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var core = _module29.exports = { version: '2.4.0' }; // 1
            if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                  // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_hide.js": function (_require42, _exports39, _module30) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_hide.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require42('./_object-dp') // 1
            ,
                createDesc = _require42('./_property-desc'); // 2
            _module30.exports = _require42('./_descriptors') ? function (object, key, value) {
              // 3
              return dP.f(object, key, createDesc(1, value)); // 4
            } : function (object, key, value) {
              // 5
              object[key] = value; // 6
              return object; // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-dp.js": function (_require43, _exports40) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-dp.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var anObject = _require43('./_an-object') // 1
            ,
                IE8_DOM_DEFINE = _require43('./_ie8-dom-define') // 2
            ,
                toPrimitive = _require43('./_to-primitive') // 3
            ,
                dP = Object.defineProperty; // 4
            // 5
            _exports40.f = _require43('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
              // 6
              anObject(O); // 7
              P = toPrimitive(P, true); // 8
              anObject(Attributes); // 9
              if (IE8_DOM_DEFINE) try {
                // 10
                return dP(O, P, Attributes); // 11
              } catch (e) {} /* empty */ // 12
              if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!'); // 13
              if ('value' in Attributes) O[P] = Attributes.value; // 14
              return O; // 15
            }; // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_an-object.js": function (_require44, _exports41, _module31) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_an-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require44('./_is-object'); // 1
            _module31.exports = function (it) {
              // 2
              if (!isObject(it)) throw TypeError(it + ' is not an object!'); // 3
              return it; // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-object.js": function (_require45, _exports42, _module32) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module32.exports = function (it) {
              // 1
              return typeof it === 'object' ? it !== null : typeof it === 'function'; // 2
            }; // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_ie8-dom-define.js": function (_require46, _exports43, _module33) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_ie8-dom-define.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module33.exports = !_require46('./_descriptors') && !_require46('./_fails')(function () {
              // 1
              return Object.defineProperty(_require46('./_dom-create')('div'), 'a', { get: function () {
                  return 7;
                } }).a != 7; // 2
            }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_dom-create.js": function (_require47, _exports44, _module34) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_dom-create.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require47('./_is-object') // 1
            ,
                document = _require47('./_global').document // 2
            // in old IE typeof document.createElement is 'object'                                                               // 3
            ,
                is = isObject(document) && isObject(document.createElement); // 4
            _module34.exports = function (it) {
              // 5
              return is ? document.createElement(it) : {}; // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-primitive.js": function (_require48, _exports45, _module35) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-primitive.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
            var isObject = _require48('./_is-object'); // 2
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
            // and the second argument - flag - preferred type is a string                                                         // 4
            _module35.exports = function (it, S) {
              // 5
              if (!isObject(it)) return it; // 6
              var fn, val; // 7
              if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 8
              if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val; // 9
              if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 10
              throw TypeError("Can't convert object to primitive value"); // 11
            }; // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_property-desc.js": function (_require49, _exports46, _module36) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_property-desc.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module36.exports = function (bitmap, value) {
              // 1
              return { // 2
                enumerable: !(bitmap & 1), // 3
                configurable: !(bitmap & 2), // 4
                writable: !(bitmap & 4), // 5
                value: value // 6
              }; // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_redefine.js": function (_require50, _exports47, _module37) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_redefine.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require50('./_global') // 1
            ,
                hide = _require50('./_hide') // 2
            ,
                has = _require50('./_has') // 3
            ,
                SRC = _require50('./_uid')('src') // 4
            ,
                TO_STRING = 'toString' // 5
            ,
                $toString = Function[TO_STRING] // 6
            ,
                TPL = ('' + $toString).split(TO_STRING); // 7
            // 8
            _require50('./_core').inspectSource = function (it) {
              // 9
              return $toString.call(it); // 10
            }; // 11
            // 12
            (_module37.exports = function (O, key, val, safe) {
              // 13
              var isFunction = typeof val == 'function'; // 14
              if (isFunction) has(val, 'name') || hide(val, 'name', key); // 15
              if (O[key] === val) return; // 16
              if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); // 17
              if (O === global) {
                // 18
                O[key] = val; // 19
              } else {
                // 20
                if (!safe) {
                  // 21
                  delete O[key]; // 22
                  hide(O, key, val); // 23
                } else {
                  // 24
                  if (O[key]) O[key] = val; // 25
                  else hide(O, key, val); // 26
                } // 27
              } // 28
              // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative        // 29
            })(Function.prototype, TO_STRING, function toString() {
              // 30
              return typeof this == 'function' && this[SRC] || $toString.call(this); // 31
            }); // 32
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_uid.js": function (_require51, _exports48, _module38) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_uid.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var id = 0 // 1
            ,
                px = Math.random(); // 2
            _module38.exports = function (key) {
              // 3
              return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36)); // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_ctx.js": function (_require52, _exports49, _module39) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_ctx.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // optional / simple context binding                                                                                   // 1
            var aFunction = _require52('./_a-function'); // 2
            _module39.exports = function (fn, that, length) {
              // 3
              aFunction(fn); // 4
              if (that === undefined) return fn; // 5
              switch (length) {// 6
                case 1:
                  return function (a) {
                    // 7
                    return fn.call(that, a); // 8
                  }; // 9
                case 2:
                  return function (a, b) {
                    // 10
                    return fn.call(that, a, b); // 11
                  }; // 12
                case 3:
                  return function (a, b, c) {
                    // 13
                    return fn.call(that, a, b, c); // 14
                  }; // 15
              } // 16
              return function () /* ...args */{
                // 17
                return fn.apply(that, arguments); // 18
              }; // 19
            }; // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_a-function.js": function (_require53, _exports50, _module40) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_a-function.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module40.exports = function (it) {
              // 1
              if (typeof it != 'function') throw TypeError(it + ' is not a function!'); // 2
              return it; // 3
            }; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_meta.js": function (_require54, _exports51, _module41) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_meta.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var META = _require54('./_uid')('meta') // 1
            ,
                isObject = _require54('./_is-object') // 2
            ,
                has = _require54('./_has') // 3
            ,
                setDesc = _require54('./_object-dp').f // 4
            ,
                id = 0; // 5
            var isExtensible = Object.isExtensible || function () {
              // 6
              return true; // 7
            }; // 8
            var FREEZE = !_require54('./_fails')(function () {
              // 9
              return isExtensible(Object.preventExtensions({})); // 10
            }); // 11
            var setMeta = function (it) {
              // 12
              setDesc(it, META, { value: { // 13
                  i: 'O' + ++id, // object ID                                                                                        // 14
                  w: {} // weak collections IDs                                                                             // 15
                } }); // 16
            }; // 17
            var fastKey = function (it, create) {
              // 18
              // return primitive with prefix                                                                                      // 19
              if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it; // 20
              if (!has(it, META)) {
                // 21
                // can't set metadata to uncaught frozen object                                                                    // 22
                if (!isExtensible(it)) return 'F'; // 23
                // not necessary to add metadata                                                                                   // 24
                if (!create) return 'E'; // 25
                // add missing metadata                                                                                            // 26
                setMeta(it); // 27
                // return object ID                                                                                                  // 28
              }return it[META].i; // 29
            }; // 30
            var getWeak = function (it, create) {
              // 31
              if (!has(it, META)) {
                // 32
                // can't set metadata to uncaught frozen object                                                                    // 33
                if (!isExtensible(it)) return true; // 34
                // not necessary to add metadata                                                                                   // 35
                if (!create) return false; // 36
                // add missing metadata                                                                                            // 37
                setMeta(it); // 38
                // return hash weak collections IDs                                                                                  // 39
              }return it[META].w; // 40
            }; // 41
            // add metadata on freeze-family methods calling                                                                       // 42
            var onFreeze = function (it) {
              // 43
              if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it); // 44
              return it; // 45
            }; // 46
            var meta = _module41.exports = { // 47
              KEY: META, // 48
              NEED: false, // 49
              fastKey: fastKey, // 50
              getWeak: getWeak, // 51
              onFreeze: onFreeze // 52
            }; // 53
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_shared.js": function (_require55, _exports52, _module42) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_shared.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require55('./_global') // 1
            ,
                SHARED = '__core-js_shared__' // 2
            ,
                store = global[SHARED] || (global[SHARED] = {}); // 3
            _module42.exports = function (key) {
              // 4
              return store[key] || (store[key] = {}); // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-to-string-tag.js": function (_require56, _exports53, _module43) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_set-to-string-tag.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var def = _require56('./_object-dp').f // 1
            ,
                has = _require56('./_has') // 2
            ,
                TAG = _require56('./_wks')('toStringTag'); // 3
            // 4
            _module43.exports = function (it, tag, stat) {
              // 5
              if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag }); // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks.js": function (_require57, _exports54, _module44) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var store = _require57('./_shared')('wks') // 1
            ,
                uid = _require57('./_uid') // 2
            ,
                Symbol = _require57('./_global').Symbol // 3
            ,
                USE_SYMBOL = typeof Symbol == 'function'; // 4
            // 5
            var $exports = _module44.exports = function (name) {
              // 6
              return store[name] || (store[name] = // 7
              USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name)); // 8
            }; // 9
            // 10
            $exports.store = store; // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks-ext.js": function (_require58, _exports55) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks-ext.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports55.f = _require58('./_wks'); // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks-define.js": function (_require59, _exports56, _module45) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks-define.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require59('./_global') // 1
            ,
                core = _require59('./_core') // 2
            ,
                LIBRARY = _require59('./_library') // 3
            ,
                wksExt = _require59('./_wks-ext') // 4
            ,
                defineProperty = _require59('./_object-dp').f; // 5
            _module45.exports = function (name) {
              // 6
              var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {}); // 7
              if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) }); // 8
            }; // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_library.js": function (_require60, _exports57, _module46) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_library.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module46.exports = false; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_keyof.js": function (_require61, _exports58, _module47) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_keyof.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var getKeys = _require61('./_object-keys') // 1
            ,
                toIObject = _require61('./_to-iobject'); // 2
            _module47.exports = function (object, el) {
              // 3
              var O = toIObject(object) // 4
              ,
                  keys = getKeys(O) // 5
              ,
                  length = keys.length // 6
              ,
                  index = 0 // 7
              ,
                  key; // 8
              while (length > index) if (O[key = keys[index++]] === el) return key; // 9
            }; // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-keys.js": function (_require62, _exports59, _module48) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-keys.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
            var $keys = _require62('./_object-keys-internal') // 2
            ,
                enumBugKeys = _require62('./_enum-bug-keys'); // 3
            // 4
            _module48.exports = Object.keys || function keys(O) {
              // 5
              return $keys(O, enumBugKeys); // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-keys-internal.js": function (_require63, _exports60, _module49) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-keys-internal.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var has = _require63('./_has') // 1
            ,
                toIObject = _require63('./_to-iobject') // 2
            ,
                arrayIndexOf = _require63('./_array-includes')(false) // 3
            ,
                IE_PROTO = _require63('./_shared-key')('IE_PROTO'); // 4
            // 5
            _module49.exports = function (object, names) {
              // 6
              var O = toIObject(object) // 7
              ,
                  i = 0 // 8
              ,
                  result = [] // 9
              ,
                  key; // 10
              for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // 11
              // Don't enum bug & hidden keys                                                                                      // 12
              while (names.length > i) if (has(O, key = names[i++])) {
                // 13
                ~arrayIndexOf(result, key) || result.push(key); // 14
              } // 15
              return result; // 16
            }; // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-iobject.js": function (_require64, _exports61, _module50) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-iobject.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
            var IObject = _require64('./_iobject') // 2
            ,
                defined = _require64('./_defined'); // 3
            _module50.exports = function (it) {
              // 4
              return IObject(defined(it)); // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iobject.js": function (_require65, _exports62, _module51) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iobject.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
            var cof = _require65('./_cof'); // 2
            _module51.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
              // 3
              return cof(it) == 'String' ? it.split('') : Object(it); // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_cof.js": function (_require66, _exports63, _module52) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_cof.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toString = {}.toString; // 1
            // 2
            _module52.exports = function (it) {
              // 3
              return toString.call(it).slice(8, -1); // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_defined.js": function (_require67, _exports64, _module53) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_defined.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
            _module53.exports = function (it) {
              // 2
              if (it == undefined) throw TypeError("Can't call method on  " + it); // 3
              return it; // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-includes.js": function (_require68, _exports65, _module54) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-includes.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // false -> Array#indexOf                                                                                              // 1
            // true  -> Array#includes                                                                                             // 2
            var toIObject = _require68('./_to-iobject') // 3
            ,
                toLength = _require68('./_to-length') // 4
            ,
                toIndex = _require68('./_to-index'); // 5
            _module54.exports = function (IS_INCLUDES) {
              // 6
              return function ($this, el, fromIndex) {
                // 7
                var O = toIObject($this) // 8
                ,
                    length = toLength(O.length) // 9
                ,
                    index = toIndex(fromIndex, length) // 10
                ,
                    value; // 11
                // Array#includes uses SameValueZero equality algorithm                                                            // 12
                if (IS_INCLUDES && el != el) while (length > index) {
                  // 13
                  value = O[index++]; // 14
                  if (value != value) return true; // 15
                  // Array#toIndex ignores holes, Array#includes - not                                                               // 16
                } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                  // 17
                  if (O[index] === el) return IS_INCLUDES || index || 0; // 18
                }return !IS_INCLUDES && -1; // 19
              }; // 20
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-length.js": function (_require69, _exports66, _module55) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-length.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.15 ToLength                                                                                                     // 1
            var toInteger = _require69('./_to-integer') // 2
            ,
                min = Math.min; // 3
            _module55.exports = function (it) {
              // 4
              return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-integer.js": function (_require70, _exports67, _module56) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-integer.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.4 ToInteger                                                                                                     // 1
            var ceil = Math.ceil // 2
            ,
                floor = Math.floor; // 3
            _module56.exports = function (it) {
              // 4
              return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it); // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-index.js": function (_require71, _exports68, _module57) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-index.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toInteger = _require71('./_to-integer') // 1
            ,
                max = Math.max // 2
            ,
                min = Math.min; // 3
            _module57.exports = function (index, length) {
              // 4
              index = toInteger(index); // 5
              return index < 0 ? max(index + length, 0) : min(index, length); // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_shared-key.js": function (_require72, _exports69, _module58) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_shared-key.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var shared = _require72('./_shared')('keys') // 1
            ,
                uid = _require72('./_uid'); // 2
            _module58.exports = function (key) {
              // 3
              return shared[key] || (shared[key] = uid(key)); // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_enum-bug-keys.js": function (_require73, _exports70, _module59) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_enum-bug-keys.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // IE 8- don't enum bug keys                                                                                           // 1
            _module59.exports = // 2
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf' // 3
            .split(','); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_enum-keys.js": function (_require74, _exports71, _module60) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_enum-keys.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // all enumerable object keys, includes symbols                                                                        // 1
            var getKeys = _require74('./_object-keys') // 2
            ,
                gOPS = _require74('./_object-gops') // 3
            ,
                pIE = _require74('./_object-pie'); // 4
            _module60.exports = function (it) {
              // 5
              var result = getKeys(it) // 6
              ,
                  getSymbols = gOPS.f; // 7
              if (getSymbols) {
                // 8
                var symbols = getSymbols(it) // 9
                ,
                    isEnum = pIE.f // 10
                ,
                    i = 0 // 11
                ,
                    key; // 12
                while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key); // 13
              }return result; // 14
            }; // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gops.js": function (_require75, _exports72) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gops.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports72.f = Object.getOwnPropertySymbols; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-pie.js": function (_require76, _exports73) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-pie.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports73.f = {}.propertyIsEnumerable; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-array.js": function (_require77, _exports74, _module61) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-array.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.2 IsArray(argument)                                                                                             // 1
            var cof = _require77('./_cof'); // 2
            _module61.exports = Array.isArray || function isArray(arg) {
              // 3
              return cof(arg) == 'Array'; // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-create.js": function (_require78, _exports75, _module62) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-create.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
            var anObject = _require78('./_an-object') // 2
            ,
                dPs = _require78('./_object-dps') // 3
            ,
                enumBugKeys = _require78('./_enum-bug-keys') // 4
            ,
                IE_PROTO = _require78('./_shared-key')('IE_PROTO') // 5
            ,
                Empty = function () {} /* empty */ // 6
            ,
                PROTOTYPE = 'prototype'; // 7
            // 8
            // Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
            var createDict = function () {
              // 10
              // Thrash, waste and sodomy: IE GC bug                                                                               // 11
              var iframe = _require78('./_dom-create')('iframe') // 12
              ,
                  i = enumBugKeys.length // 13
              ,
                  lt = '<' // 14
              ,
                  gt = '>' // 15
              ,
                  iframeDocument; // 16
              iframe.style.display = 'none'; // 17
              _require78('./_html').appendChild(iframe); // 18
              iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
              // createDict = iframe.contentWindow.Object;                                                                         // 20
              // html.removeChild(iframe);                                                                                         // 21
              iframeDocument = iframe.contentWindow.document; // 22
              iframeDocument.open(); // 23
              iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt); // 24
              iframeDocument.close(); // 25
              createDict = iframeDocument.F; // 26
              while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]]; // 27
              return createDict(); // 28
            }; // 29
            // 30
            _module62.exports = Object.create || function create(O, Properties) {
              // 31
              var result; // 32
              if (O !== null) {
                // 33
                Empty[PROTOTYPE] = anObject(O); // 34
                result = new Empty(); // 35
                Empty[PROTOTYPE] = null; // 36
                // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
                result[IE_PROTO] = O; // 38
              } else result = createDict(); // 39
              return Properties === undefined ? result : dPs(result, Properties); // 40
            }; // 41
            // 42
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-dps.js": function (_require79, _exports76, _module63) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-dps.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require79('./_object-dp') // 1
            ,
                anObject = _require79('./_an-object') // 2
            ,
                getKeys = _require79('./_object-keys'); // 3
            // 4
            _module63.exports = _require79('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
              // 5
              anObject(O); // 6
              var keys = getKeys(Properties) // 7
              ,
                  length = keys.length // 8
              ,
                  i = 0 // 9
              ,
                  P; // 10
              while (length > i) dP.f(O, P = keys[i++], Properties[P]); // 11
              return O; // 12
            }; // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_html.js": function (_require80, _exports77, _module64) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_html.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module64.exports = _require80('./_global').document && document.documentElement; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopn-ext.js": function (_require81, _exports78, _module65) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopn-ext.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
            var toIObject = _require81('./_to-iobject') // 2
            ,
                gOPN = _require81('./_object-gopn').f // 3
            ,
                toString = {}.toString; // 4
            // 5
            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames // 6
            ? Object.getOwnPropertyNames(window) : []; // 7
            // 8
            var getWindowNames = function (it) {
              // 9
              try {
                // 10
                return gOPN(it); // 11
              } catch (e) {
                // 12
                return windowNames.slice(); // 13
              } // 14
            }; // 15
            // 16
            _module65.exports.f = function getOwnPropertyNames(it) {
              // 17
              return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it)); // 18
            }; // 19
            // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopn.js": function (_require82, _exports79) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopn.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
            var $keys = _require82('./_object-keys-internal') // 2
            ,
                hiddenKeys = _require82('./_enum-bug-keys').concat('length', 'prototype'); // 3
            // 4
            _exports79.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
              // 5
              return $keys(O, hiddenKeys); // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopd.js": function (_require83, _exports80) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopd.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var pIE = _require83('./_object-pie') // 1
            ,
                createDesc = _require83('./_property-desc') // 2
            ,
                toIObject = _require83('./_to-iobject') // 3
            ,
                toPrimitive = _require83('./_to-primitive') // 4
            ,
                has = _require83('./_has') // 5
            ,
                IE8_DOM_DEFINE = _require83('./_ie8-dom-define') // 6
            ,
                gOPD = Object.getOwnPropertyDescriptor; // 7
            // 8
            _exports80.f = _require83('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
              // 9
              O = toIObject(O); // 10
              P = toPrimitive(P, true); // 11
              if (IE8_DOM_DEFINE) try {
                // 12
                return gOPD(O, P); // 13
              } catch (e) {} /* empty */ // 14
              if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]); // 15
            }; // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.map.js": function (_require84, _exports81, _module66) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.map.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var strong = _require84('./_collection-strong'); // 2
            // 3
            // 23.1 Map Objects                                                                                                    // 4
            _module66.exports = _require84('./_collection')('Map', function (get) {
              // 5
              return function Map() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 6
            }, { // 7
              // 23.1.3.6 Map.prototype.get(key)                                                                                   // 8
              get: function get(key) {
                // 9
                var entry = strong.getEntry(this, key); // 10
                return entry && entry.v; // 11
              }, // 12
              // 23.1.3.9 Map.prototype.set(key, value)                                                                            // 13
              set: function set(key, value) {
                // 14
                return strong.def(this, key === 0 ? 0 : key, value); // 15
              } // 16
            }, strong, true); // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection-strong.js": function (_require85, _exports82, _module67) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_collection-strong.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var dP = _require85('./_object-dp').f // 2
            ,
                create = _require85('./_object-create') // 3
            ,
                redefineAll = _require85('./_redefine-all') // 4
            ,
                ctx = _require85('./_ctx') // 5
            ,
                anInstance = _require85('./_an-instance') // 6
            ,
                defined = _require85('./_defined') // 7
            ,
                forOf = _require85('./_for-of') // 8
            ,
                $iterDefine = _require85('./_iter-define') // 9
            ,
                step = _require85('./_iter-step') // 10
            ,
                setSpecies = _require85('./_set-species') // 11
            ,
                DESCRIPTORS = _require85('./_descriptors') // 12
            ,
                fastKey = _require85('./_meta').fastKey // 13
            ,
                SIZE = DESCRIPTORS ? '_s' : 'size'; // 14
            // 15
            var getEntry = function (that, key) {
              // 16
              // fast case                                                                                                         // 17
              var index = fastKey(key),
                  entry; // 18
              if (index !== 'F') return that._i[index]; // 19
              // frozen object case                                                                                                // 20
              for (entry = that._f; entry; entry = entry.n) {
                // 21
                if (entry.k == key) return entry; // 22
              } // 23
            }; // 24
            // 25
            _module67.exports = { // 26
              getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                // 27
                var C = wrapper(function (that, iterable) {
                  // 28
                  anInstance(that, C, NAME, '_i'); // 29
                  that._i = create(null); // index                                                                                 // 30
                  that._f = undefined; // first entry                                                                           // 31
                  that._l = undefined; // last entry                                                                            // 32
                  that[SIZE] = 0; // size                                                                                  // 33
                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 34
                }); // 35
                redefineAll(C.prototype, { // 36
                  // 23.1.3.1 Map.prototype.clear()                                                                                // 37
                  // 23.2.3.2 Set.prototype.clear()                                                                                // 38
                  clear: function clear() {
                    // 39
                    for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
                      // 40
                      entry.r = true; // 41
                      if (entry.p) entry.p = entry.p.n = undefined; // 42
                      delete data[entry.i]; // 43
                    } // 44
                    that._f = that._l = undefined; // 45
                    that[SIZE] = 0; // 46
                  }, // 47
                  // 23.1.3.3 Map.prototype.delete(key)                                                                            // 48
                  // 23.2.3.4 Set.prototype.delete(value)                                                                          // 49
                  'delete': function (key) {
                    // 50
                    var that = this // 51
                    ,
                        entry = getEntry(that, key); // 52
                    if (entry) {
                      // 53
                      var next = entry.n // 54
                      ,
                          prev = entry.p; // 55
                      delete that._i[entry.i]; // 56
                      entry.r = true; // 57
                      if (prev) prev.n = next; // 58
                      if (next) next.p = prev; // 59
                      if (that._f == entry) that._f = next; // 60
                      if (that._l == entry) that._l = prev; // 61
                      that[SIZE]--; // 62
                    }return !!entry; // 63
                  }, // 64
                  // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                                               // 65
                  // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                                               // 66
                  forEach: function forEach(callbackfn /*, that = undefined */) {
                    // 67
                    anInstance(this, C, 'forEach'); // 68
                    var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3) // 69
                    ,
                        entry; // 70
                    while (entry = entry ? entry.n : this._f) {
                      // 71
                      f(entry.v, entry.k, this); // 72
                      // revert to the last existing entry                                                                         // 73
                      while (entry && entry.r) entry = entry.p; // 74
                    } // 75
                  }, // 76
                  // 23.1.3.7 Map.prototype.has(key)                                                                               // 77
                  // 23.2.3.7 Set.prototype.has(value)                                                                             // 78
                  has: function has(key) {
                    // 79
                    return !!getEntry(this, key); // 80
                  } // 81
                }); // 82
                if (DESCRIPTORS) dP(C.prototype, 'size', { // 83
                  get: function () {
                    // 84
                    return defined(this[SIZE]); // 85
                  } // 86
                }); // 87
                return C; // 88
              }, // 89
              def: function (that, key, value) {
                // 90
                var entry = getEntry(that, key) // 91
                ,
                    prev,
                    index; // 92
                // change existing entry                                                                                           // 93
                if (entry) {
                  // 94
                  entry.v = value; // 95
                  // create new entry                                                                                                // 96
                } else {
                  // 97
                  that._l = entry = { // 98
                    i: index = fastKey(key, true), // <- index                                                                     // 99
                    k: key, // <- key                                                                       // 100
                    v: value, // <- value                                                                     // 101
                    p: prev = that._l, // <- previous entry                                                            // 102
                    n: undefined, // <- next entry                                                                // 103
                    r: false // <- removed                                                                   // 104
                  }; // 105
                  if (!that._f) that._f = entry; // 106
                  if (prev) prev.n = entry; // 107
                  that[SIZE]++; // 108
                  // add to index                                                                                                  // 109
                  if (index !== 'F') that._i[index] = entry; // 110
                }return that; // 111
              }, // 112
              getEntry: getEntry, // 113
              setStrong: function (C, NAME, IS_MAP) {
                // 114
                // add .keys, .values, .entries, [@@iterator]                                                                      // 115
                // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11                              // 116
                $iterDefine(C, NAME, function (iterated, kind) {
                  // 117
                  this._t = iterated; // target                                                                                   // 118
                  this._k = kind; // kind                                                                                     // 119
                  this._l = undefined; // previous                                                                                 // 120
                }, function () {
                  // 121
                  var that = this // 122
                  ,
                      kind = that._k // 123
                  ,
                      entry = that._l; // 124
                  // revert to the last existing entry                                                                             // 125
                  while (entry && entry.r) entry = entry.p; // 126
                  // get next entry                                                                                                // 127
                  if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                    // 128
                    // or finish the iteration                                                                                     // 129
                    that._t = undefined; // 130
                    return step(1); // 131
                  } // 132
                  // return step by kind                                                                                           // 133
                  if (kind == 'keys') return step(0, entry.k); // 134
                  if (kind == 'values') return step(0, entry.v); // 135
                  return step(0, [entry.k, entry.v]); // 136
                }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // 137
                // 138
                // add [@@species], 23.1.2.2, 23.2.2.2                                                                             // 139
                setSpecies(NAME); // 140
              } // 141
            }; // 142
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_redefine-all.js": function (_require86, _exports83, _module68) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_redefine-all.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var redefine = _require86('./_redefine'); // 1
            _module68.exports = function (target, src, safe) {
              // 2
              for (var key in src) redefine(target, key, src[key], safe); // 3
              return target; // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_an-instance.js": function (_require87, _exports84, _module69) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_an-instance.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module69.exports = function (it, Constructor, name, forbiddenField) {
              // 1
              if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                // 2
                throw TypeError(name + ': incorrect invocation!'); // 3
              }return it; // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_for-of.js": function (_require88, exports, _module70) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_for-of.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var ctx = _require88('./_ctx') // 1
            ,
                call = _require88('./_iter-call') // 2
            ,
                isArrayIter = _require88('./_is-array-iter') // 3
            ,
                anObject = _require88('./_an-object') // 4
            ,
                toLength = _require88('./_to-length') // 5
            ,
                getIterFn = _require88('./core.get-iterator-method') // 6
            ,
                BREAK = {} // 7
            ,
                RETURN = {}; // 8
            var _exports85 = _module70.exports = function (iterable, entries, fn, that, ITERATOR) {
              // 9
              var iterFn = ITERATOR ? function () {
                return iterable;
              } : getIterFn(iterable) // 10
              ,
                  f = ctx(fn, that, entries ? 2 : 1) // 11
              ,
                  index = 0 // 12
              ,
                  length,
                  step,
                  iterator,
                  result; // 13
              if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // 14
              // fast case for arrays with default iterator                                                                        // 15
              if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                // 16
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]); // 17
                if (result === BREAK || result === RETURN) return result; // 18
              } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                // 19
                result = call(iterator, f, step.value, entries); // 20
                if (result === BREAK || result === RETURN) return result; // 21
              } // 22
            }; // 23
            _exports85.BREAK = BREAK; // 24
            _exports85.RETURN = RETURN; // 25
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-call.js": function (_require89, _exports86, _module71) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-call.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // call something on iterator step with safe closing on error                                                          // 1
            var anObject = _require89('./_an-object'); // 2
            _module71.exports = function (iterator, fn, value, entries) {
              // 3
              try {
                // 4
                return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 5
                // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
              } catch (e) {
                // 7
                var ret = iterator['return']; // 8
                if (ret !== undefined) anObject(ret.call(iterator)); // 9
                throw e; // 10
              } // 11
            }; // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-array-iter.js": function (_require90, _exports87, _module72) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-array-iter.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // check on default Array iterator                                                                                     // 1
            var Iterators = _require90('./_iterators') // 2
            ,
                ITERATOR = _require90('./_wks')('iterator') // 3
            ,
                ArrayProto = Array.prototype; // 4
            // 5
            _module72.exports = function (it) {
              // 6
              return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it); // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iterators.js": function (_require91, _exports88, _module73) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iterators.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module73.exports = {}; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "core.get-iterator-method.js": function (_require92, _exports89, _module74) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/core.get-iterator-method.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var classof = _require92('./_classof') // 1
            ,
                ITERATOR = _require92('./_wks')('iterator') // 2
            ,
                Iterators = _require92('./_iterators'); // 3
            _module74.exports = _require92('./_core').getIteratorMethod = function (it) {
              // 4
              if (it != undefined) return it[ITERATOR] // 5
              || it['@@iterator'] // 6
              || Iterators[classof(it)]; // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_classof.js": function (_require93, _exports90, _module75) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_classof.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
            var cof = _require93('./_cof') // 2
            ,
                TAG = _require93('./_wks')('toStringTag') // 3
            // ES3 wrong here                                                                                                    // 4
            ,
                ARG = cof(function () {
              return arguments;
            }()) == 'Arguments'; // 5
            // 6
            // fallback for IE11 Script Access Denied error                                                                        // 7
            var tryGet = function (it, key) {
              // 8
              try {
                // 9
                return it[key]; // 10
              } catch (e) {} /* empty */ // 11
            }; // 12
            // 13
            _module75.exports = function (it) {
              // 14
              var O, T, B; // 15
              return it === undefined ? 'Undefined' : it === null ? 'Null' // 16
              // @@toStringTag case                                                                                              // 17
              : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // 18
              // builtinTag case                                                                                                 // 19
              : ARG ? cof(O) // 20
              // ES3 arguments fallback                                                                                          // 21
              : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B; // 22
            }; // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-define.js": function (_require94, _exports91, _module76) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-define.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var LIBRARY = _require94('./_library') // 2
            ,
                $export = _require94('./_export') // 3
            ,
                redefine = _require94('./_redefine') // 4
            ,
                hide = _require94('./_hide') // 5
            ,
                has = _require94('./_has') // 6
            ,
                Iterators = _require94('./_iterators') // 7
            ,
                $iterCreate = _require94('./_iter-create') // 8
            ,
                setToStringTag = _require94('./_set-to-string-tag') // 9
            ,
                getPrototypeOf = _require94('./_object-gpo') // 10
            ,
                ITERATOR = _require94('./_wks')('iterator') // 11
            ,
                BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
            ,
                FF_ITERATOR = '@@iterator' // 13
            ,
                KEYS = 'keys' // 14
            ,
                VALUES = 'values'; // 15
            // 16
            var returnThis = function () {
              return this;
            }; // 17
            // 18
            _module76.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
              // 19
              $iterCreate(Constructor, NAME, next); // 20
              var getMethod = function (kind) {
                // 21
                if (!BUGGY && kind in proto) return proto[kind]; // 22
                switch (kind) {// 23
                  case KEYS:
                    return function keys() {
                      return new Constructor(this, kind);
                    }; // 24
                  case VALUES:
                    return function values() {
                      return new Constructor(this, kind);
                    }; // 25
                }return function entries() {
                  return new Constructor(this, kind);
                }; // 26
              }; // 27
              var TAG = NAME + ' Iterator' // 28
              ,
                  DEF_VALUES = DEFAULT == VALUES // 29
              ,
                  VALUES_BUG = false // 30
              ,
                  proto = Base.prototype // 31
              ,
                  $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT] // 32
              ,
                  $default = $native || getMethod(DEFAULT) // 33
              ,
                  $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined // 34
              ,
                  $anyNative = NAME == 'Array' ? proto.entries || $native : $native // 35
              ,
                  methods,
                  key,
                  IteratorPrototype; // 36
              // Fix native                                                                                                        // 37
              if ($anyNative) {
                // 38
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base())); // 39
                if (IteratorPrototype !== Object.prototype) {
                  // 40
                  // Set @@toStringTag to native iterators                                                                         // 41
                  setToStringTag(IteratorPrototype, TAG, true); // 42
                  // fix for some old engines                                                                                      // 43
                  if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis); // 44
                } // 45
              } // 46
              // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
              if (DEF_VALUES && $native && $native.name !== VALUES) {
                // 48
                VALUES_BUG = true; // 49
                $default = function values() {
                  return $native.call(this);
                }; // 50
              } // 51
              // Define iterator                                                                                                   // 52
              if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                // 53
                hide(proto, ITERATOR, $default); // 54
              } // 55
              // Plug for library                                                                                                  // 56
              Iterators[NAME] = $default; // 57
              Iterators[TAG] = returnThis; // 58
              if (DEFAULT) {
                // 59
                methods = { // 60
                  values: DEF_VALUES ? $default : getMethod(VALUES), // 61
                  keys: IS_SET ? $default : getMethod(KEYS), // 62
                  entries: $entries // 63
                }; // 64
                if (FORCED) for (key in methods) {
                  // 65
                  if (!(key in proto)) redefine(proto, key, methods[key]); // 66
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods); // 67
              } // 68
              return methods; // 69
            }; // 70
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-create.js": function (_require95, _exports92, _module77) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-create.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var create = _require95('./_object-create') // 2
            ,
                descriptor = _require95('./_property-desc') // 3
            ,
                setToStringTag = _require95('./_set-to-string-tag') // 4
            ,
                IteratorPrototype = {}; // 5
            // 6
            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
            _require95('./_hide')(IteratorPrototype, _require95('./_wks')('iterator'), function () {
              return this;
            }); // 8
            // 9
            _module77.exports = function (Constructor, NAME, next) {
              // 10
              Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) }); // 11
              setToStringTag(Constructor, NAME + ' Iterator'); // 12
            }; // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gpo.js": function (_require96, _exports93, _module78) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gpo.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
            var has = _require96('./_has') // 2
            ,
                toObject = _require96('./_to-object') // 3
            ,
                IE_PROTO = _require96('./_shared-key')('IE_PROTO') // 4
            ,
                ObjectProto = Object.prototype; // 5
            // 6
            _module78.exports = Object.getPrototypeOf || function (O) {
              // 7
              O = toObject(O); // 8
              if (has(O, IE_PROTO)) return O[IE_PROTO]; // 9
              if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                // 10
                return O.constructor.prototype; // 11
              }return O instanceof Object ? ObjectProto : null; // 12
            }; // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-object.js": function (_require97, _exports94, _module79) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.13 ToObject(argument)                                                                                           // 1
            var defined = _require97('./_defined'); // 2
            _module79.exports = function (it) {
              // 3
              return Object(defined(it)); // 4
            }; // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-step.js": function (_require98, _exports95, _module80) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-step.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module80.exports = function (done, value) {
              // 1
              return { value: value, done: !!done }; // 2
            }; // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-species.js": function (_require99, _exports96, _module81) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_set-species.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var global = _require99('./_global') // 2
            ,
                dP = _require99('./_object-dp') // 3
            ,
                DESCRIPTORS = _require99('./_descriptors') // 4
            ,
                SPECIES = _require99('./_wks')('species'); // 5
            // 6
            _module81.exports = function (KEY) {
              // 7
              var C = global[KEY]; // 8
              if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, { // 9
                configurable: true, // 10
                get: function () {
                  return this;
                } // 11
              }); // 12
            }; // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection.js": function (_require100, _exports97, _module82) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_collection.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var global = _require100('./_global') // 2
            ,
                $export = _require100('./_export') // 3
            ,
                redefine = _require100('./_redefine') // 4
            ,
                redefineAll = _require100('./_redefine-all') // 5
            ,
                meta = _require100('./_meta') // 6
            ,
                forOf = _require100('./_for-of') // 7
            ,
                anInstance = _require100('./_an-instance') // 8
            ,
                isObject = _require100('./_is-object') // 9
            ,
                fails = _require100('./_fails') // 10
            ,
                $iterDetect = _require100('./_iter-detect') // 11
            ,
                setToStringTag = _require100('./_set-to-string-tag') // 12
            ,
                inheritIfRequired = _require100('./_inherit-if-required'); // 13
            // 14
            _module82.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
              // 15
              var Base = global[NAME] // 16
              ,
                  C = Base // 17
              ,
                  ADDER = IS_MAP ? 'set' : 'add' // 18
              ,
                  proto = C && C.prototype // 19
              ,
                  O = {}; // 20
              var fixMethod = function (KEY) {
                // 21
                var fn = proto[KEY]; // 22
                redefine(proto, KEY, // 23
                KEY == 'delete' ? function (a) {
                  // 24
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a); // 25
                } : KEY == 'has' ? function has(a) {
                  // 26
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a); // 27
                } : KEY == 'get' ? function get(a) {
                  // 28
                  return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a); // 29
                } : KEY == 'add' ? function add(a) {
                  fn.call(this, a === 0 ? 0 : a);return this;
                } // 30
                : function set(a, b) {
                  fn.call(this, a === 0 ? 0 : a, b);return this;
                } // 31
                ); // 32
              }; // 33
              if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
                // 34
                new C().entries().next(); // 35
              }))) {
                // 36
                // create collection constructor                                                                                   // 37
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER); // 38
                redefineAll(C.prototype, methods); // 39
                meta.NEED = true; // 40
              } else {
                // 41
                var instance = new C() // 42
                // early implementations not supports chaining                                                                   // 43
                ,
                    HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance // 44
                // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false                             // 45
                ,
                    THROWS_ON_PRIMITIVES = fails(function () {
                  instance.has(1);
                }) // 46
                // most early implementations doesn't supports iterables, most modern - not close it correctly                   // 47
                ,
                    ACCEPT_ITERABLES = $iterDetect(function (iter) {
                  new C(iter);
                }) // eslint-disable-line no-new               // 48
                // for early implementations -0 and +0 not the same                                                              // 49
                ,
                    BUGGY_ZERO = !IS_WEAK && fails(function () {
                  // 50
                  // V8 ~ Chromium 42- fails only with 5+ elements                                                               // 51
                  var $instance = new C() // 52
                  ,
                      index = 5; // 53
                  while (index--) $instance[ADDER](index, index); // 54
                  return !$instance.has(-0); // 55
                }); // 56
                if (!ACCEPT_ITERABLES) {
                  // 57
                  C = wrapper(function (target, iterable) {
                    // 58
                    anInstance(target, C, NAME); // 59
                    var that = inheritIfRequired(new Base(), target, C); // 60
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 61
                    return that; // 62
                  }); // 63
                  C.prototype = proto; // 64
                  proto.constructor = C; // 65
                } // 66
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                  // 67
                  fixMethod('delete'); // 68
                  fixMethod('has'); // 69
                  IS_MAP && fixMethod('get'); // 70
                } // 71
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // 72
                // weak collections should not contains .clear method                                                              // 73
                if (IS_WEAK && proto.clear) delete proto.clear; // 74
              } // 75
              // 76
              setToStringTag(C, NAME); // 77
              // 78
              O[NAME] = C; // 79
              $export($export.G + $export.W + $export.F * (C != Base), O); // 80
              // 81
              if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP); // 82
              // 83
              return C; // 84
            }; // 85
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-detect.js": function (_require101, _exports98, _module83) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-detect.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var ITERATOR = _require101('./_wks')('iterator') // 1
            ,
                SAFE_CLOSING = false; // 2
            // 3
            try {
              // 4
              var riter = [7][ITERATOR](); // 5
              riter['return'] = function () {
                SAFE_CLOSING = true;
              }; // 6
              Array.from(riter, function () {
                throw 2;
              }); // 7
            } catch (e) {} /* empty */ // 8
            // 9
            _module83.exports = function (exec, skipClosing) {
              // 10
              if (!skipClosing && !SAFE_CLOSING) return false; // 11
              var safe = false; // 12
              try {
                // 13
                var arr = [7] // 14
                ,
                    iter = arr[ITERATOR](); // 15
                iter.next = function () {
                  return { done: safe = true };
                }; // 16
                arr[ITERATOR] = function () {
                  return iter;
                }; // 17
                exec(arr); // 18
              } catch (e) {} /* empty */ // 19
              return safe; // 20
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_inherit-if-required.js": function (_require102, _exports99, _module84) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_inherit-if-required.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require102('./_is-object') // 1
            ,
                setPrototypeOf = _require102('./_set-proto').set; // 2
            _module84.exports = function (that, target, C) {
              // 3
              var P,
                  S = target.constructor; // 4
              if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                // 5
                setPrototypeOf(that, P); // 6
              }return that; // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-proto.js": function (_require103, _exports100, _module85) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_set-proto.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
            /* eslint-disable no-proto */ // 2
            var isObject = _require103('./_is-object') // 3
            ,
                anObject = _require103('./_an-object'); // 4
            var check = function (O, proto) {
              // 5
              anObject(O); // 6
              if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!"); // 7
            }; // 8
            _module85.exports = { // 9
              set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
              function (test, buggy, set) {
                // 11
                try {
                  // 12
                  set = _require103('./_ctx')(Function.call, _require103('./_object-gopd').f(Object.prototype, '__proto__').set, 2); // 13
                  set(test, []); // 14
                  buggy = !(test instanceof Array); // 15
                } catch (e) {
                  buggy = true;
                } // 16
                return function setPrototypeOf(O, proto) {
                  // 17
                  check(O, proto); // 18
                  if (buggy) O.__proto__ = proto; // 19
                  else set(O, proto); // 20
                  return O; // 21
                }; // 22
              }({}, false) : undefined), // 23
              check: check // 24
            }; // 25
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.set.js": function (_require104, _exports101, _module86) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.set.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var strong = _require104('./_collection-strong'); // 2
            // 3
            // 23.2 Set Objects                                                                                                    // 4
            _module86.exports = _require104('./_collection')('Set', function (get) {
              // 5
              return function Set() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 6
            }, { // 7
              // 23.2.3.1 Set.prototype.add(value)                                                                                 // 8
              add: function add(value) {
                // 9
                return strong.def(this, value = value === 0 ? 0 : value, value); // 10
              } // 11
            }, strong); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.iterator.js": function (_require105) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.iterator.js                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $at = _require105('./_string-at')(true); // 2
            // 3
            // 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
            _require105('./_iter-define')(String, 'String', function (iterated) {
              // 5
              this._t = String(iterated); // target                                                                                // 6
              this._i = 0; // next index                                                                            // 7
              // 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
            }, function () {
              // 9
              var O = this._t // 10
              ,
                  index = this._i // 11
              ,
                  point; // 12
              if (index >= O.length) return { value: undefined, done: true }; // 13
              point = $at(O, index); // 14
              this._i += point.length; // 15
              return { value: point, done: false }; // 16
            }); // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-at.js": function (_require106, _exports102, _module87) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-at.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toInteger = _require106('./_to-integer') // 1
            ,
                defined = _require106('./_defined'); // 2
            // true  -> String#at                                                                                                  // 3
            // false -> String#codePointAt                                                                                         // 4
            _module87.exports = function (TO_STRING) {
              // 5
              return function (that, pos) {
                // 6
                var s = String(defined(that)) // 7
                ,
                    i = toInteger(pos) // 8
                ,
                    l = s.length // 9
                ,
                    a,
                    b; // 10
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined; // 11
                a = s.charCodeAt(i); // 12
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff // 13
                ? TO_STRING ? s.charAt(i) : a // 14
                : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000; // 15
              }; // 16
            }; // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.is-array.js": function (_require107) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.is-array.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)                                                                              // 1
            var $export = _require107('./_export'); // 2
            // 3
            $export($export.S, 'Array', { isArray: _require107('./_is-array') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.from.js": function (_require108) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.from.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var ctx = _require108('./_ctx') // 2
            ,
                $export = _require108('./_export') // 3
            ,
                toObject = _require108('./_to-object') // 4
            ,
                call = _require108('./_iter-call') // 5
            ,
                isArrayIter = _require108('./_is-array-iter') // 6
            ,
                toLength = _require108('./_to-length') // 7
            ,
                createProperty = _require108('./_create-property') // 8
            ,
                getIterFn = _require108('./core.get-iterator-method'); // 9
            // 10
            $export($export.S + $export.F * !_require108('./_iter-detect')(function (iter) {
              Array.from(iter);
            }), 'Array', { // 11
              // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
              from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
                // 13
                var O = toObject(arrayLike) // 14
                ,
                    C = typeof this == 'function' ? this : Array // 15
                ,
                    aLen = arguments.length // 16
                ,
                    mapfn = aLen > 1 ? arguments[1] : undefined // 17
                ,
                    mapping = mapfn !== undefined // 18
                ,
                    index = 0 // 19
                ,
                    iterFn = getIterFn(O) // 20
                ,
                    length,
                    result,
                    step,
                    iterator; // 21
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // 22
                // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                  // 24
                  for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                    // 25
                    createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value); // 26
                  } // 27
                } else {
                  // 28
                  length = toLength(O.length); // 29
                  for (result = new C(length); length > index; index++) {
                    // 30
                    createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]); // 31
                  } // 32
                } // 33
                result.length = index; // 34
                return result; // 35
              } // 36
            }); // 37
            // 38
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_create-property.js": function (_require109, _exports103, _module88) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_create-property.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $defineProperty = _require109('./_object-dp') // 2
            ,
                createDesc = _require109('./_property-desc'); // 3
            // 4
            _module88.exports = function (object, index, value) {
              // 5
              if (index in object) $defineProperty.f(object, index, createDesc(0, value)); // 6
              else object[index] = value; // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.of.js": function (_require110) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.of.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require110('./_export') // 2
            ,
                createProperty = _require110('./_create-property'); // 3
            // 4
            // WebKit Array.of isn't generic                                                                                       // 5
            $export($export.S + $export.F * _require110('./_fails')(function () {
              // 6
              function F() {} // 7
              return !(Array.of.call(F) instanceof F); // 8
            }), 'Array', { // 9
              // 22.1.2.3 Array.of( ...items)                                                                                      // 10
              of: function of() /* ...args */{
                // 11
                var index = 0 // 12
                ,
                    aLen = arguments.length // 13
                ,
                    result = new (typeof this == 'function' ? this : Array)(aLen); // 14
                while (aLen > index) createProperty(result, index, arguments[index++]); // 15
                result.length = aLen; // 16
                return result; // 17
              } // 18
            }); // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.join.js": function (_require111) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.join.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 22.1.3.13 Array.prototype.join(separator)                                                                           // 2

            var $export = _require111('./_export') // 3
            ,
                toIObject = _require111('./_to-iobject') // 4
            ,
                arrayJoin = [].join; // 5
            // 6
            // fallback for not array-like strings                                                                                 // 7
            $export($export.P + $export.F * (_require111('./_iobject') != Object || !_require111('./_strict-method')(arrayJoin)), 'Array', {
              join: function join(separator) {
                // 9
                return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator); // 10
              } // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_strict-method.js": function (_require112, _exports104, _module89) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_strict-method.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var fails = _require112('./_fails'); // 1
            // 2
            _module89.exports = function (method, arg) {
              // 3
              return !!method && fails(function () {
                // 4
                arg ? method.call(null, function () {}, 1) : method.call(null); // 5
              }); // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.slice.js": function (_require113) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.slice.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require113('./_export') // 2
            ,
                html = _require113('./_html') // 3
            ,
                cof = _require113('./_cof') // 4
            ,
                toIndex = _require113('./_to-index') // 5
            ,
                toLength = _require113('./_to-length') // 6
            ,
                arraySlice = [].slice; // 7
            // 8
            // fallback for not array-like ES3 strings and DOM objects                                                             // 9
            $export($export.P + $export.F * _require113('./_fails')(function () {
              // 10
              if (html) arraySlice.call(html); // 11
            }), 'Array', { // 12
              slice: function slice(begin, end) {
                // 13
                var len = toLength(this.length) // 14
                ,
                    klass = cof(this); // 15
                end = end === undefined ? len : end; // 16
                if (klass == 'Array') return arraySlice.call(this, begin, end); // 17
                var start = toIndex(begin, len) // 18
                ,
                    upTo = toIndex(end, len) // 19
                ,
                    size = toLength(upTo - start) // 20
                ,
                    cloned = Array(size) // 21
                ,
                    i = 0; // 22
                for (; i < size; i++) cloned[i] = klass == 'String' // 23
                ? this.charAt(start + i) // 24
                : this[start + i]; // 25
                return cloned; // 26
              } // 27
            }); // 28
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.sort.js": function (_require114) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.sort.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require114('./_export') // 2
            ,
                aFunction = _require114('./_a-function') // 3
            ,
                toObject = _require114('./_to-object') // 4
            ,
                fails = _require114('./_fails') // 5
            ,
                $sort = [].sort // 6
            ,
                test = [1, 2, 3]; // 7
            // 8
            $export($export.P + $export.F * (fails(function () {
              // 9
              // IE8-                                                                                                              // 10
              test.sort(undefined); // 11
            }) || !fails(function () {
              // 12
              // V8 bug                                                                                                            // 13
              test.sort(null); // 14
              // Old WebKit                                                                                                        // 15
            }) || !_require114('./_strict-method')($sort)), 'Array', { // 16
              // 22.1.3.25 Array.prototype.sort(comparefn)                                                                         // 17
              sort: function sort(comparefn) {
                // 18
                return comparefn === undefined // 19
                ? $sort.call(toObject(this)) // 20
                : $sort.call(toObject(this), aFunction(comparefn)); // 21
              } // 22
            }); // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.for-each.js": function (_require115) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.for-each.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require115('./_export') // 2
            ,
                $forEach = _require115('./_array-methods')(0) // 3
            ,
                STRICT = _require115('./_strict-method')([].forEach, true); // 4
            // 5
            $export($export.P + $export.F * !STRICT, 'Array', { // 6
              // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])                                             // 7
              forEach: function forEach(callbackfn /* , thisArg */) {
                // 8
                return $forEach(this, callbackfn, arguments[1]); // 9
              } // 10
            }); // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-methods.js": function (_require116, _exports105, _module90) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-methods.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 0 -> Array#forEach                                                                                                  // 1
            // 1 -> Array#map                                                                                                      // 2
            // 2 -> Array#filter                                                                                                   // 3
            // 3 -> Array#some                                                                                                     // 4
            // 4 -> Array#every                                                                                                    // 5
            // 5 -> Array#find                                                                                                     // 6
            // 6 -> Array#findIndex                                                                                                // 7
            var ctx = _require116('./_ctx') // 8
            ,
                IObject = _require116('./_iobject') // 9
            ,
                toObject = _require116('./_to-object') // 10
            ,
                toLength = _require116('./_to-length') // 11
            ,
                asc = _require116('./_array-species-create'); // 12
            _module90.exports = function (TYPE, $create) {
              // 13
              var IS_MAP = TYPE == 1 // 14
              ,
                  IS_FILTER = TYPE == 2 // 15
              ,
                  IS_SOME = TYPE == 3 // 16
              ,
                  IS_EVERY = TYPE == 4 // 17
              ,
                  IS_FIND_INDEX = TYPE == 6 // 18
              ,
                  NO_HOLES = TYPE == 5 || IS_FIND_INDEX // 19
              ,
                  create = $create || asc; // 20
              return function ($this, callbackfn, that) {
                // 21
                var O = toObject($this) // 22
                ,
                    self = IObject(O) // 23
                ,
                    f = ctx(callbackfn, that, 3) // 24
                ,
                    length = toLength(self.length) // 25
                ,
                    index = 0 // 26
                ,
                    result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined // 27
                ,
                    val,
                    res; // 28
                for (; length > index; index++) if (NO_HOLES || index in self) {
                  // 29
                  val = self[index]; // 30
                  res = f(val, index, O); // 31
                  if (TYPE) {
                    // 32
                    if (IS_MAP) result[index] = res; // map                                                               // 33
                    else if (res) switch (TYPE) {// 34
                        case 3:
                          return true; // some                                                              // 35
                        case 5:
                          return val; // find                                                              // 36
                        case 6:
                          return index; // findIndex                                                         // 37
                        case 2:
                          result.push(val); // filter                                                            // 38
                      } else if (IS_EVERY) return false; // every                                                             // 39
                  } // 40
                } // 41
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result; // 42
              }; // 43
            }; // 44
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-species-create.js": function (_require117, _exports106, _module91) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-species-create.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                                   // 1
            var speciesConstructor = _require117('./_array-species-constructor'); // 2
            // 3
            _module91.exports = function (original, length) {
              // 4
              return new (speciesConstructor(original))(length); // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-species-constructor.js": function (_require118, _exports107, _module92) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-species-constructor.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require118('./_is-object') // 1
            ,
                isArray = _require118('./_is-array') // 2
            ,
                SPECIES = _require118('./_wks')('species'); // 3
            // 4
            _module92.exports = function (original) {
              // 5
              var C; // 6
              if (isArray(original)) {
                // 7
                C = original.constructor; // 8
                // cross-realm fallback                                                                                            // 9
                if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined; // 10
                if (isObject(C)) {
                  // 11
                  C = C[SPECIES]; // 12
                  if (C === null) C = undefined; // 13
                } // 14
              }return C === undefined ? Array : C; // 15
            }; // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.map.js": function (_require119) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.map.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require119('./_export') // 2
            ,
                $map = _require119('./_array-methods')(1); // 3
            // 4
            $export($export.P + $export.F * !_require119('./_strict-method')([].map, true), 'Array', { // 5
              // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])                                                 // 6
              map: function map(callbackfn /* , thisArg */) {
                // 7
                return $map(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.filter.js": function (_require120) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.filter.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require120('./_export') // 2
            ,
                $filter = _require120('./_array-methods')(2); // 3
            // 4
            $export($export.P + $export.F * !_require120('./_strict-method')([].filter, true), 'Array', { // 5
              // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])                                               // 6
              filter: function filter(callbackfn /* , thisArg */) {
                // 7
                return $filter(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.some.js": function (_require121) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.some.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require121('./_export') // 2
            ,
                $some = _require121('./_array-methods')(3); // 3
            // 4
            $export($export.P + $export.F * !_require121('./_strict-method')([].some, true), 'Array', { // 5
              // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])                                                // 6
              some: function some(callbackfn /* , thisArg */) {
                // 7
                return $some(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.every.js": function (_require122) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.every.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require122('./_export') // 2
            ,
                $every = _require122('./_array-methods')(4); // 3
            // 4
            $export($export.P + $export.F * !_require122('./_strict-method')([].every, true), 'Array', { // 5
              // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])                                                // 6
              every: function every(callbackfn /* , thisArg */) {
                // 7
                return $every(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.reduce.js": function (_require123) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.reduce.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require123('./_export') // 2
            ,
                $reduce = _require123('./_array-reduce'); // 3
            // 4
            $export($export.P + $export.F * !_require123('./_strict-method')([].reduce, true), 'Array', { // 5
              // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])                                         // 6
              reduce: function reduce(callbackfn /* , initialValue */) {
                // 7
                return $reduce(this, callbackfn, arguments.length, arguments[1], false); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-reduce.js": function (_require124, _exports108, _module93) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-reduce.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var aFunction = _require124('./_a-function') // 1
            ,
                toObject = _require124('./_to-object') // 2
            ,
                IObject = _require124('./_iobject') // 3
            ,
                toLength = _require124('./_to-length'); // 4
            // 5
            _module93.exports = function (that, callbackfn, aLen, memo, isRight) {
              // 6
              aFunction(callbackfn); // 7
              var O = toObject(that) // 8
              ,
                  self = IObject(O) // 9
              ,
                  length = toLength(O.length) // 10
              ,
                  index = isRight ? length - 1 : 0 // 11
              ,
                  i = isRight ? -1 : 1; // 12
              if (aLen < 2) for (;;) {
                // 13
                if (index in self) {
                  // 14
                  memo = self[index]; // 15
                  index += i; // 16
                  break; // 17
                } // 18
                index += i; // 19
                if (isRight ? index < 0 : length <= index) {
                  // 20
                  throw TypeError('Reduce of empty array with no initial value'); // 21
                } // 22
              } // 23
              for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
                // 24
                memo = callbackfn(memo, self[index], index, O); // 25
              } // 26
              return memo; // 27
            }; // 28
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.reduce-right.js": function (_require125) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.reduce-right.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require125('./_export') // 2
            ,
                $reduce = _require125('./_array-reduce'); // 3
            // 4
            $export($export.P + $export.F * !_require125('./_strict-method')([].reduceRight, true), 'Array', { // 5
              // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])                                    // 6
              reduceRight: function reduceRight(callbackfn /* , initialValue */) {
                // 7
                return $reduce(this, callbackfn, arguments.length, arguments[1], true); // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.index-of.js": function (_require126) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.index-of.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require126('./_export') // 2
            ,
                $indexOf = _require126('./_array-includes')(false) // 3
            ,
                $native = [].indexOf // 4
            ,
                NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0; // 5
            // 6
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_require126('./_strict-method')($native)), 'Array', { // 7
              // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])                                        // 8
              indexOf: function indexOf(searchElement /*, fromIndex = 0 */) {
                // 9
                return NEGATIVE_ZERO // 10
                // convert -0 to +0                                                                                              // 11
                ? $native.apply(this, arguments) || 0 // 12
                : $indexOf(this, searchElement, arguments[1]); // 13
              } // 14
            }); // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.last-index-of.js": function (_require127) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.last-index-of.js                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require127('./_export') // 2
            ,
                toIObject = _require127('./_to-iobject') // 3
            ,
                toInteger = _require127('./_to-integer') // 4
            ,
                toLength = _require127('./_to-length') // 5
            ,
                $native = [].lastIndexOf // 6
            ,
                NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0; // 7
            // 8
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_require127('./_strict-method')($native)), 'Array', { // 9
              // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])                                    // 10
              lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */) {
                // 11
                // convert -0 to +0                                                                                                // 12
                if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0; // 13
                var O = toIObject(this) // 14
                ,
                    length = toLength(O.length) // 15
                ,
                    index = length - 1; // 16
                if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1])); // 17
                if (index < 0) index = length + index; // 18
                for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0; // 19
                return -1; // 20
              } // 21
            }); // 22
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.copy-within.js": function (_require128) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.copy-within.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
            var $export = _require128('./_export'); // 2
            // 3
            $export($export.P, 'Array', { copyWithin: _require128('./_array-copy-within') }); // 4
            // 5
            _require128('./_add-to-unscopables')('copyWithin'); // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-copy-within.js": function (_require129, _exports109, _module94) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-copy-within.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
            'use strict'; // 2

            var toObject = _require129('./_to-object') // 3
            ,
                toIndex = _require129('./_to-index') // 4
            ,
                toLength = _require129('./_to-length'); // 5
            // 6
            _module94.exports = [].copyWithin || function copyWithin(target /*= 0*/, start /*= 0, end = @length*/) {
              // 7
              var O = toObject(this) // 8
              ,
                  len = toLength(O.length) // 9
              ,
                  to = toIndex(target, len) // 10
              ,
                  from = toIndex(start, len) // 11
              ,
                  end = arguments.length > 2 ? arguments[2] : undefined // 12
              ,
                  count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to) // 13
              ,
                  inc = 1; // 14
              if (from < to && to < from + count) {
                // 15
                inc = -1; // 16
                from += count - 1; // 17
                to += count - 1; // 18
              } // 19
              while (count-- > 0) {
                // 20
                if (from in O) O[to] = O[from]; // 21
                else delete O[to]; // 22
                to += inc; // 23
                from += inc; // 24
              }return O; // 25
            }; // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_add-to-unscopables.js": function (_require130, _exports110, _module95) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_add-to-unscopables.js                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.31 Array.prototype[@@unscopables]                                                                            // 1
            var UNSCOPABLES = _require130('./_wks')('unscopables') // 2
            ,
                ArrayProto = Array.prototype; // 3
            if (ArrayProto[UNSCOPABLES] == undefined) _require130('./_hide')(ArrayProto, UNSCOPABLES, {}); // 4
            _module95.exports = function (key) {
              // 5
              ArrayProto[UNSCOPABLES][key] = true; // 6
            }; // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.fill.js": function (_require131) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.fill.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
            var $export = _require131('./_export'); // 2
            // 3
            $export($export.P, 'Array', { fill: _require131('./_array-fill') }); // 4
            // 5
            _require131('./_add-to-unscopables')('fill'); // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-fill.js": function (_require132, _exports111, _module96) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-fill.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
            'use strict'; // 2

            var toObject = _require132('./_to-object') // 3
            ,
                toIndex = _require132('./_to-index') // 4
            ,
                toLength = _require132('./_to-length'); // 5
            _module96.exports = function fill(value /*, start = 0, end = @length */) {
              // 6
              var O = toObject(this) // 7
              ,
                  length = toLength(O.length) // 8
              ,
                  aLen = arguments.length // 9
              ,
                  index = toIndex(aLen > 1 ? arguments[1] : undefined, length) // 10
              ,
                  end = aLen > 2 ? arguments[2] : undefined // 11
              ,
                  endPos = end === undefined ? length : toIndex(end, length); // 12
              while (endPos > index) O[index++] = value; // 13
              return O; // 14
            }; // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.find.js": function (_require133) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.find.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                                       // 2

            var $export = _require133('./_export') // 3
            ,
                $find = _require133('./_array-methods')(5) // 4
            ,
                KEY = 'find' // 5
            ,
                forced = true; // 6
            // Shouldn't skip holes                                                                                                // 7
            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            }); // 8
            $export($export.P + $export.F * forced, 'Array', { // 9
              find: function find(callbackfn /*, that = undefined */) {
                // 10
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 11
              } // 12
            }); // 13
            _require133('./_add-to-unscopables')(KEY); // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.find-index.js": function (_require134) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.find-index.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                                  // 2

            var $export = _require134('./_export') // 3
            ,
                $find = _require134('./_array-methods')(6) // 4
            ,
                KEY = 'findIndex' // 5
            ,
                forced = true; // 6
            // Shouldn't skip holes                                                                                                // 7
            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            }); // 8
            $export($export.P + $export.F * forced, 'Array', { // 9
              findIndex: function findIndex(callbackfn /*, that = undefined */) {
                // 10
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 11
              } // 12
            }); // 13
            _require134('./_add-to-unscopables')(KEY); // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.species.js": function (_require135) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.species.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require135('./_set-species')('Array'); // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.iterator.js": function (_require136, _exports112, _module97) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.iterator.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var addToUnscopables = _require136('./_add-to-unscopables') // 2
            ,
                step = _require136('./_iter-step') // 3
            ,
                Iterators = _require136('./_iterators') // 4
            ,
                toIObject = _require136('./_to-iobject'); // 5
            // 6
            // 22.1.3.4 Array.prototype.entries()                                                                                  // 7
            // 22.1.3.13 Array.prototype.keys()                                                                                    // 8
            // 22.1.3.29 Array.prototype.values()                                                                                  // 9
            // 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
            _module97.exports = _require136('./_iter-define')(Array, 'Array', function (iterated, kind) {
              // 11
              this._t = toIObject(iterated); // target                                                                             // 12
              this._i = 0; // next index                                                                         // 13
              this._k = kind; // kind                                                                               // 14
              // 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
            }, function () {
              // 16
              var O = this._t // 17
              ,
                  kind = this._k // 18
              ,
                  index = this._i++; // 19
              if (!O || index >= O.length) {
                // 20
                this._t = undefined; // 21
                return step(1); // 22
              } // 23
              if (kind == 'keys') return step(0, index); // 24
              if (kind == 'values') return step(0, O[index]); // 25
              return step(0, [index, O[index]]); // 26
            }, 'values'); // 27
            // 28
            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
            Iterators.Arguments = Iterators.Array; // 30
            // 31
            addToUnscopables('keys'); // 32
            addToUnscopables('values'); // 33
            addToUnscopables('entries'); // 34
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.bind.js": function (_require137) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.function.bind.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)                                                       // 1
            var $export = _require137('./_export'); // 2
            // 3
            $export($export.P, 'Function', { bind: _require137('./_bind') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_bind.js": function (_require138, _exports113, _module98) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_bind.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var aFunction = _require138('./_a-function') // 2
            ,
                isObject = _require138('./_is-object') // 3
            ,
                invoke = _require138('./_invoke') // 4
            ,
                arraySlice = [].slice // 5
            ,
                factories = {}; // 6
            // 7
            var construct = function (F, len, args) {
              // 8
              if (!(len in factories)) {
                // 9
                for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']'; // 10
                factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')'); // 11
              }return factories[len](F, args); // 12
            }; // 13
            // 14
            _module98.exports = Function.bind || function bind(that /*, args... */) {
              // 15
              var fn = aFunction(this) // 16
              ,
                  partArgs = arraySlice.call(arguments, 1); // 17
              var bound = function () /* args... */{
                // 18
                var args = partArgs.concat(arraySlice.call(arguments)); // 19
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that); // 20
              }; // 21
              if (isObject(fn.prototype)) bound.prototype = fn.prototype; // 22
              return bound; // 23
            }; // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_invoke.js": function (_require139, _exports114, _module99) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_invoke.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fast apply, http://jsperf.lnkit.com/fast-apply/5                                                                    // 1
            _module99.exports = function (fn, args, that) {
              // 2
              var un = that === undefined; // 3
              switch (args.length) {// 4
                case 0:
                  return un ? fn() // 5
                  : fn.call(that); // 6
                case 1:
                  return un ? fn(args[0]) // 7
                  : fn.call(that, args[0]); // 8
                case 2:
                  return un ? fn(args[0], args[1]) // 9
                  : fn.call(that, args[0], args[1]); // 10
                case 3:
                  return un ? fn(args[0], args[1], args[2]) // 11
                  : fn.call(that, args[0], args[1], args[2]); // 12
                case 4:
                  return un ? fn(args[0], args[1], args[2], args[3]) // 13
                  : fn.call(that, args[0], args[1], args[2], args[3]); // 14
              }return fn.apply(that, args); // 15
            }; // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.name.js": function (_require140) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.function.name.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require140('./_object-dp').f // 1
            ,
                createDesc = _require140('./_property-desc') // 2
            ,
                has = _require140('./_has') // 3
            ,
                FProto = Function.prototype // 4
            ,
                nameRE = /^\s*function ([^ (]*)/ // 5
            ,
                NAME = 'name'; // 6
            // 7
            var isExtensible = Object.isExtensible || function () {
              // 8
              return true; // 9
            }; // 10
            // 11
            // 19.2.4.2 name                                                                                                       // 12
            NAME in FProto || _require140('./_descriptors') && dP(FProto, NAME, { // 13
              configurable: true, // 14
              get: function () {
                // 15
                try {
                  // 16
                  var that = this // 17
                  ,
                      name = ('' + that).match(nameRE)[1]; // 18
                  has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name)); // 19
                  return name; // 20
                } catch (e) {
                  // 21
                  return ''; // 22
                } // 23
              } // 24
            }); // 25
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.has-instance.js": function (_require141) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.function.has-instance.js                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var isObject = _require141('./_is-object') // 2
            ,
                getPrototypeOf = _require141('./_object-gpo') // 3
            ,
                HAS_INSTANCE = _require141('./_wks')('hasInstance') // 4
            ,
                FunctionProto = Function.prototype; // 5
            // 19.2.3.6 Function.prototype[@@hasInstance](V)                                                                       // 6
            if (!(HAS_INSTANCE in FunctionProto)) _require141('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
                // 7
                if (typeof this != 'function' || !isObject(O)) return false; // 8
                if (!isObject(this.prototype)) return O instanceof this; // 9
                // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:                               // 10
                while (O = getPrototypeOf(O)) if (this.prototype === O) return true; // 11
                return false; // 12
              } }); // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.acosh.js": function (_require142) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.acosh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.3 Math.acosh(x)                                                                                              // 1
            var $export = _require142('./_export') // 2
            ,
                log1p = _require142('./_math-log1p') // 3
            ,
                sqrt = Math.sqrt // 4
            ,
                $acosh = Math.acosh; // 5
            // 6
            $export($export.S + $export.F * !($acosh // 7
            // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509                                                        // 8
            && Math.floor($acosh(Number.MAX_VALUE)) == 710 // 9
            // Tor Browser bug: Math.acosh(Infinity) -> NaN                                                                      // 10
            && $acosh(Infinity) == Infinity // 11
            ), 'Math', { // 12
              acosh: function acosh(x) {
                // 13
                return (x = +x) < 1 ? NaN : x > 94906265.62425156 // 14
                ? Math.log(x) + Math.LN2 // 15
                : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1)); // 16
              } // 17
            }); // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-log1p.js": function (_require143, _exports115, _module100) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-log1p.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.20 Math.log1p(x)                                                                                             // 1
            _module100.exports = Math.log1p || function log1p(x) {
              // 2
              return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x); // 3
            }; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.asinh.js": function (_require144) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.asinh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.5 Math.asinh(x)                                                                                              // 1
            var $export = _require144('./_export') // 2
            ,
                $asinh = Math.asinh; // 3
            // 4
            function asinh(x) {
              // 5
              return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1)); // 6
            } // 7
            // 8
            // Tor Browser bug: Math.asinh(0) -> -0                                                                                // 9
            $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.atanh.js": function (_require145) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.atanh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.7 Math.atanh(x)                                                                                              // 1
            var $export = _require145('./_export') // 2
            ,
                $atanh = Math.atanh; // 3
            // 4
            // Tor Browser bug: Math.atanh(-0) -> 0                                                                                // 5
            $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', { // 6
              atanh: function atanh(x) {
                // 7
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2; // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.cbrt.js": function (_require146) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.cbrt.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.9 Math.cbrt(x)                                                                                               // 1
            var $export = _require146('./_export') // 2
            ,
                sign = _require146('./_math-sign'); // 3
            // 4
            $export($export.S, 'Math', { // 5
              cbrt: function cbrt(x) {
                // 6
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3); // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-sign.js": function (_require147, _exports116, _module101) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-sign.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.28 Math.sign(x)                                                                                              // 1
            _module101.exports = Math.sign || function sign(x) {
              // 2
              return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1; // 3
            }; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.clz32.js": function (_require148) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.clz32.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.11 Math.clz32(x)                                                                                             // 1
            var $export = _require148('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              clz32: function clz32(x) {
                // 5
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32; // 6
              } // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.cosh.js": function (_require149) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.cosh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.12 Math.cosh(x)                                                                                              // 1
            var $export = _require149('./_export') // 2
            ,
                exp = Math.exp; // 3
            // 4
            $export($export.S, 'Math', { // 5
              cosh: function cosh(x) {
                // 6
                return (exp(x = +x) + exp(-x)) / 2; // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.expm1.js": function (_require150) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.expm1.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.14 Math.expm1(x)                                                                                             // 1
            var $export = _require150('./_export') // 2
            ,
                $expm1 = _require150('./_math-expm1'); // 3
            // 4
            $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 }); // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-expm1.js": function (_require151, _exports117, _module102) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-expm1.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.14 Math.expm1(x)                                                                                             // 1
            var $expm1 = Math.expm1; // 2
            _module102.exports = !$expm1 // 3
            // Old FF bug                                                                                                        // 4
            || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // 5
            // Tor Browser bug                                                                                                   // 6
            || $expm1(-2e-17) != -2e-17 // 7
            ? function expm1(x) {
              // 8
              return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1; // 9
            } : $expm1; // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.fround.js": function (_require152) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.fround.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.16 Math.fround(x)                                                                                            // 1
            var $export = _require152('./_export') // 2
            ,
                sign = _require152('./_math-sign') // 3
            ,
                pow = Math.pow // 4
            ,
                EPSILON = pow(2, -52) // 5
            ,
                EPSILON32 = pow(2, -23) // 6
            ,
                MAX32 = pow(2, 127) * (2 - EPSILON32) // 7
            ,
                MIN32 = pow(2, -126); // 8
            // 9
            var roundTiesToEven = function (n) {
              // 10
              return n + 1 / EPSILON - 1 / EPSILON; // 11
            }; // 12
            // 13
            // 14
            $export($export.S, 'Math', { // 15
              fround: function fround(x) {
                // 16
                var $abs = Math.abs(x) // 17
                ,
                    $sign = sign(x) // 18
                ,
                    a,
                    result; // 19
                if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32; // 20
                a = (1 + EPSILON32 / EPSILON) * $abs; // 21
                result = a - (a - $abs); // 22
                if (result > MAX32 || result != result) return $sign * Infinity; // 23
                return $sign * result; // 24
              } // 25
            }); // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.hypot.js": function (_require153) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.hypot.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])                                                                      // 1
            var $export = _require153('./_export') // 2
            ,
                abs = Math.abs; // 3
            // 4
            $export($export.S, 'Math', { // 5
              hypot: function hypot(value1, value2) {
                // eslint-disable-line no-unused-vars                                         // 6
                var sum = 0 // 7
                ,
                    i = 0 // 8
                ,
                    aLen = arguments.length // 9
                ,
                    larg = 0 // 10
                ,
                    arg,
                    div; // 11
                while (i < aLen) {
                  // 12
                  arg = abs(arguments[i++]); // 13
                  if (larg < arg) {
                    // 14
                    div = larg / arg; // 15
                    sum = sum * div * div + 1; // 16
                    larg = arg; // 17
                  } else if (arg > 0) {
                    // 18
                    div = arg / larg; // 19
                    sum += div * div; // 20
                  } else sum += arg; // 21
                } // 22
                return larg === Infinity ? Infinity : larg * Math.sqrt(sum); // 23
              } // 24
            }); // 25
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.imul.js": function (_require154) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.imul.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.18 Math.imul(x, y)                                                                                           // 1
            var $export = _require154('./_export') // 2
            ,
                $imul = Math.imul; // 3
            // 4
            // some WebKit versions fails with big numbers, some has wrong arity                                                   // 5
            $export($export.S + $export.F * _require154('./_fails')(function () {
              // 6
              return $imul(0xffffffff, 5) != -5 || $imul.length != 2; // 7
            }), 'Math', { // 8
              imul: function imul(x, y) {
                // 9
                var UINT16 = 0xffff // 10
                ,
                    xn = +x // 11
                ,
                    yn = +y // 12
                ,
                    xl = UINT16 & xn // 13
                ,
                    yl = UINT16 & yn; // 14
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0); // 15
              } // 16
            }); // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log10.js": function (_require155) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log10.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.21 Math.log10(x)                                                                                             // 1
            var $export = _require155('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              log10: function log10(x) {
                // 5
                return Math.log(x) / Math.LN10; // 6
              } // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log1p.js": function (_require156) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log1p.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.20 Math.log1p(x)                                                                                             // 1
            var $export = _require156('./_export'); // 2
            // 3
            $export($export.S, 'Math', { log1p: _require156('./_math-log1p') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log2.js": function (_require157) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log2.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.22 Math.log2(x)                                                                                              // 1
            var $export = _require157('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              log2: function log2(x) {
                // 5
                return Math.log(x) / Math.LN2; // 6
              } // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.sign.js": function (_require158) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.sign.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.28 Math.sign(x)                                                                                              // 1
            var $export = _require158('./_export'); // 2
            // 3
            $export($export.S, 'Math', { sign: _require158('./_math-sign') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.sinh.js": function (_require159) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.sinh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.30 Math.sinh(x)                                                                                              // 1
            var $export = _require159('./_export') // 2
            ,
                expm1 = _require159('./_math-expm1') // 3
            ,
                exp = Math.exp; // 4
            // 5
            // V8 near Chromium 38 has a problem with very small numbers                                                           // 6
            $export($export.S + $export.F * _require159('./_fails')(function () {
              // 7
              return !Math.sinh(-2e-17) != -2e-17; // 8
            }), 'Math', { // 9
              sinh: function sinh(x) {
                // 10
                return Math.abs(x = +x) < 1 // 11
                ? (expm1(x) - expm1(-x)) / 2 // 12
                : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2); // 13
              } // 14
            }); // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.tanh.js": function (_require160) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.tanh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.33 Math.tanh(x)                                                                                              // 1
            var $export = _require160('./_export') // 2
            ,
                expm1 = _require160('./_math-expm1') // 3
            ,
                exp = Math.exp; // 4
            // 5
            $export($export.S, 'Math', { // 6
              tanh: function tanh(x) {
                // 7
                var a = expm1(x = +x) // 8
                ,
                    b = expm1(-x); // 9
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x)); // 10
              } // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.trunc.js": function (_require161) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.trunc.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.34 Math.trunc(x)                                                                                             // 1
            var $export = _require161('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              trunc: function trunc(it) {
                // 5
                return (it > 0 ? Math.floor : Math.ceil)(it); // 6
              } // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.create.js": function (_require162) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.create.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require162('./_export'); // 1
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
            $export($export.S, 'Object', { create: _require162('./_object-create') }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.define-property.js": function (_require163) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.define-property.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require163('./_export'); // 1
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)                                                         // 2
            $export($export.S + $export.F * !_require163('./_descriptors'), 'Object', { defineProperty: _require163('./_object-dp').f }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.define-properties.js": function (_require164) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.define-properties.js                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require164('./_export'); // 1
            // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)                                                          // 2
            $export($export.S + $export.F * !_require164('./_descriptors'), 'Object', { defineProperties: _require164('./_object-dps') }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-own-property-descriptor.js": function (_require165) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-own-property-descriptor.js                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                      // 1
            var toIObject = _require165('./_to-iobject') // 2
            ,
                $getOwnPropertyDescriptor = _require165('./_object-gopd').f; // 3
            // 4
            _require165('./_object-sap')('getOwnPropertyDescriptor', function () {
              // 5
              return function getOwnPropertyDescriptor(it, key) {
                // 6
                return $getOwnPropertyDescriptor(toIObject(it), key); // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-sap.js": function (_require166, _exports118, _module103) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-sap.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // most Object methods by ES6 should accept primitives                                                                 // 1
            var $export = _require166('./_export') // 2
            ,
                core = _require166('./_core') // 3
            ,
                fails = _require166('./_fails'); // 4
            _module103.exports = function (KEY, exec) {
              // 5
              var fn = (core.Object || {})[KEY] || Object[KEY] // 6
              ,
                  exp = {}; // 7
              exp[KEY] = exec(fn); // 8
              $export($export.S + $export.F * fails(function () {
                fn(1);
              }), 'Object', exp); // 9
            }; // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-prototype-of.js": function (_require167) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-prototype-of.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.9 Object.getPrototypeOf(O)                                                                                   // 1
            var toObject = _require167('./_to-object') // 2
            ,
                $getPrototypeOf = _require167('./_object-gpo'); // 3
            // 4
            _require167('./_object-sap')('getPrototypeOf', function () {
              // 5
              return function getPrototypeOf(it) {
                // 6
                return $getPrototypeOf(toObject(it)); // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.keys.js": function (_require168) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.keys.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.14 Object.keys(O)                                                                                            // 1
            var toObject = _require168('./_to-object') // 2
            ,
                $keys = _require168('./_object-keys'); // 3
            // 4
            _require168('./_object-sap')('keys', function () {
              // 5
              return function keys(it) {
                // 6
                return $keys(toObject(it)); // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-own-property-names.js": function (_require169) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-own-property-names.js                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                              // 1
            _require169('./_object-sap')('getOwnPropertyNames', function () {
              // 2
              return _require169('./_object-gopn-ext').f; // 3
            }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.freeze.js": function (_require170) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.freeze.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.5 Object.freeze(O)                                                                                           // 1
            var isObject = _require170('./_is-object') // 2
            ,
                meta = _require170('./_meta').onFreeze; // 3
            // 4
            _require170('./_object-sap')('freeze', function ($freeze) {
              // 5
              return function freeze(it) {
                // 6
                return $freeze && isObject(it) ? $freeze(meta(it)) : it; // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.seal.js": function (_require171) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.seal.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.17 Object.seal(O)                                                                                            // 1
            var isObject = _require171('./_is-object') // 2
            ,
                meta = _require171('./_meta').onFreeze; // 3
            // 4
            _require171('./_object-sap')('seal', function ($seal) {
              // 5
              return function seal(it) {
                // 6
                return $seal && isObject(it) ? $seal(meta(it)) : it; // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.prevent-extensions.js": function (_require172) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.prevent-extensions.js                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.15 Object.preventExtensions(O)                                                                               // 1
            var isObject = _require172('./_is-object') // 2
            ,
                meta = _require172('./_meta').onFreeze; // 3
            // 4
            _require172('./_object-sap')('preventExtensions', function ($preventExtensions) {
              // 5
              return function preventExtensions(it) {
                // 6
                return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it; // 7
              }; // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-frozen.js": function (_require173) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-frozen.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.12 Object.isFrozen(O)                                                                                        // 1
            var isObject = _require173('./_is-object'); // 2
            // 3
            _require173('./_object-sap')('isFrozen', function ($isFrozen) {
              // 4
              return function isFrozen(it) {
                // 5
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true; // 6
              }; // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-sealed.js": function (_require174) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-sealed.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.13 Object.isSealed(O)                                                                                        // 1
            var isObject = _require174('./_is-object'); // 2
            // 3
            _require174('./_object-sap')('isSealed', function ($isSealed) {
              // 4
              return function isSealed(it) {
                // 5
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true; // 6
              }; // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-extensible.js": function (_require175) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-extensible.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.11 Object.isExtensible(O)                                                                                    // 1
            var isObject = _require175('./_is-object'); // 2
            // 3
            _require175('./_object-sap')('isExtensible', function ($isExtensible) {
              // 4
              return function isExtensible(it) {
                // 5
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false; // 6
              }; // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.assign.js": function (_require176) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.assign.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.1 Object.assign(target, source)                                                                              // 1
            var $export = _require176('./_export'); // 2
            // 3
            $export($export.S + $export.F, 'Object', { assign: _require176('./_object-assign') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-assign.js": function (_require177, _exports119, _module104) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-assign.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2

            var getKeys = _require177('./_object-keys') // 3
            ,
                gOPS = _require177('./_object-gops') // 4
            ,
                pIE = _require177('./_object-pie') // 5
            ,
                toObject = _require177('./_to-object') // 6
            ,
                IObject = _require177('./_iobject') // 7
            ,
                $assign = Object.assign; // 8
            // 9
            // should work with symbols and should have deterministic property order (V8 bug)                                      // 10
            _module104.exports = !$assign || _require177('./_fails')(function () {
              // 11
              var A = {} // 12
              ,
                  B = {} // 13
              ,
                  S = Symbol() // 14
              ,
                  K = 'abcdefghijklmnopqrst'; // 15
              A[S] = 7; // 16
              K.split('').forEach(function (k) {
                B[k] = k;
              }); // 17
              return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K; // 18
            }) ? function assign(target, source) {
              // eslint-disable-line no-unused-vars                                            // 19
              var T = toObject(target) // 20
              ,
                  aLen = arguments.length // 21
              ,
                  index = 1 // 22
              ,
                  getSymbols = gOPS.f // 23
              ,
                  isEnum = pIE.f; // 24
              while (aLen > index) {
                // 25
                var S = IObject(arguments[index++]) // 26
                ,
                    keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S) // 27
                ,
                    length = keys.length // 28
                ,
                    j = 0 // 29
                ,
                    key; // 30
                while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key]; // 31
              }return T; // 32
            } : $assign; // 33
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is.js": function (_require178) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.10 Object.is(value1, value2)                                                                                 // 1
            var $export = _require178('./_export'); // 2
            $export($export.S, 'Object', { is: _require178('./_same-value') }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_same-value.js": function (_require179, _exports120, _module105) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_same-value.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.9 SameValue(x, y)                                                                                               // 1
            _module105.exports = Object.is || function is(x, y) {
              // 2
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y; // 3
            }; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.set-prototype-of.js": function (_require180) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.set-prototype-of.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
            var $export = _require180('./_export'); // 2
            $export($export.S, 'Object', { setPrototypeOf: _require180('./_set-proto').set }); // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.to-string.js": function (_require181) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.to-string.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 19.1.3.6 Object.prototype.toString()                                                                                // 2

            var classof = _require181('./_classof') // 3
            ,
                test = {}; // 4
            test[_require181('./_wks')('toStringTag')] = 'z'; // 5
            if (test + '' != '[object z]') {
              // 6
              _require181('./_redefine')(Object.prototype, 'toString', function toString() {
                // 7
                return '[object ' + classof(this) + ']'; // 8
              }, true); // 9
            } // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.from-code-point.js": function (_require182) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.from-code-point.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require182('./_export') // 1
            ,
                toIndex = _require182('./_to-index') // 2
            ,
                fromCharCode = String.fromCharCode // 3
            ,
                $fromCodePoint = String.fromCodePoint; // 4
            // 5
            // length should be 1, old FF problem                                                                                  // 6
            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', { // 7
              // 21.1.2.2 String.fromCodePoint(...codePoints)                                                                      // 8
              fromCodePoint: function fromCodePoint(x) {
                // eslint-disable-line no-unused-vars                                      // 9
                var res = [] // 10
                ,
                    aLen = arguments.length // 11
                ,
                    i = 0 // 12
                ,
                    code; // 13
                while (aLen > i) {
                  // 14
                  code = +arguments[i++]; // 15
                  if (toIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point'); // 16
                  res.push(code < 0x10000 // 17
                  ? fromCharCode(code) // 18
                  : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00) // 19
                  ); // 20
                }return res.join(''); // 21
              } // 22
            }); // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.raw.js": function (_require183) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.raw.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require183('./_export') // 1
            ,
                toIObject = _require183('./_to-iobject') // 2
            ,
                toLength = _require183('./_to-length'); // 3
            // 4
            $export($export.S, 'String', { // 5
              // 21.1.2.4 String.raw(callSite, ...substitutions)                                                                   // 6
              raw: function raw(callSite) {
                // 7
                var tpl = toIObject(callSite.raw) // 8
                ,
                    len = toLength(tpl.length) // 9
                ,
                    aLen = arguments.length // 10
                ,
                    res = [] // 11
                ,
                    i = 0; // 12
                while (len > i) {
                  // 13
                  res.push(String(tpl[i++])); // 14
                  if (i < aLen) res.push(String(arguments[i])); // 15
                }return res.join(''); // 16
              } // 17
            }); // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.trim.js": function (_require184) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.trim.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // 21.1.3.25 String.prototype.trim()                                                                                   // 2

            _require184('./_string-trim')('trim', function ($trim) {
              // 3
              return function trim() {
                // 4
                return $trim(this, 3); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-trim.js": function (_require185, _exports121, _module106) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-trim.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require185('./_export') // 1
            ,
                defined = _require185('./_defined') // 2
            ,
                fails = _require185('./_fails') // 3
            ,
                spaces = _require185('./_string-ws') // 4
            ,
                space = '[' + spaces + ']' // 5
            ,
                non = '\u200b\u0085' // 6
            ,
                ltrim = RegExp('^' + space + space + '*') // 7
            ,
                rtrim = RegExp(space + space + '*$'); // 8
            // 9
            var exporter = function (KEY, exec, ALIAS) {
              // 10
              var exp = {}; // 11
              var FORCE = fails(function () {
                // 12
                return !!spaces[KEY]() || non[KEY]() != non; // 13
              }); // 14
              var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY]; // 15
              if (ALIAS) exp[ALIAS] = fn; // 16
              $export($export.P + $export.F * FORCE, 'String', exp); // 17
            }; // 18
            // 19
            // 1 -> String#trimLeft                                                                                                // 20
            // 2 -> String#trimRight                                                                                               // 21
            // 3 -> String#trim                                                                                                    // 22
            var trim = exporter.trim = function (string, TYPE) {
              // 23
              string = String(defined(string)); // 24
              if (TYPE & 1) string = string.replace(ltrim, ''); // 25
              if (TYPE & 2) string = string.replace(rtrim, ''); // 26
              return string; // 27
            }; // 28
            // 29
            _module106.exports = exporter; // 30
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-ws.js": function (_require186, _exports122, _module107) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-ws.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module107.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + // 1
            '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'; // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.code-point-at.js": function (_require187) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.code-point-at.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require187('./_export') // 2
            ,
                $at = _require187('./_string-at')(false); // 3
            $export($export.P, 'String', { // 4
              // 21.1.3.3 String.prototype.codePointAt(pos)                                                                        // 5
              codePointAt: function codePointAt(pos) {
                // 6
                return $at(this, pos); // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.ends-with.js": function (_require188) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.ends-with.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])                                                    // 1
            'use strict'; // 2

            var $export = _require188('./_export') // 3
            ,
                toLength = _require188('./_to-length') // 4
            ,
                context = _require188('./_string-context') // 5
            ,
                ENDS_WITH = 'endsWith' // 6
            ,
                $endsWith = ''[ENDS_WITH]; // 7
            // 8
            $export($export.P + $export.F * _require188('./_fails-is-regexp')(ENDS_WITH), 'String', { // 9
              endsWith: function endsWith(searchString /*, endPosition = @length */) {
                // 10
                var that = context(this, searchString, ENDS_WITH) // 11
                ,
                    endPosition = arguments.length > 1 ? arguments[1] : undefined // 12
                ,
                    len = toLength(that.length) // 13
                ,
                    end = endPosition === undefined ? len : Math.min(toLength(endPosition), len) // 14
                ,
                    search = String(searchString); // 15
                return $endsWith // 16
                ? $endsWith.call(that, search, end) // 17
                : that.slice(end - search.length, end) === search; // 18
              } // 19
            }); // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-context.js": function (_require189, _exports123, _module108) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-context.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // helper for String#{startsWith, endsWith, includes}                                                                  // 1
            var isRegExp = _require189('./_is-regexp') // 2
            ,
                defined = _require189('./_defined'); // 3
            // 4
            _module108.exports = function (that, searchString, NAME) {
              // 5
              if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!"); // 6
              return String(defined(that)); // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-regexp.js": function (_require190, _exports124, _module109) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-regexp.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.8 IsRegExp(argument)                                                                                            // 1
            var isObject = _require190('./_is-object') // 2
            ,
                cof = _require190('./_cof') // 3
            ,
                MATCH = _require190('./_wks')('match'); // 4
            _module109.exports = function (it) {
              // 5
              var isRegExp; // 6
              return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp'); // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fails-is-regexp.js": function (_require191, _exports125, _module110) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_fails-is-regexp.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var MATCH = _require191('./_wks')('match'); // 1
            _module110.exports = function (KEY) {
              // 2
              var re = /./; // 3
              try {
                // 4
                '/./'[KEY](re); // 5
              } catch (e) {
                // 6
                try {
                  // 7
                  re[MATCH] = false; // 8
                  return !'/./'[KEY](re); // 9
                } catch (f) {} /* empty */ // 10
              }return true; // 11
            }; // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.includes.js": function (_require192) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.includes.js                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 21.1.3.7 String.prototype.includes(searchString, position = 0)                                                      // 1
            'use strict'; // 2

            var $export = _require192('./_export') // 3
            ,
                context = _require192('./_string-context') // 4
            ,
                INCLUDES = 'includes'; // 5
            // 6
            $export($export.P + $export.F * _require192('./_fails-is-regexp')(INCLUDES), 'String', { // 7
              includes: function includes(searchString /*, position = 0 */) {
                // 8
                return !!~context(this, searchString, INCLUDES) // 9
                .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined); // 10
              } // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.repeat.js": function (_require193) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.repeat.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require193('./_export'); // 1
            // 2
            $export($export.P, 'String', { // 3
              // 21.1.3.13 String.prototype.repeat(count)                                                                          // 4
              repeat: _require193('./_string-repeat') // 5
            }); // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-repeat.js": function (_require194, _exports126, _module111) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-repeat.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var toInteger = _require194('./_to-integer') // 2
            ,
                defined = _require194('./_defined'); // 3
            // 4
            _module111.exports = function repeat(count) {
              // 5
              var str = String(defined(this)) // 6
              ,
                  res = '' // 7
              ,
                  n = toInteger(count); // 8
              if (n < 0 || n == Infinity) throw RangeError("Count can't be negative"); // 9
              for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str; // 10
              return res; // 11
            }; // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.starts-with.js": function (_require195) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.starts-with.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 21.1.3.18 String.prototype.startsWith(searchString [, position ])                                                   // 1
            'use strict'; // 2

            var $export = _require195('./_export') // 3
            ,
                toLength = _require195('./_to-length') // 4
            ,
                context = _require195('./_string-context') // 5
            ,
                STARTS_WITH = 'startsWith' // 6
            ,
                $startsWith = ''[STARTS_WITH]; // 7
            // 8
            $export($export.P + $export.F * _require195('./_fails-is-regexp')(STARTS_WITH), 'String', { // 9
              startsWith: function startsWith(searchString /*, position = 0 */) {
                // 10
                var that = context(this, searchString, STARTS_WITH) // 11
                ,
                    index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length)) // 12
                ,
                    search = String(searchString); // 13
                return $startsWith // 14
                ? $startsWith.call(that, search, index) // 15
                : that.slice(index, index + search.length) === search; // 16
              } // 17
            }); // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.anchor.js": function (_require196) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.anchor.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.2 String.prototype.anchor(name)                                                                               // 2

            _require196('./_string-html')('anchor', function (createHTML) {
              // 3
              return function anchor(name) {
                // 4
                return createHTML(this, 'a', 'name', name); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-html.js": function (_require197, _exports127, _module112) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-html.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require197('./_export') // 1
            ,
                fails = _require197('./_fails') // 2
            ,
                defined = _require197('./_defined') // 3
            ,
                quot = /"/g; // 4
            // B.2.3.2.1 CreateHTML(string, tag, attribute, value)                                                                 // 5
            var createHTML = function (string, tag, attribute, value) {
              // 6
              var S = String(defined(string)) // 7
              ,
                  p1 = '<' + tag; // 8
              if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"'; // 9
              return p1 + '>' + S + '</' + tag + '>'; // 10
            }; // 11
            _module112.exports = function (NAME, exec) {
              // 12
              var O = {}; // 13
              O[NAME] = exec(createHTML); // 14
              $export($export.P + $export.F * fails(function () {
                // 15
                var test = ''[NAME]('"'); // 16
                return test !== test.toLowerCase() || test.split('"').length > 3; // 17
              }), 'String', O); // 18
            }; // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.big.js": function (_require198) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.big.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.3 String.prototype.big()                                                                                      // 2

            _require198('./_string-html')('big', function (createHTML) {
              // 3
              return function big() {
                // 4
                return createHTML(this, 'big', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.blink.js": function (_require199) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.blink.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.4 String.prototype.blink()                                                                                    // 2

            _require199('./_string-html')('blink', function (createHTML) {
              // 3
              return function blink() {
                // 4
                return createHTML(this, 'blink', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.bold.js": function (_require200) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.bold.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.5 String.prototype.bold()                                                                                     // 2

            _require200('./_string-html')('bold', function (createHTML) {
              // 3
              return function bold() {
                // 4
                return createHTML(this, 'b', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fixed.js": function (_require201) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.fixed.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.6 String.prototype.fixed()                                                                                    // 2

            _require201('./_string-html')('fixed', function (createHTML) {
              // 3
              return function fixed() {
                // 4
                return createHTML(this, 'tt', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fontcolor.js": function (_require202) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.fontcolor.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.7 String.prototype.fontcolor(color)                                                                           // 2

            _require202('./_string-html')('fontcolor', function (createHTML) {
              // 3
              return function fontcolor(color) {
                // 4
                return createHTML(this, 'font', 'color', color); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fontsize.js": function (_require203) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.fontsize.js                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.8 String.prototype.fontsize(size)                                                                             // 2

            _require203('./_string-html')('fontsize', function (createHTML) {
              // 3
              return function fontsize(size) {
                // 4
                return createHTML(this, 'font', 'size', size); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.italics.js": function (_require204) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.italics.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.9 String.prototype.italics()                                                                                  // 2

            _require204('./_string-html')('italics', function (createHTML) {
              // 3
              return function italics() {
                // 4
                return createHTML(this, 'i', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.link.js": function (_require205) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.link.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.10 String.prototype.link(url)                                                                                 // 2

            _require205('./_string-html')('link', function (createHTML) {
              // 3
              return function link(url) {
                // 4
                return createHTML(this, 'a', 'href', url); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.small.js": function (_require206) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.small.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.11 String.prototype.small()                                                                                   // 2

            _require206('./_string-html')('small', function (createHTML) {
              // 3
              return function small() {
                // 4
                return createHTML(this, 'small', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.strike.js": function (_require207) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.strike.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.12 String.prototype.strike()                                                                                  // 2

            _require207('./_string-html')('strike', function (createHTML) {
              // 3
              return function strike() {
                // 4
                return createHTML(this, 'strike', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.sub.js": function (_require208) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.sub.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.13 String.prototype.sub()                                                                                     // 2

            _require208('./_string-html')('sub', function (createHTML) {
              // 3
              return function sub() {
                // 4
                return createHTML(this, 'sub', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.sup.js": function (_require209) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.sup.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // B.2.3.14 String.prototype.sup()                                                                                     // 2

            _require209('./_string-html')('sup', function (createHTML) {
              // 3
              return function sup() {
                // 4
                return createHTML(this, 'sup', '', ''); // 5
              }; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.match.js": function (_require210) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.match.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@match logic                                                                                                       // 1
            _require210('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
              // 2
              // 21.1.3.11 String.prototype.match(regexp)                                                                          // 3
              return [function match(regexp) {
                // 4
                'use strict'; // 5

                var O = defined(this) // 6
                ,
                    fn = regexp == undefined ? undefined : regexp[MATCH]; // 7
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O)); // 8
              }, $match]; // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fix-re-wks.js": function (_require211, _exports128, _module113) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_fix-re-wks.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var hide = _require211('./_hide') // 2
            ,
                redefine = _require211('./_redefine') // 3
            ,
                fails = _require211('./_fails') // 4
            ,
                defined = _require211('./_defined') // 5
            ,
                wks = _require211('./_wks'); // 6
            // 7
            _module113.exports = function (KEY, length, exec) {
              // 8
              var SYMBOL = wks(KEY) // 9
              ,
                  fns = exec(defined, SYMBOL, ''[KEY]) // 10
              ,
                  strfn = fns[0] // 11
              ,
                  rxfn = fns[1]; // 12
              if (fails(function () {
                // 13
                var O = {}; // 14
                O[SYMBOL] = function () {
                  return 7;
                }; // 15
                return ''[KEY](O) != 7; // 16
              })) {
                // 17
                redefine(String.prototype, KEY, strfn); // 18
                hide(RegExp.prototype, SYMBOL, length == 2 // 19
                // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                                    // 20
                // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                                            // 21
                ? function (string, arg) {
                  return rxfn.call(string, this, arg);
                } // 22
                // 21.2.5.6 RegExp.prototype[@@match](string)                                                                    // 23
                // 21.2.5.9 RegExp.prototype[@@search](string)                                                                   // 24
                : function (string) {
                  return rxfn.call(string, this);
                } // 25
                ); // 26
              } // 27
            }; // 28
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.replace.js": function (_require212) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.replace.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@replace logic                                                                                                     // 1
            _require212('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
              // 2
              // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                                     // 3
              return [function replace(searchValue, replaceValue) {
                // 4
                'use strict'; // 5

                var O = defined(this) // 6
                ,
                    fn = searchValue == undefined ? undefined : searchValue[REPLACE]; // 7
                return fn !== undefined // 8
                ? fn.call(searchValue, O, replaceValue) // 9
                : $replace.call(String(O), searchValue, replaceValue); // 10
              }, $replace]; // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.search.js": function (_require213) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.search.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@search logic                                                                                                      // 1
            _require213('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
              // 2
              // 21.1.3.15 String.prototype.search(regexp)                                                                         // 3
              return [function search(regexp) {
                // 4
                'use strict'; // 5

                var O = defined(this) // 6
                ,
                    fn = regexp == undefined ? undefined : regexp[SEARCH]; // 7
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O)); // 8
              }, $search]; // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.split.js": function (_require214) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.split.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@split logic                                                                                                       // 1
            _require214('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
              // 2
              'use strict'; // 3

              var isRegExp = _require214('./_is-regexp') // 4
              ,
                  _split = $split // 5
              ,
                  $push = [].push // 6
              ,
                  $SPLIT = 'split' // 7
              ,
                  LENGTH = 'length' // 8
              ,
                  LAST_INDEX = 'lastIndex'; // 9
              if ( // 10
              'abbc'[$SPLIT](/(b)*/)[1] == 'c' || // 11
              'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || // 12
              'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || // 13
              '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || // 14
              '.'[$SPLIT](/()()/)[LENGTH] > 1 || // 15
              ''[$SPLIT](/.?/)[LENGTH] // 16
              ) {
                  // 17
                  var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group                                   // 18
                  // based on es5-shim implementation, need to rework it                                                             // 19
                  $split = function (separator, limit) {
                    // 20
                    var string = String(this); // 21
                    if (separator === undefined && limit === 0) return []; // 22
                    // If `separator` is not a regex, use native split                                                               // 23
                    if (!isRegExp(separator)) return _split.call(string, separator, limit); // 24
                    var output = []; // 25
                    var flags = (separator.ignoreCase ? 'i' : '') + ( // 26
                    separator.multiline ? 'm' : '') + ( // 27
                    separator.unicode ? 'u' : '') + ( // 28
                    separator.sticky ? 'y' : ''); // 29
                    var lastLastIndex = 0; // 30
                    var splitLimit = limit === undefined ? 4294967295 : limit >>> 0; // 31
                    // Make `global` and avoid `lastIndex` issues by working with a copy                                             // 32
                    var separatorCopy = new RegExp(separator.source, flags + 'g'); // 33
                    var separator2, match, lastIndex, lastLength, i; // 34
                    // Doesn't need flags gy, but they don't hurt                                                                    // 35
                    if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags); // 36
                    while (match = separatorCopy.exec(string)) {
                      // 37
                      // `separatorCopy.lastIndex` is not reliable cross-browser                                                     // 38
                      lastIndex = match.index + match[0][LENGTH]; // 39
                      if (lastIndex > lastLastIndex) {
                        // 40
                        output.push(string.slice(lastLastIndex, match.index)); // 41
                        // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG                          // 42
                        if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                          // 43
                          for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined; // 44
                        }); // 45
                        if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1)); // 46
                        lastLength = match[0][LENGTH]; // 47
                        lastLastIndex = lastIndex; // 48
                        if (output[LENGTH] >= splitLimit) break; // 49
                      } // 50
                      if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop            // 51
                    } // 52
                    if (lastLastIndex === string[LENGTH]) {
                      // 53
                      if (lastLength || !separatorCopy.test('')) output.push(''); // 54
                    } else output.push(string.slice(lastLastIndex)); // 55
                    return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output; // 56
                  }; // 57
                  // Chakra, V8                                                                                                        // 58
                } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
                // 59
                $split = function (separator, limit) {
                  // 60
                  return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit); // 61
                }; // 62
              } // 63
              // 21.1.3.17 String.prototype.split(separator, limit)                                                                // 64
              return [function split(separator, limit) {
                // 65
                var O = defined(this) // 66
                ,
                    fn = separator == undefined ? undefined : separator[SPLIT]; // 67
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit); // 68
              }, $split]; // 69
            }); // 70
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.weak-map.js": function (_require215, _exports129, _module114) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.weak-map.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var each = _require215('./_array-methods')(0) // 2
            ,
                redefine = _require215('./_redefine') // 3
            ,
                meta = _require215('./_meta') // 4
            ,
                assign = _require215('./_object-assign') // 5
            ,
                weak = _require215('./_collection-weak') // 6
            ,
                isObject = _require215('./_is-object') // 7
            ,
                getWeak = meta.getWeak // 8
            ,
                isExtensible = Object.isExtensible // 9
            ,
                uncaughtFrozenStore = weak.ufstore // 10
            ,
                tmp = {} // 11
            ,
                InternalMap; // 12
            // 13
            var wrapper = function (get) {
              // 14
              return function WeakMap() {
                // 15
                return get(this, arguments.length > 0 ? arguments[0] : undefined); // 16
              }; // 17
            }; // 18
            // 19
            var methods = { // 20
              // 23.3.3.3 WeakMap.prototype.get(key)                                                                               // 21
              get: function get(key) {
                // 22
                if (isObject(key)) {
                  // 23
                  var data = getWeak(key); // 24
                  if (data === true) return uncaughtFrozenStore(this).get(key); // 25
                  return data ? data[this._i] : undefined; // 26
                } // 27
              }, // 28
              // 23.3.3.5 WeakMap.prototype.set(key, value)                                                                        // 29
              set: function set(key, value) {
                // 30
                return weak.def(this, key, value); // 31
              } // 32
            }; // 33
            // 34
            // 23.3 WeakMap Objects                                                                                                // 35
            var $WeakMap = _module114.exports = _require215('./_collection')('WeakMap', wrapper, methods, weak, true, true); // 36
            // 37
            // IE11 WeakMap frozen keys fix                                                                                        // 38
            if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
              // 39
              InternalMap = weak.getConstructor(wrapper); // 40
              assign(InternalMap.prototype, methods); // 41
              meta.NEED = true; // 42
              each(['delete', 'has', 'get', 'set'], function (key) {
                // 43
                var proto = $WeakMap.prototype // 44
                ,
                    method = proto[key]; // 45
                redefine(proto, key, function (a, b) {
                  // 46
                  // store frozen objects on internal weakmap shim                                                                 // 47
                  if (isObject(a) && !isExtensible(a)) {
                    // 48
                    if (!this._f) this._f = new InternalMap(); // 49
                    var result = this._f[key](a, b); // 50
                    return key == 'set' ? this : result; // 51
                    // store all the rest on native weakmap                                                                          // 52
                  }return method.call(this, a, b); // 53
                }); // 54
              }); // 55
            } // 56
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection-weak.js": function (_require216, _exports130, _module115) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_collection-weak.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var redefineAll = _require216('./_redefine-all') // 2
            ,
                getWeak = _require216('./_meta').getWeak // 3
            ,
                anObject = _require216('./_an-object') // 4
            ,
                isObject = _require216('./_is-object') // 5
            ,
                anInstance = _require216('./_an-instance') // 6
            ,
                forOf = _require216('./_for-of') // 7
            ,
                createArrayMethod = _require216('./_array-methods') // 8
            ,
                $has = _require216('./_has') // 9
            ,
                arrayFind = createArrayMethod(5) // 10
            ,
                arrayFindIndex = createArrayMethod(6) // 11
            ,
                id = 0; // 12
            // 13
            // fallback for uncaught frozen keys                                                                                   // 14
            var uncaughtFrozenStore = function (that) {
              // 15
              return that._l || (that._l = new UncaughtFrozenStore()); // 16
            }; // 17
            var UncaughtFrozenStore = function () {
              // 18
              this.a = []; // 19
            }; // 20
            var findUncaughtFrozen = function (store, key) {
              // 21
              return arrayFind(store.a, function (it) {
                // 22
                return it[0] === key; // 23
              }); // 24
            }; // 25
            UncaughtFrozenStore.prototype = { // 26
              get: function (key) {
                // 27
                var entry = findUncaughtFrozen(this, key); // 28
                if (entry) return entry[1]; // 29
              }, // 30
              has: function (key) {
                // 31
                return !!findUncaughtFrozen(this, key); // 32
              }, // 33
              set: function (key, value) {
                // 34
                var entry = findUncaughtFrozen(this, key); // 35
                if (entry) entry[1] = value; // 36
                else this.a.push([key, value]); // 37
              }, // 38
              'delete': function (key) {
                // 39
                var index = arrayFindIndex(this.a, function (it) {
                  // 40
                  return it[0] === key; // 41
                }); // 42
                if (~index) this.a.splice(index, 1); // 43
                return !!~index; // 44
              } // 45
            }; // 46
            // 47
            _module115.exports = { // 48
              getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                // 49
                var C = wrapper(function (that, iterable) {
                  // 50
                  anInstance(that, C, NAME, '_i'); // 51
                  that._i = id++; // collection id                                                                            // 52
                  that._l = undefined; // leak store for uncaught frozen objects                                                   // 53
                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 54
                }); // 55
                redefineAll(C.prototype, { // 56
                  // 23.3.3.2 WeakMap.prototype.delete(key)                                                                        // 57
                  // 23.4.3.3 WeakSet.prototype.delete(value)                                                                      // 58
                  'delete': function (key) {
                    // 59
                    if (!isObject(key)) return false; // 60
                    var data = getWeak(key); // 61
                    if (data === true) return uncaughtFrozenStore(this)['delete'](key); // 62
                    return data && $has(data, this._i) && delete data[this._i]; // 63
                  }, // 64
                  // 23.3.3.4 WeakMap.prototype.has(key)                                                                           // 65
                  // 23.4.3.4 WeakSet.prototype.has(value)                                                                         // 66
                  has: function has(key) {
                    // 67
                    if (!isObject(key)) return false; // 68
                    var data = getWeak(key); // 69
                    if (data === true) return uncaughtFrozenStore(this).has(key); // 70
                    return data && $has(data, this._i); // 71
                  } // 72
                }); // 73
                return C; // 74
              }, // 75
              def: function (that, key, value) {
                // 76
                var data = getWeak(anObject(key), true); // 77
                if (data === true) uncaughtFrozenStore(that).set(key, value); // 78
                else data[that._i] = value; // 79
                return that; // 80
              }, // 81
              ufstore: uncaughtFrozenStore // 82
            }; // 83
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "web.dom.iterable.js": function (_require217) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/web.dom.iterable.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $iterators = _require217('./es6.array.iterator') // 1
            ,
                redefine = _require217('./_redefine') // 2
            ,
                global = _require217('./_global') // 3
            ,
                hide = _require217('./_hide') // 4
            ,
                Iterators = _require217('./_iterators') // 5
            ,
                wks = _require217('./_wks') // 6
            ,
                ITERATOR = wks('iterator') // 7
            ,
                TO_STRING_TAG = wks('toStringTag') // 8
            ,
                ArrayValues = Iterators.Array; // 9
            // 10
            for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
              // 11
              var NAME = collections[i] // 12
              ,
                  Collection = global[NAME] // 13
              ,
                  proto = Collection && Collection.prototype // 14
              ,
                  key; // 15
              if (proto) {
                // 16
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues); // 17
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME); // 18
                Iterators[NAME] = ArrayValues; // 19
                for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true); // 20
              } // 21
            } // 22
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.weak-set.js": function (_require218) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.weak-set.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var weak = _require218('./_collection-weak'); // 2
            // 3
            // 23.4 WeakSet Objects                                                                                                // 4
            _require218('./_collection')('WeakSet', function (get) {
              // 5
              return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 6
            }, { // 7
              // 23.4.3.1 WeakSet.prototype.add(value)                                                                             // 8
              add: function add(value) {
                // 9
                return weak.def(this, value, true); // 10
              } // 11
            }, weak, false, true); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.array.includes.js": function (_require219) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.array.includes.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1
            // https://github.com/tc39/Array.prototype.includes                                                                    // 2

            var $export = _require219('./_export') // 3
            ,
                $includes = _require219('./_array-includes')(true); // 4
            // 5
            $export($export.P, 'Array', { // 6
              includes: function includes(el /*, fromIndex = 0 */) {
                // 7
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined); // 8
              } // 9
            }); // 10
            // 11
            _require219('./_add-to-unscopables')('includes'); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.get-own-property-descriptors.js": function (_require220) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.get-own-property-descriptors.js                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-getownpropertydescriptors                                                   // 1
            var $export = _require220('./_export') // 2
            ,
                ownKeys = _require220('./_own-keys') // 3
            ,
                toIObject = _require220('./_to-iobject') // 4
            ,
                gOPD = _require220('./_object-gopd') // 5
            ,
                createProperty = _require220('./_create-property'); // 6
            // 7
            $export($export.S, 'Object', { // 8
              getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                // 9
                var O = toIObject(object) // 10
                ,
                    getDesc = gOPD.f // 11
                ,
                    keys = ownKeys(O) // 12
                ,
                    result = {} // 13
                ,
                    i = 0 // 14
                ,
                    key; // 15
                while (keys.length > i) createProperty(result, key = keys[i++], getDesc(O, key)); // 16
                return result; // 17
              } // 18
            }); // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_own-keys.js": function (_require221, _exports131, _module116) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_own-keys.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // all object keys, includes non-enumerable and symbols                                                                // 1
            var gOPN = _require221('./_object-gopn') // 2
            ,
                gOPS = _require221('./_object-gops') // 3
            ,
                anObject = _require221('./_an-object') // 4
            ,
                Reflect = _require221('./_global').Reflect; // 5
            _module116.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
              // 6
              var keys = gOPN.f(anObject(it)) // 7
              ,
                  getSymbols = gOPS.f; // 8
              return getSymbols ? keys.concat(getSymbols(it)) : keys; // 9
            }; // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.values.js": function (_require222) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.values.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-values-entries                                                              // 1
            var $export = _require222('./_export') // 2
            ,
                $values = _require222('./_object-to-array')(false); // 3
            // 4
            $export($export.S, 'Object', { // 5
              values: function values(it) {
                // 6
                return $values(it); // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-to-array.js": function (_require223, _exports132, _module117) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-to-array.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var getKeys = _require223('./_object-keys') // 1
            ,
                toIObject = _require223('./_to-iobject') // 2
            ,
                isEnum = _require223('./_object-pie').f; // 3
            _module117.exports = function (isEntries) {
              // 4
              return function (it) {
                // 5
                var O = toIObject(it) // 6
                ,
                    keys = getKeys(O) // 7
                ,
                    length = keys.length // 8
                ,
                    i = 0 // 9
                ,
                    result = [] // 10
                ,
                    key; // 11
                while (length > i) if (isEnum.call(O, key = keys[i++])) {
                  // 12
                  result.push(isEntries ? [key, O[key]] : O[key]); // 13
                }return result; // 14
              }; // 15
            }; // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.entries.js": function (_require224) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.entries.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-values-entries                                                              // 1
            var $export = _require224('./_export') // 2
            ,
                $entries = _require224('./_object-to-array')(true); // 3
            // 4
            $export($export.S, 'Object', { // 5
              entries: function entries(it) {
                // 6
                return $entries(it); // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.define-getter.js": function (_require225) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.define-getter.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require225('./_export') // 2
            ,
                toObject = _require225('./_to-object') // 3
            ,
                aFunction = _require225('./_a-function') // 4
            ,
                $defineProperty = _require225('./_object-dp'); // 5
            // 6
            // B.2.2.2 Object.prototype.__defineGetter__(P, getter)                                                                // 7
            _require225('./_descriptors') && $export($export.P + _require225('./_object-forced-pam'), 'Object', { // 8
              __defineGetter__: function __defineGetter__(P, getter) {
                // 9
                $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true }); // 10
              } // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-forced-pam.js": function (_require226, _exports133, _module118) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-forced-pam.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Forced replacement prototype accessors methods                                                                      // 1
            _module118.exports = _require226('./_library') || !_require226('./_fails')(function () {
              // 2
              var K = Math.random(); // 3
              // In FF throws only define methods                                                                                  // 4
              __defineSetter__.call(null, K, function () {/* empty */}); // 5
              delete _require226('./_global')[K]; // 6
            }); // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.define-setter.js": function (_require227) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.define-setter.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require227('./_export') // 2
            ,
                toObject = _require227('./_to-object') // 3
            ,
                aFunction = _require227('./_a-function') // 4
            ,
                $defineProperty = _require227('./_object-dp'); // 5
            // 6
            // B.2.2.3 Object.prototype.__defineSetter__(P, setter)                                                                // 7
            _require227('./_descriptors') && $export($export.P + _require227('./_object-forced-pam'), 'Object', { // 8
              __defineSetter__: function __defineSetter__(P, setter) {
                // 9
                $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true }); // 10
              } // 11
            }); // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.lookup-getter.js": function (_require228) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.lookup-getter.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require228('./_export') // 2
            ,
                toObject = _require228('./_to-object') // 3
            ,
                toPrimitive = _require228('./_to-primitive') // 4
            ,
                getPrototypeOf = _require228('./_object-gpo') // 5
            ,
                getOwnPropertyDescriptor = _require228('./_object-gopd').f; // 6
            // 7
            // B.2.2.4 Object.prototype.__lookupGetter__(P)                                                                        // 8
            _require228('./_descriptors') && $export($export.P + _require228('./_object-forced-pam'), 'Object', { // 9
              __lookupGetter__: function __lookupGetter__(P) {
                // 10
                var O = toObject(this) // 11
                ,
                    K = toPrimitive(P, true) // 12
                ,
                    D; // 13
                do {
                  // 14
                  if (D = getOwnPropertyDescriptor(O, K)) return D.get; // 15
                } while (O = getPrototypeOf(O)); // 16
              } // 17
            }); // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.lookup-setter.js": function (_require229) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.lookup-setter.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var $export = _require229('./_export') // 2
            ,
                toObject = _require229('./_to-object') // 3
            ,
                toPrimitive = _require229('./_to-primitive') // 4
            ,
                getPrototypeOf = _require229('./_object-gpo') // 5
            ,
                getOwnPropertyDescriptor = _require229('./_object-gopd').f; // 6
            // 7
            // B.2.2.5 Object.prototype.__lookupSetter__(P)                                                                        // 8
            _require229('./_descriptors') && $export($export.P + _require229('./_object-forced-pam'), 'Object', { // 9
              __lookupSetter__: function __lookupSetter__(P) {
                // 10
                var O = toObject(this) // 11
                ,
                    K = toPrimitive(P, true) // 12
                ,
                    D; // 13
                do {
                  // 14
                  if (D = getOwnPropertyDescriptor(O, K)) return D.set; // 15
                } while (O = getPrototypeOf(O)); // 16
              } // 17
            }); // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.epsilon.js": function (_require230) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.epsilon.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.1 Number.EPSILON                                                                                             // 1
            var $export = _require230('./_export'); // 2
            // 3
            $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-finite.js": function (_require231) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-finite.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.2 Number.isFinite(number)                                                                                    // 1
            var $export = _require231('./_export') // 2
            ,
                _isFinite = _require231('./_global').isFinite; // 3
            // 4
            $export($export.S, 'Number', { // 5
              isFinite: function isFinite(it) {
                // 6
                return typeof it == 'number' && _isFinite(it); // 7
              } // 8
            }); // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-integer.js": function (_require232) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-integer.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.3 Number.isInteger(number)                                                                                   // 1
            var $export = _require232('./_export'); // 2
            // 3
            $export($export.S, 'Number', { isInteger: _require232('./_is-integer') }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-integer.js": function (_require233, _exports134, _module119) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-integer.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.3 Number.isInteger(number)                                                                                   // 1
            var isObject = _require233('./_is-object') // 2
            ,
                floor = Math.floor; // 3
            _module119.exports = function isInteger(it) {
              // 4
              return !isObject(it) && isFinite(it) && floor(it) === it; // 5
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-nan.js": function (_require234) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-nan.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.4 Number.isNaN(number)                                                                                       // 1
            var $export = _require234('./_export'); // 2
            // 3
            $export($export.S, 'Number', { // 4
              isNaN: function isNaN(number) {
                // 5
                return number != number; // 6
              } // 7
            }); // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-safe-integer.js": function (_require235) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-safe-integer.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.5 Number.isSafeInteger(number)                                                                               // 1
            var $export = _require235('./_export') // 2
            ,
                isInteger = _require235('./_is-integer') // 3
            ,
                abs = Math.abs; // 4
            // 5
            $export($export.S, 'Number', { // 6
              isSafeInteger: function isSafeInteger(number) {
                // 7
                return isInteger(number) && abs(number) <= 0x1fffffffffffff; // 8
              } // 9
            }); // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.max-safe-integer.js": function (_require236) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.max-safe-integer.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.6 Number.MAX_SAFE_INTEGER                                                                                    // 1
            var $export = _require236('./_export'); // 2
            // 3
            $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.min-safe-integer.js": function (_require237) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.min-safe-integer.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.10 Number.MIN_SAFE_INTEGER                                                                                   // 1
            var $export = _require237('./_export'); // 2
            // 3
            $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.parse-float.js": function (_require238) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.parse-float.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require238('./_export') // 1
            ,
                $parseFloat = _require238('./_parse-float'); // 2
            // 20.1.2.12 Number.parseFloat(string)                                                                                 // 3
            $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_parse-float.js": function (_require239, _exports135, _module120) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_parse-float.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $parseFloat = _require239('./_global').parseFloat // 1
            ,
                $trim = _require239('./_string-trim').trim; // 2
            // 3
            _module120.exports = 1 / $parseFloat(_require239('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
              // 4
              var string = $trim(String(str), 3) // 5
              ,
                  result = $parseFloat(string); // 6
              return result === 0 && string.charAt(0) == '-' ? -0 : result; // 7
            } : $parseFloat; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.parse-int.js": function (_require240) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.parse-int.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require240('./_export') // 1
            ,
                $parseInt = _require240('./_parse-int'); // 2
            // 20.1.2.13 Number.parseInt(string, radix)                                                                            // 3
            $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt }); // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_parse-int.js": function (_require241, _exports136, _module121) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_parse-int.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $parseInt = _require241('./_global').parseInt // 1
            ,
                $trim = _require241('./_string-trim').trim // 2
            ,
                ws = _require241('./_string-ws') // 3
            ,
                hex = /^[\-+]?0[xX]/; // 4
            // 5
            _module121.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
              // 6
              var string = $trim(String(str), 3); // 7
              return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10)); // 8
            } : $parseInt; // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.typed.uint8-array.js": function (_require242) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.typed.uint8-array.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require242('./_typed-array')('Uint8', 1, function (init) {
              // 1
              return function Uint8Array(data, byteOffset, length) {
                // 2
                return init(this, data, byteOffset, length); // 3
              }; // 4
            }); // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed-array.js": function (_require243, _exports137, _module122) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_typed-array.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            if (_require243('./_descriptors')) {
              // 2
              var LIBRARY = _require243('./_library') // 3
              ,
                  global = _require243('./_global') // 4
              ,
                  fails = _require243('./_fails') // 5
              ,
                  $export = _require243('./_export') // 6
              ,
                  $typed = _require243('./_typed') // 7
              ,
                  $buffer = _require243('./_typed-buffer') // 8
              ,
                  ctx = _require243('./_ctx') // 9
              ,
                  anInstance = _require243('./_an-instance') // 10
              ,
                  propertyDesc = _require243('./_property-desc') // 11
              ,
                  hide = _require243('./_hide') // 12
              ,
                  redefineAll = _require243('./_redefine-all') // 13
              ,
                  toInteger = _require243('./_to-integer') // 14
              ,
                  toLength = _require243('./_to-length') // 15
              ,
                  toIndex = _require243('./_to-index') // 16
              ,
                  toPrimitive = _require243('./_to-primitive') // 17
              ,
                  has = _require243('./_has') // 18
              ,
                  same = _require243('./_same-value') // 19
              ,
                  classof = _require243('./_classof') // 20
              ,
                  isObject = _require243('./_is-object') // 21
              ,
                  toObject = _require243('./_to-object') // 22
              ,
                  isArrayIter = _require243('./_is-array-iter') // 23
              ,
                  create = _require243('./_object-create') // 24
              ,
                  getPrototypeOf = _require243('./_object-gpo') // 25
              ,
                  gOPN = _require243('./_object-gopn').f // 26
              ,
                  getIterFn = _require243('./core.get-iterator-method') // 27
              ,
                  uid = _require243('./_uid') // 28
              ,
                  wks = _require243('./_wks') // 29
              ,
                  createArrayMethod = _require243('./_array-methods') // 30
              ,
                  createArrayIncludes = _require243('./_array-includes') // 31
              ,
                  speciesConstructor = _require243('./_species-constructor') // 32
              ,
                  ArrayIterators = _require243('./es6.array.iterator') // 33
              ,
                  Iterators = _require243('./_iterators') // 34
              ,
                  $iterDetect = _require243('./_iter-detect') // 35
              ,
                  setSpecies = _require243('./_set-species') // 36
              ,
                  arrayFill = _require243('./_array-fill') // 37
              ,
                  arrayCopyWithin = _require243('./_array-copy-within') // 38
              ,
                  $DP = _require243('./_object-dp') // 39
              ,
                  $GOPD = _require243('./_object-gopd') // 40
              ,
                  dP = $DP.f // 41
              ,
                  gOPD = $GOPD.f // 42
              ,
                  RangeError = global.RangeError // 43
              ,
                  TypeError = global.TypeError // 44
              ,
                  Uint8Array = global.Uint8Array // 45
              ,
                  ARRAY_BUFFER = 'ArrayBuffer' // 46
              ,
                  SHARED_BUFFER = 'Shared' + ARRAY_BUFFER // 47
              ,
                  BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT' // 48
              ,
                  PROTOTYPE = 'prototype' // 49
              ,
                  ArrayProto = Array[PROTOTYPE] // 50
              ,
                  $ArrayBuffer = $buffer.ArrayBuffer // 51
              ,
                  $DataView = $buffer.DataView // 52
              ,
                  arrayForEach = createArrayMethod(0) // 53
              ,
                  arrayFilter = createArrayMethod(2) // 54
              ,
                  arraySome = createArrayMethod(3) // 55
              ,
                  arrayEvery = createArrayMethod(4) // 56
              ,
                  arrayFind = createArrayMethod(5) // 57
              ,
                  arrayFindIndex = createArrayMethod(6) // 58
              ,
                  arrayIncludes = createArrayIncludes(true) // 59
              ,
                  arrayIndexOf = createArrayIncludes(false) // 60
              ,
                  arrayValues = ArrayIterators.values // 61
              ,
                  arrayKeys = ArrayIterators.keys // 62
              ,
                  arrayEntries = ArrayIterators.entries // 63
              ,
                  arrayLastIndexOf = ArrayProto.lastIndexOf // 64
              ,
                  arrayReduce = ArrayProto.reduce // 65
              ,
                  arrayReduceRight = ArrayProto.reduceRight // 66
              ,
                  arrayJoin = ArrayProto.join // 67
              ,
                  arraySort = ArrayProto.sort // 68
              ,
                  arraySlice = ArrayProto.slice // 69
              ,
                  arrayToString = ArrayProto.toString // 70
              ,
                  arrayToLocaleString = ArrayProto.toLocaleString // 71
              ,
                  ITERATOR = wks('iterator') // 72
              ,
                  TAG = wks('toStringTag') // 73
              ,
                  TYPED_CONSTRUCTOR = uid('typed_constructor') // 74
              ,
                  DEF_CONSTRUCTOR = uid('def_constructor') // 75
              ,
                  ALL_CONSTRUCTORS = $typed.CONSTR // 76
              ,
                  TYPED_ARRAY = $typed.TYPED // 77
              ,
                  VIEW = $typed.VIEW // 78
              ,
                  WRONG_LENGTH = 'Wrong length!'; // 79
              // 80
              var $map = createArrayMethod(1, function (O, length) {
                // 81
                return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length); // 82
              }); // 83
              // 84
              var LITTLE_ENDIAN = fails(function () {
                // 85
                return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1; // 86
              }); // 87
              // 88
              var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
                // 89
                new Uint8Array(1).set({}); // 90
              }); // 91
              // 92
              var strictToLength = function (it, SAME) {
                // 93
                if (it === undefined) throw TypeError(WRONG_LENGTH); // 94
                var number = +it // 95
                ,
                    length = toLength(it); // 96
                if (SAME && !same(number, length)) throw RangeError(WRONG_LENGTH); // 97
                return length; // 98
              }; // 99
              // 100
              var toOffset = function (it, BYTES) {
                // 101
                var offset = toInteger(it); // 102
                if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!'); // 103
                return offset; // 104
              }; // 105
              // 106
              var validate = function (it) {
                // 107
                if (isObject(it) && TYPED_ARRAY in it) return it; // 108
                throw TypeError(it + ' is not a typed array!'); // 109
              }; // 110
              // 111
              var allocate = function (C, length) {
                // 112
                if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                  // 113
                  throw TypeError('It is not a typed array constructor!'); // 114
                }return new C(length); // 115
              }; // 116
              // 117
              var speciesFromList = function (O, list) {
                // 118
                return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list); // 119
              }; // 120
              // 121
              var fromList = function (C, list) {
                // 122
                var index = 0 // 123
                ,
                    length = list.length // 124
                ,
                    result = allocate(C, length); // 125
                while (length > index) result[index] = list[index++]; // 126
                return result; // 127
              }; // 128
              // 129
              var addGetter = function (it, key, internal) {
                // 130
                dP(it, key, { get: function () {
                    return this._d[internal];
                  } }); // 131
              }; // 132
              // 133
              var $from = function from(source /*, mapfn, thisArg */) {
                // 134
                var O = toObject(source) // 135
                ,
                    aLen = arguments.length // 136
                ,
                    mapfn = aLen > 1 ? arguments[1] : undefined // 137
                ,
                    mapping = mapfn !== undefined // 138
                ,
                    iterFn = getIterFn(O) // 139
                ,
                    i,
                    length,
                    values,
                    result,
                    step,
                    iterator; // 140
                if (iterFn != undefined && !isArrayIter(iterFn)) {
                  // 141
                  for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                    // 142
                    values.push(step.value); // 143
                  }O = values; // 144
                } // 145
                if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2); // 146
                for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                  // 147
                  result[i] = mapping ? mapfn(O[i], i) : O[i]; // 148
                } // 149
                return result; // 150
              }; // 151
              // 152
              var $of = function of() /*...items*/{
                // 153
                var index = 0 // 154
                ,
                    length = arguments.length // 155
                ,
                    result = allocate(this, length); // 156
                while (length > index) result[index] = arguments[index++]; // 157
                return result; // 158
              }; // 159
              // 160
              // iOS Safari 6.x fails here                                                                                         // 161
              var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
                arrayToLocaleString.call(new Uint8Array(1));
              }); // 162
              // 163
              var $toLocaleString = function toLocaleString() {
                // 164
                return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments); // 165
              }; // 166
              // 167
              var proto = { // 168
                copyWithin: function copyWithin(target, start /*, end */) {
                  // 169
                  return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined); // 170
                }, // 171
                every: function every(callbackfn /*, thisArg */) {
                  // 172
                  return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 173
                }, // 174
                fill: function fill(value /*, start, end */) {
                  // eslint-disable-line no-unused-vars                                // 175
                  return arrayFill.apply(validate(this), arguments); // 176
                }, // 177
                filter: function filter(callbackfn /*, thisArg */) {
                  // 178
                  return speciesFromList(this, arrayFilter(validate(this), callbackfn, // 179
                  arguments.length > 1 ? arguments[1] : undefined)); // 180
                }, // 181
                find: function find(predicate /*, thisArg */) {
                  // 182
                  return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined); // 183
                }, // 184
                findIndex: function findIndex(predicate /*, thisArg */) {
                  // 185
                  return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined); // 186
                }, // 187
                forEach: function forEach(callbackfn /*, thisArg */) {
                  // 188
                  arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 189
                }, // 190
                indexOf: function indexOf(searchElement /*, fromIndex */) {
                  // 191
                  return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined); // 192
                }, // 193
                includes: function includes(searchElement /*, fromIndex */) {
                  // 194
                  return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined); // 195
                }, // 196
                join: function join(separator) {
                  // eslint-disable-line no-unused-vars                                              // 197
                  return arrayJoin.apply(validate(this), arguments); // 198
                }, // 199
                lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */) {
                  // eslint-disable-line no-unused-vars           // 200
                  return arrayLastIndexOf.apply(validate(this), arguments); // 201
                }, // 202
                map: function map(mapfn /*, thisArg */) {
                  // 203
                  return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined); // 204
                }, // 205
                reduce: function reduce(callbackfn /*, initialValue */) {
                  // eslint-disable-line no-unused-vars                     // 206
                  return arrayReduce.apply(validate(this), arguments); // 207
                }, // 208
                reduceRight: function reduceRight(callbackfn /*, initialValue */) {
                  // eslint-disable-line no-unused-vars           // 209
                  return arrayReduceRight.apply(validate(this), arguments); // 210
                }, // 211
                reverse: function reverse() {
                  // 212
                  var that = this // 213
                  ,
                      length = validate(that).length // 214
                  ,
                      middle = Math.floor(length / 2) // 215
                  ,
                      index = 0 // 216
                  ,
                      value; // 217
                  while (index < middle) {
                    // 218
                    value = that[index]; // 219
                    that[index++] = that[--length]; // 220
                    that[length] = value; // 221
                  }return that; // 222
                }, // 223
                some: function some(callbackfn /*, thisArg */) {
                  // 224
                  return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 225
                }, // 226
                sort: function sort(comparefn) {
                  // 227
                  return arraySort.call(validate(this), comparefn); // 228
                }, // 229
                subarray: function subarray(begin, end) {
                  // 230
                  var O = validate(this) // 231
                  ,
                      length = O.length // 232
                  ,
                      $begin = toIndex(begin, length); // 233
                  return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))( // 234
                  O.buffer, // 235
                  O.byteOffset + $begin * O.BYTES_PER_ELEMENT, // 236
                  toLength((end === undefined ? length : toIndex(end, length)) - $begin) // 237
                  ); // 238
                } // 239
              }; // 240
              // 241
              var $slice = function slice(start, end) {
                // 242
                return speciesFromList(this, arraySlice.call(validate(this), start, end)); // 243
              }; // 244
              // 245
              var $set = function set(arrayLike /*, offset */) {
                // 246
                validate(this); // 247
                var offset = toOffset(arguments[1], 1) // 248
                ,
                    length = this.length // 249
                ,
                    src = toObject(arrayLike) // 250
                ,
                    len = toLength(src.length) // 251
                ,
                    index = 0; // 252
                if (len + offset > length) throw RangeError(WRONG_LENGTH); // 253
                while (index < len) this[offset + index] = src[index++]; // 254
              }; // 255
              // 256
              var $iterators = { // 257
                entries: function entries() {
                  // 258
                  return arrayEntries.call(validate(this)); // 259
                }, // 260
                keys: function keys() {
                  // 261
                  return arrayKeys.call(validate(this)); // 262
                }, // 263
                values: function values() {
                  // 264
                  return arrayValues.call(validate(this)); // 265
                } // 266
              }; // 267
              // 268
              var isTAIndex = function (target, key) {
                // 269
                return isObject(target) // 270
                && target[TYPED_ARRAY] // 271
                && typeof key != 'symbol' // 272
                && key in target // 273
                && String(+key) == String(key); // 274
              }; // 275
              var $getDesc = function getOwnPropertyDescriptor(target, key) {
                // 276
                return isTAIndex(target, key = toPrimitive(key, true)) // 277
                ? propertyDesc(2, target[key]) // 278
                : gOPD(target, key); // 279
              }; // 280
              var $setDesc = function defineProperty(target, key, desc) {
                // 281
                if (isTAIndex(target, key = toPrimitive(key, true)) // 282
                && isObject(desc) // 283
                && has(desc, 'value') // 284
                && !has(desc, 'get') // 285
                && !has(desc, 'set') // 286
                // TODO: add validation descriptor w/o calling accessors                                                         // 287
                && !desc.configurable // 288
                && (!has(desc, 'writable') || desc.writable) // 289
                && (!has(desc, 'enumerable') || desc.enumerable) // 290
                ) {
                    // 291
                    target[key] = desc.value; // 292
                    return target; // 293
                  } else return dP(target, key, desc); // 294
              }; // 295
              // 296
              if (!ALL_CONSTRUCTORS) {
                // 297
                $GOPD.f = $getDesc; // 298
                $DP.f = $setDesc; // 299
              } // 300
              // 301
              $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', { // 302
                getOwnPropertyDescriptor: $getDesc, // 303
                defineProperty: $setDesc // 304
              }); // 305
              // 306
              if (fails(function () {
                arrayToString.call({});
              })) {
                // 307
                arrayToString = arrayToLocaleString = function toString() {
                  // 308
                  return arrayJoin.call(this); // 309
                }; // 310
              } // 311
              // 312
              var $TypedArrayPrototype$ = redefineAll({}, proto); // 313
              redefineAll($TypedArrayPrototype$, $iterators); // 314
              hide($TypedArrayPrototype$, ITERATOR, $iterators.values); // 315
              redefineAll($TypedArrayPrototype$, { // 316
                slice: $slice, // 317
                set: $set, // 318
                constructor: function () {/* noop */}, // 319
                toString: arrayToString, // 320
                toLocaleString: $toLocaleString // 321
              }); // 322
              addGetter($TypedArrayPrototype$, 'buffer', 'b'); // 323
              addGetter($TypedArrayPrototype$, 'byteOffset', 'o'); // 324
              addGetter($TypedArrayPrototype$, 'byteLength', 'l'); // 325
              addGetter($TypedArrayPrototype$, 'length', 'e'); // 326
              dP($TypedArrayPrototype$, TAG, { // 327
                get: function () {
                  return this[TYPED_ARRAY];
                } // 328
              }); // 329
              // 330
              _module122.exports = function (KEY, BYTES, wrapper, CLAMPED) {
                // 331
                CLAMPED = !!CLAMPED; // 332
                var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array' // 333
                ,
                    ISNT_UINT8 = NAME != 'Uint8Array' // 334
                ,
                    GETTER = 'get' + KEY // 335
                ,
                    SETTER = 'set' + KEY // 336
                ,
                    TypedArray = global[NAME] // 337
                ,
                    Base = TypedArray || {} // 338
                ,
                    TAC = TypedArray && getPrototypeOf(TypedArray) // 339
                ,
                    FORCED = !TypedArray || !$typed.ABV // 340
                ,
                    O = {} // 341
                ,
                    TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE]; // 342
                var getter = function (that, index) {
                  // 343
                  var data = that._d; // 344
                  return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN); // 345
                }; // 346
                var setter = function (that, index, value) {
                  // 347
                  var data = that._d; // 348
                  if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff; // 349
                  data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN); // 350
                }; // 351
                var addElement = function (that, index) {
                  // 352
                  dP(that, index, { // 353
                    get: function () {
                      // 354
                      return getter(this, index); // 355
                    }, // 356
                    set: function (value) {
                      // 357
                      return setter(this, index, value); // 358
                    }, // 359
                    enumerable: true // 360
                  }); // 361
                }; // 362
                if (FORCED) {
                  // 363
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    // 364
                    anInstance(that, TypedArray, NAME, '_d'); // 365
                    var index = 0 // 366
                    ,
                        offset = 0 // 367
                    ,
                        buffer,
                        byteLength,
                        length,
                        klass; // 368
                    if (!isObject(data)) {
                      // 369
                      length = strictToLength(data, true); // 370
                      byteLength = length * BYTES; // 371
                      buffer = new $ArrayBuffer(byteLength); // 372
                    } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      // 373
                      buffer = data; // 374
                      offset = toOffset($offset, BYTES); // 375
                      var $len = data.byteLength; // 376
                      if ($length === undefined) {
                        // 377
                        if ($len % BYTES) throw RangeError(WRONG_LENGTH); // 378
                        byteLength = $len - offset; // 379
                        if (byteLength < 0) throw RangeError(WRONG_LENGTH); // 380
                      } else {
                        // 381
                        byteLength = toLength($length) * BYTES; // 382
                        if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH); // 383
                      } // 384
                      length = byteLength / BYTES; // 385
                    } else if (TYPED_ARRAY in data) {
                      // 386
                      return fromList(TypedArray, data); // 387
                    } else {
                      // 388
                      return $from.call(TypedArray, data); // 389
                    } // 390
                    hide(that, '_d', { // 391
                      b: buffer, // 392
                      o: offset, // 393
                      l: byteLength, // 394
                      e: length, // 395
                      v: new $DataView(buffer) // 396
                    }); // 397
                    while (index < length) addElement(that, index++); // 398
                  }); // 399
                  TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$); // 400
                  hide(TypedArrayPrototype, 'constructor', TypedArray); // 401
                } else if (!$iterDetect(function (iter) {
                  // 402
                  // V8 works with iterators, but fails in many other cases                                                        // 403
                  // https://code.google.com/p/v8/issues/detail?id=4552                                                            // 404
                  new TypedArray(null); // eslint-disable-line no-new                                                              // 405
                  new TypedArray(iter); // eslint-disable-line no-new                                                              // 406
                }, true)) {
                  // 407
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    // 408
                    anInstance(that, TypedArray, NAME); // 409
                    var klass; // 410
                    // `ws` module bug, temporarily remove validation length for Uint8Array                                        // 411
                    // https://github.com/websockets/ws/pull/645                                                                   // 412
                    if (!isObject(data)) return new Base(strictToLength(data, ISNT_UINT8)); // 413
                    if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      // 414
                      return $length !== undefined // 415
                      ? new Base(data, toOffset($offset, BYTES), $length) // 416
                      : $offset !== undefined // 417
                      ? new Base(data, toOffset($offset, BYTES)) // 418
                      : new Base(data); // 419
                    } // 420
                    if (TYPED_ARRAY in data) return fromList(TypedArray, data); // 421
                    return $from.call(TypedArray, data); // 422
                  }); // 423
                  arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
                    // 424
                    if (!(key in TypedArray)) hide(TypedArray, key, Base[key]); // 425
                  }); // 426
                  TypedArray[PROTOTYPE] = TypedArrayPrototype; // 427
                  if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray; // 428
                } // 429
                var $nativeIterator = TypedArrayPrototype[ITERATOR] // 430
                ,
                    CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined),
                    $iterator = $iterators.values; // 432
                hide(TypedArray, TYPED_CONSTRUCTOR, true); // 433
                hide(TypedArrayPrototype, TYPED_ARRAY, NAME); // 434
                hide(TypedArrayPrototype, VIEW, true); // 435
                hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray); // 436
                // 437
                if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                  // 438
                  dP(TypedArrayPrototype, TAG, { // 439
                    get: function () {
                      return NAME;
                    } // 440
                  }); // 441
                } // 442
                // 443
                O[NAME] = TypedArray; // 444
                // 445
                $export($export.G + $export.W + $export.F * (TypedArray != Base), O); // 446
                // 447
                $export($export.S, NAME, { // 448
                  BYTES_PER_ELEMENT: BYTES, // 449
                  from: $from, // 450
                  of: $of // 451
                }); // 452
                // 453
                if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES); // 454
                // 455
                $export($export.P, NAME, proto); // 456
                // 457
                setSpecies(NAME); // 458
                // 459
                $export($export.P + $export.F * FORCED_SET, NAME, { set: $set }); // 460
                // 461
                $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators); // 462
                // 463
                $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, { toString: arrayToString });
                // 465
                $export($export.P + $export.F * fails(function () {
                  // 466
                  new TypedArray(1).slice(); // 467
                }), NAME, { slice: $slice }); // 468
                // 469
                $export($export.P + $export.F * (fails(function () {
                  // 470
                  return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString(); // 471
                }) || !fails(function () {
                  // 472
                  TypedArrayPrototype.toLocaleString.call([1, 2]); // 473
                })), NAME, { toLocaleString: $toLocaleString }); // 474
                // 475
                Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator; // 476
                if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator); // 477
              }; // 478
            } else _module122.exports = function () {/* empty */}; // 479
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed.js": function (_require244, _exports138, _module123) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_typed.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require244('./_global') // 1
            ,
                hide = _require244('./_hide') // 2
            ,
                uid = _require244('./_uid') // 3
            ,
                TYPED = uid('typed_array') // 4
            ,
                VIEW = uid('view') // 5
            ,
                ABV = !!(global.ArrayBuffer && global.DataView) // 6
            ,
                CONSTR = ABV // 7
            ,
                i = 0,
                l = 9,
                Typed; // 8
            // 9
            var TypedArrayConstructors = // 10
            'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array' // 11
            .split(','); // 12
            // 13
            while (i < l) {
              // 14
              if (Typed = global[TypedArrayConstructors[i++]]) {
                // 15
                hide(Typed.prototype, TYPED, true); // 16
                hide(Typed.prototype, VIEW, true); // 17
              } else CONSTR = false; // 18
            } // 19
            // 20
            _module123.exports = { // 21
              ABV: ABV, // 22
              CONSTR: CONSTR, // 23
              TYPED: TYPED, // 24
              VIEW: VIEW // 25
            }; // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed-buffer.js": function (_require245, _exports139) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_typed-buffer.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            'use strict'; // 1

            var global = _require245('./_global') // 2
            ,
                DESCRIPTORS = _require245('./_descriptors') // 3
            ,
                LIBRARY = _require245('./_library') // 4
            ,
                $typed = _require245('./_typed') // 5
            ,
                hide = _require245('./_hide') // 6
            ,
                redefineAll = _require245('./_redefine-all') // 7
            ,
                fails = _require245('./_fails') // 8
            ,
                anInstance = _require245('./_an-instance') // 9
            ,
                toInteger = _require245('./_to-integer') // 10
            ,
                toLength = _require245('./_to-length') // 11
            ,
                gOPN = _require245('./_object-gopn').f // 12
            ,
                dP = _require245('./_object-dp').f // 13
            ,
                arrayFill = _require245('./_array-fill') // 14
            ,
                setToStringTag = _require245('./_set-to-string-tag') // 15
            ,
                ARRAY_BUFFER = 'ArrayBuffer' // 16
            ,
                DATA_VIEW = 'DataView' // 17
            ,
                PROTOTYPE = 'prototype' // 18
            ,
                WRONG_LENGTH = 'Wrong length!' // 19
            ,
                WRONG_INDEX = 'Wrong index!' // 20
            ,
                $ArrayBuffer = global[ARRAY_BUFFER] // 21
            ,
                $DataView = global[DATA_VIEW] // 22
            ,
                Math = global.Math // 23
            ,
                RangeError = global.RangeError // 24
            ,
                Infinity = global.Infinity // 25
            ,
                BaseBuffer = $ArrayBuffer // 26
            ,
                abs = Math.abs // 27
            ,
                pow = Math.pow // 28
            ,
                floor = Math.floor // 29
            ,
                log = Math.log // 30
            ,
                LN2 = Math.LN2 // 31
            ,
                BUFFER = 'buffer' // 32
            ,
                BYTE_LENGTH = 'byteLength' // 33
            ,
                BYTE_OFFSET = 'byteOffset' // 34
            ,
                $BUFFER = DESCRIPTORS ? '_b' : BUFFER // 35
            ,
                $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH // 36
            ,
                $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // 37
            // 38
            // IEEE754 conversions based on https://github.com/feross/ieee754                                                      // 39
            var packIEEE754 = function (value, mLen, nBytes) {
              // 40
              var buffer = Array(nBytes) // 41
              ,
                  eLen = nBytes * 8 - mLen - 1 // 42
              ,
                  eMax = (1 << eLen) - 1 // 43
              ,
                  eBias = eMax >> 1 // 44
              ,
                  rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0 // 45
              ,
                  i = 0 // 46
              ,
                  s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0 // 47
              ,
                  e,
                  m,
                  c; // 48
              value = abs(value); // 49
              if (value != value || value === Infinity) {
                // 50
                m = value != value ? 1 : 0; // 51
                e = eMax; // 52
              } else {
                // 53
                e = floor(log(value) / LN2); // 54
                if (value * (c = pow(2, -e)) < 1) {
                  // 55
                  e--; // 56
                  c *= 2; // 57
                } // 58
                if (e + eBias >= 1) {
                  // 59
                  value += rt / c; // 60
                } else {
                  // 61
                  value += rt * pow(2, 1 - eBias); // 62
                } // 63
                if (value * c >= 2) {
                  // 64
                  e++; // 65
                  c /= 2; // 66
                } // 67
                if (e + eBias >= eMax) {
                  // 68
                  m = 0; // 69
                  e = eMax; // 70
                } else if (e + eBias >= 1) {
                  // 71
                  m = (value * c - 1) * pow(2, mLen); // 72
                  e = e + eBias; // 73
                } else {
                  // 74
                  m = value * pow(2, eBias - 1) * pow(2, mLen); // 75
                  e = 0; // 76
                } // 77
              } // 78
              for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8); // 79
              e = e << mLen | m; // 80
              eLen += mLen; // 81
              for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8); // 82
              buffer[--i] |= s * 128; // 83
              return buffer; // 84
            }; // 85
            var unpackIEEE754 = function (buffer, mLen, nBytes) {
              // 86
              var eLen = nBytes * 8 - mLen - 1 // 87
              ,
                  eMax = (1 << eLen) - 1 // 88
              ,
                  eBias = eMax >> 1 // 89
              ,
                  nBits = eLen - 7 // 90
              ,
                  i = nBytes - 1 // 91
              ,
                  s = buffer[i--] // 92
              ,
                  e = s & 127 // 93
              ,
                  m; // 94
              s >>= 7; // 95
              for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8); // 96
              m = e & (1 << -nBits) - 1; // 97
              e >>= -nBits; // 98
              nBits += mLen; // 99
              for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8); // 100
              if (e === 0) {
                // 101
                e = 1 - eBias; // 102
              } else if (e === eMax) {
                // 103
                return m ? NaN : s ? -Infinity : Infinity; // 104
              } else {
                // 105
                m = m + pow(2, mLen); // 106
                e = e - eBias; // 107
              }return (s ? -1 : 1) * m * pow(2, e - mLen); // 108
            }; // 109
            // 110
            var unpackI32 = function (bytes) {
              // 111
              return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0]; // 112
            }; // 113
            var packI8 = function (it) {
              // 114
              return [it & 0xff]; // 115
            }; // 116
            var packI16 = function (it) {
              // 117
              return [it & 0xff, it >> 8 & 0xff]; // 118
            }; // 119
            var packI32 = function (it) {
              // 120
              return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff]; // 121
            }; // 122
            var packF64 = function (it) {
              // 123
              return packIEEE754(it, 52, 8); // 124
            }; // 125
            var packF32 = function (it) {
              // 126
              return packIEEE754(it, 23, 4); // 127
            }; // 128
            // 129
            var addGetter = function (C, key, internal) {
              // 130
              dP(C[PROTOTYPE], key, { get: function () {
                  return this[internal];
                } }); // 131
            }; // 132
            // 133
            var get = function (view, bytes, index, isLittleEndian) {
              // 134
              var numIndex = +index // 135
              ,
                  intIndex = toInteger(numIndex); // 136
              if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX); // 137
              var store = view[$BUFFER]._b // 138
              ,
                  start = intIndex + view[$OFFSET] // 139
              ,
                  pack = store.slice(start, start + bytes); // 140
              return isLittleEndian ? pack : pack.reverse(); // 141
            }; // 142
            var set = function (view, bytes, index, conversion, value, isLittleEndian) {
              // 143
              var numIndex = +index // 144
              ,
                  intIndex = toInteger(numIndex); // 145
              if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX); // 146
              var store = view[$BUFFER]._b // 147
              ,
                  start = intIndex + view[$OFFSET] // 148
              ,
                  pack = conversion(+value); // 149
              for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1]; // 150
            }; // 151
            // 152
            var validateArrayBufferArguments = function (that, length) {
              // 153
              anInstance(that, $ArrayBuffer, ARRAY_BUFFER); // 154
              var numberLength = +length // 155
              ,
                  byteLength = toLength(numberLength); // 156
              if (numberLength != byteLength) throw RangeError(WRONG_LENGTH); // 157
              return byteLength; // 158
            }; // 159
            // 160
            if (!$typed.ABV) {
              // 161
              $ArrayBuffer = function ArrayBuffer(length) {
                // 162
                var byteLength = validateArrayBufferArguments(this, length); // 163
                this._b = arrayFill.call(Array(byteLength), 0); // 164
                this[$LENGTH] = byteLength; // 165
              }; // 166
              // 167
              $DataView = function DataView(buffer, byteOffset, byteLength) {
                // 168
                anInstance(this, $DataView, DATA_VIEW); // 169
                anInstance(buffer, $ArrayBuffer, DATA_VIEW); // 170
                var bufferLength = buffer[$LENGTH] // 171
                ,
                    offset = toInteger(byteOffset); // 172
                if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!'); // 173
                byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength); // 174
                if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH); // 175
                this[$BUFFER] = buffer; // 176
                this[$OFFSET] = offset; // 177
                this[$LENGTH] = byteLength; // 178
              }; // 179
              // 180
              if (DESCRIPTORS) {
                // 181
                addGetter($ArrayBuffer, BYTE_LENGTH, '_l'); // 182
                addGetter($DataView, BUFFER, '_b'); // 183
                addGetter($DataView, BYTE_LENGTH, '_l'); // 184
                addGetter($DataView, BYTE_OFFSET, '_o'); // 185
              } // 186
              // 187
              redefineAll($DataView[PROTOTYPE], { // 188
                getInt8: function getInt8(byteOffset) {
                  // 189
                  return get(this, 1, byteOffset)[0] << 24 >> 24; // 190
                }, // 191
                getUint8: function getUint8(byteOffset) {
                  // 192
                  return get(this, 1, byteOffset)[0]; // 193
                }, // 194
                getInt16: function getInt16(byteOffset /*, littleEndian */) {
                  // 195
                  var bytes = get(this, 2, byteOffset, arguments[1]); // 196
                  return (bytes[1] << 8 | bytes[0]) << 16 >> 16; // 197
                }, // 198
                getUint16: function getUint16(byteOffset /*, littleEndian */) {
                  // 199
                  var bytes = get(this, 2, byteOffset, arguments[1]); // 200
                  return bytes[1] << 8 | bytes[0]; // 201
                }, // 202
                getInt32: function getInt32(byteOffset /*, littleEndian */) {
                  // 203
                  return unpackI32(get(this, 4, byteOffset, arguments[1])); // 204
                }, // 205
                getUint32: function getUint32(byteOffset /*, littleEndian */) {
                  // 206
                  return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0; // 207
                }, // 208
                getFloat32: function getFloat32(byteOffset /*, littleEndian */) {
                  // 209
                  return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4); // 210
                }, // 211
                getFloat64: function getFloat64(byteOffset /*, littleEndian */) {
                  // 212
                  return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8); // 213
                }, // 214
                setInt8: function setInt8(byteOffset, value) {
                  // 215
                  set(this, 1, byteOffset, packI8, value); // 216
                }, // 217
                setUint8: function setUint8(byteOffset, value) {
                  // 218
                  set(this, 1, byteOffset, packI8, value); // 219
                }, // 220
                setInt16: function setInt16(byteOffset, value /*, littleEndian */) {
                  // 221
                  set(this, 2, byteOffset, packI16, value, arguments[2]); // 222
                }, // 223
                setUint16: function setUint16(byteOffset, value /*, littleEndian */) {
                  // 224
                  set(this, 2, byteOffset, packI16, value, arguments[2]); // 225
                }, // 226
                setInt32: function setInt32(byteOffset, value /*, littleEndian */) {
                  // 227
                  set(this, 4, byteOffset, packI32, value, arguments[2]); // 228
                }, // 229
                setUint32: function setUint32(byteOffset, value /*, littleEndian */) {
                  // 230
                  set(this, 4, byteOffset, packI32, value, arguments[2]); // 231
                }, // 232
                setFloat32: function setFloat32(byteOffset, value /*, littleEndian */) {
                  // 233
                  set(this, 4, byteOffset, packF32, value, arguments[2]); // 234
                }, // 235
                setFloat64: function setFloat64(byteOffset, value /*, littleEndian */) {
                  // 236
                  set(this, 8, byteOffset, packF64, value, arguments[2]); // 237
                } // 238
              }); // 239
            } else {
              // 240
              if (!fails(function () {
                // 241
                new $ArrayBuffer(); // eslint-disable-line no-new                                                                // 242
              }) || !fails(function () {
                // 243
                new $ArrayBuffer(.5); // eslint-disable-line no-new                                                                // 244
              })) {
                // 245
                $ArrayBuffer = function ArrayBuffer(length) {
                  // 246
                  return new BaseBuffer(validateArrayBufferArguments(this, length)); // 247
                }; // 248
                var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE]; // 249
                for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                  // 250
                  if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]); // 251
                }; // 252
                if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer; // 253
              } // 254
              // iOS Safari 7.x bug                                                                                                // 255
              var view = new $DataView(new $ArrayBuffer(2)) // 256
              ,
                  $setInt8 = $DataView[PROTOTYPE].setInt8; // 257
              view.setInt8(0, 2147483648); // 258
              view.setInt8(1, 2147483649); // 259
              if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], { // 260
                setInt8: function setInt8(byteOffset, value) {
                  // 261
                  $setInt8.call(this, byteOffset, value << 24 >> 24); // 262
                }, // 263
                setUint8: function setUint8(byteOffset, value) {
                  // 264
                  $setInt8.call(this, byteOffset, value << 24 >> 24); // 265
                } // 266
              }, true); // 267
            } // 268
            setToStringTag($ArrayBuffer, ARRAY_BUFFER); // 269
            setToStringTag($DataView, DATA_VIEW); // 270
            hide($DataView[PROTOTYPE], $typed.VIEW, true); // 271
            _exports139[ARRAY_BUFFER] = $ArrayBuffer; // 272
            _exports139[DATA_VIEW] = $DataView; // 273
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_species-constructor.js": function (_require246, _exports140, _module124) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_species-constructor.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.3.20 SpeciesConstructor(O, defaultConstructor)                                                                    // 1
            var anObject = _require246('./_an-object') // 2
            ,
                aFunction = _require246('./_a-function') // 3
            ,
                SPECIES = _require246('./_wks')('species'); // 4
            _module124.exports = function (O, D) {
              // 5
              var C = anObject(O).constructor,
                  S; // 6
              return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S); // 7
            }; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.typed.uint32-array.js": function (_require247) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.typed.uint32-array.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require247('./_typed-array')('Uint32', 4, function (init) {
              // 1
              return function Uint32Array(data, byteOffset, length) {
                // 2
                return init(this, data, byteOffset, length); // 3
              }; // 4
            }); // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "es6": { "array.js": function (_require248, _exports141, _module125) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/array.js                                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require248('../modules/es6.string.iterator'); // 1
            _require248('../modules/es6.array.is-array'); // 2
            _require248('../modules/es6.array.from'); // 3
            _require248('../modules/es6.array.of'); // 4
            _require248('../modules/es6.array.join'); // 5
            _require248('../modules/es6.array.slice'); // 6
            _require248('../modules/es6.array.sort'); // 7
            _require248('../modules/es6.array.for-each'); // 8
            _require248('../modules/es6.array.map'); // 9
            _require248('../modules/es6.array.filter'); // 10
            _require248('../modules/es6.array.some'); // 11
            _require248('../modules/es6.array.every'); // 12
            _require248('../modules/es6.array.reduce'); // 13
            _require248('../modules/es6.array.reduce-right'); // 14
            _require248('../modules/es6.array.index-of'); // 15
            _require248('../modules/es6.array.last-index-of'); // 16
            _require248('../modules/es6.array.copy-within'); // 17
            _require248('../modules/es6.array.fill'); // 18
            _require248('../modules/es6.array.find'); // 19
            _require248('../modules/es6.array.find-index'); // 20
            _require248('../modules/es6.array.species'); // 21
            _require248('../modules/es6.array.iterator'); // 22
            _module125.exports = _require248('../modules/_core').Array; // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "function.js": function (_require249, _exports142, _module126) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/function.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require249('../modules/es6.function.bind'); // 1
            _require249('../modules/es6.function.name'); // 2
            _require249('../modules/es6.function.has-instance'); // 3
            _module126.exports = _require249('../modules/_core').Function; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "math.js": function (_require250, _exports143, _module127) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/math.js                                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require250('../modules/es6.math.acosh'); // 1
            _require250('../modules/es6.math.asinh'); // 2
            _require250('../modules/es6.math.atanh'); // 3
            _require250('../modules/es6.math.cbrt'); // 4
            _require250('../modules/es6.math.clz32'); // 5
            _require250('../modules/es6.math.cosh'); // 6
            _require250('../modules/es6.math.expm1'); // 7
            _require250('../modules/es6.math.fround'); // 8
            _require250('../modules/es6.math.hypot'); // 9
            _require250('../modules/es6.math.imul'); // 10
            _require250('../modules/es6.math.log10'); // 11
            _require250('../modules/es6.math.log1p'); // 12
            _require250('../modules/es6.math.log2'); // 13
            _require250('../modules/es6.math.sign'); // 14
            _require250('../modules/es6.math.sinh'); // 15
            _require250('../modules/es6.math.tanh'); // 16
            _require250('../modules/es6.math.trunc'); // 17
            _module127.exports = _require250('../modules/_core').Math; // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "object.js": function (_require251, _exports144, _module128) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/object.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require251('../modules/es6.symbol'); // 1
            _require251('../modules/es6.object.create'); // 2
            _require251('../modules/es6.object.define-property'); // 3
            _require251('../modules/es6.object.define-properties'); // 4
            _require251('../modules/es6.object.get-own-property-descriptor'); // 5
            _require251('../modules/es6.object.get-prototype-of'); // 6
            _require251('../modules/es6.object.keys'); // 7
            _require251('../modules/es6.object.get-own-property-names'); // 8
            _require251('../modules/es6.object.freeze'); // 9
            _require251('../modules/es6.object.seal'); // 10
            _require251('../modules/es6.object.prevent-extensions'); // 11
            _require251('../modules/es6.object.is-frozen'); // 12
            _require251('../modules/es6.object.is-sealed'); // 13
            _require251('../modules/es6.object.is-extensible'); // 14
            _require251('../modules/es6.object.assign'); // 15
            _require251('../modules/es6.object.is'); // 16
            _require251('../modules/es6.object.set-prototype-of'); // 17
            _require251('../modules/es6.object.to-string'); // 18
            // 19
            _module128.exports = _require251('../modules/_core').Object; // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "string.js": function (_require252, _exports145, _module129) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/string.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require252('../modules/es6.string.from-code-point'); // 1
            _require252('../modules/es6.string.raw'); // 2
            _require252('../modules/es6.string.trim'); // 3
            _require252('../modules/es6.string.iterator'); // 4
            _require252('../modules/es6.string.code-point-at'); // 5
            _require252('../modules/es6.string.ends-with'); // 6
            _require252('../modules/es6.string.includes'); // 7
            _require252('../modules/es6.string.repeat'); // 8
            _require252('../modules/es6.string.starts-with'); // 9
            _require252('../modules/es6.string.anchor'); // 10
            _require252('../modules/es6.string.big'); // 11
            _require252('../modules/es6.string.blink'); // 12
            _require252('../modules/es6.string.bold'); // 13
            _require252('../modules/es6.string.fixed'); // 14
            _require252('../modules/es6.string.fontcolor'); // 15
            _require252('../modules/es6.string.fontsize'); // 16
            _require252('../modules/es6.string.italics'); // 17
            _require252('../modules/es6.string.link'); // 18
            _require252('../modules/es6.string.small'); // 19
            _require252('../modules/es6.string.strike'); // 20
            _require252('../modules/es6.string.sub'); // 21
            _require252('../modules/es6.string.sup'); // 22
            _require252('../modules/es6.regexp.match'); // 23
            _require252('../modules/es6.regexp.replace'); // 24
            _require252('../modules/es6.regexp.search'); // 25
            _require252('../modules/es6.regexp.split'); // 26
            _module129.exports = _require252('../modules/_core').String; // 27
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "weak-map.js": function (_require253, _exports146, _module130) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/weak-map.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require253('../modules/es6.object.to-string'); // 1
            _require253('../modules/es6.array.iterator'); // 2
            _require253('../modules/es6.weak-map'); // 3
            _module130.exports = _require253('../modules/_core').WeakMap; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "weak-set.js": function (_require254, _exports147, _module131) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/weak-set.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require254('../modules/es6.object.to-string'); // 1
            _require254('../modules/web.dom.iterable'); // 2
            _require254('../modules/es6.weak-set'); // 3
            _module131.exports = _require254('../modules/_core').WeakSet; // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "es7": { "array.js": function (_require255, _exports148, _module132) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es7/array.js                                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require255('../modules/es7.array.includes'); // 1
            _module132.exports = _require255('../modules/_core').Array; // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "object.js": function (_require256, _exports149, _module133) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es7/object.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require256('../modules/es7.object.get-own-property-descriptors'); // 1
            _require256('../modules/es7.object.values'); // 2
            _require256('../modules/es7.object.entries'); // 3
            _require256('../modules/es7.object.define-getter'); // 4
            _require256('../modules/es7.object.define-setter'); // 5
            _require256('../modules/es7.object.lookup-getter'); // 6
            _require256('../modules/es7.object.lookup-setter'); // 7
            _module133.exports = _require256('../modules/_core').Object; // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "library": { "fn": { "symbol": { "iterator.js": function (_require257, _exports150, _module134) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require257('../../modules/es6.string.iterator'); // 1
                _require257('../../modules/web.dom.iterable'); // 2
                _module134.exports = _require257('../../modules/_wks-ext').f('iterator'); // 3
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require258, _exports151, _module135) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/symbol/index.js                                                                     //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require258('../../modules/es6.symbol'); // 1
                _require258('../../modules/es6.object.to-string'); // 2
                _require258('../../modules/es7.symbol.async-iterator'); // 3
                _require258('../../modules/es7.symbol.observable'); // 4
                _module135.exports = _require258('../../modules/_core').Symbol; // 5
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "array": { "from.js": function (_require259, _exports152, _module136) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/array/from.js                                                                       //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require259('../../modules/es6.string.iterator'); // 1
                _require259('../../modules/es6.array.from'); // 2
                _module136.exports = _require259('../../modules/_core').Array.from; // 3
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "object": { "set-prototype-of.js": function (_require260, _exports153, _module137) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require260('../../modules/es6.object.set-prototype-of'); // 1
                _module137.exports = _require260('../../modules/_core').Object.setPrototypeOf; // 2
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "create.js": function (_require261, _exports154, _module138) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/object/create.js                                                                    //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require261('../../modules/es6.object.create'); // 1
                var $Object = _require261('../../modules/_core').Object; // 2
                _module138.exports = function create(P, D) {
                  // 3
                  return $Object.create(P, D); // 4
                }; // 5
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } }, "modules": { "es6.string.iterator.js": function (_require262) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.string.iterator.js                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var $at = _require262('./_string-at')(true); // 2
              // 3
              // 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
              _require262('./_iter-define')(String, 'String', function (iterated) {
                // 5
                this._t = String(iterated); // target                                                                                // 6
                this._i = 0; // next index                                                                            // 7
                // 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
              }, function () {
                // 9
                var O = this._t // 10
                ,
                    index = this._i // 11
                ,
                    point; // 12
                if (index >= O.length) return { value: undefined, done: true }; // 13
                point = $at(O, index); // 14
                this._i += point.length; // 15
                return { value: point, done: false }; // 16
              }); // 17
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_string-at.js": function (_require263, _exports155, _module139) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_string-at.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toInteger = _require263('./_to-integer') // 1
              ,
                  defined = _require263('./_defined'); // 2
              // true  -> String#at                                                                                                  // 3
              // false -> String#codePointAt                                                                                         // 4
              _module139.exports = function (TO_STRING) {
                // 5
                return function (that, pos) {
                  // 6
                  var s = String(defined(that)) // 7
                  ,
                      i = toInteger(pos) // 8
                  ,
                      l = s.length // 9
                  ,
                      a,
                      b; // 10
                  if (i < 0 || i >= l) return TO_STRING ? '' : undefined; // 11
                  a = s.charCodeAt(i); // 12
                  return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff // 13
                  ? TO_STRING ? s.charAt(i) : a // 14
                  : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000; // 15
                }; // 16
              }; // 17
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-integer.js": function (_require264, _exports156, _module140) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-integer.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.4 ToInteger                                                                                                     // 1
              var ceil = Math.ceil // 2
              ,
                  floor = Math.floor; // 3
              _module140.exports = function (it) {
                // 4
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it); // 5
              }; // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_defined.js": function (_require265, _exports157, _module141) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_defined.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
              _module141.exports = function (it) {
                // 2
                if (it == undefined) throw TypeError("Can't call method on  " + it); // 3
                return it; // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-define.js": function (_require266, _exports158, _module142) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-define.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var LIBRARY = _require266('./_library') // 2
              ,
                  $export = _require266('./_export') // 3
              ,
                  redefine = _require266('./_redefine') // 4
              ,
                  hide = _require266('./_hide') // 5
              ,
                  has = _require266('./_has') // 6
              ,
                  Iterators = _require266('./_iterators') // 7
              ,
                  $iterCreate = _require266('./_iter-create') // 8
              ,
                  setToStringTag = _require266('./_set-to-string-tag') // 9
              ,
                  getPrototypeOf = _require266('./_object-gpo') // 10
              ,
                  ITERATOR = _require266('./_wks')('iterator') // 11
              ,
                  BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
              ,
                  FF_ITERATOR = '@@iterator' // 13
              ,
                  KEYS = 'keys' // 14
              ,
                  VALUES = 'values'; // 15
              // 16
              var returnThis = function () {
                return this;
              }; // 17
              // 18
              _module142.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                // 19
                $iterCreate(Constructor, NAME, next); // 20
                var getMethod = function (kind) {
                  // 21
                  if (!BUGGY && kind in proto) return proto[kind]; // 22
                  switch (kind) {// 23
                    case KEYS:
                      return function keys() {
                        return new Constructor(this, kind);
                      }; // 24
                    case VALUES:
                      return function values() {
                        return new Constructor(this, kind);
                      }; // 25
                  }return function entries() {
                    return new Constructor(this, kind);
                  }; // 26
                }; // 27
                var TAG = NAME + ' Iterator' // 28
                ,
                    DEF_VALUES = DEFAULT == VALUES // 29
                ,
                    VALUES_BUG = false // 30
                ,
                    proto = Base.prototype // 31
                ,
                    $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT] // 32
                ,
                    $default = $native || getMethod(DEFAULT) // 33
                ,
                    $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined // 34
                ,
                    $anyNative = NAME == 'Array' ? proto.entries || $native : $native // 35
                ,
                    methods,
                    key,
                    IteratorPrototype; // 36
                // Fix native                                                                                                        // 37
                if ($anyNative) {
                  // 38
                  IteratorPrototype = getPrototypeOf($anyNative.call(new Base())); // 39
                  if (IteratorPrototype !== Object.prototype) {
                    // 40
                    // Set @@toStringTag to native iterators                                                                         // 41
                    setToStringTag(IteratorPrototype, TAG, true); // 42
                    // fix for some old engines                                                                                      // 43
                    if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis); // 44
                  } // 45
                } // 46
                // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
                if (DEF_VALUES && $native && $native.name !== VALUES) {
                  // 48
                  VALUES_BUG = true; // 49
                  $default = function values() {
                    return $native.call(this);
                  }; // 50
                } // 51
                // Define iterator                                                                                                   // 52
                if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                  // 53
                  hide(proto, ITERATOR, $default); // 54
                } // 55
                // Plug for library                                                                                                  // 56
                Iterators[NAME] = $default; // 57
                Iterators[TAG] = returnThis; // 58
                if (DEFAULT) {
                  // 59
                  methods = { // 60
                    values: DEF_VALUES ? $default : getMethod(VALUES), // 61
                    keys: IS_SET ? $default : getMethod(KEYS), // 62
                    entries: $entries // 63
                  }; // 64
                  if (FORCED) for (key in methods) {
                    // 65
                    if (!(key in proto)) redefine(proto, key, methods[key]); // 66
                  } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods); // 67
                } // 68
                return methods; // 69
              }; // 70
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_library.js": function (_require267, _exports159, _module143) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_library.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module143.exports = true; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_export.js": function (_require268, _exports161, _module144) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_export.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require268('./_global') // 1
              ,
                  core = _require268('./_core') // 2
              ,
                  ctx = _require268('./_ctx') // 3
              ,
                  hide = _require268('./_hide') // 4
              ,
                  PROTOTYPE = 'prototype'; // 5
              // 6
              var $export = function (type, name, source) {
                // 7
                var IS_FORCED = type & $export.F // 8
                ,
                    IS_GLOBAL = type & $export.G // 9
                ,
                    IS_STATIC = type & $export.S // 10
                ,
                    IS_PROTO = type & $export.P // 11
                ,
                    IS_BIND = type & $export.B // 12
                ,
                    IS_WRAP = type & $export.W // 13
                ,
                    _exports160 = IS_GLOBAL ? core : core[name] || (core[name] = {}) // 14
                ,
                    expProto = _exports160[PROTOTYPE] // 15
                ,
                    target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE] // 16
                ,
                    key,
                    own,
                    out; // 17
                if (IS_GLOBAL) source = name; // 18
                for (key in source) {
                  // 19
                  // contains in native                                                                                              // 20
                  own = !IS_FORCED && target && target[key] !== undefined; // 21
                  if (own && key in _exports160) continue; // 22
                  // export native or passed                                                                                         // 23
                  out = own ? target[key] : source[key]; // 24
                  // prevent global pollution for namespaces                                                                         // 25
                  _exports160[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // 26
                  // bind timers to global for call from export context                                                              // 27
                  : IS_BIND && own ? ctx(out, global) // 28
                  // wrap global constructors for prevent change them in library                                                     // 29
                  : IS_WRAP && target[key] == out ? function (C) {
                    // 30
                    var F = function (a, b, c) {
                      // 31
                      if (this instanceof C) {
                        // 32
                        switch (arguments.length) {// 33
                          case 0:
                            return new C(); // 34
                          case 1:
                            return new C(a); // 35
                          case 2:
                            return new C(a, b); // 36
                        }return new C(a, b, c); // 37
                      }return C.apply(this, arguments); // 38
                    }; // 39
                    F[PROTOTYPE] = C[PROTOTYPE]; // 40
                    return F; // 41
                    // make static versions for prototype methods                                                                      // 42
                  }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // 43
                  // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
                  if (IS_PROTO) {
                    // 45
                    (_exports160.virtual || (_exports160.virtual = {}))[key] = out; // 46
                    // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
                    if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out); // 48
                  } // 49
                } // 50
              }; // 51
              // type bitmap                                                                                                         // 52
              $export.F = 1; // forced                                                                                             // 53
              $export.G = 2; // global                                                                                             // 54
              $export.S = 4; // static                                                                                             // 55
              $export.P = 8; // proto                                                                                              // 56
              $export.B = 16; // bind                                                                                               // 57
              $export.W = 32; // wrap                                                                                               // 58
              $export.U = 64; // safe                                                                                               // 59
              $export.R = 128; // real proto method for `library`                                                                    // 60
              _module144.exports = $export; // 61
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_global.js": function (_require269, _exports162, _module145) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_global.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
              var global = _module145.exports = typeof window != 'undefined' && window.Math == Math // 2
              ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')(); // 3
              if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                                // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_core.js": function (_require270, _exports163, _module146) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_core.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var core = _module146.exports = { version: '2.4.0' }; // 1
              if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                  // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_ctx.js": function (_require271, _exports164, _module147) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_ctx.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // optional / simple context binding                                                                                   // 1
              var aFunction = _require271('./_a-function'); // 2
              _module147.exports = function (fn, that, length) {
                // 3
                aFunction(fn); // 4
                if (that === undefined) return fn; // 5
                switch (length) {// 6
                  case 1:
                    return function (a) {
                      // 7
                      return fn.call(that, a); // 8
                    }; // 9
                  case 2:
                    return function (a, b) {
                      // 10
                      return fn.call(that, a, b); // 11
                    }; // 12
                  case 3:
                    return function (a, b, c) {
                      // 13
                      return fn.call(that, a, b, c); // 14
                    }; // 15
                } // 16
                return function () /* ...args */{
                  // 17
                  return fn.apply(that, arguments); // 18
                }; // 19
              }; // 20
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_a-function.js": function (_require272, _exports165, _module148) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_a-function.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module148.exports = function (it) {
                // 1
                if (typeof it != 'function') throw TypeError(it + ' is not a function!'); // 2
                return it; // 3
              }; // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_hide.js": function (_require273, _exports166, _module149) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_hide.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var dP = _require273('./_object-dp') // 1
              ,
                  createDesc = _require273('./_property-desc'); // 2
              _module149.exports = _require273('./_descriptors') ? function (object, key, value) {
                // 3
                return dP.f(object, key, createDesc(1, value)); // 4
              } : function (object, key, value) {
                // 5
                object[key] = value; // 6
                return object; // 7
              }; // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-dp.js": function (_require274, _exports167) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-dp.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var anObject = _require274('./_an-object') // 1
              ,
                  IE8_DOM_DEFINE = _require274('./_ie8-dom-define') // 2
              ,
                  toPrimitive = _require274('./_to-primitive') // 3
              ,
                  dP = Object.defineProperty; // 4
              // 5
              _exports167.f = _require274('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                // 6
                anObject(O); // 7
                P = toPrimitive(P, true); // 8
                anObject(Attributes); // 9
                if (IE8_DOM_DEFINE) try {
                  // 10
                  return dP(O, P, Attributes); // 11
                } catch (e) {} /* empty */ // 12
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!'); // 13
                if ('value' in Attributes) O[P] = Attributes.value; // 14
                return O; // 15
              }; // 16
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_an-object.js": function (_require275, _exports168, _module150) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_an-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var isObject = _require275('./_is-object'); // 1
              _module150.exports = function (it) {
                // 2
                if (!isObject(it)) throw TypeError(it + ' is not an object!'); // 3
                return it; // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-object.js": function (_require276, _exports169, _module151) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module151.exports = function (it) {
                // 1
                return typeof it === 'object' ? it !== null : typeof it === 'function'; // 2
              }; // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_ie8-dom-define.js": function (_require277, _exports170, _module152) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module152.exports = !_require277('./_descriptors') && !_require277('./_fails')(function () {
                // 1
                return Object.defineProperty(_require277('./_dom-create')('div'), 'a', { get: function () {
                    return 7;
                  } }).a != 7; // 2
              }); // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_descriptors.js": function (_require278, _exports171, _module153) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_descriptors.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Thank's IE8 for his funny defineProperty                                                                            // 1
              _module153.exports = !_require278('./_fails')(function () {
                // 2
                return Object.defineProperty({}, 'a', { get: function () {
                    return 7;
                  } }).a != 7; // 3
              }); // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_fails.js": function (_require279, _exports172, _module154) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_fails.js                                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module154.exports = function (exec) {
                // 1
                try {
                  // 2
                  return !!exec(); // 3
                } catch (e) {
                  // 4
                  return true; // 5
                } // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_dom-create.js": function (_require280, _exports173, _module155) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_dom-create.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var isObject = _require280('./_is-object') // 1
              ,
                  document = _require280('./_global').document // 2
              // in old IE typeof document.createElement is 'object'                                                               // 3
              ,
                  is = isObject(document) && isObject(document.createElement); // 4
              _module155.exports = function (it) {
                // 5
                return is ? document.createElement(it) : {}; // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-primitive.js": function (_require281, _exports174, _module156) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-primitive.js                                                               //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
              var isObject = _require281('./_is-object'); // 2
              // instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
              // and the second argument - flag - preferred type is a string                                                         // 4
              _module156.exports = function (it, S) {
                // 5
                if (!isObject(it)) return it; // 6
                var fn, val; // 7
                if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 8
                if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val; // 9
                if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 10
                throw TypeError("Can't convert object to primitive value"); // 11
              }; // 12
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_property-desc.js": function (_require282, _exports175, _module157) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_property-desc.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module157.exports = function (bitmap, value) {
                // 1
                return { // 2
                  enumerable: !(bitmap & 1), // 3
                  configurable: !(bitmap & 2), // 4
                  writable: !(bitmap & 4), // 5
                  value: value // 6
                }; // 7
              }; // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_redefine.js": function (_require283, _exports176, _module158) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_redefine.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module158.exports = _require283('./_hide'); // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_has.js": function (_require284, _exports177, _module159) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_has.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var hasOwnProperty = {}.hasOwnProperty; // 1
              _module159.exports = function (it, key) {
                // 2
                return hasOwnProperty.call(it, key); // 3
              }; // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iterators.js": function (_require285, _exports178, _module160) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iterators.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module160.exports = {}; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-create.js": function (_require286, _exports179, _module161) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-create.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var create = _require286('./_object-create') // 2
              ,
                  descriptor = _require286('./_property-desc') // 3
              ,
                  setToStringTag = _require286('./_set-to-string-tag') // 4
              ,
                  IteratorPrototype = {}; // 5
              // 6
              // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
              _require286('./_hide')(IteratorPrototype, _require286('./_wks')('iterator'), function () {
                return this;
              }); // 8
              // 9
              _module161.exports = function (Constructor, NAME, next) {
                // 10
                Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) }); // 11
                setToStringTag(Constructor, NAME + ' Iterator'); // 12
              }; // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-create.js": function (_require287, _exports180, _module162) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-create.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
              var anObject = _require287('./_an-object') // 2
              ,
                  dPs = _require287('./_object-dps') // 3
              ,
                  enumBugKeys = _require287('./_enum-bug-keys') // 4
              ,
                  IE_PROTO = _require287('./_shared-key')('IE_PROTO') // 5
              ,
                  Empty = function () {} /* empty */ // 6
              ,
                  PROTOTYPE = 'prototype'; // 7
              // 8
              // Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
              var createDict = function () {
                // 10
                // Thrash, waste and sodomy: IE GC bug                                                                               // 11
                var iframe = _require287('./_dom-create')('iframe') // 12
                ,
                    i = enumBugKeys.length // 13
                ,
                    lt = '<' // 14
                ,
                    gt = '>' // 15
                ,
                    iframeDocument; // 16
                iframe.style.display = 'none'; // 17
                _require287('./_html').appendChild(iframe); // 18
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
                // createDict = iframe.contentWindow.Object;                                                                         // 20
                // html.removeChild(iframe);                                                                                         // 21
                iframeDocument = iframe.contentWindow.document; // 22
                iframeDocument.open(); // 23
                iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt); // 24
                iframeDocument.close(); // 25
                createDict = iframeDocument.F; // 26
                while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]]; // 27
                return createDict(); // 28
              }; // 29
              // 30
              _module162.exports = Object.create || function create(O, Properties) {
                // 31
                var result; // 32
                if (O !== null) {
                  // 33
                  Empty[PROTOTYPE] = anObject(O); // 34
                  result = new Empty(); // 35
                  Empty[PROTOTYPE] = null; // 36
                  // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
                  result[IE_PROTO] = O; // 38
                } else result = createDict(); // 39
                return Properties === undefined ? result : dPs(result, Properties); // 40
              }; // 41
              // 42
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-dps.js": function (_require288, _exports181, _module163) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-dps.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var dP = _require288('./_object-dp') // 1
              ,
                  anObject = _require288('./_an-object') // 2
              ,
                  getKeys = _require288('./_object-keys'); // 3
              // 4
              _module163.exports = _require288('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
                // 5
                anObject(O); // 6
                var keys = getKeys(Properties) // 7
                ,
                    length = keys.length // 8
                ,
                    i = 0 // 9
                ,
                    P; // 10
                while (length > i) dP.f(O, P = keys[i++], Properties[P]); // 11
                return O; // 12
              }; // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-keys.js": function (_require289, _exports182, _module164) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-keys.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
              var $keys = _require289('./_object-keys-internal') // 2
              ,
                  enumBugKeys = _require289('./_enum-bug-keys'); // 3
              // 4
              _module164.exports = Object.keys || function keys(O) {
                // 5
                return $keys(O, enumBugKeys); // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-keys-internal.js": function (_require290, _exports183, _module165) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var has = _require290('./_has') // 1
              ,
                  toIObject = _require290('./_to-iobject') // 2
              ,
                  arrayIndexOf = _require290('./_array-includes')(false) // 3
              ,
                  IE_PROTO = _require290('./_shared-key')('IE_PROTO'); // 4
              // 5
              _module165.exports = function (object, names) {
                // 6
                var O = toIObject(object) // 7
                ,
                    i = 0 // 8
                ,
                    result = [] // 9
                ,
                    key; // 10
                for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // 11
                // Don't enum bug & hidden keys                                                                                      // 12
                while (names.length > i) if (has(O, key = names[i++])) {
                  // 13
                  ~arrayIndexOf(result, key) || result.push(key); // 14
                } // 15
                return result; // 16
              }; // 17
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-iobject.js": function (_require291, _exports184, _module166) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-iobject.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
              var IObject = _require291('./_iobject') // 2
              ,
                  defined = _require291('./_defined'); // 3
              _module166.exports = function (it) {
                // 4
                return IObject(defined(it)); // 5
              }; // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iobject.js": function (_require292, _exports185, _module167) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iobject.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
              var cof = _require292('./_cof'); // 2
              _module167.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                // 3
                return cof(it) == 'String' ? it.split('') : Object(it); // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_cof.js": function (_require293, _exports186, _module168) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_cof.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toString = {}.toString; // 1
              // 2
              _module168.exports = function (it) {
                // 3
                return toString.call(it).slice(8, -1); // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_array-includes.js": function (_require294, _exports187, _module169) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_array-includes.js                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // false -> Array#indexOf                                                                                              // 1
              // true  -> Array#includes                                                                                             // 2
              var toIObject = _require294('./_to-iobject') // 3
              ,
                  toLength = _require294('./_to-length') // 4
              ,
                  toIndex = _require294('./_to-index'); // 5
              _module169.exports = function (IS_INCLUDES) {
                // 6
                return function ($this, el, fromIndex) {
                  // 7
                  var O = toIObject($this) // 8
                  ,
                      length = toLength(O.length) // 9
                  ,
                      index = toIndex(fromIndex, length) // 10
                  ,
                      value; // 11
                  // Array#includes uses SameValueZero equality algorithm                                                            // 12
                  if (IS_INCLUDES && el != el) while (length > index) {
                    // 13
                    value = O[index++]; // 14
                    if (value != value) return true; // 15
                    // Array#toIndex ignores holes, Array#includes - not                                                               // 16
                  } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                    // 17
                    if (O[index] === el) return IS_INCLUDES || index || 0; // 18
                  }return !IS_INCLUDES && -1; // 19
                }; // 20
              }; // 21
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-length.js": function (_require295, _exports188, _module170) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-length.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.15 ToLength                                                                                                     // 1
              var toInteger = _require295('./_to-integer') // 2
              ,
                  min = Math.min; // 3
              _module170.exports = function (it) {
                // 4
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
              }; // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-index.js": function (_require296, _exports189, _module171) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-index.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toInteger = _require296('./_to-integer') // 1
              ,
                  max = Math.max // 2
              ,
                  min = Math.min; // 3
              _module171.exports = function (index, length) {
                // 4
                index = toInteger(index); // 5
                return index < 0 ? max(index + length, 0) : min(index, length); // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_shared-key.js": function (_require297, _exports190, _module172) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_shared-key.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var shared = _require297('./_shared')('keys') // 1
              ,
                  uid = _require297('./_uid'); // 2
              _module172.exports = function (key) {
                // 3
                return shared[key] || (shared[key] = uid(key)); // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_shared.js": function (_require298, _exports191, _module173) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_shared.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require298('./_global') // 1
              ,
                  SHARED = '__core-js_shared__' // 2
              ,
                  store = global[SHARED] || (global[SHARED] = {}); // 3
              _module173.exports = function (key) {
                // 4
                return store[key] || (store[key] = {}); // 5
              }; // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_uid.js": function (_require299, _exports192, _module174) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_uid.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var id = 0 // 1
              ,
                  px = Math.random(); // 2
              _module174.exports = function (key) {
                // 3
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36)); // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_enum-bug-keys.js": function (_require300, _exports193, _module175) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // IE 8- don't enum bug keys                                                                                           // 1
              _module175.exports = // 2
              'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf' // 3
              .split(','); // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_html.js": function (_require301, _exports194, _module176) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_html.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module176.exports = _require301('./_global').document && document.documentElement; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_set-to-string-tag.js": function (_require302, _exports195, _module177) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var def = _require302('./_object-dp').f // 1
              ,
                  has = _require302('./_has') // 2
              ,
                  TAG = _require302('./_wks')('toStringTag'); // 3
              // 4
              _module177.exports = function (it, tag, stat) {
                // 5
                if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag }); // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks.js": function (_require303, _exports196, _module178) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var store = _require303('./_shared')('wks') // 1
              ,
                  uid = _require303('./_uid') // 2
              ,
                  Symbol = _require303('./_global').Symbol // 3
              ,
                  USE_SYMBOL = typeof Symbol == 'function'; // 4
              // 5
              var $exports = _module178.exports = function (name) {
                // 6
                return store[name] || (store[name] = // 7
                USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name)); // 8
              }; // 9
              // 10
              $exports.store = store; // 11
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gpo.js": function (_require304, _exports197, _module179) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gpo.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
              var has = _require304('./_has') // 2
              ,
                  toObject = _require304('./_to-object') // 3
              ,
                  IE_PROTO = _require304('./_shared-key')('IE_PROTO') // 4
              ,
                  ObjectProto = Object.prototype; // 5
              // 6
              _module179.exports = Object.getPrototypeOf || function (O) {
                // 7
                O = toObject(O); // 8
                if (has(O, IE_PROTO)) return O[IE_PROTO]; // 9
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                  // 10
                  return O.constructor.prototype; // 11
                }return O instanceof Object ? ObjectProto : null; // 12
              }; // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-object.js": function (_require305, _exports198, _module180) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.13 ToObject(argument)                                                                                           // 1
              var defined = _require305('./_defined'); // 2
              _module180.exports = function (it) {
                // 3
                return Object(defined(it)); // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "web.dom.iterable.js": function (_require306) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require306('./es6.array.iterator'); // 1
              var global = _require306('./_global') // 2
              ,
                  hide = _require306('./_hide') // 3
              ,
                  Iterators = _require306('./_iterators') // 4
              ,
                  TO_STRING_TAG = _require306('./_wks')('toStringTag'); // 5
              // 6
              for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
                // 7
                var NAME = collections[i] // 8
                ,
                    Collection = global[NAME] // 9
                ,
                    proto = Collection && Collection.prototype; // 10
                if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME); // 11
                Iterators[NAME] = Iterators.Array; // 12
              } // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.array.iterator.js": function (_require307, _exports199, _module181) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.array.iterator.js                                                          //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var addToUnscopables = _require307('./_add-to-unscopables') // 2
              ,
                  step = _require307('./_iter-step') // 3
              ,
                  Iterators = _require307('./_iterators') // 4
              ,
                  toIObject = _require307('./_to-iobject'); // 5
              // 6
              // 22.1.3.4 Array.prototype.entries()                                                                                  // 7
              // 22.1.3.13 Array.prototype.keys()                                                                                    // 8
              // 22.1.3.29 Array.prototype.values()                                                                                  // 9
              // 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
              _module181.exports = _require307('./_iter-define')(Array, 'Array', function (iterated, kind) {
                // 11
                this._t = toIObject(iterated); // target                                                                             // 12
                this._i = 0; // next index                                                                         // 13
                this._k = kind; // kind                                                                               // 14
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
              }, function () {
                // 16
                var O = this._t // 17
                ,
                    kind = this._k // 18
                ,
                    index = this._i++; // 19
                if (!O || index >= O.length) {
                  // 20
                  this._t = undefined; // 21
                  return step(1); // 22
                } // 23
                if (kind == 'keys') return step(0, index); // 24
                if (kind == 'values') return step(0, O[index]); // 25
                return step(0, [index, O[index]]); // 26
              }, 'values'); // 27
              // 28
              // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
              Iterators.Arguments = Iterators.Array; // 30
              // 31
              addToUnscopables('keys'); // 32
              addToUnscopables('values'); // 33
              addToUnscopables('entries'); // 34
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_add-to-unscopables.js": function (_require308, _exports200, _module182) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module182.exports = function () {/* empty */}; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-step.js": function (_require309, _exports201, _module183) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-step.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module183.exports = function (done, value) {
                // 1
                return { value: value, done: !!done }; // 2
              }; // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks-ext.js": function (_require310, _exports202) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks-ext.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports202.f = _require310('./_wks'); // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.symbol.js": function (_require311) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.symbol.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1
              // ECMAScript 6 symbols shim                                                                                           // 2

              var global = _require311('./_global') // 3
              ,
                  has = _require311('./_has') // 4
              ,
                  DESCRIPTORS = _require311('./_descriptors') // 5
              ,
                  $export = _require311('./_export') // 6
              ,
                  redefine = _require311('./_redefine') // 7
              ,
                  META = _require311('./_meta').KEY // 8
              ,
                  $fails = _require311('./_fails') // 9
              ,
                  shared = _require311('./_shared') // 10
              ,
                  setToStringTag = _require311('./_set-to-string-tag') // 11
              ,
                  uid = _require311('./_uid') // 12
              ,
                  wks = _require311('./_wks') // 13
              ,
                  wksExt = _require311('./_wks-ext') // 14
              ,
                  wksDefine = _require311('./_wks-define') // 15
              ,
                  keyOf = _require311('./_keyof') // 16
              ,
                  enumKeys = _require311('./_enum-keys') // 17
              ,
                  isArray = _require311('./_is-array') // 18
              ,
                  anObject = _require311('./_an-object') // 19
              ,
                  toIObject = _require311('./_to-iobject') // 20
              ,
                  toPrimitive = _require311('./_to-primitive') // 21
              ,
                  createDesc = _require311('./_property-desc') // 22
              ,
                  _create = _require311('./_object-create') // 23
              ,
                  gOPNExt = _require311('./_object-gopn-ext') // 24
              ,
                  $GOPD = _require311('./_object-gopd') // 25
              ,
                  $DP = _require311('./_object-dp') // 26
              ,
                  $keys = _require311('./_object-keys') // 27
              ,
                  gOPD = $GOPD.f // 28
              ,
                  dP = $DP.f // 29
              ,
                  gOPN = gOPNExt.f // 30
              ,
                  $Symbol = global.Symbol // 31
              ,
                  $JSON = global.JSON // 32
              ,
                  _stringify = $JSON && $JSON.stringify // 33
              ,
                  PROTOTYPE = 'prototype' // 34
              ,
                  HIDDEN = wks('_hidden') // 35
              ,
                  TO_PRIMITIVE = wks('toPrimitive') // 36
              ,
                  isEnum = {}.propertyIsEnumerable // 37
              ,
                  SymbolRegistry = shared('symbol-registry') // 38
              ,
                  AllSymbols = shared('symbols') // 39
              ,
                  OPSymbols = shared('op-symbols') // 40
              ,
                  ObjectProto = Object[PROTOTYPE] // 41
              ,
                  USE_NATIVE = typeof $Symbol == 'function' // 42
              ,
                  QObject = global.QObject; // 43
              // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
              var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // 45
              // 46
              // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
              var setSymbolDesc = DESCRIPTORS && $fails(function () {
                // 48
                return _create(dP({}, 'a', { // 49
                  get: function () {
                    return dP(this, 'a', { value: 7 }).a;
                  } // 50
                })).a != 7; // 51
              }) ? function (it, key, D) {
                // 52
                var protoDesc = gOPD(ObjectProto, key); // 53
                if (protoDesc) delete ObjectProto[key]; // 54
                dP(it, key, D); // 55
                if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc); // 56
              } : dP; // 57
              // 58
              var wrap = function (tag) {
                // 59
                var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]); // 60
                sym._k = tag; // 61
                return sym; // 62
              }; // 63
              // 64
              var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
                // 65
                return typeof it == 'symbol'; // 66
              } : function (it) {
                // 67
                return it instanceof $Symbol; // 68
              }; // 69
              // 70
              var $defineProperty = function defineProperty(it, key, D) {
                // 71
                if (it === ObjectProto) $defineProperty(OPSymbols, key, D); // 72
                anObject(it); // 73
                key = toPrimitive(key, true); // 74
                anObject(D); // 75
                if (has(AllSymbols, key)) {
                  // 76
                  if (!D.enumerable) {
                    // 77
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {})); // 78
                    it[HIDDEN][key] = true; // 79
                  } else {
                    // 80
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false; // 81
                    D = _create(D, { enumerable: createDesc(0, false) }); // 82
                  }return setSymbolDesc(it, key, D); // 83
                }return dP(it, key, D); // 84
              }; // 85
              var $defineProperties = function defineProperties(it, P) {
                // 86
                anObject(it); // 87
                var keys = enumKeys(P = toIObject(P)) // 88
                ,
                    i = 0 // 89
                ,
                    l = keys.length // 90
                ,
                    key; // 91
                while (l > i) $defineProperty(it, key = keys[i++], P[key]); // 92
                return it; // 93
              }; // 94
              var $create = function create(it, P) {
                // 95
                return P === undefined ? _create(it) : $defineProperties(_create(it), P); // 96
              }; // 97
              var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                // 98
                var E = isEnum.call(this, key = toPrimitive(key, true)); // 99
                if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false; // 100
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true; // 101
              }; // 102
              var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                // 103
                it = toIObject(it); // 104
                key = toPrimitive(key, true); // 105
                if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return; // 106
                var D = gOPD(it, key); // 107
                if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true; // 108
                return D; // 109
              }; // 110
              var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                // 111
                var names = gOPN(toIObject(it)) // 112
                ,
                    result = [] // 113
                ,
                    i = 0 // 114
                ,
                    key; // 115
                while (names.length > i) {
                  // 116
                  if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key); // 117
                }return result; // 118
              }; // 119
              var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                // 120
                var IS_OP = it === ObjectProto // 121
                ,
                    names = gOPN(IS_OP ? OPSymbols : toIObject(it)) // 122
                ,
                    result = [] // 123
                ,
                    i = 0 // 124
                ,
                    key; // 125
                while (names.length > i) {
                  // 126
                  if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]); // 127
                }return result; // 128
              }; // 129
              // 130
              // 19.4.1.1 Symbol([description])                                                                                      // 131
              if (!USE_NATIVE) {
                // 132
                $Symbol = function Symbol() {
                  // 133
                  if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!'); // 134
                  var tag = uid(arguments.length > 0 ? arguments[0] : undefined); // 135
                  var $set = function (value) {
                    // 136
                    if (this === ObjectProto) $set.call(OPSymbols, value); // 137
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false; // 138
                    setSymbolDesc(this, tag, createDesc(1, value)); // 139
                  }; // 140
                  if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set }); // 141
                  return wrap(tag); // 142
                }; // 143
                redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                  // 144
                  return this._k; // 145
                }); // 146
                // 147
                $GOPD.f = $getOwnPropertyDescriptor; // 148
                $DP.f = $defineProperty; // 149
                _require311('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames; // 150
                _require311('./_object-pie').f = $propertyIsEnumerable; // 151
                _require311('./_object-gops').f = $getOwnPropertySymbols; // 152
                // 153
                if (DESCRIPTORS && !_require311('./_library')) {
                  // 154
                  redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true); // 155
                } // 156
                // 157
                wksExt.f = function (name) {
                  // 158
                  return wrap(wks(name)); // 159
                }; // 160
              } // 161
              // 162
              $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol }); // 163
              // 164
              for (var symbols = // 165
              // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
              'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables' // 167
              .split(','), i = 0; symbols.length > i;) wks(symbols[i++]); // 168
              // 169
              for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]); // 170
              // 171
              $export($export.S + $export.F * !USE_NATIVE, 'Symbol', { // 172
                // 19.4.2.1 Symbol.for(key)                                                                                          // 173
                'for': function (key) {
                  // 174
                  return has(SymbolRegistry, key += '') // 175
                  ? SymbolRegistry[key] // 176
                  : SymbolRegistry[key] = $Symbol(key); // 177
                }, // 178
                // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
                keyFor: function keyFor(key) {
                  // 180
                  if (isSymbol(key)) return keyOf(SymbolRegistry, key); // 181
                  throw TypeError(key + ' is not a symbol!'); // 182
                }, // 183
                useSetter: function () {
                  setter = true;
                }, // 184
                useSimple: function () {
                  setter = false;
                } // 185
              }); // 186
              // 187
              $export($export.S + $export.F * !USE_NATIVE, 'Object', { // 188
                // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
                create: $create, // 190
                // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
                defineProperty: $defineProperty, // 192
                // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
                defineProperties: $defineProperties, // 194
                // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor, // 196
                // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
                getOwnPropertyNames: $getOwnPropertyNames, // 198
                // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
                getOwnPropertySymbols: $getOwnPropertySymbols // 200
              }); // 201
              // 202
              // 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
              $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
                // 204
                var S = $Symbol(); // 205
                // MS Edge converts symbol values to JSON as {}                                                                      // 206
                // WebKit converts symbol values to JSON as null                                                                     // 207
                // V8 throws on boxed symbols                                                                                        // 208
                return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}'; // 209
              })), 'JSON', { // 210
                stringify: function stringify(it) {
                  // 211
                  if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined                                     // 212
                  var args = [it] // 213
                  ,
                      i = 1 // 214
                  ,
                      replacer,
                      $replacer; // 215
                  while (arguments.length > i) args.push(arguments[i++]); // 216
                  replacer = args[1]; // 217
                  if (typeof replacer == 'function') $replacer = replacer; // 218
                  if ($replacer || !isArray(replacer)) replacer = function (key, value) {
                    // 219
                    if ($replacer) value = $replacer.call(this, key, value); // 220
                    if (!isSymbol(value)) return value; // 221
                  }; // 222
                  args[1] = replacer; // 223
                  return _stringify.apply($JSON, args); // 224
                } // 225
              }); // 226
              // 227
              // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
              $Symbol[PROTOTYPE][TO_PRIMITIVE] || _require311('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 229
              // 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
              setToStringTag($Symbol, 'Symbol'); // 231
              // 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
              setToStringTag(Math, 'Math', true); // 233
              // 24.3.3 JSON[@@toStringTag]                                                                                          // 234
              setToStringTag(global.JSON, 'JSON', true); // 235
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_meta.js": function (_require312, _exports203, _module184) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_meta.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var META = _require312('./_uid')('meta') // 1
              ,
                  isObject = _require312('./_is-object') // 2
              ,
                  has = _require312('./_has') // 3
              ,
                  setDesc = _require312('./_object-dp').f // 4
              ,
                  id = 0; // 5
              var isExtensible = Object.isExtensible || function () {
                // 6
                return true; // 7
              }; // 8
              var FREEZE = !_require312('./_fails')(function () {
                // 9
                return isExtensible(Object.preventExtensions({})); // 10
              }); // 11
              var setMeta = function (it) {
                // 12
                setDesc(it, META, { value: { // 13
                    i: 'O' + ++id, // object ID                                                                                        // 14
                    w: {} // weak collections IDs                                                                             // 15
                  } }); // 16
              }; // 17
              var fastKey = function (it, create) {
                // 18
                // return primitive with prefix                                                                                      // 19
                if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it; // 20
                if (!has(it, META)) {
                  // 21
                  // can't set metadata to uncaught frozen object                                                                    // 22
                  if (!isExtensible(it)) return 'F'; // 23
                  // not necessary to add metadata                                                                                   // 24
                  if (!create) return 'E'; // 25
                  // add missing metadata                                                                                            // 26
                  setMeta(it); // 27
                  // return object ID                                                                                                  // 28
                }return it[META].i; // 29
              }; // 30
              var getWeak = function (it, create) {
                // 31
                if (!has(it, META)) {
                  // 32
                  // can't set metadata to uncaught frozen object                                                                    // 33
                  if (!isExtensible(it)) return true; // 34
                  // not necessary to add metadata                                                                                   // 35
                  if (!create) return false; // 36
                  // add missing metadata                                                                                            // 37
                  setMeta(it); // 38
                  // return hash weak collections IDs                                                                                  // 39
                }return it[META].w; // 40
              }; // 41
              // add metadata on freeze-family methods calling                                                                       // 42
              var onFreeze = function (it) {
                // 43
                if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it); // 44
                return it; // 45
              }; // 46
              var meta = _module184.exports = { // 47
                KEY: META, // 48
                NEED: false, // 49
                fastKey: fastKey, // 50
                getWeak: getWeak, // 51
                onFreeze: onFreeze // 52
              }; // 53
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks-define.js": function (_require313, _exports204, _module185) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks-define.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require313('./_global') // 1
              ,
                  core = _require313('./_core') // 2
              ,
                  LIBRARY = _require313('./_library') // 3
              ,
                  wksExt = _require313('./_wks-ext') // 4
              ,
                  defineProperty = _require313('./_object-dp').f; // 5
              _module185.exports = function (name) {
                // 6
                var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {}); // 7
                if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) }); // 8
              }; // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_keyof.js": function (_require314, _exports205, _module186) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_keyof.js                                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var getKeys = _require314('./_object-keys') // 1
              ,
                  toIObject = _require314('./_to-iobject'); // 2
              _module186.exports = function (object, el) {
                // 3
                var O = toIObject(object) // 4
                ,
                    keys = getKeys(O) // 5
                ,
                    length = keys.length // 6
                ,
                    index = 0 // 7
                ,
                    key; // 8
                while (length > index) if (O[key = keys[index++]] === el) return key; // 9
              }; // 10
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_enum-keys.js": function (_require315, _exports206, _module187) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_enum-keys.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // all enumerable object keys, includes symbols                                                                        // 1
              var getKeys = _require315('./_object-keys') // 2
              ,
                  gOPS = _require315('./_object-gops') // 3
              ,
                  pIE = _require315('./_object-pie'); // 4
              _module187.exports = function (it) {
                // 5
                var result = getKeys(it) // 6
                ,
                    getSymbols = gOPS.f; // 7
                if (getSymbols) {
                  // 8
                  var symbols = getSymbols(it) // 9
                  ,
                      isEnum = pIE.f // 10
                  ,
                      i = 0 // 11
                  ,
                      key; // 12
                  while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key); // 13
                }return result; // 14
              }; // 15
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gops.js": function (_require316, _exports207) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gops.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports207.f = Object.getOwnPropertySymbols; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-pie.js": function (_require317, _exports208) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-pie.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports208.f = {}.propertyIsEnumerable; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-array.js": function (_require318, _exports209, _module188) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-array.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.2.2 IsArray(argument)                                                                                             // 1
              var cof = _require318('./_cof'); // 2
              _module188.exports = Array.isArray || function isArray(arg) {
                // 3
                return cof(arg) == 'Array'; // 4
              }; // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopn-ext.js": function (_require319, _exports210, _module189) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
              var toIObject = _require319('./_to-iobject') // 2
              ,
                  gOPN = _require319('./_object-gopn').f // 3
              ,
                  toString = {}.toString; // 4
              // 5
              var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames // 6
              ? Object.getOwnPropertyNames(window) : []; // 7
              // 8
              var getWindowNames = function (it) {
                // 9
                try {
                  // 10
                  return gOPN(it); // 11
                } catch (e) {
                  // 12
                  return windowNames.slice(); // 13
                } // 14
              }; // 15
              // 16
              _module189.exports.f = function getOwnPropertyNames(it) {
                // 17
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it)); // 18
              }; // 19
              // 20
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopn.js": function (_require320, _exports211) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopn.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
              var $keys = _require320('./_object-keys-internal') // 2
              ,
                  hiddenKeys = _require320('./_enum-bug-keys').concat('length', 'prototype'); // 3
              // 4
              _exports211.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                // 5
                return $keys(O, hiddenKeys); // 6
              }; // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopd.js": function (_require321, _exports212) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopd.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var pIE = _require321('./_object-pie') // 1
              ,
                  createDesc = _require321('./_property-desc') // 2
              ,
                  toIObject = _require321('./_to-iobject') // 3
              ,
                  toPrimitive = _require321('./_to-primitive') // 4
              ,
                  has = _require321('./_has') // 5
              ,
                  IE8_DOM_DEFINE = _require321('./_ie8-dom-define') // 6
              ,
                  gOPD = Object.getOwnPropertyDescriptor; // 7
              // 8
              _exports212.f = _require321('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
                // 9
                O = toIObject(O); // 10
                P = toPrimitive(P, true); // 11
                if (IE8_DOM_DEFINE) try {
                  // 12
                  return gOPD(O, P); // 13
                } catch (e) {} /* empty */ // 14
                if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]); // 15
              }; // 16
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.to-string.js": function () {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            }, "es7.symbol.async-iterator.js": function (_require322) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require322('./_wks-define')('asyncIterator'); // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es7.symbol.observable.js": function (_require323) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require323('./_wks-define')('observable'); // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.array.from.js": function (_require324) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.array.from.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var ctx = _require324('./_ctx') // 2
              ,
                  $export = _require324('./_export') // 3
              ,
                  toObject = _require324('./_to-object') // 4
              ,
                  call = _require324('./_iter-call') // 5
              ,
                  isArrayIter = _require324('./_is-array-iter') // 6
              ,
                  toLength = _require324('./_to-length') // 7
              ,
                  createProperty = _require324('./_create-property') // 8
              ,
                  getIterFn = _require324('./core.get-iterator-method'); // 9
              // 10
              $export($export.S + $export.F * !_require324('./_iter-detect')(function (iter) {
                Array.from(iter);
              }), 'Array', { // 11
                // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
                from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
                  // 13
                  var O = toObject(arrayLike) // 14
                  ,
                      C = typeof this == 'function' ? this : Array // 15
                  ,
                      aLen = arguments.length // 16
                  ,
                      mapfn = aLen > 1 ? arguments[1] : undefined // 17
                  ,
                      mapping = mapfn !== undefined // 18
                  ,
                      index = 0 // 19
                  ,
                      iterFn = getIterFn(O) // 20
                  ,
                      length,
                      result,
                      step,
                      iterator; // 21
                  if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // 22
                  // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
                  if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    // 24
                    for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                      // 25
                      createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value); // 26
                    } // 27
                  } else {
                    // 28
                    length = toLength(O.length); // 29
                    for (result = new C(length); length > index; index++) {
                      // 30
                      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]); // 31
                    } // 32
                  } // 33
                  result.length = index; // 34
                  return result; // 35
                } // 36
              }); // 37
              // 38
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-call.js": function (_require325, _exports213, _module190) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-call.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // call something on iterator step with safe closing on error                                                          // 1
              var anObject = _require325('./_an-object'); // 2
              _module190.exports = function (iterator, fn, value, entries) {
                // 3
                try {
                  // 4
                  return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 5
                  // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
                } catch (e) {
                  // 7
                  var ret = iterator['return']; // 8
                  if (ret !== undefined) anObject(ret.call(iterator)); // 9
                  throw e; // 10
                } // 11
              }; // 12
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-array-iter.js": function (_require326, _exports214, _module191) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-array-iter.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // check on default Array iterator                                                                                     // 1
              var Iterators = _require326('./_iterators') // 2
              ,
                  ITERATOR = _require326('./_wks')('iterator') // 3
              ,
                  ArrayProto = Array.prototype; // 4
              // 5
              _module191.exports = function (it) {
                // 6
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it); // 7
              }; // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_create-property.js": function (_require327, _exports215, _module192) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_create-property.js                                                            //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              'use strict'; // 1

              var $defineProperty = _require327('./_object-dp') // 2
              ,
                  createDesc = _require327('./_property-desc'); // 3
              // 4
              _module192.exports = function (object, index, value) {
                // 5
                if (index in object) $defineProperty.f(object, index, createDesc(0, value)); // 6
                else object[index] = value; // 7
              }; // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "core.get-iterator-method.js": function (_require328, _exports216, _module193) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/core.get-iterator-method.js                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var classof = _require328('./_classof') // 1
              ,
                  ITERATOR = _require328('./_wks')('iterator') // 2
              ,
                  Iterators = _require328('./_iterators'); // 3
              _module193.exports = _require328('./_core').getIteratorMethod = function (it) {
                // 4
                if (it != undefined) return it[ITERATOR] // 5
                || it['@@iterator'] // 6
                || Iterators[classof(it)]; // 7
              }; // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_classof.js": function (_require329, _exports217, _module194) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_classof.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
              var cof = _require329('./_cof') // 2
              ,
                  TAG = _require329('./_wks')('toStringTag') // 3
              // ES3 wrong here                                                                                                    // 4
              ,
                  ARG = cof(function () {
                return arguments;
              }()) == 'Arguments'; // 5
              // 6
              // fallback for IE11 Script Access Denied error                                                                        // 7
              var tryGet = function (it, key) {
                // 8
                try {
                  // 9
                  return it[key]; // 10
                } catch (e) {} /* empty */ // 11
              }; // 12
              // 13
              _module194.exports = function (it) {
                // 14
                var O, T, B; // 15
                return it === undefined ? 'Undefined' : it === null ? 'Null' // 16
                // @@toStringTag case                                                                                              // 17
                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // 18
                // builtinTag case                                                                                                 // 19
                : ARG ? cof(O) // 20
                // ES3 arguments fallback                                                                                          // 21
                : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B; // 22
              }; // 23
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-detect.js": function (_require330, _exports218, _module195) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-detect.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var ITERATOR = _require330('./_wks')('iterator') // 1
              ,
                  SAFE_CLOSING = false; // 2
              // 3
              try {
                // 4
                var riter = [7][ITERATOR](); // 5
                riter['return'] = function () {
                  SAFE_CLOSING = true;
                }; // 6
                Array.from(riter, function () {
                  throw 2;
                }); // 7
              } catch (e) {} /* empty */ // 8
              // 9
              _module195.exports = function (exec, skipClosing) {
                // 10
                if (!skipClosing && !SAFE_CLOSING) return false; // 11
                var safe = false; // 12
                try {
                  // 13
                  var arr = [7] // 14
                  ,
                      iter = arr[ITERATOR](); // 15
                  iter.next = function () {
                    return { done: safe = true };
                  }; // 16
                  arr[ITERATOR] = function () {
                    return iter;
                  }; // 17
                  exec(arr); // 18
                } catch (e) {} /* empty */ // 19
                return safe; // 20
              }; // 21
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.set-prototype-of.js": function (_require331) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
              var $export = _require331('./_export'); // 2
              $export($export.S, 'Object', { setPrototypeOf: _require331('./_set-proto').set }); // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_set-proto.js": function (_require332, _exports219, _module196) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_set-proto.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
              /* eslint-disable no-proto */ // 2
              var isObject = _require332('./_is-object') // 3
              ,
                  anObject = _require332('./_an-object'); // 4
              var check = function (O, proto) {
                // 5
                anObject(O); // 6
                if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!"); // 7
              }; // 8
              _module196.exports = { // 9
                set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
                function (test, buggy, set) {
                  // 11
                  try {
                    // 12
                    set = _require332('./_ctx')(Function.call, _require332('./_object-gopd').f(Object.prototype, '__proto__').set, 2); // 13
                    set(test, []); // 14
                    buggy = !(test instanceof Array); // 15
                  } catch (e) {
                    buggy = true;
                  } // 16
                  return function setPrototypeOf(O, proto) {
                    // 17
                    check(O, proto); // 18
                    if (buggy) O.__proto__ = proto; // 19
                    else set(O, proto); // 20
                    return O; // 21
                  }; // 22
                }({}, false) : undefined), // 23
                check: check // 24
              }; // 25
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.create.js": function (_require333) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.create.js                                                           //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var $export = _require333('./_export'); // 1
              // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
              $export($export.S, 'Object', { create: _require333('./_object-create') }); // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/modules/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.modules = _exports2, {
    meteorInstall: meteorInstall,
    process: process
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['ecmascript-runtime'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var meteorInstall = Package.modules.meteorInstall;
    var process = Package.modules.process;

    /* Package-scope variables */
    var Date, parseInt, parseFloat, originalStringReplace;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "es5-shim": { "client.js": function (_require) {

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                    //
                        // packages/es5-shim/client.js                                                                                        //
                        //                                                                                                                    //
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        _require("./import_globals.js"); // 1
                        _require("es5-shim/es5-shim.js"); // 2
                        _require("es5-shim/es5-sham.js"); // 3
                        _require("./console.js"); // 4
                        _require("./export_globals.js"); // 5
                        // 6
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "console.js": function () {

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                    //
                        // packages/es5-shim/console.js                                                                                       //
                        //                                                                                                                    //
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var hasOwn = Object.prototype.hasOwnProperty; // 1
                        // 2
                        function wrap(method) {
                            // 3
                            var original = console[method]; // 4
                            if (original && typeof original === "object") {
                                // 5
                                // Turn callable console method objects into actual functions.                                                    // 6
                                console[method] = function () {
                                    // 7
                                    return Function.prototype.apply.call( // 8
                                    original, console, arguments // 9
                                    ); // 10
                                }; // 11
                            } // 12
                        } // 13
                        // 14
                        if (typeof console === "object" && // 15
                        // In older Internet Explorers, methods like console.log are actually                                             // 16
                        // callable objects rather than functions.                                                                        // 17
                        typeof console.log === "object") {
                            // 18
                            for (var method in console) {
                                // 19
                                // In most browsers, this hasOwn check will fail for all console                                                  // 20
                                // methods anyway, but fortunately in IE8 the method objects we care                                              // 21
                                // about are own properties.                                                                                      // 22
                                if (hasOwn.call(console, method)) {
                                    // 23
                                    wrap(method); // 24
                                } // 25
                            } // 26
                        } // 27
                        // 28
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "export_globals.js": function () {

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                    //
                        // packages/es5-shim/export_globals.js                                                                                //
                        //                                                                                                                    //
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        if (global.Date !== Date) {
                            // 1
                            global.Date = Date; // 2
                        } // 3
                        // 4
                        if (global.parseInt !== parseInt) {
                            // 5
                            global.parseInt = parseInt; // 6
                        } // 7
                        // 8
                        if (global.parseFloat !== parseFloat) {
                            // 9
                            global.parseFloat = parseFloat; // 10
                        } // 11
                        // 12
                        var Sp = String.prototype; // 13
                        if (Sp.replace !== originalStringReplace) {
                            // 14
                            // Restore the original value of String#replace, because the es5-shim                                               // 15
                            // reimplementation is buggy. See also import_globals.js.                                                           // 16
                            Sp.replace = originalStringReplace; // 17
                        } // 18
                        // 19
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "import_globals.js": function () {

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                    //
                        // packages/es5-shim/import_globals.js                                                                                //
                        //                                                                                                                    //
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        // Because the es5-{shim,sham}.js code assigns to Date and parseInt,                                                  // 1
                        // Meteor treats them as package variables, and so declares them as                                                   // 2
                        // variables in package scope, which causes some references to Date and                                               // 3
                        // parseInt in the shim/sham code to refer to those undefined package                                                 // 4
                        // variables. The simplest solution seems to be to initialize the package                                             // 5
                        // variables to their appropriate global values.                                                                      // 6
                        Date = global.Date; // 7
                        parseInt = global.parseInt; // 8
                        parseFloat = global.parseFloat; // 9
                        // 10
                        // Save the original String#replace method, because es5-shim's                                                        // 11
                        // reimplementation of it causes problems in markdown/showdown.js.                                                    // 12
                        // This original method will be restored in export_globals.js.                                                        // 13
                        originalStringReplace = String.prototype.replace; // 14
                        // 15
                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "node_modules": { "es5-shim": { "es5-shim.js": function (_require3, _exports2, _module) {

                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                    //
                                // node_modules/meteor/es5-shim/node_modules/es5-shim/es5-shim.js                                                     //
                                //                                                                                                                    //
                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                /*!                                                                                                                   // 1
                                 * https://github.com/es-shims/es5-shim                                                                               // 2
                                 * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                 // 3
                                 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                       // 4
                                 */ // 5
                                // 6
                                // vim: ts=4 sts=4 sw=4 expandtab                                                                                     // 7
                                // 8
                                // Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                  // 9
                                ; // 10
                                // 11
                                // UMD (Universal Module Definition)                                                                                  // 12
                                // see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                            // 13
                                (function (root, factory) {
                                    // 14
                                    'use strict'; // 15
                                    // 16
                                    /* global define, exports, module */ // 17

                                    if (typeof define === 'function' && define.amd) {
                                        // 18
                                        // AMD. Register as an anonymous module.                                                                      // 19
                                        define(factory); // 20
                                    } else if (typeof _exports2 === 'object') {
                                        // 21
                                        // Node. Does not work with strict CommonJS, but                                                              // 22
                                        // only CommonJS-like enviroments that support module.exports,                                                // 23
                                        // like Node.                                                                                                 // 24
                                        _module.exports = factory(); // 25
                                    } else {
                                        // 26
                                        // Browser globals (root is window)                                                                           // 27
                                        root.returnExports = factory(); // 28
                                    } // 29
                                })(this, function () {
                                    // 30
                                    /**                                                                                                               // 31
                                     * Brings an environment as close to ECMAScript 5 compliance                                                      // 32
                                     * as is possible with the facilities of erstwhile engines.                                                       // 33
                                     *                                                                                                                // 34
                                     * Annotated ES5: http://es5.github.com/ (specific links below)                                                   // 35
                                     * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf                            // 36
                                     * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/               // 37
                                     */ // 38
                                    // 39
                                    // Shortcut to an often accessed properties, in order to avoid multiple                                           // 40
                                    // dereference that costs universally. This also holds a reference to known-good                                  // 41
                                    // functions.                                                                                                     // 42
                                    var $Array = Array; // 43
                                    var ArrayPrototype = $Array.prototype; // 44
                                    var $Object = Object; // 45
                                    var ObjectPrototype = $Object.prototype; // 46
                                    var $Function = Function; // 47
                                    var FunctionPrototype = $Function.prototype; // 48
                                    var $String = String; // 49
                                    var StringPrototype = $String.prototype; // 50
                                    var $Number = Number; // 51
                                    var NumberPrototype = $Number.prototype; // 52
                                    var array_slice = ArrayPrototype.slice; // 53
                                    var array_splice = ArrayPrototype.splice; // 54
                                    var array_push = ArrayPrototype.push; // 55
                                    var array_unshift = ArrayPrototype.unshift; // 56
                                    var array_concat = ArrayPrototype.concat; // 57
                                    var array_join = ArrayPrototype.join; // 58
                                    var call = FunctionPrototype.call; // 59
                                    var apply = FunctionPrototype.apply; // 60
                                    var max = Math.max; // 61
                                    var min = Math.min; // 62
                                    // 63
                                    // Having a toString local variable name breaks in Opera so use to_string.                                        // 64
                                    var to_string = ObjectPrototype.toString; // 65
                                    // 66
                                    /* global Symbol */ // 67
                                    /* eslint-disable one-var-declaration-per-line, no-redeclare, max-statements-per-line */ // 68
                                    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol'; // 69
                                    var isCallable; /* inlined from https://npmjs.com/is-callable */var fnToStr = Function.prototype.toString,
                                        constructorRegex = /^\s*class /,
                                        isES6ClassFn = function isES6ClassFn(value) {
                                        try {
                                            var fnStr = fnToStr.call(value);var singleStripped = fnStr.replace(/\/\/.*\n/g, '');var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');return constructorRegex.test(spaceStripped);
                                        } catch (e) {
                                            return false; /* not a function */
                                        }
                                    },
                                        tryFunctionObject = function tryFunctionObject(value) {
                                        try {
                                            if (isES6ClassFn(value)) {
                                                return false;
                                            }fnToStr.call(value);return true;
                                        } catch (e) {
                                            return false;
                                        }
                                    },
                                        fnClass = '[object Function]',
                                        genClass = '[object GeneratorFunction]',
                                        isCallable = function isCallable(value) {
                                        if (!value) {
                                            return false;
                                        }if (typeof value !== 'function' && typeof value !== 'object') {
                                            return false;
                                        }if (hasToStringTag) {
                                            return tryFunctionObject(value);
                                        }if (isES6ClassFn(value)) {
                                            return false;
                                        }var strClass = to_string.call(value);return strClass === fnClass || strClass === genClass;
                                    };
                                    // 71
                                    var isRegex; /* inlined from https://npmjs.com/is-regex */var regexExec = RegExp.prototype.exec,
                                        tryRegexExec = function tryRegexExec(value) {
                                        try {
                                            regexExec.call(value);return true;
                                        } catch (e) {
                                            return false;
                                        }
                                    },
                                        regexClass = '[object RegExp]';isRegex = function isRegex(value) {
                                        if (typeof value !== 'object') {
                                            return false;
                                        }return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass;
                                    };
                                    var isString; /* inlined from https://npmjs.com/is-string */var strValue = String.prototype.valueOf,
                                        tryStringObject = function tryStringObject(value) {
                                        try {
                                            strValue.call(value);return true;
                                        } catch (e) {
                                            return false;
                                        }
                                    },
                                        stringClass = '[object String]';isString = function isString(value) {
                                        if (typeof value === 'string') {
                                            return true;
                                        }if (typeof value !== 'object') {
                                            return false;
                                        }return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass;
                                    };
                                    /* eslint-enable one-var-declaration-per-line, no-redeclare, max-statements-per-line */ // 74
                                    // 75
                                    /* inlined from http://npmjs.com/define-properties */ // 76
                                    var supportsDescriptors = $Object.defineProperty && function () {
                                        // 77
                                        try {
                                            // 78
                                            var obj = {}; // 79
                                            $Object.defineProperty(obj, 'x', { enumerable: false, value: obj }); // 80
                                            for (var _ in obj) {
                                                // jscs:ignore disallowUnusedVariables                                               // 81
                                                return false; // 82
                                            } // 83
                                            return obj.x === obj; // 84
                                        } catch (e) {
                                            /* this is ES3 */ // 85
                                            return false; // 86
                                        } // 87
                                    }(); // 88
                                    var defineProperties = function (has) {
                                        // 89
                                        // Define configurable, writable, and non-enumerable props                                                    // 90
                                        // if they don't exist.                                                                                       // 91
                                        var defineProperty; // 92
                                        if (supportsDescriptors) {
                                            // 93
                                            defineProperty = function (object, name, method, forceAssign) {
                                                // 94
                                                if (!forceAssign && name in object) {
                                                    // 95
                                                    return; // 96
                                                } // 97
                                                $Object.defineProperty(object, name, { // 98
                                                    configurable: true, // 99
                                                    enumerable: false, // 100
                                                    writable: true, // 101
                                                    value: method // 102
                                                }); // 103
                                            }; // 104
                                        } else {
                                            // 105
                                            defineProperty = function (object, name, method, forceAssign) {
                                                // 106
                                                if (!forceAssign && name in object) {
                                                    // 107
                                                    return; // 108
                                                } // 109
                                                object[name] = method; // 110
                                            }; // 111
                                        } // 112
                                        return function defineProperties(object, map, forceAssign) {
                                            // 113
                                            for (var name in map) {
                                                // 114
                                                if (has.call(map, name)) {
                                                    // 115
                                                    defineProperty(object, name, map[name], forceAssign); // 116
                                                } // 117
                                            } // 118
                                        }; // 119
                                    }(ObjectPrototype.hasOwnProperty); // 120
                                    // 121
                                    //                                                                                                                // 122
                                    // Util                                                                                                           // 123
                                    // ======                                                                                                         // 124
                                    //                                                                                                                // 125
                                    // 126
                                    /* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */ // 127
                                    var isPrimitive = function isPrimitive(input) {
                                        // 128
                                        var type = typeof input; // 129
                                        return input === null || type !== 'object' && type !== 'function'; // 130
                                    }; // 131
                                    // 132
                                    var isActualNaN = $Number.isNaN || function isActualNaN(x) {
                                        // 133
                                        return x !== x; // 134
                                    }; // 135
                                    // 136
                                    var ES = { // 137
                                        // ES5 9.4                                                                                                    // 138
                                        // http://es5.github.com/#x9.4                                                                                // 139
                                        // http://jsperf.com/to-integer                                                                               // 140
                                        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */ // 141
                                        ToInteger: function ToInteger(num) {
                                            // 142
                                            var n = +num; // 143
                                            if (isActualNaN(n)) {
                                                // 144
                                                n = 0; // 145
                                            } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
                                                // 146
                                                n = (n > 0 || -1) * Math.floor(Math.abs(n)); // 147
                                            } // 148
                                            return n; // 149
                                        }, // 150
                                        // 151
                                        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */ // 152
                                        ToPrimitive: function ToPrimitive(input) {
                                            // 153
                                            var val, valueOf, toStr; // 154
                                            if (isPrimitive(input)) {
                                                // 155
                                                return input; // 156
                                            } // 157
                                            valueOf = input.valueOf; // 158
                                            if (isCallable(valueOf)) {
                                                // 159
                                                val = valueOf.call(input); // 160
                                                if (isPrimitive(val)) {
                                                    // 161
                                                    return val; // 162
                                                } // 163
                                            } // 164
                                            toStr = input.toString; // 165
                                            if (isCallable(toStr)) {
                                                // 166
                                                val = toStr.call(input); // 167
                                                if (isPrimitive(val)) {
                                                    // 168
                                                    return val; // 169
                                                } // 170
                                            } // 171
                                            throw new TypeError(); // 172
                                        }, // 173
                                        // 174
                                        // ES5 9.9                                                                                                    // 175
                                        // http://es5.github.com/#x9.9                                                                                // 176
                                        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */ // 177
                                        ToObject: function (o) {
                                            // 178
                                            if (o == null) {
                                                // this matches both null and undefined                                                  // 179
                                                throw new TypeError("can't convert " + o + ' to object'); // 180
                                            } // 181
                                            return $Object(o); // 182
                                        }, // 183
                                        // 184
                                        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */ // 185
                                        ToUint32: function ToUint32(x) {
                                            // 186
                                            return x >>> 0; // 187
                                        } // 188
                                    }; // 189
                                    // 190
                                    //                                                                                                                // 191
                                    // Function                                                                                                       // 192
                                    // ========                                                                                                       // 193
                                    //                                                                                                                // 194
                                    // 195
                                    // ES-5 15.3.4.5                                                                                                  // 196
                                    // http://es5.github.com/#x15.3.4.5                                                                               // 197
                                    // 198
                                    var Empty = function Empty() {}; // 199
                                    // 200
                                    defineProperties(FunctionPrototype, { // 201
                                        bind: function bind(that) {
                                            // .length is 1                                                                   // 202
                                            // 1. Let Target be the this value.                                                                       // 203
                                            var target = this; // 204
                                            // 2. If IsCallable(Target) is false, throw a TypeError exception.                                        // 205
                                            if (!isCallable(target)) {
                                                // 206
                                                throw new TypeError('Function.prototype.bind called on incompatible ' + target); // 207
                                            } // 208
                                            // 3. Let A be a new (possibly empty) internal list of all of the                                         // 209
                                            //   argument values provided after thisArg (arg1, arg2 etc), in order.                                   // 210
                                            // XXX slicedArgs will stand in for "A" if used                                                           // 211
                                            var args = array_slice.call(arguments, 1); // for normal call                                             // 212
                                            // 4. Let F be a new native ECMAScript object.                                                            // 213
                                            // 11. Set the [[Prototype]] internal property of F to the standard                                       // 214
                                            //   built-in Function prototype object as specified in 15.3.3.1.                                         // 215
                                            // 12. Set the [[Call]] internal property of F as described in                                            // 216
                                            //   15.3.4.5.1.                                                                                          // 217
                                            // 13. Set the [[Construct]] internal property of F as described in                                       // 218
                                            //   15.3.4.5.2.                                                                                          // 219
                                            // 14. Set the [[HasInstance]] internal property of F as described in                                     // 220
                                            //   15.3.4.5.3.                                                                                          // 221
                                            var bound; // 222
                                            var binder = function () {
                                                // 223
                                                // 224
                                                if (this instanceof bound) {
                                                    // 225
                                                    // 15.3.4.5.2 [[Construct]]                                                                       // 226
                                                    // When the [[Construct]] internal method of a function object,                                   // 227
                                                    // F that was created using the bind function is called with a                                    // 228
                                                    // list of arguments ExtraArgs, the following steps are taken:                                    // 229
                                                    // 1. Let target be the value of F's [[TargetFunction]]                                           // 230
                                                    //   internal property.                                                                           // 231
                                                    // 2. If target has no [[Construct]] internal method, a                                           // 232
                                                    //   TypeError exception is thrown.                                                               // 233
                                                    // 3. Let boundArgs be the value of F's [[BoundArgs]] internal                                    // 234
                                                    //   property.                                                                                    // 235
                                                    // 4. Let args be a new list containing the same values as the                                    // 236
                                                    //   list boundArgs in the same order followed by the same                                        // 237
                                                    //   values as the list ExtraArgs in the same order.                                              // 238
                                                    // 5. Return the result of calling the [[Construct]] internal                                     // 239
                                                    //   method of target providing args as the arguments.                                            // 240
                                                    // 241
                                                    var result = apply.call( // 242
                                                    target, // 243
                                                    this, // 244
                                                    array_concat.call(args, array_slice.call(arguments)) // 245
                                                    ); // 246
                                                    if ($Object(result) === result) {
                                                        // 247
                                                        return result; // 248
                                                    } // 249
                                                    return this; // 250
                                                    // 251
                                                } else {
                                                    // 252
                                                    // 15.3.4.5.1 [[Call]]                                                                            // 253
                                                    // When the [[Call]] internal method of a function object, F,                                     // 254
                                                    // which was created using the bind function is called with a                                     // 255
                                                    // this value and a list of arguments ExtraArgs, the following                                    // 256
                                                    // steps are taken:                                                                               // 257
                                                    // 1. Let boundArgs be the value of F's [[BoundArgs]] internal                                    // 258
                                                    //   property.                                                                                    // 259
                                                    // 2. Let boundThis be the value of F's [[BoundThis]] internal                                    // 260
                                                    //   property.                                                                                    // 261
                                                    // 3. Let target be the value of F's [[TargetFunction]] internal                                  // 262
                                                    //   property.                                                                                    // 263
                                                    // 4. Let args be a new list containing the same values as the                                    // 264
                                                    //   list boundArgs in the same order followed by the same                                        // 265
                                                    //   values as the list ExtraArgs in the same order.                                              // 266
                                                    // 5. Return the result of calling the [[Call]] internal method                                   // 267
                                                    //   of target providing boundThis as the this value and                                          // 268
                                                    //   providing args as the arguments.                                                             // 269
                                                    // 270
                                                    // equiv: target.call(this, ...boundArgs, ...args)                                                // 271
                                                    return apply.call( // 272
                                                    target, // 273
                                                    that, // 274
                                                    array_concat.call(args, array_slice.call(arguments)) // 275
                                                    ); // 276
                                                    // 277
                                                } // 278
                                                // 279
                                            }; // 280
                                            // 281
                                            // 15. If the [[Class]] internal property of Target is "Function", then                                   // 282
                                            //     a. Let L be the length property of Target minus the length of A.                                   // 283
                                            //     b. Set the length own property of F to either 0 or L, whichever is                                 // 284
                                            //       larger.                                                                                          // 285
                                            // 16. Else set the length own property of F to 0.                                                        // 286
                                            // 287
                                            var boundLength = max(0, target.length - args.length); // 288
                                            // 289
                                            // 17. Set the attributes of the length own property of F to the values                                   // 290
                                            //   specified in 15.3.5.1.                                                                               // 291
                                            var boundArgs = []; // 292
                                            for (var i = 0; i < boundLength; i++) {
                                                // 293
                                                array_push.call(boundArgs, '$' + i); // 294
                                            } // 295
                                            // 296
                                            // XXX Build a dynamic function with desired amount of arguments is the only                              // 297
                                            // way to set the length property of a function.                                                          // 298
                                            // In environments where Content Security Policies enabled (Chrome extensions,                            // 299
                                            // for ex.) all use of eval or Function costructor throws an exception.                                   // 300
                                            // However in all of these environments Function.prototype.bind exists                                    // 301
                                            // and so this code will never be executed.                                                               // 302
                                            bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);
                                            // 304
                                            if (target.prototype) {
                                                // 305
                                                Empty.prototype = target.prototype; // 306
                                                bound.prototype = new Empty(); // 307
                                                // Clean up dangling references.                                                                      // 308
                                                Empty.prototype = null; // 309
                                            } // 310
                                            // 311
                                            // TODO                                                                                                   // 312
                                            // 18. Set the [[Extensible]] internal property of F to true.                                             // 313
                                            // 314
                                            // TODO                                                                                                   // 315
                                            // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).                                    // 316
                                            // 20. Call the [[DefineOwnProperty]] internal method of F with                                           // 317
                                            //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:                                   // 318
                                            //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and                                        // 319
                                            //   false.                                                                                               // 320
                                            // 21. Call the [[DefineOwnProperty]] internal method of F with                                           // 321
                                            //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,                                         // 322
                                            //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},                                   // 323
                                            //   and false.                                                                                           // 324
                                            // 325
                                            // TODO                                                                                                   // 326
                                            // NOTE Function objects created using Function.prototype.bind do not                                     // 327
                                            // have a prototype property or the [[Code]], [[FormalParameters]], and                                   // 328
                                            // [[Scope]] internal properties.                                                                         // 329
                                            // XXX can't delete prototype in pure-js.                                                                 // 330
                                            // 331
                                            // 22. Return F.                                                                                          // 332
                                            return bound; // 333
                                        } // 334
                                    }); // 335
                                    // 336
                                    // _Please note: Shortcuts are defined after `Function.prototype.bind` as we                                      // 337
                                    // use it in defining shortcuts.                                                                                  // 338
                                    var owns = call.bind(ObjectPrototype.hasOwnProperty); // 339
                                    var toStr = call.bind(ObjectPrototype.toString); // 340
                                    var arraySlice = call.bind(array_slice); // 341
                                    var arraySliceApply = apply.bind(array_slice); // 342
                                    var strSlice = call.bind(StringPrototype.slice); // 343
                                    var strSplit = call.bind(StringPrototype.split); // 344
                                    var strIndexOf = call.bind(StringPrototype.indexOf); // 345
                                    var pushCall = call.bind(array_push); // 346
                                    var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable); // 347
                                    var arraySort = call.bind(ArrayPrototype.sort); // 348
                                    // 349
                                    //                                                                                                                // 350
                                    // Array                                                                                                          // 351
                                    // =====                                                                                                          // 352
                                    //                                                                                                                // 353
                                    // 354
                                    var isArray = $Array.isArray || function isArray(obj) {
                                        // 355
                                        return toStr(obj) === '[object Array]'; // 356
                                    }; // 357
                                    // 358
                                    // ES5 15.4.4.12                                                                                                  // 359
                                    // http://es5.github.com/#x15.4.4.13                                                                              // 360
                                    // Return len+argCount.                                                                                           // 361
                                    // [bugfix, ielt8]                                                                                                // 362
                                    // IE < 8 bug: [].unshift(0) === undefined but should be "1"                                                      // 363
                                    var hasUnshiftReturnValueBug = [].unshift(0) !== 1; // 364
                                    defineProperties(ArrayPrototype, { // 365
                                        unshift: function () {
                                            // 366
                                            array_unshift.apply(this, arguments); // 367
                                            return this.length; // 368
                                        } // 369
                                    }, hasUnshiftReturnValueBug); // 370
                                    // 371
                                    // ES5 15.4.3.2                                                                                                   // 372
                                    // http://es5.github.com/#x15.4.3.2                                                                               // 373
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray                             // 374
                                    defineProperties($Array, { isArray: isArray }); // 375
                                    // 376
                                    // The IsCallable() check in the Array functions                                                                  // 377
                                    // has been replaced with a strict check on the                                                                   // 378
                                    // internal class of the object to trap cases where                                                               // 379
                                    // the provided function was actually a regular                                                                   // 380
                                    // expression literal, which in V8 and                                                                            // 381
                                    // JavaScriptCore is a typeof "function".  Only in                                                                // 382
                                    // V8 are regular expression literals permitted as                                                                // 383
                                    // reduce parameters, so it is desirable in the                                                                   // 384
                                    // general case for the shim to match the more                                                                    // 385
                                    // strict and common behavior of rejecting regular                                                                // 386
                                    // expressions.                                                                                                   // 387
                                    // 388
                                    // ES5 15.4.4.18                                                                                                  // 389
                                    // http://es5.github.com/#x15.4.4.18                                                                              // 390
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach                             // 391
                                    // 392
                                    // Check failure of by-index access of string characters (IE < 9)                                                 // 393
                                    // and failure of `0 in boxedString` (Rhino)                                                                      // 394
                                    var boxedString = $Object('a'); // 395
                                    var splitString = boxedString[0] !== 'a' || !(0 in boxedString); // 396
                                    // 397
                                    var properlyBoxesContext = function properlyBoxed(method) {
                                        // 398
                                        // Check node 0.6.21 bug where third parameter is not boxed                                                   // 399
                                        var properlyBoxesNonStrict = true; // 400
                                        var properlyBoxesStrict = true; // 401
                                        var threwException = false; // 402
                                        if (method) {
                                            // 403
                                            try {
                                                // 404
                                                method.call('foo', function (_, __, context) {
                                                    // 405
                                                    if (typeof context !== 'object') {
                                                        // 406
                                                        properlyBoxesNonStrict = false; // 407
                                                    } // 408
                                                }); // 409
                                                // 410
                                                method.call([1], function () {
                                                    // 411
                                                    'use strict'; // 412
                                                    // 413

                                                    properlyBoxesStrict = typeof this === 'string'; // 414
                                                }, 'x'); // 415
                                            } catch (e) {
                                                // 416
                                                threwException = true; // 417
                                            } // 418
                                        } // 419
                                        return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict; // 420
                                    }; // 421
                                    // 422
                                    defineProperties(ArrayPrototype, { // 423
                                        forEach: function forEach(callbackfn /*, thisArg*/) {
                                            // 424
                                            var object = ES.ToObject(this); // 425
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 426
                                            var i = -1; // 427
                                            var length = ES.ToUint32(self.length); // 428
                                            var T; // 429
                                            if (arguments.length > 1) {
                                                // 430
                                                T = arguments[1]; // 431
                                            } // 432
                                            // 433
                                            // If no callback function or if callback is not a callable function                                      // 434
                                            if (!isCallable(callbackfn)) {
                                                // 435
                                                throw new TypeError('Array.prototype.forEach callback must be a function'); // 436
                                            } // 437
                                            // 438
                                            while (++i < length) {
                                                // 439
                                                if (i in self) {
                                                    // 440
                                                    // Invoke the callback function with call, passing arguments:                                     // 441
                                                    // context, property value, property key, thisArg object                                          // 442
                                                    if (typeof T === 'undefined') {
                                                        // 443
                                                        callbackfn(self[i], i, object); // 444
                                                    } else {
                                                        // 445
                                                        callbackfn.call(T, self[i], i, object); // 446
                                                    } // 447
                                                } // 448
                                            } // 449
                                        } // 450
                                    }, !properlyBoxesContext(ArrayPrototype.forEach)); // 451
                                    // 452
                                    // ES5 15.4.4.19                                                                                                  // 453
                                    // http://es5.github.com/#x15.4.4.19                                                                              // 454
                                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map                               // 455
                                    defineProperties(ArrayPrototype, { // 456
                                        map: function map(callbackfn /*, thisArg*/) {
                                            // 457
                                            var object = ES.ToObject(this); // 458
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 459
                                            var length = ES.ToUint32(self.length); // 460
                                            var result = $Array(length); // 461
                                            var T; // 462
                                            if (arguments.length > 1) {
                                                // 463
                                                T = arguments[1]; // 464
                                            } // 465
                                            // 466
                                            // If no callback function or if callback is not a callable function                                      // 467
                                            if (!isCallable(callbackfn)) {
                                                // 468
                                                throw new TypeError('Array.prototype.map callback must be a function'); // 469
                                            } // 470
                                            // 471
                                            for (var i = 0; i < length; i++) {
                                                // 472
                                                if (i in self) {
                                                    // 473
                                                    if (typeof T === 'undefined') {
                                                        // 474
                                                        result[i] = callbackfn(self[i], i, object); // 475
                                                    } else {
                                                        // 476
                                                        result[i] = callbackfn.call(T, self[i], i, object); // 477
                                                    } // 478
                                                } // 479
                                            } // 480
                                            return result; // 481
                                        } // 482
                                    }, !properlyBoxesContext(ArrayPrototype.map)); // 483
                                    // 484
                                    // ES5 15.4.4.20                                                                                                  // 485
                                    // http://es5.github.com/#x15.4.4.20                                                                              // 486
                                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter                            // 487
                                    defineProperties(ArrayPrototype, { // 488
                                        filter: function filter(callbackfn /*, thisArg*/) {
                                            // 489
                                            var object = ES.ToObject(this); // 490
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 491
                                            var length = ES.ToUint32(self.length); // 492
                                            var result = []; // 493
                                            var value; // 494
                                            var T; // 495
                                            if (arguments.length > 1) {
                                                // 496
                                                T = arguments[1]; // 497
                                            } // 498
                                            // 499
                                            // If no callback function or if callback is not a callable function                                      // 500
                                            if (!isCallable(callbackfn)) {
                                                // 501
                                                throw new TypeError('Array.prototype.filter callback must be a function'); // 502
                                            } // 503
                                            // 504
                                            for (var i = 0; i < length; i++) {
                                                // 505
                                                if (i in self) {
                                                    // 506
                                                    value = self[i]; // 507
                                                    if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
                                                        pushCall(result, value); // 509
                                                    } // 510
                                                } // 511
                                            } // 512
                                            return result; // 513
                                        } // 514
                                    }, !properlyBoxesContext(ArrayPrototype.filter)); // 515
                                    // 516
                                    // ES5 15.4.4.16                                                                                                  // 517
                                    // http://es5.github.com/#x15.4.4.16                                                                              // 518
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every                               // 519
                                    defineProperties(ArrayPrototype, { // 520
                                        every: function every(callbackfn /*, thisArg*/) {
                                            // 521
                                            var object = ES.ToObject(this); // 522
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 523
                                            var length = ES.ToUint32(self.length); // 524
                                            var T; // 525
                                            if (arguments.length > 1) {
                                                // 526
                                                T = arguments[1]; // 527
                                            } // 528
                                            // 529
                                            // If no callback function or if callback is not a callable function                                      // 530
                                            if (!isCallable(callbackfn)) {
                                                // 531
                                                throw new TypeError('Array.prototype.every callback must be a function'); // 532
                                            } // 533
                                            // 534
                                            for (var i = 0; i < length; i++) {
                                                // 535
                                                if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                                                    return false; // 537
                                                } // 538
                                            } // 539
                                            return true; // 540
                                        } // 541
                                    }, !properlyBoxesContext(ArrayPrototype.every)); // 542
                                    // 543
                                    // ES5 15.4.4.17                                                                                                  // 544
                                    // http://es5.github.com/#x15.4.4.17                                                                              // 545
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some                                // 546
                                    defineProperties(ArrayPrototype, { // 547
                                        some: function some(callbackfn /*, thisArg */) {
                                            // 548
                                            var object = ES.ToObject(this); // 549
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 550
                                            var length = ES.ToUint32(self.length); // 551
                                            var T; // 552
                                            if (arguments.length > 1) {
                                                // 553
                                                T = arguments[1]; // 554
                                            } // 555
                                            // 556
                                            // If no callback function or if callback is not a callable function                                      // 557
                                            if (!isCallable(callbackfn)) {
                                                // 558
                                                throw new TypeError('Array.prototype.some callback must be a function'); // 559
                                            } // 560
                                            // 561
                                            for (var i = 0; i < length; i++) {
                                                // 562
                                                if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                                                    return true; // 564
                                                } // 565
                                            } // 566
                                            return false; // 567
                                        } // 568
                                    }, !properlyBoxesContext(ArrayPrototype.some)); // 569
                                    // 570
                                    // ES5 15.4.4.21                                                                                                  // 571
                                    // http://es5.github.com/#x15.4.4.21                                                                              // 572
                                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce                            // 573
                                    var reduceCoercesToObject = false; // 574
                                    if (ArrayPrototype.reduce) {
                                        // 575
                                        reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) {
                                            // 576
                                            return list; // 577
                                        }) === 'object'; // 578
                                    } // 579
                                    defineProperties(ArrayPrototype, { // 580
                                        reduce: function reduce(callbackfn /*, initialValue*/) {
                                            // 581
                                            var object = ES.ToObject(this); // 582
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 583
                                            var length = ES.ToUint32(self.length); // 584
                                            // 585
                                            // If no callback function or if callback is not a callable function                                      // 586
                                            if (!isCallable(callbackfn)) {
                                                // 587
                                                throw new TypeError('Array.prototype.reduce callback must be a function'); // 588
                                            } // 589
                                            // 590
                                            // no value to return if no initial value and an empty array                                              // 591
                                            if (length === 0 && arguments.length === 1) {
                                                // 592
                                                throw new TypeError('reduce of empty array with no initial value'); // 593
                                            } // 594
                                            // 595
                                            var i = 0; // 596
                                            var result; // 597
                                            if (arguments.length >= 2) {
                                                // 598
                                                result = arguments[1]; // 599
                                            } else {
                                                // 600
                                                do {
                                                    // 601
                                                    if (i in self) {
                                                        // 602
                                                        result = self[i++]; // 603
                                                        break; // 604
                                                    } // 605
                                                    // 606
                                                    // if array contains no values, no initial value to return                                        // 607
                                                    if (++i >= length) {
                                                        // 608
                                                        throw new TypeError('reduce of empty array with no initial value'); // 609
                                                    } // 610
                                                } while (true); // 611
                                            } // 612
                                            // 613
                                            for (; i < length; i++) {
                                                // 614
                                                if (i in self) {
                                                    // 615
                                                    result = callbackfn(result, self[i], i, object); // 616
                                                } // 617
                                            } // 618
                                            // 619
                                            return result; // 620
                                        } // 621
                                    }, !reduceCoercesToObject); // 622
                                    // 623
                                    // ES5 15.4.4.22                                                                                                  // 624
                                    // http://es5.github.com/#x15.4.4.22                                                                              // 625
                                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight                       // 626
                                    var reduceRightCoercesToObject = false; // 627
                                    if (ArrayPrototype.reduceRight) {
                                        // 628
                                        reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) {
                                            // 629
                                            return list; // 630
                                        }) === 'object'; // 631
                                    } // 632
                                    defineProperties(ArrayPrototype, { // 633
                                        reduceRight: function reduceRight(callbackfn /*, initial*/) {
                                            // 634
                                            var object = ES.ToObject(this); // 635
                                            var self = splitString && isString(this) ? strSplit(this, '') : object; // 636
                                            var length = ES.ToUint32(self.length); // 637
                                            // 638
                                            // If no callback function or if callback is not a callable function                                      // 639
                                            if (!isCallable(callbackfn)) {
                                                // 640
                                                throw new TypeError('Array.prototype.reduceRight callback must be a function'); // 641
                                            } // 642
                                            // 643
                                            // no value to return if no initial value, empty array                                                    // 644
                                            if (length === 0 && arguments.length === 1) {
                                                // 645
                                                throw new TypeError('reduceRight of empty array with no initial value'); // 646
                                            } // 647
                                            // 648
                                            var result; // 649
                                            var i = length - 1; // 650
                                            if (arguments.length >= 2) {
                                                // 651
                                                result = arguments[1]; // 652
                                            } else {
                                                // 653
                                                do {
                                                    // 654
                                                    if (i in self) {
                                                        // 655
                                                        result = self[i--]; // 656
                                                        break; // 657
                                                    } // 658
                                                    // 659
                                                    // if array contains no values, no initial value to return                                        // 660
                                                    if (--i < 0) {
                                                        // 661
                                                        throw new TypeError('reduceRight of empty array with no initial value'); // 662
                                                    } // 663
                                                } while (true); // 664
                                            } // 665
                                            // 666
                                            if (i < 0) {
                                                // 667
                                                return result; // 668
                                            } // 669
                                            // 670
                                            do {
                                                // 671
                                                if (i in self) {
                                                    // 672
                                                    result = callbackfn(result, self[i], i, object); // 673
                                                } // 674
                                            } while (i--); // 675
                                            // 676
                                            return result; // 677
                                        } // 678
                                    }, !reduceRightCoercesToObject); // 679
                                    // 680
                                    // ES5 15.4.4.14                                                                                                  // 681
                                    // http://es5.github.com/#x15.4.4.14                                                                              // 682
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf                             // 683
                                    var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1; // 684
                                    defineProperties(ArrayPrototype, { // 685
                                        indexOf: function indexOf(searchElement /*, fromIndex */) {
                                            // 686
                                            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this); // 687
                                            var length = ES.ToUint32(self.length); // 688
                                            // 689
                                            if (length === 0) {
                                                // 690
                                                return -1; // 691
                                            } // 692
                                            // 693
                                            var i = 0; // 694
                                            if (arguments.length > 1) {
                                                // 695
                                                i = ES.ToInteger(arguments[1]); // 696
                                            } // 697
                                            // 698
                                            // handle negative indices                                                                                // 699
                                            i = i >= 0 ? i : max(0, length + i); // 700
                                            for (; i < length; i++) {
                                                // 701
                                                if (i in self && self[i] === searchElement) {
                                                    // 702
                                                    return i; // 703
                                                } // 704
                                            } // 705
                                            return -1; // 706
                                        } // 707
                                    }, hasFirefox2IndexOfBug); // 708
                                    // 709
                                    // ES5 15.4.4.15                                                                                                  // 710
                                    // http://es5.github.com/#x15.4.4.15                                                                              // 711
                                    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf                         // 712
                                    var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1; // 713
                                    defineProperties(ArrayPrototype, { // 714
                                        lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */) {
                                            // 715
                                            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this); // 716
                                            var length = ES.ToUint32(self.length); // 717
                                            // 718
                                            if (length === 0) {
                                                // 719
                                                return -1; // 720
                                            } // 721
                                            var i = length - 1; // 722
                                            if (arguments.length > 1) {
                                                // 723
                                                i = min(i, ES.ToInteger(arguments[1])); // 724
                                            } // 725
                                            // handle negative indices                                                                                // 726
                                            i = i >= 0 ? i : length - Math.abs(i); // 727
                                            for (; i >= 0; i--) {
                                                // 728
                                                if (i in self && searchElement === self[i]) {
                                                    // 729
                                                    return i; // 730
                                                } // 731
                                            } // 732
                                            return -1; // 733
                                        } // 734
                                    }, hasFirefox2LastIndexOfBug); // 735
                                    // 736
                                    // ES5 15.4.4.12                                                                                                  // 737
                                    // http://es5.github.com/#x15.4.4.12                                                                              // 738
                                    var spliceNoopReturnsEmptyArray = function () {
                                        // 739
                                        var a = [1, 2]; // 740
                                        var result = a.splice(); // 741
                                        return a.length === 2 && isArray(result) && result.length === 0; // 742
                                    }(); // 743
                                    defineProperties(ArrayPrototype, { // 744
                                        // Safari 5.0 bug where .splice() returns undefined                                                           // 745
                                        splice: function splice(start, deleteCount) {
                                            // 746
                                            if (arguments.length === 0) {
                                                // 747
                                                return []; // 748
                                            } else {
                                                // 749
                                                return array_splice.apply(this, arguments); // 750
                                            } // 751
                                        } // 752
                                    }, !spliceNoopReturnsEmptyArray); // 753
                                    // 754
                                    var spliceWorksWithEmptyObject = function () {
                                        // 755
                                        var obj = {}; // 756
                                        ArrayPrototype.splice.call(obj, 0, 0, 1); // 757
                                        return obj.length === 1; // 758
                                    }(); // 759
                                    defineProperties(ArrayPrototype, { // 760
                                        splice: function splice(start, deleteCount) {
                                            // 761
                                            if (arguments.length === 0) {
                                                // 762
                                                return []; // 763
                                            } // 764
                                            var args = arguments; // 765
                                            this.length = max(ES.ToInteger(this.length), 0); // 766
                                            if (arguments.length > 0 && typeof deleteCount !== 'number') {
                                                // 767
                                                args = arraySlice(arguments); // 768
                                                if (args.length < 2) {
                                                    // 769
                                                    pushCall(args, this.length - start); // 770
                                                } else {
                                                    // 771
                                                    args[1] = ES.ToInteger(deleteCount); // 772
                                                } // 773
                                            } // 774
                                            return array_splice.apply(this, args); // 775
                                        } // 776
                                    }, !spliceWorksWithEmptyObject); // 777
                                    var spliceWorksWithLargeSparseArrays = function () {
                                        // 778
                                        // Per https://github.com/es-shims/es5-shim/issues/295                                                        // 779
                                        // Safari 7/8 breaks with sparse arrays of size 1e5 or greater                                                // 780
                                        var arr = new $Array(1e5); // 781
                                        // note: the index MUST be 8 or larger or the test will false pass                                            // 782
                                        arr[8] = 'x'; // 783
                                        arr.splice(1, 1); // 784
                                        // note: this test must be defined *after* the indexOf shim                                                   // 785
                                        // per https://github.com/es-shims/es5-shim/issues/313                                                        // 786
                                        return arr.indexOf('x') === 7; // 787
                                    }(); // 788
                                    var spliceWorksWithSmallSparseArrays = function () {
                                        // 789
                                        // Per https://github.com/es-shims/es5-shim/issues/295                                                        // 790
                                        // Opera 12.15 breaks on this, no idea why.                                                                   // 791
                                        var n = 256; // 792
                                        var arr = []; // 793
                                        arr[n] = 'a'; // 794
                                        arr.splice(n + 1, 0, 'b'); // 795
                                        return arr[n] === 'a'; // 796
                                    }(); // 797
                                    defineProperties(ArrayPrototype, { // 798
                                        splice: function splice(start, deleteCount) {
                                            // 799
                                            var O = ES.ToObject(this); // 800
                                            var A = []; // 801
                                            var len = ES.ToUint32(O.length); // 802
                                            var relativeStart = ES.ToInteger(start); // 803
                                            var actualStart = relativeStart < 0 ? max(len + relativeStart, 0) : min(relativeStart, len); // 804
                                            var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart); // 805
                                            // 806
                                            var k = 0; // 807
                                            var from; // 808
                                            while (k < actualDeleteCount) {
                                                // 809
                                                from = $String(actualStart + k); // 810
                                                if (owns(O, from)) {
                                                    // 811
                                                    A[k] = O[from]; // 812
                                                } // 813
                                                k += 1; // 814
                                            } // 815
                                            // 816
                                            var items = arraySlice(arguments, 2); // 817
                                            var itemCount = items.length; // 818
                                            var to; // 819
                                            if (itemCount < actualDeleteCount) {
                                                // 820
                                                k = actualStart; // 821
                                                var maxK = len - actualDeleteCount; // 822
                                                while (k < maxK) {
                                                    // 823
                                                    from = $String(k + actualDeleteCount); // 824
                                                    to = $String(k + itemCount); // 825
                                                    if (owns(O, from)) {
                                                        // 826
                                                        O[to] = O[from]; // 827
                                                    } else {
                                                        // 828
                                                        delete O[to]; // 829
                                                    } // 830
                                                    k += 1; // 831
                                                } // 832
                                                k = len; // 833
                                                var minK = len - actualDeleteCount + itemCount; // 834
                                                while (k > minK) {
                                                    // 835
                                                    delete O[k - 1]; // 836
                                                    k -= 1; // 837
                                                } // 838
                                            } else if (itemCount > actualDeleteCount) {
                                                // 839
                                                k = len - actualDeleteCount; // 840
                                                while (k > actualStart) {
                                                    // 841
                                                    from = $String(k + actualDeleteCount - 1); // 842
                                                    to = $String(k + itemCount - 1); // 843
                                                    if (owns(O, from)) {
                                                        // 844
                                                        O[to] = O[from]; // 845
                                                    } else {
                                                        // 846
                                                        delete O[to]; // 847
                                                    } // 848
                                                    k -= 1; // 849
                                                } // 850
                                            } // 851
                                            k = actualStart; // 852
                                            for (var i = 0; i < items.length; ++i) {
                                                // 853
                                                O[k] = items[i]; // 854
                                                k += 1; // 855
                                            } // 856
                                            O.length = len - actualDeleteCount + itemCount; // 857
                                            // 858
                                            return A; // 859
                                        } // 860
                                    }, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays); // 861
                                    // 862
                                    var originalJoin = ArrayPrototype.join; // 863
                                    var hasStringJoinBug; // 864
                                    try {
                                        // 865
                                        hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3'; // 866
                                    } catch (e) {
                                        // 867
                                        hasStringJoinBug = true; // 868
                                    } // 869
                                    if (hasStringJoinBug) {
                                        // 870
                                        defineProperties(ArrayPrototype, { // 871
                                            join: function join(separator) {
                                                // 872
                                                var sep = typeof separator === 'undefined' ? ',' : separator; // 873
                                                return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep); // 874
                                            } // 875
                                        }, hasStringJoinBug); // 876
                                    } // 877
                                    // 878
                                    var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2'; // 879
                                    if (hasJoinUndefinedBug) {
                                        // 880
                                        defineProperties(ArrayPrototype, { // 881
                                            join: function join(separator) {
                                                // 882
                                                var sep = typeof separator === 'undefined' ? ',' : separator; // 883
                                                return originalJoin.call(this, sep); // 884
                                            } // 885
                                        }, hasJoinUndefinedBug); // 886
                                    } // 887
                                    // 888
                                    var pushShim = function push(item) {
                                        // 889
                                        var O = ES.ToObject(this); // 890
                                        var n = ES.ToUint32(O.length); // 891
                                        var i = 0; // 892
                                        while (i < arguments.length) {
                                            // 893
                                            O[n + i] = arguments[i]; // 894
                                            i += 1; // 895
                                        } // 896
                                        O.length = n + i; // 897
                                        return n + i; // 898
                                    }; // 899
                                    // 900
                                    var pushIsNotGeneric = function () {
                                        // 901
                                        var obj = {}; // 902
                                        var result = Array.prototype.push.call(obj, undefined); // 903
                                        return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0); // 904
                                    }(); // 905
                                    defineProperties(ArrayPrototype, { // 906
                                        push: function push(item) {
                                            // 907
                                            if (isArray(this)) {
                                                // 908
                                                return array_push.apply(this, arguments); // 909
                                            } // 910
                                            return pushShim.apply(this, arguments); // 911
                                        } // 912
                                    }, pushIsNotGeneric); // 913
                                    // 914
                                    // This fixes a very weird bug in Opera 10.6 when pushing `undefined                                              // 915
                                    var pushUndefinedIsWeird = function () {
                                        // 916
                                        var arr = []; // 917
                                        var result = arr.push(undefined); // 918
                                        return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0); // 919
                                    }(); // 920
                                    defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird); // 921
                                    // 922
                                    // ES5 15.2.3.14                                                                                                  // 923
                                    // http://es5.github.io/#x15.4.4.10                                                                               // 924
                                    // Fix boxed string bug                                                                                           // 925
                                    defineProperties(ArrayPrototype, { // 926
                                        slice: function (start, end) {
                                            // 927
                                            var arr = isString(this) ? strSplit(this, '') : this; // 928
                                            return arraySliceApply(arr, arguments); // 929
                                        } // 930
                                    }, splitString); // 931
                                    // 932
                                    var sortIgnoresNonFunctions = function () {
                                        // 933
                                        try {
                                            // 934
                                            [1, 2].sort(null); // 935
                                            [1, 2].sort({}); // 936
                                            return true; // 937
                                        } catch (e) {} // 938
                                        return false; // 939
                                    }(); // 940
                                    var sortThrowsOnRegex = function () {
                                        // 941
                                        // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`                                       // 942
                                        try {
                                            // 943
                                            [1, 2].sort(/a/); // 944
                                            return false; // 945
                                        } catch (e) {} // 946
                                        return true; // 947
                                    }(); // 948
                                    var sortIgnoresUndefined = function () {
                                        // 949
                                        // applies in IE 8, for one.                                                                                  // 950
                                        try {
                                            // 951
                                            [1, 2].sort(undefined); // 952
                                            return true; // 953
                                        } catch (e) {} // 954
                                        return false; // 955
                                    }(); // 956
                                    defineProperties(ArrayPrototype, { // 957
                                        sort: function sort(compareFn) {
                                            // 958
                                            if (typeof compareFn === 'undefined') {
                                                // 959
                                                return arraySort(this); // 960
                                            } // 961
                                            if (!isCallable(compareFn)) {
                                                // 962
                                                throw new TypeError('Array.prototype.sort callback must be a function'); // 963
                                            } // 964
                                            return arraySort(this, compareFn); // 965
                                        } // 966
                                    }, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex); // 967
                                    // 968
                                    //                                                                                                                // 969
                                    // Object                                                                                                         // 970
                                    // ======                                                                                                         // 971
                                    //                                                                                                                // 972
                                    // 973
                                    // ES5 15.2.3.14                                                                                                  // 974
                                    // http://es5.github.com/#x15.2.3.14                                                                              // 975
                                    // 976
                                    // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation                            // 977
                                    var hasDontEnumBug = !isEnum({ 'toString': null }, 'toString'); // 978
                                    var hasProtoEnumBug = isEnum(function () {}, 'prototype'); // 979
                                    var hasStringEnumBug = !owns('x', '0'); // 980
                                    var equalsConstructorPrototype = function (o) {
                                        // 981
                                        var ctor = o.constructor; // 982
                                        return ctor && ctor.prototype === o; // 983
                                    }; // 984
                                    var blacklistedKeys = { // 985
                                        $window: true, // 986
                                        $console: true, // 987
                                        $parent: true, // 988
                                        $self: true, // 989
                                        $frame: true, // 990
                                        $frames: true, // 991
                                        $frameElement: true, // 992
                                        $webkitIndexedDB: true, // 993
                                        $webkitStorageInfo: true, // 994
                                        $external: true // 995
                                    }; // 996
                                    var hasAutomationEqualityBug = function () {
                                        // 997
                                        /* globals window */ // 998
                                        if (typeof window === 'undefined') {
                                            // 999
                                            return false; // 1000
                                        } // 1001
                                        for (var k in window) {
                                            // 1002
                                            try {
                                                // 1003
                                                if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                                    equalsConstructorPrototype(window[k]); // 1005
                                                } // 1006
                                            } catch (e) {
                                                // 1007
                                                return true; // 1008
                                            } // 1009
                                        } // 1010
                                        return false; // 1011
                                    }(); // 1012
                                    var equalsConstructorPrototypeIfNotBuggy = function (object) {
                                        // 1013
                                        if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                                            // 1014
                                            return equalsConstructorPrototype(object); // 1015
                                        } // 1016
                                        try {
                                            // 1017
                                            return equalsConstructorPrototype(object); // 1018
                                        } catch (e) {
                                            // 1019
                                            return false; // 1020
                                        } // 1021
                                    }; // 1022
                                    var dontEnums = [// 1023
                                    'toString', // 1024
                                    'toLocaleString', // 1025
                                    'valueOf', // 1026
                                    'hasOwnProperty', // 1027
                                    'isPrototypeOf', // 1028
                                    'propertyIsEnumerable', // 1029
                                    'constructor' // 1030
                                    ]; // 1031
                                    var dontEnumsLength = dontEnums.length; // 1032
                                    // 1033
                                    // taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js                                // 1034
                                    // can be replaced with require('is-arguments') if we ever use a build process instead                            // 1035
                                    var isStandardArguments = function isArguments(value) {
                                        // 1036
                                        return toStr(value) === '[object Arguments]'; // 1037
                                    }; // 1038
                                    var isLegacyArguments = function isArguments(value) {
                                        // 1039
                                        return value !== null && // 1040
                                        typeof value === 'object' && // 1041
                                        typeof value.length === 'number' && // 1042
                                        value.length >= 0 && // 1043
                                        !isArray(value) && // 1044
                                        isCallable(value.callee); // 1045
                                    }; // 1046
                                    var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments; // 1047
                                    // 1048
                                    defineProperties($Object, { // 1049
                                        keys: function keys(object) {
                                            // 1050
                                            var isFn = isCallable(object); // 1051
                                            var isArgs = isArguments(object); // 1052
                                            var isObject = object !== null && typeof object === 'object'; // 1053
                                            var isStr = isObject && isString(object); // 1054
                                            // 1055
                                            if (!isObject && !isFn && !isArgs) {
                                                // 1056
                                                throw new TypeError('Object.keys called on a non-object'); // 1057
                                            } // 1058
                                            // 1059
                                            var theKeys = []; // 1060
                                            var skipProto = hasProtoEnumBug && isFn; // 1061
                                            if (isStr && hasStringEnumBug || isArgs) {
                                                // 1062
                                                for (var i = 0; i < object.length; ++i) {
                                                    // 1063
                                                    pushCall(theKeys, $String(i)); // 1064
                                                } // 1065
                                            } // 1066
                                            // 1067
                                            if (!isArgs) {
                                                // 1068
                                                for (var name in object) {
                                                    // 1069
                                                    if (!(skipProto && name === 'prototype') && owns(object, name)) {
                                                        // 1070
                                                        pushCall(theKeys, $String(name)); // 1071
                                                    } // 1072
                                                } // 1073
                                            } // 1074
                                            // 1075
                                            if (hasDontEnumBug) {
                                                // 1076
                                                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object); // 1077
                                                for (var j = 0; j < dontEnumsLength; j++) {
                                                    // 1078
                                                    var dontEnum = dontEnums[j]; // 1079
                                                    if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                                                        // 1080
                                                        pushCall(theKeys, dontEnum); // 1081
                                                    } // 1082
                                                } // 1083
                                            } // 1084
                                            return theKeys; // 1085
                                        } // 1086
                                    }); // 1087
                                    // 1088
                                    var keysWorksWithArguments = $Object.keys && function () {
                                        // 1089
                                        // Safari 5.0 bug                                                                                             // 1090
                                        return $Object.keys(arguments).length === 2; // 1091
                                    }(1, 2); // 1092
                                    var keysHasArgumentsLengthBug = $Object.keys && function () {
                                        // 1093
                                        var argKeys = $Object.keys(arguments); // 1094
                                        return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1; // 1095
                                    }(1); // 1096
                                    var originalKeys = $Object.keys; // 1097
                                    defineProperties($Object, { // 1098
                                        keys: function keys(object) {
                                            // 1099
                                            if (isArguments(object)) {
                                                // 1100
                                                return originalKeys(arraySlice(object)); // 1101
                                            } else {
                                                // 1102
                                                return originalKeys(object); // 1103
                                            } // 1104
                                        } // 1105
                                    }, !keysWorksWithArguments || keysHasArgumentsLengthBug); // 1106
                                    // 1107
                                    //                                                                                                                // 1108
                                    // Date                                                                                                           // 1109
                                    // ====                                                                                                           // 1110
                                    //                                                                                                                // 1111
                                    // 1112
                                    var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0; // 1113
                                    var aNegativeTestDate = new Date(-1509842289600292); // 1114
                                    var aPositiveTestDate = new Date(1449662400000); // 1115
                                    var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT'; // 1116
                                    var hasToDateStringFormatBug; // 1117
                                    var hasToStringFormatBug; // 1118
                                    var timeZoneOffset = aNegativeTestDate.getTimezoneOffset(); // 1119
                                    if (timeZoneOffset < -720) {
                                        // 1120
                                        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875'; // 1121
                                        hasToStringFormatBug = !/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(aPositiveTestDate.toString());
                                    } else {
                                        // 1123
                                        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875'; // 1124
                                        hasToStringFormatBug = !/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(aPositiveTestDate.toString());
                                    } // 1126
                                    // 1127
                                    var originalGetFullYear = call.bind(Date.prototype.getFullYear); // 1128
                                    var originalGetMonth = call.bind(Date.prototype.getMonth); // 1129
                                    var originalGetDate = call.bind(Date.prototype.getDate); // 1130
                                    var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear); // 1131
                                    var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth); // 1132
                                    var originalGetUTCDate = call.bind(Date.prototype.getUTCDate); // 1133
                                    var originalGetUTCDay = call.bind(Date.prototype.getUTCDay); // 1134
                                    var originalGetUTCHours = call.bind(Date.prototype.getUTCHours); // 1135
                                    var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes); // 1136
                                    var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds); // 1137
                                    var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds); // 1138
                                    var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; // 1139
                                    var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 1140
                                    var daysInMonth = function daysInMonth(month, year) {
                                        // 1141
                                        return originalGetDate(new Date(year, month, 0)); // 1142
                                    }; // 1143
                                    // 1144
                                    defineProperties(Date.prototype, { // 1145
                                        getFullYear: function getFullYear() {
                                            // 1146
                                            if (!this || !(this instanceof Date)) {
                                                // 1147
                                                throw new TypeError('this is not a Date object.'); // 1148
                                            } // 1149
                                            var year = originalGetFullYear(this); // 1150
                                            if (year < 0 && originalGetMonth(this) > 11) {
                                                // 1151
                                                return year + 1; // 1152
                                            } // 1153
                                            return year; // 1154
                                        }, // 1155
                                        getMonth: function getMonth() {
                                            // 1156
                                            if (!this || !(this instanceof Date)) {
                                                // 1157
                                                throw new TypeError('this is not a Date object.'); // 1158
                                            } // 1159
                                            var year = originalGetFullYear(this); // 1160
                                            var month = originalGetMonth(this); // 1161
                                            if (year < 0 && month > 11) {
                                                // 1162
                                                return 0; // 1163
                                            } // 1164
                                            return month; // 1165
                                        }, // 1166
                                        getDate: function getDate() {
                                            // 1167
                                            if (!this || !(this instanceof Date)) {
                                                // 1168
                                                throw new TypeError('this is not a Date object.'); // 1169
                                            } // 1170
                                            var year = originalGetFullYear(this); // 1171
                                            var month = originalGetMonth(this); // 1172
                                            var date = originalGetDate(this); // 1173
                                            if (year < 0 && month > 11) {
                                                // 1174
                                                if (month === 12) {
                                                    // 1175
                                                    return date; // 1176
                                                } // 1177
                                                var days = daysInMonth(0, year + 1); // 1178
                                                return days - date + 1; // 1179
                                            } // 1180
                                            return date; // 1181
                                        }, // 1182
                                        getUTCFullYear: function getUTCFullYear() {
                                            // 1183
                                            if (!this || !(this instanceof Date)) {
                                                // 1184
                                                throw new TypeError('this is not a Date object.'); // 1185
                                            } // 1186
                                            var year = originalGetUTCFullYear(this); // 1187
                                            if (year < 0 && originalGetUTCMonth(this) > 11) {
                                                // 1188
                                                return year + 1; // 1189
                                            } // 1190
                                            return year; // 1191
                                        }, // 1192
                                        getUTCMonth: function getUTCMonth() {
                                            // 1193
                                            if (!this || !(this instanceof Date)) {
                                                // 1194
                                                throw new TypeError('this is not a Date object.'); // 1195
                                            } // 1196
                                            var year = originalGetUTCFullYear(this); // 1197
                                            var month = originalGetUTCMonth(this); // 1198
                                            if (year < 0 && month > 11) {
                                                // 1199
                                                return 0; // 1200
                                            } // 1201
                                            return month; // 1202
                                        }, // 1203
                                        getUTCDate: function getUTCDate() {
                                            // 1204
                                            if (!this || !(this instanceof Date)) {
                                                // 1205
                                                throw new TypeError('this is not a Date object.'); // 1206
                                            } // 1207
                                            var year = originalGetUTCFullYear(this); // 1208
                                            var month = originalGetUTCMonth(this); // 1209
                                            var date = originalGetUTCDate(this); // 1210
                                            if (year < 0 && month > 11) {
                                                // 1211
                                                if (month === 12) {
                                                    // 1212
                                                    return date; // 1213
                                                } // 1214
                                                var days = daysInMonth(0, year + 1); // 1215
                                                return days - date + 1; // 1216
                                            } // 1217
                                            return date; // 1218
                                        } // 1219
                                    }, hasNegativeMonthYearBug); // 1220
                                    // 1221
                                    defineProperties(Date.prototype, { // 1222
                                        toUTCString: function toUTCString() {
                                            // 1223
                                            if (!this || !(this instanceof Date)) {
                                                // 1224
                                                throw new TypeError('this is not a Date object.'); // 1225
                                            } // 1226
                                            var day = originalGetUTCDay(this); // 1227
                                            var date = originalGetUTCDate(this); // 1228
                                            var month = originalGetUTCMonth(this); // 1229
                                            var year = originalGetUTCFullYear(this); // 1230
                                            var hour = originalGetUTCHours(this); // 1231
                                            var minute = originalGetUTCMinutes(this); // 1232
                                            var second = originalGetUTCSeconds(this); // 1233
                                            return dayName[day] + ', ' + ( // 1234
                                            date < 10 ? '0' + date : date) + ' ' + // 1235
                                            monthName[month] + ' ' + // 1236
                                            year + ' ' + ( // 1237
                                            hour < 10 ? '0' + hour : hour) + ':' + ( // 1238
                                            minute < 10 ? '0' + minute : minute) + ':' + ( // 1239
                                            second < 10 ? '0' + second : second) + ' GMT'; // 1240
                                        } // 1241
                                    }, hasNegativeMonthYearBug || hasToUTCStringFormatBug); // 1242
                                    // 1243
                                    // Opera 12 has `,`                                                                                               // 1244
                                    defineProperties(Date.prototype, { // 1245
                                        toDateString: function toDateString() {
                                            // 1246
                                            if (!this || !(this instanceof Date)) {
                                                // 1247
                                                throw new TypeError('this is not a Date object.'); // 1248
                                            } // 1249
                                            var day = this.getDay(); // 1250
                                            var date = this.getDate(); // 1251
                                            var month = this.getMonth(); // 1252
                                            var year = this.getFullYear(); // 1253
                                            return dayName[day] + ' ' + // 1254
                                            monthName[month] + ' ' + ( // 1255
                                            date < 10 ? '0' + date : date) + ' ' + // 1256
                                            year; // 1257
                                        } // 1258
                                    }, hasNegativeMonthYearBug || hasToDateStringFormatBug); // 1259
                                    // 1260
                                    // can't use defineProperties here because of toString enumeration issue in IE <= 8                               // 1261
                                    if (hasNegativeMonthYearBug || hasToStringFormatBug) {
                                        // 1262
                                        Date.prototype.toString = function toString() {
                                            // 1263
                                            if (!this || !(this instanceof Date)) {
                                                // 1264
                                                throw new TypeError('this is not a Date object.'); // 1265
                                            } // 1266
                                            var day = this.getDay(); // 1267
                                            var date = this.getDate(); // 1268
                                            var month = this.getMonth(); // 1269
                                            var year = this.getFullYear(); // 1270
                                            var hour = this.getHours(); // 1271
                                            var minute = this.getMinutes(); // 1272
                                            var second = this.getSeconds(); // 1273
                                            var timezoneOffset = this.getTimezoneOffset(); // 1274
                                            var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60); // 1275
                                            var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60); // 1276
                                            return dayName[day] + ' ' + // 1277
                                            monthName[month] + ' ' + ( // 1278
                                            date < 10 ? '0' + date : date) + ' ' + // 1279
                                            year + ' ' + ( // 1280
                                            hour < 10 ? '0' + hour : hour) + ':' + ( // 1281
                                            minute < 10 ? '0' + minute : minute) + ':' + ( // 1282
                                            second < 10 ? '0' + second : second) + ' GMT' + ( // 1283
                                            timezoneOffset > 0 ? '-' : '+') + ( // 1284
                                            hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) + ( // 1285
                                            minutesOffset < 10 ? '0' + minutesOffset : minutesOffset); // 1286
                                        }; // 1287
                                        if (supportsDescriptors) {
                                            // 1288
                                            $Object.defineProperty(Date.prototype, 'toString', { // 1289
                                                configurable: true, // 1290
                                                enumerable: false, // 1291
                                                writable: true // 1292
                                            }); // 1293
                                        } // 1294
                                    } // 1295
                                    // 1296
                                    // ES5 15.9.5.43                                                                                                  // 1297
                                    // http://es5.github.com/#x15.9.5.43                                                                              // 1298
                                    // This function returns a String value represent the instance in time                                            // 1299
                                    // represented by this Date object. The format of the String is the Date Time                                     // 1300
                                    // string format defined in 15.9.1.15. All fields are present in the String.                                      // 1301
                                    // The time zone is always UTC, denoted by the suffix Z. If the time value of                                     // 1302
                                    // this object is not a finite Number a RangeError exception is thrown.                                           // 1303
                                    var negativeDate = -62198755200000; // 1304
                                    var negativeYearString = '-000001'; // 1305
                                    var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
                                    var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';
                                    // 1308
                                    var getTime = call.bind(Date.prototype.getTime); // 1309
                                    // 1310
                                    defineProperties(Date.prototype, { // 1311
                                        toISOString: function toISOString() {
                                            // 1312
                                            if (!isFinite(this) || !isFinite(getTime(this))) {
                                                // 1313
                                                // Adope Photoshop requires the second check.                                                         // 1314
                                                throw new RangeError('Date.prototype.toISOString called on non-finite value.'); // 1315
                                            } // 1316
                                            // 1317
                                            var year = originalGetUTCFullYear(this); // 1318
                                            // 1319
                                            var month = originalGetUTCMonth(this); // 1320
                                            // see https://github.com/es-shims/es5-shim/issues/111                                                    // 1321
                                            year += Math.floor(month / 12); // 1322
                                            month = (month % 12 + 12) % 12; // 1323
                                            // 1324
                                            // the date time string format is specified in 15.9.1.15.                                                 // 1325
                                            var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
                                            year = // 1327
                                            (year < 0 ? '-' : year > 9999 ? '+' : '') + // 1328
                                            strSlice('00000' + Math.abs(year), 0 <= year && year <= 9999 ? -4 : -6) // 1329
                                            ; // 1330
                                            // 1331
                                            for (var i = 0; i < result.length; ++i) {
                                                // 1332
                                                // pad months, days, hours, minutes, and seconds to have two digits.                                  // 1333
                                                result[i] = strSlice('00' + result[i], -2); // 1334
                                            } // 1335
                                            // pad milliseconds to have three digits.                                                                 // 1336
                                            return (// 1337
                                                year + '-' + arraySlice(result, 0, 2).join('-') + // 1338
                                                'T' + arraySlice(result, 2).join(':') + '.' + // 1339
                                                strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z' // 1340

                                            ); // 1341
                                        } // 1342
                                    }, hasNegativeDateBug || hasSafari51DateBug); // 1343
                                    // 1344
                                    // ES5 15.9.5.44                                                                                                  // 1345
                                    // http://es5.github.com/#x15.9.5.44                                                                              // 1346
                                    // This function provides a String representation of a Date object for use by                                     // 1347
                                    // JSON.stringify (15.12.3).                                                                                      // 1348
                                    var dateToJSONIsSupported = function () {
                                        // 1349
                                        try {
                                            // 1350
                                            return Date.prototype.toJSON && // 1351
                                            new Date(NaN).toJSON() === null && // 1352
                                            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 && // 1353
                                            Date.prototype.toJSON.call({ // generic                                                               // 1354
                                                toISOString: function () {
                                                    return true;
                                                } // 1355
                                            }); // 1356
                                        } catch (e) {
                                            // 1357
                                            return false; // 1358
                                        } // 1359
                                    }(); // 1360
                                    if (!dateToJSONIsSupported) {
                                        // 1361
                                        Date.prototype.toJSON = function toJSON(key) {
                                            // 1362
                                            // When the toJSON method is called with argument key, the following                                      // 1363
                                            // steps are taken:                                                                                       // 1364
                                            // 1365
                                            // 1.  Let O be the result of calling ToObject, giving it the this                                        // 1366
                                            // value as its argument.                                                                                 // 1367
                                            // 2. Let tv be ES.ToPrimitive(O, hint Number).                                                           // 1368
                                            var O = $Object(this); // 1369
                                            var tv = ES.ToPrimitive(O); // 1370
                                            // 3. If tv is a Number and is not finite, return null.                                                   // 1371
                                            if (typeof tv === 'number' && !isFinite(tv)) {
                                                // 1372
                                                return null; // 1373
                                            } // 1374
                                            // 4. Let toISO be the result of calling the [[Get]] internal method of                                   // 1375
                                            // O with argument "toISOString".                                                                         // 1376
                                            var toISO = O.toISOString; // 1377
                                            // 5. If IsCallable(toISO) is false, throw a TypeError exception.                                         // 1378
                                            if (!isCallable(toISO)) {
                                                // 1379
                                                throw new TypeError('toISOString property is not callable'); // 1380
                                            } // 1381
                                            // 6. Return the result of calling the [[Call]] internal method of                                        // 1382
                                            //  toISO with O as the this value and an empty argument list.                                            // 1383
                                            return toISO.call(O); // 1384
                                            // 1385
                                            // NOTE 1 The argument is ignored.                                                                        // 1386
                                            // 1387
                                            // NOTE 2 The toJSON function is intentionally generic; it does not                                       // 1388
                                            // require that its this value be a Date object. Therefore, it can be                                     // 1389
                                            // transferred to other kinds of objects for use as a method. However,                                    // 1390
                                            // it does require that any such object have a toISOString method. An                                     // 1391
                                            // object is free to use the argument key to filter its                                                   // 1392
                                            // stringification.                                                                                       // 1393
                                        }; // 1394
                                    } // 1395
                                    // 1396
                                    // ES5 15.9.4.2                                                                                                   // 1397
                                    // http://es5.github.com/#x15.9.4.2                                                                               // 1398
                                    // based on work shared by Daniel Friesen (dantman)                                                               // 1399
                                    // http://gist.github.com/303249                                                                                  // 1400
                                    var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15; // 1401
                                    var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
                                    var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z')); // 1403
                                    if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
                                        // 1404
                                        // XXX global assignment won't work in embeddings that use                                                    // 1405
                                        // an alternate object for the context.                                                                       // 1406
                                        /* global Date: true */ // 1407
                                        /* eslint-disable no-undef */ // 1408
                                        var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1; // 1409
                                        var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime()); // 1410
                                        /* eslint-disable no-implicit-globals */ // 1411
                                        Date = function (NativeDate) {
                                            // 1412
                                            /* eslint-enable no-implicit-globals */ // 1413
                                            /* eslint-enable no-undef */ // 1414
                                            // Date.length === 7                                                                                      // 1415
                                            var DateShim = function Date(Y, M, D, h, m, s, ms) {
                                                // 1416
                                                var length = arguments.length; // 1417
                                                var date; // 1418
                                                if (this instanceof NativeDate) {
                                                    // 1419
                                                    var seconds = s; // 1420
                                                    var millis = ms; // 1421
                                                    if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
                                                        // 1422
                                                        // work around a Safari 8/9 bug where it treats the seconds as signed                         // 1423
                                                        var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit; // 1424
                                                        var sToShift = Math.floor(msToShift / 1e3); // 1425
                                                        seconds += sToShift; // 1426
                                                        millis -= sToShift * 1e3; // 1427
                                                    } // 1428
                                                    date = length === 1 && $String(Y) === Y ? // isString(Y)                                          // 1429
                                                    // We explicitly pass it through parse:                                                       // 1430
                                                    new NativeDate(DateShim.parse(Y)) : // 1431
                                                    // We have to manually make calls depending on argument                                       // 1432
                                                    // length here                                                                                // 1433
                                                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) : // 1434
                                                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) : // 1435
                                                    length >= 5 ? new NativeDate(Y, M, D, h, m) : // 1436
                                                    length >= 4 ? new NativeDate(Y, M, D, h) : // 1437
                                                    length >= 3 ? new NativeDate(Y, M, D) : // 1438
                                                    length >= 2 ? new NativeDate(Y, M) : // 1439
                                                    length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) : // 1440
                                                    new NativeDate(); // 1441
                                                } else {
                                                    // 1442
                                                    date = NativeDate.apply(this, arguments); // 1443
                                                } // 1444
                                                if (!isPrimitive(date)) {
                                                    // 1445
                                                    // Prevent mixups with unfixed Date object                                                        // 1446
                                                    defineProperties(date, { constructor: DateShim }, true); // 1447
                                                } // 1448
                                                return date; // 1449
                                            }; // 1450
                                            // 1451
                                            // 15.9.1.15 Date Time String Format.                                                                     // 1452
                                            var isoDateExpression = new RegExp('^' + // 1453
                                            '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +                                          // 1454
                                            // 6-digit extended year                                                    // 1455
                                            '(?:-(\\d{2})' + // optional month capture                                                            // 1456
                                            '(?:-(\\d{2})' + // optional day capture                                                              // 1457
                                            '(?:' + // capture hours:minutes:seconds.milliseconds                                                 // 1458
                                            'T(\\d{2})' + // hours capture                                                                    // 1459
                                            ':(\\d{2})' + // minutes capture                                                                  // 1460
                                            '(?:' + // optional :seconds.milliseconds                                                         // 1461
                                            ':(\\d{2})' + // seconds capture                                                              // 1462
                                            '(?:(\\.\\d{1,}))?' + // milliseconds capture                                                 // 1463
                                            ')?' + // 1464
                                            '(' + // capture UTC offset component                                                                 // 1465
                                            'Z|' + // UTC capture                                                                             // 1466
                                            '(?:' + // offset specifier +/-hours:minutes                                                      // 1467
                                            '([-+])' + // sign capture                                                                    // 1468
                                            '(\\d{2})' + // hours offset capture                                                          // 1469
                                            ':(\\d{2})' + // minutes offset capture                                                       // 1470
                                            ')' + // 1471
                                            ')?)?)?)?' + // 1472
                                            '$'); // 1473
                                            // 1474
                                            var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]; // 1475
                                            // 1476
                                            var dayFromMonth = function dayFromMonth(year, month) {
                                                // 1477
                                                var t = month > 1 ? 1 : 0; // 1478
                                                return (// 1479
                                                    months[month] + // 1480
                                                    Math.floor((year - 1969 + t) / 4) - // 1481
                                                    Math.floor((year - 1901 + t) / 100) + // 1482
                                                    Math.floor((year - 1601 + t) / 400) + // 1483
                                                    365 * (year - 1970) // 1484

                                                ); // 1485
                                            }; // 1486
                                            // 1487
                                            var toUTC = function toUTC(t) {
                                                // 1488
                                                var s = 0; // 1489
                                                var ms = t; // 1490
                                                if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
                                                    // 1491
                                                    // work around a Safari 8/9 bug where it treats the seconds as signed                             // 1492
                                                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit; // 1493
                                                    var sToShift = Math.floor(msToShift / 1e3); // 1494
                                                    s += sToShift; // 1495
                                                    ms -= sToShift * 1e3; // 1496
                                                } // 1497
                                                return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms)); // 1498
                                            }; // 1499
                                            // 1500
                                            // Copy any custom methods a 3rd party library may have added                                             // 1501
                                            for (var key in NativeDate) {
                                                // 1502
                                                if (owns(NativeDate, key)) {
                                                    // 1503
                                                    DateShim[key] = NativeDate[key]; // 1504
                                                } // 1505
                                            } // 1506
                                            // 1507
                                            // Copy "native" methods explicitly; they may be non-enumerable                                           // 1508
                                            defineProperties(DateShim, { // 1509
                                                now: NativeDate.now, // 1510
                                                UTC: NativeDate.UTC // 1511
                                            }, true); // 1512
                                            DateShim.prototype = NativeDate.prototype; // 1513
                                            defineProperties(DateShim.prototype, { // 1514
                                                constructor: DateShim // 1515
                                            }, true); // 1516
                                            // 1517
                                            // Upgrade Date.parse to handle simplified ISO 8601 strings                                               // 1518
                                            var parseShim = function parse(string) {
                                                // 1519
                                                var match = isoDateExpression.exec(string); // 1520
                                                if (match) {
                                                    // 1521
                                                    // parse months, days, hours, minutes, seconds, and milliseconds                                  // 1522
                                                    // provide default values if necessary                                                            // 1523
                                                    // parse the UTC offset component                                                                 // 1524
                                                    var year = $Number(match[1]),
                                                        // 1525
                                                    month = $Number(match[2] || 1) - 1,
                                                        // 1526
                                                    day = $Number(match[3] || 1) - 1,
                                                        // 1527
                                                    hour = $Number(match[4] || 0),
                                                        // 1528
                                                    minute = $Number(match[5] || 0),
                                                        // 1529
                                                    second = $Number(match[6] || 0),
                                                        // 1530
                                                    millisecond = Math.floor($Number(match[7] || 0) * 1000),
                                                        // 1531
                                                    // When time zone is missed, local offset should be used                                      // 1532
                                                    // (ES 5.1 bug)                                                                               // 1533
                                                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112                                        // 1534
                                                    isLocalTime = Boolean(match[4] && !match[8]),
                                                        // 1535
                                                    signOffset = match[9] === '-' ? 1 : -1,
                                                        // 1536
                                                    hourOffset = $Number(match[10] || 0),
                                                        // 1537
                                                    minuteOffset = $Number(match[11] || 0),
                                                        // 1538
                                                    result; // 1539
                                                    var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0; // 1540
                                                    if ( // 1541
                                                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) && // 1542
                                                    minute < 60 && second < 60 && millisecond < 1000 && // 1543
                                                    month > -1 && month < 12 && hourOffset < 24 && // 1544
                                                    minuteOffset < 60 && // detect invalid offsets                                                // 1545
                                                    day > -1 && // 1546
                                                    day < dayFromMonth(year, month + 1) - dayFromMonth(year, month) // 1547
                                                    ) {
                                                            // 1548
                                                            result = ( // 1549
                                                            (dayFromMonth(year, month) + day) * 24 + // 1550
                                                            hour + // 1551
                                                            hourOffset * signOffset // 1552
                                                            ) * 60; // 1553
                                                            result = ( // 1554
                                                            (result + minute + minuteOffset * signOffset) * 60 + // 1555
                                                            second // 1556
                                                            ) * 1000 + millisecond; // 1557
                                                            if (isLocalTime) {
                                                                // 1558
                                                                result = toUTC(result); // 1559
                                                            } // 1560
                                                            if (-8.64e15 <= result && result <= 8.64e15) {
                                                                // 1561
                                                                return result; // 1562
                                                            } // 1563
                                                        } // 1564
                                                    return NaN; // 1565
                                                } // 1566
                                                return NativeDate.parse.apply(this, arguments); // 1567
                                            }; // 1568
                                            defineProperties(DateShim, { parse: parseShim }); // 1569
                                            // 1570
                                            return DateShim; // 1571
                                        }(Date); // 1572
                                        /* global Date: false */ // 1573
                                    } // 1574
                                    // 1575
                                    // ES5 15.9.4.4                                                                                                   // 1576
                                    // http://es5.github.com/#x15.9.4.4                                                                               // 1577
                                    if (!Date.now) {
                                        // 1578
                                        Date.now = function now() {
                                            // 1579
                                            return new Date().getTime(); // 1580
                                        }; // 1581
                                    } // 1582
                                    // 1583
                                    //                                                                                                                // 1584
                                    // Number                                                                                                         // 1585
                                    // ======                                                                                                         // 1586
                                    //                                                                                                                // 1587
                                    // 1588
                                    // ES5.1 15.7.4.5                                                                                                 // 1589
                                    // http://es5.github.com/#x15.7.4.5                                                                               // 1590
                                    var hasToFixedBugs = NumberPrototype.toFixed && ( // 1591
                                    0.00008.toFixed(3) !== '0.000' || // 1592
                                    0.9.toFixed(0) !== '1' || // 1593
                                    1.255.toFixed(2) !== '1.25' || // 1594
                                    1000000000000000128 .toFixed(0) !== '1000000000000000128' // 1595
                                    ); // 1596
                                    // 1597
                                    var toFixedHelpers = { // 1598
                                        base: 1e7, // 1599
                                        size: 6, // 1600
                                        data: [0, 0, 0, 0, 0, 0], // 1601
                                        multiply: function multiply(n, c) {
                                            // 1602
                                            var i = -1; // 1603
                                            var c2 = c; // 1604
                                            while (++i < toFixedHelpers.size) {
                                                // 1605
                                                c2 += n * toFixedHelpers.data[i]; // 1606
                                                toFixedHelpers.data[i] = c2 % toFixedHelpers.base; // 1607
                                                c2 = Math.floor(c2 / toFixedHelpers.base); // 1608
                                            } // 1609
                                        }, // 1610
                                        divide: function divide(n) {
                                            // 1611
                                            var i = toFixedHelpers.size; // 1612
                                            var c = 0; // 1613
                                            while (--i >= 0) {
                                                // 1614
                                                c += toFixedHelpers.data[i]; // 1615
                                                toFixedHelpers.data[i] = Math.floor(c / n); // 1616
                                                c = c % n * toFixedHelpers.base; // 1617
                                            } // 1618
                                        }, // 1619
                                        numToString: function numToString() {
                                            // 1620
                                            var i = toFixedHelpers.size; // 1621
                                            var s = ''; // 1622
                                            while (--i >= 0) {
                                                // 1623
                                                if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
                                                    // 1624
                                                    var t = $String(toFixedHelpers.data[i]); // 1625
                                                    if (s === '') {
                                                        // 1626
                                                        s = t; // 1627
                                                    } else {
                                                        // 1628
                                                        s += strSlice('0000000', 0, 7 - t.length) + t; // 1629
                                                    } // 1630
                                                } // 1631
                                            } // 1632
                                            return s; // 1633
                                        }, // 1634
                                        pow: function pow(x, n, acc) {
                                            // 1635
                                            return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc); // 1636
                                        }, // 1637
                                        log: function log(x) {
                                            // 1638
                                            var n = 0; // 1639
                                            var x2 = x; // 1640
                                            while (x2 >= 4096) {
                                                // 1641
                                                n += 12; // 1642
                                                x2 /= 4096; // 1643
                                            } // 1644
                                            while (x2 >= 2) {
                                                // 1645
                                                n += 1; // 1646
                                                x2 /= 2; // 1647
                                            } // 1648
                                            return n; // 1649
                                        } // 1650
                                    }; // 1651
                                    // 1652
                                    var toFixedShim = function toFixed(fractionDigits) {
                                        // 1653
                                        var f, x, s, m, e, z, j, k; // 1654
                                        // 1655
                                        // Test for NaN and round fractionDigits down                                                                 // 1656
                                        f = $Number(fractionDigits); // 1657
                                        f = isActualNaN(f) ? 0 : Math.floor(f); // 1658
                                        // 1659
                                        if (f < 0 || f > 20) {
                                            // 1660
                                            throw new RangeError('Number.toFixed called with invalid number of decimals'); // 1661
                                        } // 1662
                                        // 1663
                                        x = $Number(this); // 1664
                                        // 1665
                                        if (isActualNaN(x)) {
                                            // 1666
                                            return 'NaN'; // 1667
                                        } // 1668
                                        // 1669
                                        // If it is too big or small, return the string value of the number                                           // 1670
                                        if (x <= -1e21 || x >= 1e21) {
                                            // 1671
                                            return $String(x); // 1672
                                        } // 1673
                                        // 1674
                                        s = ''; // 1675
                                        // 1676
                                        if (x < 0) {
                                            // 1677
                                            s = '-'; // 1678
                                            x = -x; // 1679
                                        } // 1680
                                        // 1681
                                        m = '0'; // 1682
                                        // 1683
                                        if (x > 1e-21) {
                                            // 1684
                                            // 1e-21 < x < 1e21                                                                                       // 1685
                                            // -70 < log2(x) < 70                                                                                     // 1686
                                            e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69; // 1687
                                            z = e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1); // 1688
                                            z *= 0x10000000000000; // Math.pow(2, 52);                                                                // 1689
                                            e = 52 - e; // 1690
                                            // 1691
                                            // -18 < e < 122                                                                                          // 1692
                                            // x = z / 2 ^ e                                                                                          // 1693
                                            if (e > 0) {
                                                // 1694
                                                toFixedHelpers.multiply(0, z); // 1695
                                                j = f; // 1696
                                                // 1697
                                                while (j >= 7) {
                                                    // 1698
                                                    toFixedHelpers.multiply(1e7, 0); // 1699
                                                    j -= 7; // 1700
                                                } // 1701
                                                // 1702
                                                toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0); // 1703
                                                j = e - 1; // 1704
                                                // 1705
                                                while (j >= 23) {
                                                    // 1706
                                                    toFixedHelpers.divide(1 << 23); // 1707
                                                    j -= 23; // 1708
                                                } // 1709
                                                // 1710
                                                toFixedHelpers.divide(1 << j); // 1711
                                                toFixedHelpers.multiply(1, 1); // 1712
                                                toFixedHelpers.divide(2); // 1713
                                                m = toFixedHelpers.numToString(); // 1714
                                            } else {
                                                // 1715
                                                toFixedHelpers.multiply(0, z); // 1716
                                                toFixedHelpers.multiply(1 << -e, 0); // 1717
                                                m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f); // 1718
                                            } // 1719
                                        } // 1720
                                        // 1721
                                        if (f > 0) {
                                            // 1722
                                            k = m.length; // 1723
                                            // 1724
                                            if (k <= f) {
                                                // 1725
                                                m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m; // 1726
                                            } else {
                                                // 1727
                                                m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f); // 1728
                                            } // 1729
                                        } else {
                                            // 1730
                                            m = s + m; // 1731
                                        } // 1732
                                        // 1733
                                        return m; // 1734
                                    }; // 1735
                                    defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs); // 1736
                                    // 1737
                                    var hasToPrecisionUndefinedBug = function () {
                                        // 1738
                                        try {
                                            // 1739
                                            return 1.0.toPrecision(undefined) === '1'; // 1740
                                        } catch (e) {
                                            // 1741
                                            return true; // 1742
                                        } // 1743
                                    }(); // 1744
                                    var originalToPrecision = NumberPrototype.toPrecision; // 1745
                                    defineProperties(NumberPrototype, { // 1746
                                        toPrecision: function toPrecision(precision) {
                                            // 1747
                                            return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
                                        } // 1749
                                    }, hasToPrecisionUndefinedBug); // 1750
                                    // 1751
                                    //                                                                                                                // 1752
                                    // String                                                                                                         // 1753
                                    // ======                                                                                                         // 1754
                                    //                                                                                                                // 1755
                                    // 1756
                                    // ES5 15.5.4.14                                                                                                  // 1757
                                    // http://es5.github.com/#x15.5.4.14                                                                              // 1758
                                    // 1759
                                    // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]                                               // 1760
                                    // Many browsers do not split properly with regular expressions or they                                           // 1761
                                    // do not perform the split correctly under obscure conditions.                                                   // 1762
                                    // See http://blog.stevenlevithan.com/archives/cross-browser-split                                                // 1763
                                    // I've tested in many browsers and this seems to cover the deviant ones:                                         // 1764
                                    //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]                                                          // 1765
                                    //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]                                             // 1766
                                    //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not                                        // 1767
                                    //       [undefined, "t", undefined, "e", ...]                                                                    // 1768
                                    //    ''.split(/.?/) should be [], not [""]                                                                       // 1769
                                    //    '.'.split(/()()/) should be ["."], not ["", "", "."]                                                        // 1770
                                    // 1771
                                    if ( // 1772
                                    'ab'.split(/(?:ab)*/).length !== 2 || // 1773
                                    '.'.split(/(.?)(.?)/).length !== 4 || // 1774
                                    'tesst'.split(/(s)*/)[1] === 't' || // 1775
                                    'test'.split(/(?:)/, -1).length !== 4 || // 1776
                                    ''.split(/.?/).length || // 1777
                                    '.'.split(/()()/).length > 1 // 1778
                                    ) {
                                            // 1779
                                            (function () {
                                                // 1780
                                                var compliantExecNpcg = typeof /()??/.exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
                                                var maxSafe32BitInt = Math.pow(2, 32) - 1; // 1782
                                                // 1783
                                                StringPrototype.split = function (separator, limit) {
                                                    // 1784
                                                    var string = String(this); // 1785
                                                    if (typeof separator === 'undefined' && limit === 0) {
                                                        // 1786
                                                        return []; // 1787
                                                    } // 1788
                                                    // 1789
                                                    // If `separator` is not a regex, use native split                                                    // 1790
                                                    if (!isRegex(separator)) {
                                                        // 1791
                                                        return strSplit(this, separator, limit); // 1792
                                                    } // 1793
                                                    // 1794
                                                    var output = []; // 1795
                                                    var flags = (separator.ignoreCase ? 'i' : '') + ( // 1796
                                                    separator.multiline ? 'm' : '') + ( // 1797
                                                    separator.unicode ? 'u' : '') + ( // in ES6                                                // 1798
                                                    separator.sticky ? 'y' : ''),
                                                        // Firefox 3+ and ES6                                      // 1799
                                                    lastLastIndex = 0,
                                                        // 1800
                                                    // Make `global` and avoid `lastIndex` issues by working with a copy                              // 1801
                                                    separator2,
                                                        match,
                                                        lastIndex,
                                                        lastLength; // 1802
                                                    var separatorCopy = new RegExp(separator.source, flags + 'g'); // 1803
                                                    if (!compliantExecNpcg) {
                                                        // 1804
                                                        // Doesn't need flags gy, but they don't hurt                                                     // 1805
                                                        separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags); // 1806
                                                    } // 1807
                                                    /* Values for `limit`, per the spec:                                                                  // 1808
                                                     * If undefined: 4294967295 // maxSafe32BitInt                                                        // 1809
                                                     * If 0, Infinity, or NaN: 0                                                                          // 1810
                                                     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;        // 1811
                                                     * If negative number: 4294967296 - Math.floor(Math.abs(limit))                                       // 1812
                                                     * If other: Type-convert, then use the above rules                                                   // 1813
                                                     */ // 1814
                                                    var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit); // 1815
                                                    match = separatorCopy.exec(string); // 1816
                                                    while (match) {
                                                        // 1817
                                                        // `separatorCopy.lastIndex` is not reliable cross-browser                                        // 1818
                                                        lastIndex = match.index + match[0].length; // 1819
                                                        if (lastIndex > lastLastIndex) {
                                                            // 1820
                                                            pushCall(output, strSlice(string, lastLastIndex, match.index)); // 1821
                                                            // Fix browsers whose `exec` methods don't consistently return `undefined` for                // 1822
                                                            // nonparticipating capturing groups                                                          // 1823
                                                            if (!compliantExecNpcg && match.length > 1) {
                                                                // 1824
                                                                /* eslint-disable no-loop-func */ // 1825
                                                                match[0].replace(separator2, function () {
                                                                    // 1826
                                                                    for (var i = 1; i < arguments.length - 2; i++) {
                                                                        // 1827
                                                                        if (typeof arguments[i] === 'undefined') {
                                                                            // 1828
                                                                            match[i] = void 0; // 1829
                                                                        } // 1830
                                                                    } // 1831
                                                                }); // 1832
                                                                /* eslint-enable no-loop-func */ // 1833
                                                            } // 1834
                                                            if (match.length > 1 && match.index < string.length) {
                                                                // 1835
                                                                array_push.apply(output, arraySlice(match, 1)); // 1836
                                                            } // 1837
                                                            lastLength = match[0].length; // 1838
                                                            lastLastIndex = lastIndex; // 1839
                                                            if (output.length >= splitLimit) {
                                                                // 1840
                                                                break; // 1841
                                                            } // 1842
                                                        } // 1843
                                                        if (separatorCopy.lastIndex === match.index) {
                                                            // 1844
                                                            separatorCopy.lastIndex++; // Avoid an infinite loop                                          // 1845
                                                        } // 1846
                                                        match = separatorCopy.exec(string); // 1847
                                                    } // 1848
                                                    if (lastLastIndex === string.length) {
                                                        // 1849
                                                        if (lastLength || !separatorCopy.test('')) {
                                                            // 1850
                                                            pushCall(output, ''); // 1851
                                                        } // 1852
                                                    } else {
                                                        // 1853
                                                        pushCall(output, strSlice(string, lastLastIndex)); // 1854
                                                    } // 1855
                                                    return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output; // 1856
                                                }; // 1857
                                            })(); // 1858
                                            // 1859
                                            // [bugfix, chrome]                                                                                               // 1860
                                            // If separator is undefined, then the result array contains just one String,                                     // 1861
                                            // which is the this value (converted to a String). If limit is not undefined,                                    // 1862
                                            // then the output array is truncated so that it contains no more than limit                                      // 1863
                                            // elements.                                                                                                      // 1864
                                            // "0".split(undefined, 0) -> []                                                                                  // 1865
                                        } else if ('0'.split(void 0, 0).length) {
                                        // 1866
                                        StringPrototype.split = function split(separator, limit) {
                                            // 1867
                                            if (typeof separator === 'undefined' && limit === 0) {
                                                // 1868
                                                return []; // 1869
                                            } // 1870
                                            return strSplit(this, separator, limit); // 1871
                                        }; // 1872
                                    } // 1873
                                    // 1874
                                    var str_replace = StringPrototype.replace; // 1875
                                    var replaceReportsGroupsCorrectly = function () {
                                        // 1876
                                        var groups = []; // 1877
                                        'x'.replace(/x(.)?/g, function (match, group) {
                                            // 1878
                                            pushCall(groups, group); // 1879
                                        }); // 1880
                                        return groups.length === 1 && typeof groups[0] === 'undefined'; // 1881
                                    }(); // 1882
                                    // 1883
                                    if (!replaceReportsGroupsCorrectly) {
                                        // 1884
                                        StringPrototype.replace = function replace(searchValue, replaceValue) {
                                            // 1885
                                            var isFn = isCallable(replaceValue); // 1886
                                            var hasCapturingGroups = isRegex(searchValue) && /\)[*?]/.test(searchValue.source); // 1887
                                            if (!isFn || !hasCapturingGroups) {
                                                // 1888
                                                return str_replace.call(this, searchValue, replaceValue); // 1889
                                            } else {
                                                // 1890
                                                var wrappedReplaceValue = function (match) {
                                                    // 1891
                                                    var length = arguments.length; // 1892
                                                    var originalLastIndex = searchValue.lastIndex; // 1893
                                                    searchValue.lastIndex = 0; // 1894
                                                    var args = searchValue.exec(match) || []; // 1895
                                                    searchValue.lastIndex = originalLastIndex; // 1896
                                                    pushCall(args, arguments[length - 2], arguments[length - 1]); // 1897
                                                    return replaceValue.apply(this, args); // 1898
                                                }; // 1899
                                                return str_replace.call(this, searchValue, wrappedReplaceValue); // 1900
                                            } // 1901
                                        }; // 1902
                                    } // 1903
                                    // 1904
                                    // ECMA-262, 3rd B.2.3                                                                                            // 1905
                                    // Not an ECMAScript standard, although ECMAScript 3rd Edition has a                                              // 1906
                                    // non-normative section suggesting uniform semantics and it should be                                            // 1907
                                    // normalized across all browsers                                                                                 // 1908
                                    // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE                                        // 1909
                                    var string_substr = StringPrototype.substr; // 1910
                                    var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b'; // 1911
                                    defineProperties(StringPrototype, { // 1912
                                        substr: function substr(start, length) {
                                            // 1913
                                            var normalizedStart = start; // 1914
                                            if (start < 0) {
                                                // 1915
                                                normalizedStart = max(this.length + start, 0); // 1916
                                            } // 1917
                                            return string_substr.call(this, normalizedStart, length); // 1918
                                        } // 1919
                                    }, hasNegativeSubstrBug); // 1920
                                    // 1921
                                    // ES5 15.5.4.20                                                                                                  // 1922
                                    // whitespace from: http://es5.github.io/#x15.5.4.20                                                              // 1923
                                    var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + // 1924
                                    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + // 1925
                                    '\u2029\uFEFF'; // 1926
                                    var zeroWidth = '\u200b'; // 1927
                                    var wsRegexChars = '[' + ws + ']'; // 1928
                                    var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*'); // 1929
                                    var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$'); // 1930
                                    var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim()); // 1931
                                    defineProperties(StringPrototype, { // 1932
                                        // http://blog.stevenlevithan.com/archives/faster-trim-javascript                                             // 1933
                                        // http://perfectionkills.com/whitespace-deviations/                                                          // 1934
                                        trim: function trim() {
                                            // 1935
                                            if (typeof this === 'undefined' || this === null) {
                                                // 1936
                                                throw new TypeError("can't convert " + this + ' to object'); // 1937
                                            } // 1938
                                            return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, ''); // 1939
                                        } // 1940
                                    }, hasTrimWhitespaceBug); // 1941
                                    var trim = call.bind(String.prototype.trim); // 1942
                                    // 1943
                                    var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1; // 1944
                                    defineProperties(StringPrototype, { // 1945
                                        lastIndexOf: function lastIndexOf(searchString) {
                                            // 1946
                                            if (typeof this === 'undefined' || this === null) {
                                                // 1947
                                                throw new TypeError("can't convert " + this + ' to object'); // 1948
                                            } // 1949
                                            var S = $String(this); // 1950
                                            var searchStr = $String(searchString); // 1951
                                            var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN; // 1952
                                            var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos); // 1953
                                            var start = min(max(pos, 0), S.length); // 1954
                                            var searchLen = searchStr.length; // 1955
                                            var k = start + searchLen; // 1956
                                            while (k > 0) {
                                                // 1957
                                                k = max(0, k - searchLen); // 1958
                                                var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr); // 1959
                                                if (index !== -1) {
                                                    // 1960
                                                    return k + index; // 1961
                                                } // 1962
                                            } // 1963
                                            return -1; // 1964
                                        } // 1965
                                    }, hasLastIndexBug); // 1966
                                    // 1967
                                    var originalLastIndexOf = StringPrototype.lastIndexOf; // 1968
                                    defineProperties(StringPrototype, { // 1969
                                        lastIndexOf: function lastIndexOf(searchString) {
                                            // 1970
                                            return originalLastIndexOf.apply(this, arguments); // 1971
                                        } // 1972
                                    }, StringPrototype.lastIndexOf.length !== 1); // 1973
                                    // 1974
                                    // ES-5 15.1.2.2                                                                                                  // 1975
                                    /* eslint-disable radix */ // 1976
                                    if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
                                        // 1977
                                        /* eslint-enable radix */ // 1978
                                        /* global parseInt: true */ // 1979
                                        parseInt = function (origParseInt) {
                                            // 1980
                                            var hexRegex = /^[\-+]?0[xX]/; // 1981
                                            return function parseInt(str, radix) {
                                                // 1982
                                                var string = trim(String(str)); // 1983
                                                var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10); // 1984
                                                return origParseInt(string, defaultedRadix); // 1985
                                            }; // 1986
                                        }(parseInt); // 1987
                                    } // 1988
                                    // 1989
                                    // https://es5.github.io/#x15.1.2.3                                                                               // 1990
                                    if (1 / parseFloat('-0') !== -Infinity) {
                                        // 1991
                                        /* global parseFloat: true */ // 1992
                                        parseFloat = function (origParseFloat) {
                                            // 1993
                                            return function parseFloat(string) {
                                                // 1994
                                                var inputString = trim(String(string)); // 1995
                                                var result = origParseFloat(inputString); // 1996
                                                return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result; // 1997
                                            }; // 1998
                                        }(parseFloat); // 1999
                                    } // 2000
                                    // 2001
                                    if (String(new RangeError('test')) !== 'RangeError: test') {
                                        // 2002
                                        var errorToStringShim = function toString() {
                                            // 2003
                                            if (typeof this === 'undefined' || this === null) {
                                                // 2004
                                                throw new TypeError("can't convert " + this + ' to object'); // 2005
                                            } // 2006
                                            var name = this.name; // 2007
                                            if (typeof name === 'undefined') {
                                                // 2008
                                                name = 'Error'; // 2009
                                            } else if (typeof name !== 'string') {
                                                // 2010
                                                name = $String(name); // 2011
                                            } // 2012
                                            var msg = this.message; // 2013
                                            if (typeof msg === 'undefined') {
                                                // 2014
                                                msg = ''; // 2015
                                            } else if (typeof msg !== 'string') {
                                                // 2016
                                                msg = $String(msg); // 2017
                                            } // 2018
                                            if (!name) {
                                                // 2019
                                                return msg; // 2020
                                            } // 2021
                                            if (!msg) {
                                                // 2022
                                                return name; // 2023
                                            } // 2024
                                            return name + ': ' + msg; // 2025
                                        }; // 2026
                                        // can't use defineProperties here because of toString enumeration issue in IE <= 8                           // 2027
                                        Error.prototype.toString = errorToStringShim; // 2028
                                    } // 2029
                                    // 2030
                                    if (supportsDescriptors) {
                                        // 2031
                                        var ensureNonEnumerable = function (obj, prop) {
                                            // 2032
                                            if (isEnum(obj, prop)) {
                                                // 2033
                                                var desc = Object.getOwnPropertyDescriptor(obj, prop); // 2034
                                                if (desc.configurable) {
                                                    // 2035
                                                    desc.enumerable = false; // 2036
                                                    Object.defineProperty(obj, prop, desc); // 2037
                                                } // 2038
                                            } // 2039
                                        }; // 2040
                                        ensureNonEnumerable(Error.prototype, 'message'); // 2041
                                        if (Error.prototype.message !== '') {
                                            // 2042
                                            Error.prototype.message = ''; // 2043
                                        } // 2044
                                        ensureNonEnumerable(Error.prototype, 'name'); // 2045
                                    } // 2046
                                    // 2047
                                    if (String(/a/mig) !== '/a/gim') {
                                        // 2048
                                        var regexToString = function toString() {
                                            // 2049
                                            var str = '/' + this.source + '/'; // 2050
                                            if (this.global) {
                                                // 2051
                                                str += 'g'; // 2052
                                            } // 2053
                                            if (this.ignoreCase) {
                                                // 2054
                                                str += 'i'; // 2055
                                            } // 2056
                                            if (this.multiline) {
                                                // 2057
                                                str += 'm'; // 2058
                                            } // 2059
                                            return str; // 2060
                                        }; // 2061
                                        // can't use defineProperties here because of toString enumeration issue in IE <= 8                           // 2062
                                        RegExp.prototype.toString = regexToString; // 2063
                                    } // 2064
                                }); // 2065
                                // 2066
                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            }, "es5-sham.js": function (_require4, _exports3, _module2) {

                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                    //
                                // node_modules/meteor/es5-shim/node_modules/es5-shim/es5-sham.js                                                     //
                                //                                                                                                                    //
                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                /*!                                                                                                                   // 1
                                 * https://github.com/es-shims/es5-shim                                                                               // 2
                                 * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                 // 3
                                 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                       // 4
                                 */ // 5
                                // 6
                                // vim: ts=4 sts=4 sw=4 expandtab                                                                                     // 7
                                // 8
                                // Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                  // 9
                                ; // 10
                                // 11
                                // UMD (Universal Module Definition)                                                                                  // 12
                                // see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                            // 13
                                (function (root, factory) {
                                    // 14
                                    'use strict'; // 15
                                    // 16
                                    /* global define, exports, module */ // 17

                                    if (typeof define === 'function' && define.amd) {
                                        // 18
                                        // AMD. Register as an anonymous module.                                                                      // 19
                                        define(factory); // 20
                                    } else if (typeof _exports3 === 'object') {
                                        // 21
                                        // Node. Does not work with strict CommonJS, but                                                              // 22
                                        // only CommonJS-like enviroments that support module.exports,                                                // 23
                                        // like Node.                                                                                                 // 24
                                        _module2.exports = factory(); // 25
                                    } else {
                                        // 26
                                        // Browser globals (root is window)                                                                           // 27
                                        root.returnExports = factory(); // 28
                                    } // 29
                                })(this, function () {
                                    // 30
                                    // 31
                                    var call = Function.call; // 32
                                    var prototypeOfObject = Object.prototype; // 33
                                    var owns = call.bind(prototypeOfObject.hasOwnProperty); // 34
                                    var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable); // 35
                                    var toStr = call.bind(prototypeOfObject.toString); // 36
                                    // 37
                                    // If JS engine supports accessors creating shortcuts.                                                            // 38
                                    var defineGetter; // 39
                                    var defineSetter; // 40
                                    var lookupGetter; // 41
                                    var lookupSetter; // 42
                                    var supportsAccessors = owns(prototypeOfObject, '__defineGetter__'); // 43
                                    if (supportsAccessors) {
                                        // 44
                                        /* eslint-disable no-underscore-dangle */ // 45
                                        defineGetter = call.bind(prototypeOfObject.__defineGetter__); // 46
                                        defineSetter = call.bind(prototypeOfObject.__defineSetter__); // 47
                                        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__); // 48
                                        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__); // 49
                                        /* eslint-enable no-underscore-dangle */ // 50
                                    } // 51
                                    // 52
                                    var isPrimitive = function isPrimitive(o) {
                                        // 53
                                        return o == null || typeof o !== 'object' && typeof o !== 'function'; // 54
                                    }; // 55
                                    // 56
                                    // ES5 15.2.3.2                                                                                                   // 57
                                    // http://es5.github.com/#x15.2.3.2                                                                               // 58
                                    if (!Object.getPrototypeOf) {
                                        // 59
                                        // https://github.com/es-shims/es5-shim/issues#issue/2                                                        // 60
                                        // http://ejohn.org/blog/objectgetprototypeof/                                                                // 61
                                        // recommended by fschaefer on github                                                                         // 62
                                        //                                                                                                            // 63
                                        // sure, and webreflection says ^_^                                                                           // 64
                                        // ... this will nerever possibly return null                                                                 // 65
                                        // ... Opera Mini breaks here with infinite loops                                                             // 66
                                        Object.getPrototypeOf = function getPrototypeOf(object) {
                                            // 67
                                            /* eslint-disable no-proto */ // 68
                                            var proto = object.__proto__; // 69
                                            /* eslint-enable no-proto */ // 70
                                            if (proto || proto === null) {
                                                // 71
                                                return proto; // 72
                                            } else if (toStr(object.constructor) === '[object Function]') {
                                                // 73
                                                return object.constructor.prototype; // 74
                                            } else if (object instanceof Object) {
                                                // 75
                                                return prototypeOfObject; // 76
                                            } else {
                                                // 77
                                                // Correctly return null for Objects created with `Object.create(null)`                               // 78
                                                // (shammed or native) or `{ __proto__: null}`.  Also returns null for                                // 79
                                                // cross-realm objects on browsers that lack `__proto__` support (like                                // 80
                                                // IE <11), but that's the best we can do.                                                            // 81
                                                return null; // 82
                                            } // 83
                                        }; // 84
                                    } // 85
                                    // 86
                                    // ES5 15.2.3.3                                                                                                   // 87
                                    // http://es5.github.com/#x15.2.3.3                                                                               // 88
                                    // 89
                                    var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
                                        // 90
                                        try {
                                            // 91
                                            object.sentinel = 0; // 92
                                            return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0; // 93
                                        } catch (exception) {
                                            // 94
                                            return false; // 95
                                        } // 96
                                    }; // 97
                                    // 98
                                    // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.                         // 99
                                    if (Object.defineProperty) {
                                        // 100
                                        var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({}); // 101
                                        var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' || // 102
                                        doesGetOwnPropertyDescriptorWork(document.createElement('div')); // 103
                                        if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
                                            // 104
                                            var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor; // 105
                                        } // 106
                                    } // 107
                                    // 108
                                    if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
                                        // 109
                                        var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: '; // 110
                                        // 111
                                        /* eslint-disable no-proto */ // 112
                                        Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
                                            // 113
                                            if (isPrimitive(object)) {
                                                // 114
                                                throw new TypeError(ERR_NON_OBJECT + object); // 115
                                            } // 116
                                            // 117
                                            // make a valiant attempt to use the real getOwnPropertyDescriptor                                        // 118
                                            // for I8's DOM elements.                                                                                 // 119
                                            if (getOwnPropertyDescriptorFallback) {
                                                // 120
                                                try {
                                                    // 121
                                                    return getOwnPropertyDescriptorFallback.call(Object, object, property); // 122
                                                } catch (exception) {} // 123
                                                // try the shim if the real one doesn't work                                                      // 124
                                                // 125
                                            } // 126
                                            // 127
                                            var descriptor; // 128
                                            // 129
                                            // If object does not owns property return undefined immediately.                                         // 130
                                            if (!owns(object, property)) {
                                                // 131
                                                return descriptor; // 132
                                            } // 133
                                            // 134
                                            // If object has a property then it's for sure `configurable`, and                                        // 135
                                            // probably `enumerable`. Detect enumerability though.                                                    // 136
                                            descriptor = { // 137
                                                enumerable: isEnumerable(object, property), // 138
                                                configurable: true // 139
                                            }; // 140
                                            // 141
                                            // If JS engine supports accessor properties then property may be a                                       // 142
                                            // getter or setter.                                                                                      // 143
                                            if (supportsAccessors) {
                                                // 144
                                                // Unfortunately `__lookupGetter__` will return a getter even                                         // 145
                                                // if object has own non getter property along with a same named                                      // 146
                                                // inherited getter. To avoid misbehavior we temporary remove                                         // 147
                                                // `__proto__` so that `__lookupGetter__` will return getter only                                     // 148
                                                // if it's owned by an object.                                                                        // 149
                                                var prototype = object.__proto__; // 150
                                                var notPrototypeOfObject = object !== prototypeOfObject; // 151
                                                // avoid recursion problem, breaking in Opera Mini when                                               // 152
                                                // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')                                      // 153
                                                // or any other Object.prototype accessor                                                             // 154
                                                if (notPrototypeOfObject) {
                                                    // 155
                                                    object.__proto__ = prototypeOfObject; // 156
                                                } // 157
                                                // 158
                                                var getter = lookupGetter(object, property); // 159
                                                var setter = lookupSetter(object, property); // 160
                                                // 161
                                                if (notPrototypeOfObject) {
                                                    // 162
                                                    // Once we have getter and setter we can put values back.                                         // 163
                                                    object.__proto__ = prototype; // 164
                                                } // 165
                                                // 166
                                                if (getter || setter) {
                                                    // 167
                                                    if (getter) {
                                                        // 168
                                                        descriptor.get = getter; // 169
                                                    } // 170
                                                    if (setter) {
                                                        // 171
                                                        descriptor.set = setter; // 172
                                                    } // 173
                                                    // If it was accessor property we're done and return here                                         // 174
                                                    // in order to avoid adding `value` to the descriptor.                                            // 175
                                                    return descriptor; // 176
                                                } // 177
                                            } // 178
                                            // 179
                                            // If we got this far we know that object has an own property that is                                     // 180
                                            // not an accessor so we set it as a value and return descriptor.                                         // 181
                                            descriptor.value = object[property]; // 182
                                            descriptor.writable = true; // 183
                                            return descriptor; // 184
                                        }; // 185
                                        /* eslint-enable no-proto */ // 186
                                    } // 187
                                    // 188
                                    // ES5 15.2.3.4                                                                                                   // 189
                                    // http://es5.github.com/#x15.2.3.4                                                                               // 190
                                    if (!Object.getOwnPropertyNames) {
                                        // 191
                                        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
                                            // 192
                                            return Object.keys(object); // 193
                                        }; // 194
                                    } // 195
                                    // 196
                                    // ES5 15.2.3.5                                                                                                   // 197
                                    // http://es5.github.com/#x15.2.3.5                                                                               // 198
                                    if (!Object.create) {
                                        // 199
                                        // 200
                                        // Contributed by Brandon Benvie, October, 2012                                                               // 201
                                        var createEmpty; // 202
                                        var supportsProto = !({ __proto__: null } instanceof Object); // 203
                                        // the following produces false positives                                                 // 204
                                        // in Opera Mini => not a reliable check                                                  // 205
                                        // Object.prototype.__proto__ === null                                                    // 206
                                        // 207
                                        // Check for document.domain and active x support                                                             // 208
                                        // No need to use active x approach when document.domain is not set                                           // 209
                                        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 210
                                        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                 // 211
                                        /* global ActiveXObject */ // 212
                                        var shouldUseActiveX = function shouldUseActiveX() {
                                            // 213
                                            // return early if document.domain not set                                                                // 214
                                            if (!document.domain) {
                                                // 215
                                                return false; // 216
                                            } // 217
                                            // 218
                                            try {
                                                // 219
                                                return !!new ActiveXObject('htmlfile'); // 220
                                            } catch (exception) {
                                                // 221
                                                return false; // 222
                                            } // 223
                                        }; // 224
                                        // 225
                                        // This supports IE8 when document.domain is used                                                             // 226
                                        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 227
                                        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                 // 228
                                        var getEmptyViaActiveX = function getEmptyViaActiveX() {
                                            // 229
                                            var empty; // 230
                                            var xDoc; // 231
                                            // 232
                                            xDoc = new ActiveXObject('htmlfile'); // 233
                                            // 234
                                            var script = 'script'; // 235
                                            xDoc.write('<' + script + '></' + script + '>'); // 236
                                            xDoc.close(); // 237
                                            // 238
                                            empty = xDoc.parentWindow.Object.prototype; // 239
                                            xDoc = null; // 240
                                            // 241
                                            return empty; // 242
                                        }; // 243
                                        // 244
                                        // The original implementation using an iframe                                                                // 245
                                        // before the activex approach was added                                                                      // 246
                                        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 247
                                        var getEmptyViaIFrame = function getEmptyViaIFrame() {
                                            // 248
                                            var iframe = document.createElement('iframe'); // 249
                                            var parent = document.body || document.documentElement; // 250
                                            var empty; // 251
                                            // 252
                                            iframe.style.display = 'none'; // 253
                                            parent.appendChild(iframe); // 254
                                            /* eslint-disable no-script-url */ // 255
                                            iframe.src = 'javascript:'; // 256
                                            /* eslint-enable no-script-url */ // 257
                                            // 258
                                            empty = iframe.contentWindow.Object.prototype; // 259
                                            parent.removeChild(iframe); // 260
                                            iframe = null; // 261
                                            // 262
                                            return empty; // 263
                                        }; // 264
                                        // 265
                                        /* global document */ // 266
                                        if (supportsProto || typeof document === 'undefined') {
                                            // 267
                                            createEmpty = function () {
                                                // 268
                                                return { __proto__: null }; // 269
                                            }; // 270
                                        } else {
                                            // 271
                                            // In old IE __proto__ can't be used to manually set `null`, nor does                                     // 272
                                            // any other method exist to make an object that inherits from nothing,                                   // 273
                                            // aside from Object.prototype itself. Instead, create a new global                                       // 274
                                            // object and *steal* its Object.prototype and strip it bare. This is                                     // 275
                                            // used as the prototype to create nullary objects.                                                       // 276
                                            createEmpty = function () {
                                                // 277
                                                // Determine which approach to use                                                                    // 278
                                                // see https://github.com/es-shims/es5-shim/issues/150                                                // 279
                                                var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame(); // 280
                                                // 281
                                                delete empty.constructor; // 282
                                                delete empty.hasOwnProperty; // 283
                                                delete empty.propertyIsEnumerable; // 284
                                                delete empty.isPrototypeOf; // 285
                                                delete empty.toLocaleString; // 286
                                                delete empty.toString; // 287
                                                delete empty.valueOf; // 288
                                                // 289
                                                var Empty = function Empty() {}; // 290
                                                Empty.prototype = empty; // 291
                                                // short-circuit future calls                                                                         // 292
                                                createEmpty = function () {
                                                    // 293
                                                    return new Empty(); // 294
                                                }; // 295
                                                return new Empty(); // 296
                                            }; // 297
                                        } // 298
                                        // 299
                                        Object.create = function create(prototype, properties) {
                                            // 300
                                            // 301
                                            var object; // 302
                                            var Type = function Type() {}; // An empty constructor.                                                   // 303
                                            // 304
                                            if (prototype === null) {
                                                // 305
                                                object = createEmpty(); // 306
                                            } else {
                                                // 307
                                                if (prototype !== null && isPrimitive(prototype)) {
                                                    // 308
                                                    // In the native implementation `parent` can be `null`                                            // 309
                                                    // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)                               // 310
                                                    // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`                      // 311
                                                    // like they are in modern browsers. Using `Object.create` on DOM elements                        // 312
                                                    // is...err...probably inappropriate, but the native version allows for it.                       // 313
                                                    throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome      // 314
                                                } // 315
                                                Type.prototype = prototype; // 316
                                                object = new Type(); // 317
                                                // IE has no built-in implementation of `Object.getPrototypeOf`                                       // 318
                                                // neither `__proto__`, but this manually setting `__proto__` will                                    // 319
                                                // guarantee that `Object.getPrototypeOf` will work as expected with                                  // 320
                                                // objects created using `Object.create`                                                              // 321
                                                /* eslint-disable no-proto */ // 322
                                                object.__proto__ = prototype; // 323
                                                /* eslint-enable no-proto */ // 324
                                            } // 325
                                            // 326
                                            if (properties !== void 0) {
                                                // 327
                                                Object.defineProperties(object, properties); // 328
                                            } // 329
                                            // 330
                                            return object; // 331
                                        }; // 332
                                    } // 333
                                    // 334
                                    // ES5 15.2.3.6                                                                                                   // 335
                                    // http://es5.github.com/#x15.2.3.6                                                                               // 336
                                    // 337
                                    // Patch for WebKit and IE8 standard mode                                                                         // 338
                                    // Designed by hax <hax.github.com>                                                                               // 339
                                    // related issue: https://github.com/es-shims/es5-shim/issues#issue/5                                             // 340
                                    // IE8 Reference:                                                                                                 // 341
                                    //     http://msdn.microsoft.com/en-us/library/dd282900.aspx                                                      // 342
                                    //     http://msdn.microsoft.com/en-us/library/dd229916.aspx                                                      // 343
                                    // WebKit Bugs:                                                                                                   // 344
                                    //     https://bugs.webkit.org/show_bug.cgi?id=36423                                                              // 345
                                    // 346
                                    var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
                                        // 347
                                        try {
                                            // 348
                                            Object.defineProperty(object, 'sentinel', {}); // 349
                                            return 'sentinel' in object; // 350
                                        } catch (exception) {
                                            // 351
                                            return false; // 352
                                        } // 353
                                    }; // 354
                                    // 355
                                    // check whether defineProperty works if it's given. Otherwise,                                                   // 356
                                    // shim partially.                                                                                                // 357
                                    if (Object.defineProperty) {
                                        // 358
                                        var definePropertyWorksOnObject = doesDefinePropertyWork({}); // 359
                                        var definePropertyWorksOnDom = typeof document === 'undefined' || // 360
                                        doesDefinePropertyWork(document.createElement('div')); // 361
                                        if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
                                            // 362
                                            var definePropertyFallback = Object.defineProperty,
                                                // 363
                                            definePropertiesFallback = Object.defineProperties; // 364
                                        } // 365
                                    } // 366
                                    // 367
                                    if (!Object.defineProperty || definePropertyFallback) {
                                        // 368
                                        var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: '; // 369
                                        var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: '; // 370
                                        var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine'; // 371
                                        // 372
                                        Object.defineProperty = function defineProperty(object, property, descriptor) {
                                            // 373
                                            if (isPrimitive(object)) {
                                                // 374
                                                throw new TypeError(ERR_NON_OBJECT_TARGET + object); // 375
                                            } // 376
                                            if (isPrimitive(descriptor)) {
                                                // 377
                                                throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor); // 378
                                            } // 379
                                            // make a valiant attempt to use the real defineProperty                                                  // 380
                                            // for I8's DOM elements.                                                                                 // 381
                                            if (definePropertyFallback) {
                                                // 382
                                                try {
                                                    // 383
                                                    return definePropertyFallback.call(Object, object, property, descriptor); // 384
                                                } catch (exception) {} // 385
                                                // try the shim if the real one doesn't work                                                      // 386
                                                // 387
                                            } // 388
                                            // 389
                                            // If it's a data property.                                                                               // 390
                                            if ('value' in descriptor) {
                                                // 391
                                                // fail silently if 'writable', 'enumerable', or 'configurable'                                       // 392
                                                // are requested but not supported                                                                    // 393
                                                /*                                                                                                    // 394
                                                // alternate approach:                                                                                // 395
                                                if ( // can't implement these features; allow false but not true                                      // 396
                                                    ('writable' in descriptor && !descriptor.writable) ||                                             // 397
                                                    ('enumerable' in descriptor && !descriptor.enumerable) ||                                         // 398
                                                    ('configurable' in descriptor && !descriptor.configurable)                                        // 399
                                                ))                                                                                                    // 400
                                                    throw new RangeError(                                                                             // 401
                                                        'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
                                                    );                                                                                                // 403
                                                */ // 404
                                                // 405
                                                if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                                                    // 406
                                                    // As accessors are supported only on engines implementing                                        // 407
                                                    // `__proto__` we can safely override `__proto__` while defining                                  // 408
                                                    // a property to make sure that we don't hit an inherited                                         // 409
                                                    // accessor.                                                                                      // 410
                                                    /* eslint-disable no-proto */ // 411
                                                    var prototype = object.__proto__; // 412
                                                    object.__proto__ = prototypeOfObject; // 413
                                                    // Deleting a property anyway since getter / setter may be                                        // 414
                                                    // defined on object itself.                                                                      // 415
                                                    delete object[property]; // 416
                                                    object[property] = descriptor.value; // 417
                                                    // Setting original `__proto__` back now.                                                         // 418
                                                    object.__proto__ = prototype; // 419
                                                    /* eslint-enable no-proto */ // 420
                                                } else {
                                                    // 421
                                                    object[property] = descriptor.value; // 422
                                                } // 423
                                            } else {
                                                // 424
                                                var hasGetter = 'get' in descriptor; // 425
                                                var hasSetter = 'set' in descriptor; // 426
                                                if (!supportsAccessors && (hasGetter || hasSetter)) {
                                                    // 427
                                                    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED); // 428
                                                } // 429
                                                // If we got that far then getters and setters can be defined !!                                      // 430
                                                if (hasGetter) {
                                                    // 431
                                                    defineGetter(object, property, descriptor.get); // 432
                                                } // 433
                                                if (hasSetter) {
                                                    // 434
                                                    defineSetter(object, property, descriptor.set); // 435
                                                } // 436
                                            } // 437
                                            return object; // 438
                                        }; // 439
                                    } // 440
                                    // 441
                                    // ES5 15.2.3.7                                                                                                   // 442
                                    // http://es5.github.com/#x15.2.3.7                                                                               // 443
                                    if (!Object.defineProperties || definePropertiesFallback) {
                                        // 444
                                        Object.defineProperties = function defineProperties(object, properties) {
                                            // 445
                                            // make a valiant attempt to use the real defineProperties                                                // 446
                                            if (definePropertiesFallback) {
                                                // 447
                                                try {
                                                    // 448
                                                    return definePropertiesFallback.call(Object, object, properties); // 449
                                                } catch (exception) {} // 450
                                                // try the shim if the real one doesn't work                                                      // 451
                                                // 452
                                            } // 453
                                            // 454
                                            Object.keys(properties).forEach(function (property) {
                                                // 455
                                                if (property !== '__proto__') {
                                                    // 456
                                                    Object.defineProperty(object, property, properties[property]); // 457
                                                } // 458
                                            }); // 459
                                            return object; // 460
                                        }; // 461
                                    } // 462
                                    // 463
                                    // ES5 15.2.3.8                                                                                                   // 464
                                    // http://es5.github.com/#x15.2.3.8                                                                               // 465
                                    if (!Object.seal) {
                                        // 466
                                        Object.seal = function seal(object) {
                                            // 467
                                            if (Object(object) !== object) {
                                                // 468
                                                throw new TypeError('Object.seal can only be called on Objects.'); // 469
                                            } // 470
                                            // this is misleading and breaks feature-detection, but                                                   // 471
                                            // allows "securable" code to "gracefully" degrade to working                                             // 472
                                            // but insecure code.                                                                                     // 473
                                            return object; // 474
                                        }; // 475
                                    } // 476
                                    // 477
                                    // ES5 15.2.3.9                                                                                                   // 478
                                    // http://es5.github.com/#x15.2.3.9                                                                               // 479
                                    if (!Object.freeze) {
                                        // 480
                                        Object.freeze = function freeze(object) {
                                            // 481
                                            if (Object(object) !== object) {
                                                // 482
                                                throw new TypeError('Object.freeze can only be called on Objects.'); // 483
                                            } // 484
                                            // this is misleading and breaks feature-detection, but                                                   // 485
                                            // allows "securable" code to "gracefully" degrade to working                                             // 486
                                            // but insecure code.                                                                                     // 487
                                            return object; // 488
                                        }; // 489
                                    } // 490
                                    // 491
                                    // detect a Rhino bug and patch it                                                                                // 492
                                    try {
                                        // 493
                                        Object.freeze(function () {}); // 494
                                    } catch (exception) {
                                        // 495
                                        Object.freeze = function (freezeObject) {
                                            // 496
                                            return function freeze(object) {
                                                // 497
                                                if (typeof object === 'function') {
                                                    // 498
                                                    return object; // 499
                                                } else {
                                                    // 500
                                                    return freezeObject(object); // 501
                                                } // 502
                                            }; // 503
                                        }(Object.freeze); // 504
                                    } // 505
                                    // 506
                                    // ES5 15.2.3.10                                                                                                  // 507
                                    // http://es5.github.com/#x15.2.3.10                                                                              // 508
                                    if (!Object.preventExtensions) {
                                        // 509
                                        Object.preventExtensions = function preventExtensions(object) {
                                            // 510
                                            if (Object(object) !== object) {
                                                // 511
                                                throw new TypeError('Object.preventExtensions can only be called on Objects.'); // 512
                                            } // 513
                                            // this is misleading and breaks feature-detection, but                                                   // 514
                                            // allows "securable" code to "gracefully" degrade to working                                             // 515
                                            // but insecure code.                                                                                     // 516
                                            return object; // 517
                                        }; // 518
                                    } // 519
                                    // 520
                                    // ES5 15.2.3.11                                                                                                  // 521
                                    // http://es5.github.com/#x15.2.3.11                                                                              // 522
                                    if (!Object.isSealed) {
                                        // 523
                                        Object.isSealed = function isSealed(object) {
                                            // 524
                                            if (Object(object) !== object) {
                                                // 525
                                                throw new TypeError('Object.isSealed can only be called on Objects.'); // 526
                                            } // 527
                                            return false; // 528
                                        }; // 529
                                    } // 530
                                    // 531
                                    // ES5 15.2.3.12                                                                                                  // 532
                                    // http://es5.github.com/#x15.2.3.12                                                                              // 533
                                    if (!Object.isFrozen) {
                                        // 534
                                        Object.isFrozen = function isFrozen(object) {
                                            // 535
                                            if (Object(object) !== object) {
                                                // 536
                                                throw new TypeError('Object.isFrozen can only be called on Objects.'); // 537
                                            } // 538
                                            return false; // 539
                                        }; // 540
                                    } // 541
                                    // 542
                                    // ES5 15.2.3.13                                                                                                  // 543
                                    // http://es5.github.com/#x15.2.3.13                                                                              // 544
                                    if (!Object.isExtensible) {
                                        // 545
                                        Object.isExtensible = function isExtensible(object) {
                                            // 546
                                            // 1. If Type(O) is not Object throw a TypeError exception.                                               // 547
                                            if (Object(object) !== object) {
                                                // 548
                                                throw new TypeError('Object.isExtensible can only be called on Objects.'); // 549
                                            } // 550
                                            // 2. Return the Boolean value of the [[Extensible]] internal property of O.                              // 551
                                            var name = ''; // 552
                                            while (owns(object, name)) {
                                                // 553
                                                name += '?'; // 554
                                            } // 555
                                            object[name] = true; // 556
                                            var returnValue = owns(object, name); // 557
                                            delete object[name]; // 558
                                            return returnValue; // 559
                                        }; // 560
                                    } // 561
                                    // 562
                                }); // 563
                                // 564
                                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            } } } } } } }, {
        "extensions": [".js", ".json"]
    });
    var _exports = _require2("./node_modules/meteor/es5-shim/client.js");

    /* Exports */
    if (typeof Package === 'undefined') Package = {};
    Package['es5-shim'] = _exports;
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;

  /* Package-scope variables */
  var Promise;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "promise": { "client.js": function (_require, _exports) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/client.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("meteor-promise").makeCompatible( // 1
            _exports.Promise = _require("./common.js").Promise // 2
            ); // 3
            // 4
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require2, _exports2) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/common.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = this; // 1
            // 2
            if (typeof global.Promise === "function") {
              // 3
              _exports2.Promise = global.Promise; // 4
            } else {
              // 5
              _exports2.Promise = _require2("promise/lib/es6-extensions"); // 6
            } // 7
            // 8
            _exports2.Promise.prototype.done = function (onFulfilled, onRejected) {
              // 9
              var self = this; // 10
              // 11
              if (arguments.length > 0) {
                // 12
                self = this.then.apply(this, arguments); // 13
              } // 14
              // 15
              self.then(null, function (err) {
                // 16
                Meteor._setImmediate(function () {
                  // 17
                  throw err; // 18
                }); // 19
              }); // 20
            }; // 21
            // 22
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function (_require4, _exports4) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // ../npm/node_modules/meteor-promise/package.json                                                                  //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _exports4.name = "meteor-promise"; // 1
                _exports4.version = "0.8.4"; // 2
                _exports4.browser = "promise_client.js"; // 3
                _exports4.main = "promise_server.js"; // 4
                // 5
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function (_require5, _exports5) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client.js                                        //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _exports5.makeCompatible = function (Promise) {
                  // 1
                  var es6PromiseThen = Promise.prototype.then; // 2
                  // 3
                  Promise.prototype.then = function (onResolved, onRejected) {
                    // 4
                    if (typeof Meteor === "object" && // 5
                    typeof Meteor.bindEnvironment === "function") {
                      // 6
                      return es6PromiseThen.call( // 7
                      this, // 8
                      onResolved && Meteor.bindEnvironment(onResolved, raise), // 9
                      onRejected && Meteor.bindEnvironment(onRejected, raise) // 10
                      ); // 11
                    } // 12
                    // 13
                    return es6PromiseThen.call(this, onResolved, onRejected); // 14
                  }; // 15
                }; // 16
                // 17
                function raise(exception) {
                  // 18
                  throw exception; // 19
                } // 20
                // 21
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "promise": { "lib": { "es6-extensions.js": function (_require6, _exports6, _module) {

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                  //
                  // node_modules/meteor/promise/node_modules/promise/lib/es6-extensions.js                                           //
                  //                                                                                                                  //
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  'use strict'; // 1
                  // 2
                  //This file contains the ES6 extensions to the core Promises/A+ API                                                 // 3
                  // 4

                  var Promise = _require6('./core.js'); // 5
                  // 6
                  _module.exports = Promise; // 7
                  // 8
                  /* Static Functions */ // 9
                  // 10
                  var TRUE = valuePromise(true); // 11
                  var FALSE = valuePromise(false); // 12
                  var NULL = valuePromise(null); // 13
                  var UNDEFINED = valuePromise(undefined); // 14
                  var ZERO = valuePromise(0); // 15
                  var EMPTYSTRING = valuePromise(''); // 16
                  // 17
                  function valuePromise(value) {
                    // 18
                    var p = new Promise(Promise._61); // 19
                    p._81 = 1; // 20
                    p._65 = value; // 21
                    return p; // 22
                  } // 23
                  Promise.resolve = function (value) {
                    // 24
                    if (value instanceof Promise) return value; // 25
                    // 26
                    if (value === null) return NULL; // 27
                    if (value === undefined) return UNDEFINED; // 28
                    if (value === true) return TRUE; // 29
                    if (value === false) return FALSE; // 30
                    if (value === 0) return ZERO; // 31
                    if (value === '') return EMPTYSTRING; // 32
                    // 33
                    if (typeof value === 'object' || typeof value === 'function') {
                      // 34
                      try {
                        // 35
                        var then = value.then; // 36
                        if (typeof then === 'function') {
                          // 37
                          return new Promise(then.bind(value)); // 38
                        } // 39
                      } catch (ex) {
                        // 40
                        return new Promise(function (resolve, reject) {
                          // 41
                          reject(ex); // 42
                        }); // 43
                      } // 44
                    } // 45
                    return valuePromise(value); // 46
                  }; // 47
                  // 48
                  Promise.all = function (arr) {
                    // 49
                    var args = Array.prototype.slice.call(arr); // 50
                    // 51
                    return new Promise(function (resolve, reject) {
                      // 52
                      if (args.length === 0) return resolve([]); // 53
                      var remaining = args.length; // 54
                      function res(i, val) {
                        // 55
                        if (val && (typeof val === 'object' || typeof val === 'function')) {
                          // 56
                          if (val instanceof Promise && val.then === Promise.prototype.then) {
                            // 57
                            while (val._81 === 3) {
                              // 58
                              val = val._65; // 59
                            } // 60
                            if (val._81 === 1) return res(i, val._65); // 61
                            if (val._81 === 2) reject(val._65); // 62
                            val.then(function (val) {
                              // 63
                              res(i, val); // 64
                            }, reject); // 65
                            return; // 66
                          } else {
                            // 67
                            var then = val.then; // 68
                            if (typeof then === 'function') {
                              // 69
                              var p = new Promise(then.bind(val)); // 70
                              p.then(function (val) {
                                // 71
                                res(i, val); // 72
                              }, reject); // 73
                              return; // 74
                            } // 75
                          } // 76
                        } // 77
                        args[i] = val; // 78
                        if (--remaining === 0) {
                          // 79
                          resolve(args); // 80
                        } // 81
                      } // 82
                      for (var i = 0; i < args.length; i++) {
                        // 83
                        res(i, args[i]); // 84
                      } // 85
                    }); // 86
                  }; // 87
                  // 88
                  Promise.reject = function (value) {
                    // 89
                    return new Promise(function (resolve, reject) {
                      // 90
                      reject(value); // 91
                    }); // 92
                  }; // 93
                  // 94
                  Promise.race = function (values) {
                    // 95
                    return new Promise(function (resolve, reject) {
                      // 96
                      values.forEach(function (value) {
                        // 97
                        Promise.resolve(value).then(resolve, reject); // 98
                      }); // 99
                    }); // 100
                  }; // 101
                  // 102
                  /* Prototype Methods */ // 103
                  // 104
                  Promise.prototype['catch'] = function (onRejected) {
                    // 105
                    return this.then(null, onRejected); // 106
                  }; // 107
                  // 108
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "core.js": function (_require7, _exports7, _module2) {

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                  //
                  // node_modules/meteor/promise/node_modules/promise/lib/core.js                                                     //
                  //                                                                                                                  //
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  'use strict'; // 1
                  // 2

                  var asap = _require7('asap/raw'); // 3
                  // 4
                  function noop() {} // 5
                  // 6
                  // States:                                                                                                          // 7
                  //                                                                                                                  // 8
                  // 0 - pending                                                                                                      // 9
                  // 1 - fulfilled with _value                                                                                        // 10
                  // 2 - rejected with _value                                                                                         // 11
                  // 3 - adopted the state of another promise, _value                                                                 // 12
                  //                                                                                                                  // 13
                  // once the state is no longer pending (0) it is immutable                                                          // 14
                  // 15
                  // All `_` prefixed properties will be reduced to `_{random number}`                                                // 16
                  // at build time to obfuscate them and discourage their use.                                                        // 17
                  // We don't use symbols or Object.defineProperty to fully hide them                                                 // 18
                  // because the performance isn't good enough.                                                                       // 19
                  // 20
                  // 21
                  // to avoid using try/catch inside critical functions, we                                                           // 22
                  // extract them to here.                                                                                            // 23
                  var LAST_ERROR = null; // 24
                  var IS_ERROR = {}; // 25
                  function getThen(obj) {
                    // 26
                    try {
                      // 27
                      return obj.then; // 28
                    } catch (ex) {
                      // 29
                      LAST_ERROR = ex; // 30
                      return IS_ERROR; // 31
                    } // 32
                  } // 33
                  // 34
                  function tryCallOne(fn, a) {
                    // 35
                    try {
                      // 36
                      return fn(a); // 37
                    } catch (ex) {
                      // 38
                      LAST_ERROR = ex; // 39
                      return IS_ERROR; // 40
                    } // 41
                  } // 42
                  function tryCallTwo(fn, a, b) {
                    // 43
                    try {
                      // 44
                      fn(a, b); // 45
                    } catch (ex) {
                      // 46
                      LAST_ERROR = ex; // 47
                      return IS_ERROR; // 48
                    } // 49
                  } // 50
                  // 51
                  _module2.exports = Promise; // 52
                  // 53
                  function Promise(fn) {
                    // 54
                    if (typeof this !== 'object') {
                      // 55
                      throw new TypeError('Promises must be constructed via new'); // 56
                    } // 57
                    if (typeof fn !== 'function') {
                      // 58
                      throw new TypeError('not a function'); // 59
                    } // 60
                    this._45 = 0; // 61
                    this._81 = 0; // 62
                    this._65 = null; // 63
                    this._54 = null; // 64
                    if (fn === noop) return; // 65
                    doResolve(fn, this); // 66
                  } // 67
                  Promise._10 = null; // 68
                  Promise._97 = null; // 69
                  Promise._61 = noop; // 70
                  // 71
                  Promise.prototype.then = function (onFulfilled, onRejected) {
                    // 72
                    if (this.constructor !== Promise) {
                      // 73
                      return safeThen(this, onFulfilled, onRejected); // 74
                    } // 75
                    var res = new Promise(noop); // 76
                    handle(this, new Handler(onFulfilled, onRejected, res)); // 77
                    return res; // 78
                  }; // 79
                  // 80
                  function safeThen(self, onFulfilled, onRejected) {
                    // 81
                    return new self.constructor(function (resolve, reject) {
                      // 82
                      var res = new Promise(noop); // 83
                      res.then(resolve, reject); // 84
                      handle(self, new Handler(onFulfilled, onRejected, res)); // 85
                    }); // 86
                  }; // 87
                  function handle(self, deferred) {
                    // 88
                    while (self._81 === 3) {
                      // 89
                      self = self._65; // 90
                    } // 91
                    if (Promise._10) {
                      // 92
                      Promise._10(self); // 93
                    } // 94
                    if (self._81 === 0) {
                      // 95
                      if (self._45 === 0) {
                        // 96
                        self._45 = 1; // 97
                        self._54 = deferred; // 98
                        return; // 99
                      } // 100
                      if (self._45 === 1) {
                        // 101
                        self._45 = 2; // 102
                        self._54 = [self._54, deferred]; // 103
                        return; // 104
                      } // 105
                      self._54.push(deferred); // 106
                      return; // 107
                    } // 108
                    handleResolved(self, deferred); // 109
                  } // 110
                  // 111
                  function handleResolved(self, deferred) {
                    // 112
                    asap(function () {
                      // 113
                      var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected; // 114
                      if (cb === null) {
                        // 115
                        if (self._81 === 1) {
                          // 116
                          resolve(deferred.promise, self._65); // 117
                        } else {
                          // 118
                          reject(deferred.promise, self._65); // 119
                        } // 120
                        return; // 121
                      } // 122
                      var ret = tryCallOne(cb, self._65); // 123
                      if (ret === IS_ERROR) {
                        // 124
                        reject(deferred.promise, LAST_ERROR); // 125
                      } else {
                        // 126
                        resolve(deferred.promise, ret); // 127
                      } // 128
                    }); // 129
                  } // 130
                  function resolve(self, newValue) {
                    // 131
                    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
                    if (newValue === self) {
                      // 133
                      return reject( // 134
                      self, // 135
                      new TypeError('A promise cannot be resolved with itself.') // 136
                      ); // 137
                    } // 138
                    if ( // 139
                    newValue && ( // 140
                    typeof newValue === 'object' || typeof newValue === 'function') // 141
                    ) {
                        // 142
                        var then = getThen(newValue); // 143
                        if (then === IS_ERROR) {
                          // 144
                          return reject(self, LAST_ERROR); // 145
                        } // 146
                        if ( // 147
                        then === self.then && // 148
                        newValue instanceof Promise // 149
                        ) {
                            // 150
                            self._81 = 3; // 151
                            self._65 = newValue; // 152
                            finale(self); // 153
                            return; // 154
                          } else if (typeof then === 'function') {
                          // 155
                          doResolve(then.bind(newValue), self); // 156
                          return; // 157
                        } // 158
                      } // 159
                    self._81 = 1; // 160
                    self._65 = newValue; // 161
                    finale(self); // 162
                  } // 163
                  // 164
                  function reject(self, newValue) {
                    // 165
                    self._81 = 2; // 166
                    self._65 = newValue; // 167
                    if (Promise._97) {
                      // 168
                      Promise._97(self, newValue); // 169
                    } // 170
                    finale(self); // 171
                  } // 172
                  function finale(self) {
                    // 173
                    if (self._45 === 1) {
                      // 174
                      handle(self, self._54); // 175
                      self._54 = null; // 176
                    } // 177
                    if (self._45 === 2) {
                      // 178
                      for (var i = 0; i < self._54.length; i++) {
                        // 179
                        handle(self, self._54[i]); // 180
                      } // 181
                      self._54 = null; // 182
                    } // 183
                  } // 184
                  // 185
                  function Handler(onFulfilled, onRejected, promise) {
                    // 186
                    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null; // 187
                    this.onRejected = typeof onRejected === 'function' ? onRejected : null; // 188
                    this.promise = promise; // 189
                  } // 190
                  // 191
                  /**                                                                                                                 // 192
                   * Take a potentially misbehaving resolver function and make sure                                                   // 193
                   * onFulfilled and onRejected are only called once.                                                                 // 194
                   *                                                                                                                  // 195
                   * Makes no guarantees about asynchrony.                                                                            // 196
                   */ // 197
                  function doResolve(fn, promise) {
                    // 198
                    var done = false; // 199
                    var res = tryCallTwo(fn, function (value) {
                      // 200
                      if (done) return; // 201
                      done = true; // 202
                      resolve(promise, value); // 203
                    }, function (reason) {
                      // 204
                      if (done) return; // 205
                      done = true; // 206
                      reject(promise, reason); // 207
                    }); // 208
                    if (!done && res === IS_ERROR) {
                      // 209
                      done = true; // 210
                      reject(promise, LAST_ERROR); // 211
                    } // 212
                  } // 213
                  // 214
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } }, "asap": { "raw.js": function (_require8, _exports8, _module3) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // node_modules/meteor/promise/node_modules/asap/raw.js                                                             //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                "use strict"; // 1
                // 2

                var domain; // The domain module is executed on demand                                                              // 3
                var hasSetImmediate = typeof setImmediate === "function"; // 4
                // 5
                // Use the fastest means possible to execute a task in its own turn, with                                           // 6
                // priority over other events including network IO events in Node.js.                                               // 7
                //                                                                                                                  // 8
                // An exception thrown by a task will permanently interrupt the processing of                                       // 9
                // subsequent tasks. The higher level `asap` function ensures that if an                                            // 10
                // exception is thrown by a task, that the task queue will continue flushing as                                     // 11
                // soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 12
                // either ensure that no exceptions are thrown from your task, or to manually                                       // 13
                // call `rawAsap.requestFlush` if an exception is thrown.                                                           // 14
                _module3.exports = rawAsap; // 15
                function rawAsap(task) {
                  // 16
                  if (!queue.length) {
                    // 17
                    requestFlush(); // 18
                    flushing = true; // 19
                  } // 20
                  // Avoids a function call                                                                                       // 21
                  queue[queue.length] = task; // 22
                } // 23
                // 24
                var queue = []; // 25
                // Once a flush has been requested, no further calls to `requestFlush` are                                          // 26
                // necessary until the next `flush` completes.                                                                      // 27
                var flushing = false; // 28
                // The position of the next task to execute in the task queue. This is                                              // 29
                // preserved between calls to `flush` so that it can be resumed if                                                  // 30
                // a task throws an exception.                                                                                      // 31
                var index = 0; // 32
                // If a task schedules additional tasks recursively, the task queue can grow                                        // 33
                // unbounded. To prevent memory excaustion, the task queue will periodically                                        // 34
                // truncate already-completed tasks.                                                                                // 35
                var capacity = 1024; // 36
                // 37
                // The flush function processes all tasks that have been scheduled with                                             // 38
                // `rawAsap` unless and until one of those tasks throws an exception.                                               // 39
                // If a task throws an exception, `flush` ensures that its state will remain                                        // 40
                // consistent and will resume where it left off when called again.                                                  // 41
                // However, `flush` does not make any arrangements to be called again if an                                         // 42
                // exception is thrown.                                                                                             // 43
                function flush() {
                  // 44
                  while (index < queue.length) {
                    // 45
                    var currentIndex = index; // 46
                    // Advance the index before calling the task. This ensures that we will                                     // 47
                    // begin flushing on the next task the task throws an error.                                                // 48
                    index = index + 1; // 49
                    queue[currentIndex].call(); // 50
                    // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 51
                    // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 52
                    // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 53
                    // shift tasks off the queue after they have been executed.                                                 // 54
                    // Instead, we periodically shift 1024 tasks off the queue.                                                 // 55
                    if (index > capacity) {
                      // 56
                      // Manually shift all values starting at the index back to the                                          // 57
                      // beginning of the queue.                                                                              // 58
                      for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                        // 59
                        queue[scan] = queue[scan + index]; // 60
                      } // 61
                      queue.length -= index; // 62
                      index = 0; // 63
                    } // 64
                  } // 65
                  queue.length = 0; // 66
                  index = 0; // 67
                  flushing = false; // 68
                } // 69
                // 70
                rawAsap.requestFlush = requestFlush; // 71
                function requestFlush() {
                  // 72
                  // Ensure flushing is not bound to any domain.                                                                  // 73
                  // It is not sufficient to exit the domain, because domains exist on a stack.                                   // 74
                  // To execute code outside of any domain, the following dance is necessary.                                     // 75
                  var parentDomain = process.domain; // 76
                  if (parentDomain) {
                    // 77
                    if (!domain) {
                      // 78
                      // Lazy execute the domain module.                                                                      // 79
                      // Only employed if the user elects to use domains.                                                     // 80
                      domain = _require8("domain"); // 81
                    } // 82
                    domain.active = process.domain = null; // 83
                  } // 84
                  // 85
                  // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`                                     // 86
                  // cannot handle recursion.                                                                                     // 87
                  // `requestFlush` will only be called recursively from `asap.js`, to resume                                     // 88
                  // flushing after an error is thrown into a domain.                                                             // 89
                  // Conveniently, `setImmediate` was introduced in the same version                                              // 90
                  // `process.nextTick` started throwing recursion errors.                                                        // 91
                  if (flushing && hasSetImmediate) {
                    // 92
                    setImmediate(flush); // 93
                  } else {
                    // 94
                    process.nextTick(flush); // 95
                  } // 96
                  // 97
                  if (parentDomain) {
                    // 98
                    domain.active = process.domain = parentDomain; // 99
                  } // 100
                } // 101
                // 102
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports3 = _require3("./node_modules/meteor/promise/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.promise = _exports3, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var meteorBabelHelpers;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function (_require, _exports) {

            ////////////////////////////////////////////////////////////////////////////////
            //                                                                            //
            // packages/babel-runtime/babel-runtime.js                                    //
            //                                                                            //
            ////////////////////////////////////////////////////////////////////////////////
            //
            _exports.meteorBabelHelpers = _require("meteor-babel-helpers"); // 1
            // 2
            // Returns true if a given absolute identifier will be provided at runtime    // 3
            // by the babel-runtime package.                                              // 4
            _exports.checkHelper = function checkHelper(id) {
              // 5
              // There used to be more complicated logic here, when the babel-runtime     // 6
              // package provided helper implementations of its own, but now this         // 7
              // function exists just for backwards compatibility.                        // 8
              return false; // 9
            }; // 10
            // 11
            try {
              // 12
              var regeneratorRuntime = _require("babel-runtime/regenerator"); // 13
            } catch (e) {
              // 14
              throw new Error([// 15
              "The babel-runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", // 17
              "", // 18
              "  meteor npm install --save babel-runtime", // 19
              "" // 20
              ].join("\n")); // 21
            } // 22
            // 23
            if (regeneratorRuntime && // 24
            typeof Promise === "function" && // 25
            typeof Promise.asyncApply === "function") {
              // 26
              // If Promise.asyncApply is defined, use it to wrap calls to                // 27
              // runtime.async so that the entire async function will run in its own      // 28
              // Fiber, not just the code that comes after the first await.               // 29
              var realAsync = regeneratorRuntime.async; // 30
              regeneratorRuntime.async = function () {
                // 31
                return Promise.asyncApply(realAsync, regeneratorRuntime, arguments); // 32
              }; // 33
            } // 34
            // 35
            ////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-babel-helpers": { "package.json": function (_require3, _exports3) {

                ////////////////////////////////////////////////////////////////////////////////
                //                                                                            //
                // ../npm/node_modules/meteor-babel-helpers/package.json                      //
                //                                                                            //
                ////////////////////////////////////////////////////////////////////////////////
                //
                _exports3.name = "meteor-babel-helpers"; // 1
                _exports3.version = "0.0.3"; // 2
                _exports3.main = "index.js"; // 3
                // 4
                ////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require4, _exports4, _module) {

                ////////////////////////////////////////////////////////////////////////////////
                //                                                                            //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index. //
                //                                                                            //
                ////////////////////////////////////////////////////////////////////////////////
                //
                function canDefineNonEnumerableProperties() {
                  // 1
                  var testObj = {}; // 2
                  var testPropName = "t"; // 3
                  // 4
                  try {
                    // 5
                    Object.defineProperty(testObj, testPropName, { // 6
                      enumerable: false, // 7
                      value: testObj // 8
                    }); // 9
                    // 10
                    for (var k in testObj) {
                      // 11
                      if (k === testPropName) {
                        // 12
                        return false; // 13
                      } // 14
                    } // 15
                  } catch (e) {
                    // 16
                    return false; // 17
                  } // 18
                  // 19
                  return testObj[testPropName] === testObj; // 20
                } // 21
                // 22
                function sanitizeEasy(value) {
                  // 23
                  return value; // 24
                } // 25
                // 26
                function sanitizeHard(obj) {
                  // 27
                  if (Array.isArray(obj)) {
                    // 28
                    var newObj = {}; // 29
                    var keys = Object.keys(obj); // 30
                    var keyCount = keys.length; // 31
                    for (var i = 0; i < keyCount; ++i) {
                      // 32
                      var key = keys[i]; // 33
                      newObj[key] = obj[key]; // 34
                    } // 35
                    return newObj; // 36
                  } // 37
                  // 38
                  return obj; // 39
                } // 40
                // 41
                meteorBabelHelpers = _module.exports = { // 42
                  // Meteor-specific runtime helper for wrapping the object of for-in         // 43
                  // loops, so that inherited Array methods defined by es5-shim can be        // 44
                  // ignored in browsers where they cannot be defined as non-enumerable.      // 45
                  sanitizeForInObject: canDefineNonEnumerableProperties() // 46
                  ? sanitizeEasy // 47
                  : sanitizeHard, // 48
                  // 49
                  // Exposed so that we can test sanitizeForInObject in environments that     // 50
                  // support defining non-enumerable properties.                              // 51
                  _sanitizeForInObjectHard: sanitizeHard // 52
                }; // 53
                // 54
                ////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['babel-runtime'] = _exports2, {
    meteorBabelHelpers: meteorBabelHelpers
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Symbol, Map, Set;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "runtime.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////
            //                                                                      //
            // packages/ecmascript-runtime-client/runtime.js                        //
            //                                                                      //
            //////////////////////////////////////////////////////////////////////////
            //
            try {
              // 1
              _require("core-js/modules/es6.symbol"); // 2
              _require("core-js/modules/es6.map"); // 3
              _require("core-js/modules/es6.set"); // 4
              // 5
              var core = function () {
                // 6
                try {
                  // 7
                  return _require("core-js/modules/_core"); // 8
                } catch (e) {
                  // 9
                  // Older versions of core-js had a different file layout.         // 10
                  return _require("core-js/modules/$.core"); // 11
                } // 12
              }(); // 13
              // 14
            } catch (e) {
              // 15
              throw new Error([// 16
              "The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", // 18
              "", // 19
              "  meteor npm install --save core-js", // 20
              "" // 21
              ].join("\n")); // 22
            } // 23
            // 24
            Symbol = _exports.Symbol = core.Symbol; // 25
            Map = _exports.Map = core.Map; // 26
            Set = _exports.Set = core.Set; // 27
            // 28
            // ECMAScript 2015 polyfills.                                           // 29
            _require("core-js/es6/array"); // 30
            _require("core-js/es6/function"); // 31
            _require("core-js/es6/math"); // 32
            _require("core-js/es6/object"); // 33
            _require("core-js/es6/string"); // 34
            _require("core-js/es6/weak-map"); // 35
            _require("core-js/es6/weak-set"); // 36
            // 37
            // ECMAScript 2017 polyfills.                                           // 38
            _require("core-js/es7/array"); // 39
            _require("core-js/es7/object"); // 40
            // 41
            // We want everything from the core-js/es6/number module except         // 42
            // es6.number.constructor.                                              // 43
            _require('core-js/modules/es6.number.epsilon'); // 44
            _require('core-js/modules/es6.number.is-finite'); // 45
            _require('core-js/modules/es6.number.is-integer'); // 46
            _require('core-js/modules/es6.number.is-nan'); // 47
            _require('core-js/modules/es6.number.is-safe-integer'); // 48
            _require('core-js/modules/es6.number.max-safe-integer'); // 49
            _require('core-js/modules/es6.number.min-safe-integer'); // 50
            _require('core-js/modules/es6.number.parse-float'); // 51
            _require('core-js/modules/es6.number.parse-int'); // 52
            // 53
            // Typed Arrays                                                         // 54
            _require('core-js/modules/es6.typed.uint8-array'); // 55
            _require('core-js/modules/es6.typed.uint32-array'); // 56
            // 57
            //////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/ecmascript-runtime-client/runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ecmascript-runtime-client'] = _exports2, {
    Symbol: Symbol,
    Map: Map,
    Set: Set
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "random.js": function (_require) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/random.js                                                                                     //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                 // 1
            // window.crypto.getRandomValues() in the browser) when available. If these                                      // 2
            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                     // 3
            // strong, and we seed it with various sources such as the date, Math.random,                                    // 4
            // and window size on the client.  When using crypto.getRandomValues(), our                                      // 5
            // primitive is hexString(), from which we construct fraction(). When using                                      // 6
            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                 // 7
            // that to construct hex string.                                                                                 // 8
            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.                                                                // 14
            //
            var Alea = function () {
              // 15
              function Mash() {
                // 16
                var n = 0xefc8249d; // 17
                //
                var mash = function (data) {
                  // 19
                  data = data.toString(); // 20
                  //
                  for (var i = 0; i < data.length; i++) {
                    // 21
                    n += data.charCodeAt(i); // 22
                    var h = 0.02519603282416938 * n; // 23
                    n = h >>> 0; // 24
                    h -= n; // 25
                    h *= n; // 26
                    n = h >>> 0; // 27
                    h -= n; // 28
                    n += h * 0x100000000; // 2^32                                                                            // 29
                  } // 30
                  //
                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                        // 31
                }; // 32
                //
                mash.version = 'Mash 0.9'; // 34
                return mash; // 35
              } // 36
              //
              return function (args) {
                // 38
                var s0 = 0; // 39
                var s1 = 0; // 40
                var s2 = 0; // 41
                var c = 1; // 42
                //
                if (args.length == 0) {
                  // 44
                  args = [+new Date()]; // 45
                } // 46
                //
                var mash = Mash(); // 47
                s0 = mash(' '); // 48
                s1 = mash(' '); // 49
                s2 = mash(' '); // 50
                //
                for (var i = 0; i < args.length; i++) {
                  // 52
                  s0 -= mash(args[i]); // 53
                  //
                  if (s0 < 0) {
                    // 54
                    s0 += 1; // 55
                  } // 56
                  //
                  s1 -= mash(args[i]); // 57
                  //
                  if (s1 < 0) {
                    // 58
                    s1 += 1; // 59
                  } // 60
                  //
                  s2 -= mash(args[i]); // 61
                  //
                  if (s2 < 0) {
                    // 62
                    s2 += 1; // 63
                  } // 64
                } // 65
                //
                mash = null; // 66
                //
                var random = function () {
                  // 68
                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                // 69
                  //
                  s0 = s1; // 70
                  s1 = s2; // 71
                  return s2 = t - (c = t | 0); // 72
                }; // 73
                //
                random.uint32 = function () {
                  // 74
                  return random() * 0x100000000; // 2^32                                                                     // 75
                }; // 76
                //
                random.fract53 = function () {
                  // 77
                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                             // 78
                }; // 80
                //
                random.version = 'Alea 0.9'; // 81
                random.args = args; // 82
                return random; // 83
              }(Array.prototype.slice.call(arguments)); // 85
            }; // 86
            //
            var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz"; // 88
            var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_"; // `type` is one of `RandomGenerator.Type` as defined below.
            //                                                                                                               // 93
            // options:                                                                                                      // 94
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                              // 95
            //   whose items will be `toString`ed and used as the seed to the Alea                                           // 96
            //   algorithm                                                                                                   // 97
            //
            var RandomGenerator = function (type, options) {
              // 98
              var self = this; // 99
              self.type = type; // 100
              //
              if (!RandomGenerator.Type[type]) {
                // 102
                throw new Error("Unknown random generator type: " + type); // 103
              } // 104
              //
              if (type === RandomGenerator.Type.ALEA) {
                // 106
                if (!options.seeds) {
                  // 107
                  throw new Error("No seeds were provided for Alea PRNG"); // 108
                } // 109
                //
                self.alea = Alea.apply(null, options.seeds); // 110
              } // 111
            }; // Types of PRNGs supported by the `RandomGenerator` class                                                    // 112
            //
            //
            RandomGenerator.Type = { // 115
              // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                              // 116
              // secure but not seedable, runs only on the server). Reverts to                                               // 117
              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                           // 118
              // there isn't enough entropy yet                                                                              // 119
              NODE_CRYPTO: "NODE_CRYPTO", // 120
              // Use non-IE browser's built-in `window.crypto.getRandomValues`                                               // 122
              // (cryptographically secure but not seedable, runs only in the                                                // 123
              // browser).                                                                                                   // 124
              BROWSER_CRYPTO: "BROWSER_CRYPTO", // 125
              // Use the *fast*, seedaable and not cryptographically secure                                                  // 127
              // Alea algorithm                                                                                              // 128
              ALEA: "ALEA" // 129
            }; /**                                                                                                           // 115
                * @name Random.fraction                                                                                      //
                * @summary Return a number between 0 and 1, like `Math.random`.                                              //
                * @locus Anywhere                                                                                            //
                */ //
            //
            RandomGenerator.prototype.fraction = function () {
              // 137
              var self = this; // 138
              //
              if (self.type === RandomGenerator.Type.ALEA) {
                // 139
                return self.alea(); // 140
              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                // 141
                var numerator = parseInt(self.hexString(8), 16); // 142
                return numerator * 2.3283064365386963e-10; // 2^-32                                                          // 143
              } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {
                // 144
                var array = new Uint32Array(1); // 145
                window.crypto.getRandomValues(array); // 146
                return array[0] * 2.3283064365386963e-10; // 2^-32                                                           // 147
              } else {
                // 148
                throw new Error('Unknown random generator type: ' + self.type); // 149
              } // 150
            }; /**                                                                                                           // 151
                * @name Random.hexString                                                                                     //
                * @summary Return a random string of `n` hexadecimal digits.                                                 //
                * @locus Anywhere                                                                                            //
                * @param {Number} n Length of the string                                                                     //
                */ //
            //
            RandomGenerator.prototype.hexString = function (digits) {
              // 159
              var self = this; // 160
              //
              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                // 161
                var numBytes = Math.ceil(digits / 2); // 162
                var bytes; // Try to get cryptographically strong randomness. Fall back to                                   // 163
                // non-cryptographically strong if not available.                                                            // 165
                //
                try {
                  // 166
                  bytes = nodeCrypto.randomBytes(numBytes); // 167
                } catch (e) {
                  // 168
                  // XXX should re-throw any error except insufficient entropy                                               // 169
                  bytes = nodeCrypto.pseudoRandomBytes(numBytes); // 170
                } // 171
                //
                var result = bytes.toString("hex"); // If the number of digits is odd, we'll have generated an extra 4 bits  // 172
                // of randomness, so we need to trim the last digit.                                                         // 174
                //
                return result.substring(0, digits); // 175
              } else {
                // 176
                return this._randomString(digits, "0123456789abcdef"); // 177
              } // 178
            }; // 179
            //
            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {
              // 181
              var self = this; // 183
              var digits = []; // 184
              //
              for (var i = 0; i < charsCount; i++) {
                // 185
                digits[i] = self.choice(alphabet); // 186
              } // 187
              //
              return digits.join(""); // 188
            }; /**                                                                                                           // 189
                * @name Random.id                                                                                            //
                * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is                                //
                * likely to be unique in the whole world.                                                                    //
                * @locus Anywhere                                                                                            //
                * @param {Number} [n] Optional length of the identifier in characters                                        //
                *   (defaults to 17)                                                                                         //
                */ //
            //
            RandomGenerator.prototype.id = function (charsCount) {
              // 199
              var self = this; // 17 characters is around 96 bits of entropy, which is the amount of                         // 200
              // state in the Alea PRNG.                                                                                     // 202
              //
              if (charsCount === undefined) charsCount = 17; // 203
              return self._randomString(charsCount, UNMISTAKABLE_CHARS); // 206
            }; /**                                                                                                           // 207
                * @name Random.secret                                                                                        //
                * @summary Return a random string of printable characters with 6 bits of                                     //
                * entropy per character. Use `Random.secret` for security-critical secrets                                   //
                * that are intended for machine, rather than human, consumption.                                             //
                * @locus Anywhere                                                                                            //
                * @param {Number} [n] Optional length of the secret string (defaults to 43                                   //
                *   characters, or 256 bits of entropy)                                                                      //
                */ //
            //
            RandomGenerator.prototype.secret = function (charsCount) {
              // 218
              var self = this; // Default to 256 bits of entropy, or 43 characters at 6 bits per                             // 219
              // character.                                                                                                  // 221
              //
              if (charsCount === undefined) charsCount = 43; // 222
              return self._randomString(charsCount, BASE64_CHARS); // 224
            }; /**                                                                                                           // 225
                * @name Random.choice                                                                                        //
                * @summary Return a random element of the given array or string.                                             //
                * @locus Anywhere                                                                                            //
                * @param {Array|String} arrayOrString Array or string to choose from                                         //
                */ //
            //
            RandomGenerator.prototype.choice = function (arrayOrString) {
              // 233
              var index = Math.floor(this.fraction() * arrayOrString.length); // 234
              if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];
            }; // instantiate RNG.  Heuristically collect entropy from various sources when a                                // 239
            // cryptographic PRNG isn't available.                                                                           // 242
            // client sources                                                                                                // 244
            //
            //
            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            var agent = typeof navigator !== 'undefined' && navigator.userAgent || ""; // 263
            //
            function createAleaGeneratorWithGeneratedSeed() {
              // 265
              return new RandomGenerator(RandomGenerator.Type.ALEA, { // 266
                seeds: [new Date(), height, width, agent, Math.random()] // 268
              }); // 268
            } // 269
            //
            ; // 269
            //
            if (Meteor.isServer) {
              // 271
              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO); // 272
            } else {
              // 273
              if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {
                // 274
                Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO); // 276
              } else {
                // 277
                // On IE 10 and below, there's no browser crypto API                                                         // 278
                // available. Fall back to Alea                                                                              // 279
                //                                                                                                           // 280
                // XXX looks like at the moment, we use Alea in IE 11 as well,                                               // 281
                // which has `window.msCrypto` instead of `window.crypto`.                                                   // 282
                Random = createAleaGeneratorWithGeneratedSeed(); // 283
              } // 284
            } // Create a non-cryptographically secure PRNG with a given seed (using                                         // 285
            // the Alea algorithm)                                                                                           // 288
            //
            //
            Random.createWithSeeds = function () {
              // 289
              for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {
                // 289
                seeds[_key] = arguments[_key]; // 289
              } // 289
              //
              if (seeds.length === 0) {
                // 290
                throw new Error("No seeds were provided"); // 291
              } // 292
              //
              return new RandomGenerator(RandomGenerator.Type.ALEA, { // 293
                seeds: seeds // 293
              }); // 293
            }; // Used like `Random`, but much faster and not cryptographically                                              // 294
            // secure                                                                                                        // 297
            //
            //
            Random.insecure = createAleaGeneratorWithGeneratedSeed(); // 298
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "deprecated.js": function () {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/deprecated.js                                                                                 //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Before this package existed, we used to use this Meteor.uuid()                                                // 1
            // implementing the RFC 4122 v4 UUID. It is no longer documented                                                 // 2
            // and will go away.                                                                                             // 3
            // XXX COMPAT WITH 0.5.6                                                                                         // 4
            Meteor.uuid = function () {
              // 5
              var HEX_DIGITS = "0123456789abcdef"; // 6
              var s = []; // 7
              //
              for (var i = 0; i < 36; i++) {
                // 8
                s[i] = Random.choice(HEX_DIGITS); // 9
              } // 10
              //
              s[14] = "4"; // 11
              s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1); // 12
              s[8] = s[13] = s[18] = s[23] = "-"; // 13
              var uuid = s.join(""); // 15
              return uuid; // 16
            }; // 17
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require2("./node_modules/meteor/random/random.js");
  _require2("./node_modules/meteor/random/deprecated.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.random = {}, {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var MongoID;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                    //
    // packages/mongo-id/id.js                                                                            //
    //                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    MongoID = {}; // 1
    // 2
    MongoID._looksLikeObjectID = function (str) {
      // 3
      return str.length === 24 && str.match(/^[0-9a-f]*$/); // 4
    }; // 5
    // 6
    MongoID.ObjectID = function (hexString) {
      // 7
      //random-based impl of Mongo ObjectID                                                               // 8
      var self = this; // 9
      if (hexString) {
        // 10
        hexString = hexString.toLowerCase(); // 11
        if (!MongoID._looksLikeObjectID(hexString)) {
          // 12
          throw new Error("Invalid hexadecimal string for creating an ObjectID"); // 13
        } // 14
        // meant to work with _.isEqual(), which relies on structural equality                            // 15
        self._str = hexString; // 16
      } else {
        // 17
        self._str = Random.hexString(24); // 18
      } // 19
    }; // 20
    // 21
    MongoID.ObjectID.prototype.toString = function () {
      // 22
      var self = this; // 23
      return "ObjectID(\"" + self._str + "\")"; // 24
    }; // 25
    // 26
    MongoID.ObjectID.prototype.equals = function (other) {
      // 27
      var self = this; // 28
      return other instanceof MongoID.ObjectID && // 29
      self.valueOf() === other.valueOf(); // 30
    }; // 31
    // 32
    MongoID.ObjectID.prototype.clone = function () {
      // 33
      var self = this; // 34
      return new MongoID.ObjectID(self._str); // 35
    }; // 36
    // 37
    MongoID.ObjectID.prototype.typeName = function () {
      // 38
      return "oid"; // 39
    }; // 40
    // 41
    MongoID.ObjectID.prototype.getTimestamp = function () {
      // 42
      var self = this; // 43
      return parseInt(self._str.substr(0, 8), 16); // 44
    }; // 45
    // 46
    MongoID.ObjectID.prototype.valueOf = // 47
    MongoID.ObjectID.prototype.toJSONValue = // 48
    MongoID.ObjectID.prototype.toHexString = // 49
    function () {
      return this._str;
    }; // 50
    // 51
    EJSON.addType("oid", function (str) {
      // 52
      return new MongoID.ObjectID(str); // 53
    }); // 54
    // 55
    MongoID.idStringify = function (id) {
      // 56
      if (id instanceof MongoID.ObjectID) {
        // 57
        return id.valueOf(); // 58
      } else if (typeof id === 'string') {
        // 59
        if (id === "") {
          // 60
          return id; // 61
        } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 62
        id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 63
        MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64
        id.substr(0, 1) === '{') {
          // escape object-form strings, for maybe implementing later
          return "-" + id; // 66
        } else {
          // 67
          return id; // other strings go through unchanged.                                               // 68
        } // 69
      } else if (id === undefined) {
        // 70
        return '-'; // 71
      } else if (typeof id === 'object' && id !== null) {
        // 72
        throw new Error("Meteor does not currently support objects other than ObjectID as ids"); // 73
      } else {
        // Numbers, true, false, null                                                              // 74
        return "~" + JSON.stringify(id); // 75
      } // 76
    }; // 77
    // 78
    // 79
    MongoID.idParse = function (id) {
      // 80
      if (id === "") {
        // 81
        return id; // 82
      } else if (id === '-') {
        // 83
        return undefined; // 84
      } else if (id.substr(0, 1) === '-') {
        // 85
        return id.substr(1); // 86
      } else if (id.substr(0, 1) === '~') {
        // 87
        return JSON.parse(id.substr(1)); // 88
      } else if (MongoID._looksLikeObjectID(id)) {
        // 89
        return new MongoID.ObjectID(id); // 90
      } else {
        // 91
        return id; // 92
      } // 93
    }; // 94
    // 95
    // 96
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['mongo-id'] = {}, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var DiffSequence;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////
    //                                                                                 //
    // packages/diff-sequence/diff.js                                                  //
    //                                                                                 //
    /////////////////////////////////////////////////////////////////////////////////////
    //
    DiffSequence = {}; // 1
    // 2
    // ordered: bool.                                                                  // 3
    // old_results and new_results: collections of documents.                          // 4
    //    if ordered, they are arrays.                                                 // 5
    //    if unordered, they are IdMaps                                                // 6
    DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, // 7
    observer, options) {
      // 8
      if (ordered) // 9
        DiffSequence.diffQueryOrderedChanges( // 10
        oldResults, newResults, observer, options); // 11
      else // 12
        DiffSequence.diffQueryUnorderedChanges( // 13
        oldResults, newResults, observer, options); // 14
    }; // 15
    // 16
    DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, // 17
    observer, options) {
      // 18
      options = options || {}; // 19
      var projectionFn = options.projectionFn || EJSON.clone; // 20
      // 21
      if (observer.movedBefore) {
        // 22
        throw new Error("_diffQueryUnordered called with a movedBefore observer!"); // 23
      } // 24
      // 25
      newResults.forEach(function (newDoc, id) {
        // 26
        var oldDoc = oldResults.get(id); // 27
        if (oldDoc) {
          // 28
          if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
            // 29
            var projectedNew = projectionFn(newDoc); // 30
            var projectedOld = projectionFn(oldDoc); // 31
            var changedFields = // 32
            DiffSequence.makeChangedFields(projectedNew, projectedOld); // 33
            if (!_.isEmpty(changedFields)) {
              // 34
              observer.changed(id, changedFields); // 35
            } // 36
          } // 37
        } else if (observer.added) {
          // 38
          var fields = projectionFn(newDoc); // 39
          delete fields._id; // 40
          observer.added(newDoc._id, fields); // 41
        } // 42
      }); // 43
      // 44
      if (observer.removed) {
        // 45
        oldResults.forEach(function (oldDoc, id) {
          // 46
          if (!newResults.has(id)) // 47
            observer.removed(id); // 48
        }); // 49
      } // 50
    }; // 51
    // 52
    // 53
    DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, // 54
    observer, options) {
      // 55
      options = options || {}; // 56
      var projectionFn = options.projectionFn || EJSON.clone; // 57
      // 58
      var new_presence_of_id = {}; // 59
      _.each(new_results, function (doc) {
        // 60
        if (new_presence_of_id[doc._id]) // 61
          Meteor._debug("Duplicate _id in new_results"); // 62
        new_presence_of_id[doc._id] = true; // 63
      }); // 64
      // 65
      var old_index_of_id = {}; // 66
      _.each(old_results, function (doc, i) {
        // 67
        if (doc._id in old_index_of_id) // 68
          Meteor._debug("Duplicate _id in old_results"); // 69
        old_index_of_id[doc._id] = i; // 70
      }); // 71
      // 72
      // ALGORITHM:                                                                    // 73
      //                                                                               // 74
      // To determine which docs should be considered "moved" (and which               // 75
      // merely change position because of other docs moving) we run                   // 76
      // a "longest common subsequence" (LCS) algorithm.  The LCS of the               // 77
      // old doc IDs and the new doc IDs gives the docs that should NOT be             // 78
      // considered moved.                                                             // 79
      // 80
      // To actually call the appropriate callbacks to get from the old state to the   // 81
      // new state:                                                                    // 82
      // 83
      // First, we call removed() on all the items that only appear in the old         // 84
      // state.                                                                        // 85
      // 86
      // Then, once we have the items that should not move, we walk through the new    // 87
      // results array group-by-group, where a "group" is a set of items that have     // 88
      // moved, anchored on the end by an item that should not move.  One by one, we   // 89
      // move each of those elements into place "before" the anchoring end-of-group    // 90
      // item, and fire changed events on them if necessary.  Then we fire a changed   // 91
      // event on the anchor, and move on to the next group.  There is always at       // 92
      // least one group; the last group is anchored by a virtual "null" id at the     // 93
      // end.                                                                          // 94
      // 95
      // Asymptotically: O(N k) where k is number of ops, or potentially               // 96
      // O(N log N) if inner loop of LCS were made to be binary search.                // 97
      // 98
      // 99
      //////// LCS (longest common sequence, with respect to _id)                      // 100
      // (see Wikipedia article on Longest Increasing Subsequence,                     // 101
      // where the LIS is taken of the sequence of old indices of the                  // 102
      // docs in new_results)                                                          // 103
      //                                                                               // 104
      // unmoved: the output of the algorithm; members of the LCS,                     // 105
      // in the form of indices into new_results                                       // 106
      var unmoved = []; // 107
      // max_seq_len: length of LCS found so far                                       // 108
      var max_seq_len = 0; // 109
      // seq_ends[i]: the index into new_results of the last doc in a                  // 110
      // common subsequence of length of i+1 <= max_seq_len                            // 111
      var N = new_results.length; // 112
      var seq_ends = new Array(N); // 113
      // ptrs:  the common subsequence ending with new_results[n] extends              // 114
      // a common subsequence ending with new_results[ptr[n]], unless                  // 115
      // ptr[n] is -1.                                                                 // 116
      var ptrs = new Array(N); // 117
      // virtual sequence of old indices of new results                                // 118
      var old_idx_seq = function (i_new) {
        // 119
        return old_index_of_id[new_results[i_new]._id]; // 120
      }; // 121
      // for each item in new_results, use it to extend a common subsequence           // 122
      // of length j <= max_seq_len                                                    // 123
      for (var i = 0; i < N; i++) {
        // 124
        if (old_index_of_id[new_results[i]._id] !== undefined) {
          // 125
          var j = max_seq_len; // 126
          // this inner loop would traditionally be a binary search,                   // 127
          // but scanning backwards we will likely find a subseq to extend             // 128
          // pretty soon, bounded for example by the total number of ops.              // 129
          // If this were to be changed to a binary search, we'd still want            // 130
          // to scan backwards a bit as an optimization.                               // 131
          while (j > 0) {
            // 132
            if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) // 133
              break; // 134
            j--; // 135
          } // 136
          // 137
          ptrs[i] = j === 0 ? -1 : seq_ends[j - 1]; // 138
          seq_ends[j] = i; // 139
          if (j + 1 > max_seq_len) // 140
            max_seq_len = j + 1; // 141
        } // 142
      } // 143
      // 144
      // pull out the LCS/LIS into unmoved                                             // 145
      var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1]; // 146
      while (idx >= 0) {
        // 147
        unmoved.push(idx); // 148
        idx = ptrs[idx]; // 149
      } // 150
      // the unmoved item list is built backwards, so fix that                         // 151
      unmoved.reverse(); // 152
      // 153
      // the last group is always anchored by the end of the result list, which is     // 154
      // an id of "null"                                                               // 155
      unmoved.push(new_results.length); // 156
      // 157
      _.each(old_results, function (doc) {
        // 158
        if (!new_presence_of_id[doc._id]) // 159
          observer.removed && observer.removed(doc._id); // 160
      }); // 161
      // for each group of things in the new_results that is anchored by an unmoved    // 162
      // element, iterate through the things before it.                                // 163
      var startOfGroup = 0; // 164
      _.each(unmoved, function (endOfGroup) {
        // 165
        var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null; // 166
        var oldDoc, newDoc, fields, projectedNew, projectedOld; // 167
        for (var i = startOfGroup; i < endOfGroup; i++) {
          // 168
          newDoc = new_results[i]; // 169
          if (!_.has(old_index_of_id, newDoc._id)) {
            // 170
            fields = projectionFn(newDoc); // 171
            delete fields._id; // 172
            observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
            observer.added && observer.added(newDoc._id, fields); // 174
          } else {
            // 175
            // moved                                                                   // 176
            oldDoc = old_results[old_index_of_id[newDoc._id]]; // 177
            projectedNew = projectionFn(newDoc); // 178
            projectedOld = projectionFn(oldDoc); // 179
            fields = DiffSequence.makeChangedFields(projectedNew, projectedOld); // 180
            if (!_.isEmpty(fields)) {
              // 181
              observer.changed && observer.changed(newDoc._id, fields); // 182
            } // 183
            observer.movedBefore && observer.movedBefore(newDoc._id, groupId); // 184
          } // 185
        } // 186
        if (groupId) {
          // 187
          newDoc = new_results[endOfGroup]; // 188
          oldDoc = old_results[old_index_of_id[newDoc._id]]; // 189
          projectedNew = projectionFn(newDoc); // 190
          projectedOld = projectionFn(oldDoc); // 191
          fields = DiffSequence.makeChangedFields(projectedNew, projectedOld); // 192
          if (!_.isEmpty(fields)) {
            // 193
            observer.changed && observer.changed(newDoc._id, fields); // 194
          } // 195
        } // 196
        startOfGroup = endOfGroup + 1; // 197
      }); // 198
      // 199
      // 200
    }; // 201
    // 202
    // 203
    // General helper for diff-ing two objects.                                        // 204
    // callbacks is an object like so:                                                 // 205
    // { leftOnly: function (key, leftValue) {...},                                    // 206
    //   rightOnly: function (key, rightValue) {...},                                  // 207
    //   both: function (key, leftValue, rightValue) {...},                            // 208
    // }                                                                               // 209
    DiffSequence.diffObjects = function (left, right, callbacks) {
      // 210
      _.each(left, function (leftValue, key) {
        // 211
        if (_.has(right, key)) // 212
          callbacks.both && callbacks.both(key, leftValue, right[key]); // 213
        else // 214
          callbacks.leftOnly && callbacks.leftOnly(key, leftValue); // 215
      }); // 216
      if (callbacks.rightOnly) {
        // 217
        _.each(right, function (rightValue, key) {
          // 218
          if (!_.has(left, key)) // 219
            callbacks.rightOnly(key, rightValue); // 220
        }); // 221
      } // 222
    }; // 223
    // 224
    // 225
    DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
      // 226
      var fields = {}; // 227
      DiffSequence.diffObjects(oldDoc, newDoc, { // 228
        leftOnly: function (key, value) {
          // 229
          fields[key] = undefined; // 230
        }, // 231
        rightOnly: function (key, value) {
          // 232
          fields[key] = value; // 233
        }, // 234
        both: function (key, leftValue, rightValue) {
          // 235
          if (!EJSON.equals(leftValue, rightValue)) // 236
            fields[key] = rightValue; // 237
        } // 238
      }); // 239
      return fields; // 240
    }; // 241
    // 242
    DiffSequence.applyChanges = function (doc, changeFields) {
      // 243
      _.each(changeFields, function (value, key) {
        // 244
        if (value === undefined) // 245
          delete doc[key]; // 246
        else // 247
          doc[key] = value; // 248
      }); // 249
    }; // 250
    // 251
    // 252
    /////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['diff-sequence'] = {}, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function (_require2, _exports2, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              // 1
              var gju = {}; // 2
              // 3
              // Export the geojson object for **CommonJS**                                                            // 4
              if (typeof _module !== 'undefined' && _module.exports) {
                // 5
                _module.exports = gju; // 6
              } // 7
              // 8
              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
              gju.lineStringsIntersect = function (l1, l2) {
                // 10
                var intersects = []; // 11
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  // 12
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    // 13
                    var a1 = { // 14
                      x: l1.coordinates[i][1], // 15
                      y: l1.coordinates[i][0] // 16
                    },
                        // 17
                    a2 = { // 18
                      x: l1.coordinates[i + 1][1], // 19
                      y: l1.coordinates[i + 1][0] // 20
                    },
                        // 21
                    b1 = { // 22
                      x: l2.coordinates[j][1], // 23
                      y: l2.coordinates[j][0] // 24
                    },
                        // 25
                    b2 = { // 26
                      x: l2.coordinates[j + 1][1], // 27
                      y: l2.coordinates[j + 1][0] // 28
                    },
                        // 29
                    ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        // 30
                    ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        // 31
                    u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y); // 32
                    if (u_b != 0) {
                      // 33
                      var ua = ua_t / u_b,
                          // 34
                      ub = ub_t / u_b; // 35
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        // 36
                        intersects.push({ // 37
                          'type': 'Point', // 38
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)] // 39
                        }); // 40
                      } // 41
                    } // 42
                  } // 43
                } // 44
                if (intersects.length == 0) intersects = false; // 45
                return intersects; // 46
              }; // 47
              // 48
              // Bounding Box                                                                                          // 49
              // 50
              function boundingBoxAroundPolyCoords(coords) {
                // 51
                var xAll = [],
                    yAll = []; // 52
                // 53
                for (var i = 0; i < coords[0].length; i++) {
                  // 54
                  xAll.push(coords[0][i][1]); // 55
                  yAll.push(coords[0][i][0]); // 56
                } // 57
                // 58
                xAll = xAll.sort(function (a, b) {
                  return a - b;
                }); // 59
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                }); // 60
                // 61
                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]]; // 62
              } // 63
              // 64
              gju.pointInBoundingBox = function (point, bounds) {
                // 65
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              }; // 67
              // 68
              // Point in Polygon                                                                                      // 69
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
              // 71
              function pnpoly(x, y, coords) {
                // 72
                var vert = [[0, 0]]; // 73
                // 74
                for (var i = 0; i < coords.length; i++) {
                  // 75
                  for (var j = 0; j < coords[i].length; j++) {
                    // 76
                    vert.push(coords[i][j]); // 77
                  } // 78
                  vert.push([0, 0]); // 79
                } // 80
                // 81
                var inside = false; // 82
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  // 83
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                } // 85
                // 86
                return inside; // 87
              } // 88
              // 89
              gju.pointInPolygon = function (p, poly) {
                // 90
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates; // 91
                // 92
                var insideBox = false; // 93
                for (var i = 0; i < coords.length; i++) {
                  // 94
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true; // 95
                } // 96
                if (!insideBox) return false; // 97
                // 98
                var insidePoly = false; // 99
                for (var i = 0; i < coords.length; i++) {
                  // 100
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true; // 101
                } // 102
                // 103
                return insidePoly; // 104
              }; // 105
              // 106
              gju.numberToRadius = function (number) {
                // 107
                return number * Math.PI / 180; // 108
              }; // 109
              // 110
              gju.numberToDegree = function (number) {
                // 111
                return number * 180 / Math.PI; // 112
              }; // 113
              // 114
              // written with help from @tautologe                                                                     // 115
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                // 116
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    // 117
                dist = radiusInMeters / 1000 / 6371,
                    // 118
                // convert meters to radiant                                                                         // 119
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    // 120
                steps = steps || 15,
                    // 121
                // 15 sided circle                                                                                   // 122
                poly = [[center[0], center[1]]]; // 123
                for (var i = 0; i < steps; i++) {
                  // 124
                  var brng = 2 * Math.PI * i / steps; // 125
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) // 126
                  + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng)); // 127
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), // 128
                  Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat)); // 129
                  poly[i] = []; // 130
                  poly[i][1] = gju.numberToDegree(lat); // 131
                  poly[i][0] = gju.numberToDegree(lng); // 132
                } // 133
                return { // 134
                  "type": "Polygon", // 135
                  "coordinates": [poly] // 136
                }; // 137
              }; // 138
              // 139
              // assumes rectangle starts at lower left point                                                          // 140
              gju.rectangleCentroid = function (rectangle) {
                // 141
                var bbox = rectangle.coordinates[0]; // 142
                var xmin = bbox[0][0],
                    // 143
                ymin = bbox[0][1],
                    // 144
                xmax = bbox[2][0],
                    // 145
                ymax = bbox[2][1]; // 146
                var xwidth = xmax - xmin; // 147
                var ywidth = ymax - ymin; // 148
                return { // 149
                  'type': 'Point', // 150
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2] // 151
                }; // 152
              }; // 153
              // 154
              // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
              gju.pointDistance = function (pt1, pt2) {
                // 156
                var lon1 = pt1.coordinates[0],
                    // 157
                lat1 = pt1.coordinates[1],
                    // 158
                lon2 = pt2.coordinates[0],
                    // 159
                lat2 = pt2.coordinates[1],
                    // 160
                dLat = gju.numberToRadius(lat2 - lat1),
                    // 161
                dLon = gju.numberToRadius(lon2 - lon1),
                    // 162
                a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) // 163
                * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    // 164
                c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // 165
                // Earth radius is 6371 km                                                                             // 166
                return 6371 * c * 1000; // returns meters                                                            // 167
              }, // 168
              // 169
              // checks if geometry lies entirely within a circle                                                      // 170
              // works with Point, LineString, Polygon                                                                 // 171
              gju.geometryWithinRadius = function (geometry, center, radius) {
                // 172
                if (geometry.type == 'Point') {
                  // 173
                  return gju.pointDistance(geometry, center) <= radius; // 174
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  // 175
                  var point = {}; // 176
                  var coordinates; // 177
                  if (geometry.type == 'Polygon') {
                    // 178
                    // it's enough to check the exterior ring of the Polygon                                           // 179
                    coordinates = geometry.coordinates[0]; // 180
                  } else {
                    // 181
                    coordinates = geometry.coordinates; // 182
                  } // 183
                  for (var i in coordinates) {
                    // 184
                    point.coordinates = coordinates[i]; // 185
                    if (gju.pointDistance(point, center) > radius) {
                      // 186
                      return false; // 187
                    } // 188
                  } // 189
                } // 190
                return true; // 191
              }; // 192
              // 193
              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
              gju.area = function (polygon) {
                // 195
                var area = 0; // 196
                // TODO: polygon holes at coordinates[1]                                                               // 197
                var points = polygon.coordinates[0]; // 198
                var j = points.length - 1; // 199
                var p1, p2; // 200
                // 201
                for (var i = 0; i < points.length; j = i++) {
                  // 202
                  var p1 = { // 203
                    x: points[i][1], // 204
                    y: points[i][0] // 205
                  }; // 206
                  var p2 = { // 207
                    x: points[j][1], // 208
                    y: points[j][0] // 209
                  }; // 210
                  area += p1.x * p2.y; // 211
                  area -= p1.y * p2.x; // 212
                } // 213
                // 214
                area /= 2; // 215
                return area; // 216
              }, // 217
              // 218
              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
              gju.centroid = function (polygon) {
                // 220
                var f,
                    x = 0,
                    // 221
                y = 0; // 222
                // TODO: polygon holes at coordinates[1]                                                               // 223
                var points = polygon.coordinates[0]; // 224
                var j = points.length - 1; // 225
                var p1, p2; // 226
                // 227
                for (var i = 0; i < points.length; j = i++) {
                  // 228
                  var p1 = { // 229
                    x: points[i][1], // 230
                    y: points[i][0] // 231
                  }; // 232
                  var p2 = { // 233
                    x: points[j][1], // 234
                    y: points[j][0] // 235
                  }; // 236
                  f = p1.x * p2.y - p2.x * p1.y; // 237
                  x += (p1.x + p2.x) * f; // 238
                  y += (p1.y + p2.y) * f; // 239
                } // 240
                // 241
                f = gju.area(polygon) * 6; // 242
                return { // 243
                  'type': 'Point', // 244
                  'coordinates': [y / f, x / f] // 245
                }; // 246
              }, // 247
              // 248
              gju.simplify = function (source, kink) {
                /* source[] array of geojson points */ // 249
                /* kink	in metres, kinks above this depth kept  */ // 250
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20; // 252
                source = source.map(function (o) {
                  // 253
                  return { // 254
                    lng: o.coordinates[0], // 255
                    lat: o.coordinates[1] // 256
                    // 257
                  };
                }); // 258
                // 259
                var n_source, n_stack, n_dest, start, end, i, sig; // 260
                var dev_sqr, max_dev_sqr, band_sqr; // 261
                var x12, y12, d12, x13, y13, d13, x23, y23, d23; // 262
                var F = Math.PI / 180.0 * 0.5; // 263
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */ // 264
                var sig_start = new Array(); /* indices of start & end of working section */ // 265
                var sig_end = new Array(); // 266
                // 267
                /* check for simple cases */ // 268
                // 269
                if (source.length < 3) return source; /* one or two points */ // 270
                // 271
                /* more complex case. initialize stack */ // 272
                // 273
                n_source = source.length; // 274
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */ // 275
                band_sqr *= band_sqr; // 276
                n_dest = 0; // 277
                sig_start[0] = 0; // 278
                sig_end[0] = n_source - 1; // 279
                n_stack = 1; // 280
                // 281
                /* while the stack is not empty  ... */ // 282
                while (n_stack > 0) {
                  // 283
                  // 284
                  /* ... pop the top-most entries off the stacks */ // 285
                  // 286
                  start = sig_start[n_stack - 1]; // 287
                  end = sig_end[n_stack - 1]; // 288
                  n_stack--; // 289
                  // 290
                  if (end - start > 1) {
                    /* any intermediate points ? */ // 291
                    // 292
                    /* ... yes, so find most deviant intermediate point to                                             // 293
                    either side of line joining start & end points */ // 294
                    // 295
                    x12 = source[end].lng() - source[start].lng(); // 296
                    y12 = source[end].lat() - source[start].lat(); // 297
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12); // 298
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */ // 299
                    d12 = x12 * x12 + y12 * y12; // 300
                    // 301
                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {
                      // 302
                      // 303
                      x13 = source[i].lng() - source[start].lng(); // 304
                      y13 = source[i].lat() - source[start].lat(); // 305
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13); // 306
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat())); // 307
                      d13 = x13 * x13 + y13 * y13; // 308
                      // 309
                      x23 = source[i].lng() - source[end].lng(); // 310
                      y23 = source[i].lat() - source[end].lat(); // 311
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23); // 312
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat())); // 313
                      d23 = x23 * x23 + y23 * y23; // 314
                      // 315
                      if (d13 >= d12 + d23) dev_sqr = d23; // 316
                      else if (d23 >= d12 + d13) dev_sqr = d13; // 317
                        else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
                      if (dev_sqr > max_dev_sqr) {
                        // 319
                        sig = i; // 320
                        max_dev_sqr = dev_sqr; // 321
                      } // 322
                    } // 323
                    // 324
                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */ // 325
                      /* ... no, so transfer current start point */ // 326
                      index[n_dest] = start; // 327
                      n_dest++; // 328
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */ // 329
                      n_stack++; // 330
                      sig_start[n_stack - 1] = sig; // 331
                      sig_end[n_stack - 1] = end; // 332
                      n_stack++; // 333
                      sig_start[n_stack - 1] = start; // 334
                      sig_end[n_stack - 1] = sig; // 335
                    } // 336
                  } else {
                    /* ... no intermediate points, so transfer current start point */ // 337
                    index[n_dest] = start; // 338
                    n_dest++; // 339
                  } // 340
                } // 341
                // 342
                /* transfer last point */ // 343
                index[n_dest] = n_source - 1; // 344
                n_dest++; // 345
                // 346
                /* make return array */ // 347
                var r = new Array(); // 348
                for (var i = 0; i < n_dest; i++) // 349
                r.push(source[index[i]]); // 350
                // 351
                return r.map(function (o) {
                  // 352
                  return { // 353
                    type: "Point", // 354
                    coordinates: [o.lng, o.lat] // 355
                    // 356
                  };
                }); // 357
              }; // 358
              // 359
              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
              gju.destinationPoint = function (pt, brng, dist) {
                // 361
                dist = dist / 6371; // convert dist to angular distance in radians                                      // 362
                brng = gju.numberToRadius(brng); // 363
                // 364
                var lat1 = gju.numberToRadius(pt.coordinates[0]); // 365
                var lon1 = gju.numberToRadius(pt.coordinates[1]); // 366
                // 367
                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + // 368
                Math.cos(lat1) * Math.sin(dist) * Math.cos(brng)); // 369
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), // 370
                Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2)); // 371
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º                          // 372
                // 373
                return { // 374
                  'type': 'Point', // 375
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)] // 376
                }; // 377
              }; // 378
              // 379
            })(); // 380
            // 381
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports3 = _require3("./node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['geojson-utils'] = _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var MongoID = Package['mongo-id'].MongoID;
  var Random = Package.random.Random;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo.js                                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var assertHasValidFieldNames = void 0; // 1
            _module.watch(_require("./validation.js"), { // 1
              assertHasValidFieldNames: function (v) {
                // 1
                assertHasValidFieldNames = v; // 1
              } // 1
            }, 0); // 1
            //
            // XXX type checking on selectors (graceful error if malformed)                                                        // 3
            // LocalCollection: a set of documents that supports queries and modifiers.                                            // 5
            // Cursor: a specification for a particular subset of documents, w/                                                    // 7
            // a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                                 // 8
            // ObserveHandle: the return value of a live query.                                                                    // 10
            LocalCollection = function (name) {
              // 12
              var self = this; // 13
              self.name = name; // _id -> document (also containing id)                                                            // 14
              //
              self._docs = new LocalCollection._IdMap(); // 16
              self._observeQueue = new Meteor._SynchronousQueue(); // 18
              self.next_qid = 1; // live query id generator                                                                        // 20
              // qid -> live query object. keys:                                                                                   // 22
              //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                           // 23
              //  results: array (ordered) or object (unordered) of current results                                                // 24
              //    (aliased with self._docs!)                                                                                     // 25
              //  resultsSnapshot: snapshot of results. null if not paused.                                                        // 26
              //  cursor: Cursor object for the query.                                                                             // 27
              //  selector, sorter, (callbacks): functions                                                                         // 28
              //
              self.queries = {}; // null if not saving originals; an IdMap from id to original document value if                   // 29
              // saving originals. See comments before saveOriginals().                                                            // 32
              //
              self._savedOriginals = null; // True when observers are paused and we should not send callbacks.                     // 33
              //
              self.paused = false; // 36
            }; // 37
            //
            Minimongo = {}; // Object exported only for unit testing.                                                              // 39
            // Use it to export private functions to test in Tinytest.                                                             // 42
            //
            MinimongoTest = {}; // 43
            //
            MinimongoError = function (message) {
              // 45
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 45
              //
              if (typeof message === "string" && options.field) {
                // 46
                message += " for field '" + options.field + "'"; // 47
              } // 48
              //
              var e = new Error(message); // 50
              e.name = "MinimongoError"; // 51
              return e; // 52
            }; // options may include sort, skip, limit, reactive                                                                  // 53
            // sort may be any of these forms:                                                                                     // 57
            //     {a: 1, b: -1}                                                                                                   // 58
            //     [["a", "asc"], ["b", "desc"]]                                                                                   // 59
            //     ["a", ["b", "desc"]]                                                                                            // 60
            //   (in the first form you're beholden to key enumeration order in                                                    // 61
            //   your javascript VM)                                                                                               // 62
            //                                                                                                                     // 63
            // reactive: if given, and false, don't register with Tracker (default                                                 // 64
            // is true)                                                                                                            // 65
            //                                                                                                                     // 66
            // XXX possibly should support retrieving a subset of fields? and                                                      // 67
            // have it be a hint (ignored on the client, when not copying the                                                      // 68
            // doc?)                                                                                                               // 69
            //                                                                                                                     // 70
            // XXX sort does not yet support subkeys ('a.b') .. fix that!                                                          // 71
            // XXX add one more sort form: "key"                                                                                   // 72
            // XXX tests                                                                                                           // 73
            //
            //
            LocalCollection.prototype.find = function (selector, options) {
              // 74
              // default syntax for everything is to omit the selector argument.                                                   // 75
              // but if selector is explicitly passed in as false or undefined, we                                                 // 76
              // want a selector that matches nothing.                                                                             // 77
              if (arguments.length === 0) selector = {}; // 78
              return new LocalCollection.Cursor(this, selector, options); // 81
            }; // don't call this ctor directly.  use LocalCollection.find().                                                      // 82
            //
            //
            LocalCollection.Cursor = function (collection, selector, options) {
              // 86
              var self = this; // 87
              if (!options) options = {}; // 88
              self.collection = collection; // 90
              self.sorter = null; // 91
              self.matcher = new Minimongo.Matcher(selector); // 92
              //
              if (LocalCollection._selectorIsId(selector)) {
                // 94
                // stash for fast path                                                                                             // 95
                self._selectorId = selector; // 96
              } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                // 97
                // also do the fast path for { _id: idString }                                                                     // 98
                self._selectorId = selector._id; // 99
              } else {
                // 100
                self._selectorId = undefined; // 101
                //
                if (self.matcher.hasGeoQuery() || options.sort) {
                  // 102
                  self.sorter = new Minimongo.Sorter(options.sort || [], { // 103
                    matcher: self.matcher // 104
                  }); // 104
                } // 105
              } // 106
              //
              self.skip = options.skip; // 108
              self.limit = options.limit; // 109
              self.fields = options.fields; // 110
              self._projectionFn = LocalCollection._compileProjection(self.fields || {}); // 112
              self._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.
              //
              if (typeof Tracker !== "undefined") self.reactive = options.reactive === undefined ? true : options.reactive; // 117
            }; // Since we don't actually have a "nextObject" interface, there's really no                                         // 119
            // reason to have a "rewind" interface.  All it did was make multiple calls                                            // 122
            // to fetch/map/forEach return nothing the second time.                                                                // 123
            // XXX COMPAT WITH 0.8.1                                                                                               // 124
            //
            //
            LocalCollection.Cursor.prototype.rewind = function () {}; // 125
            //
            LocalCollection.prototype.findOne = function (selector, options) {
              // 128
              if (arguments.length === 0) selector = {}; // NOTE: by setting limit 1 here, we end up using very inefficient        // 129
              // code that recomputes the whole query on each update. The upside is                                                // 133
              // that when you reactively depend on a findOne you only get                                                         // 134
              // invalidated when the found object changes, not any object in the                                                  // 135
              // collection. Most findOne will be by id, which has a fast path, so                                                 // 136
              // this might not be a big deal. In most cases, invalidation causes                                                  // 137
              // the called to re-query anyway, so this should be a net performance                                                // 138
              // improvement.                                                                                                      // 139
              //
              options = options || {}; // 140
              options.limit = 1; // 141
              return this.find(selector, options).fetch()[0]; // 143
            }; /**                                                                                                                 // 144
                * @callback IterationCallback                                                                                      //
                * @param {Object} doc                                                                                              //
                * @param {Number} index                                                                                            //
                */ /**                                                                                                             //
                    * @summary Call `callback` once for each matching document, sequentially and synchronously.                    //
                    * @locus Anywhere                                                                                              //
                    * @method  forEach                                                                                             //
                    * @instance                                                                                                    //
                    * @memberOf Mongo.Cursor                                                                                       //
                    * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
                    * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                        //
                    */ //
            //
            LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {
              // 160
              var self = this; // 161
              //
              var objects = self._getRawObjects({ // 163
                ordered: true // 163
              }); // 163
              //
              if (self.reactive) {
                // 165
                self._depend({ // 166
                  addedBefore: true, // 167
                  removed: true, // 168
                  changed: true, // 169
                  movedBefore: true // 170
                }); // 166
              } // 171
              //
              _.each(objects, function (elt, i) {
                // 173
                // This doubles as a clone operation.                                                                              // 174
                elt = self._projectionFn(elt); // 175
                if (self._transform) elt = self._transform(elt); // 177
                callback.call(thisArg, elt, i, self); // 179
              }); // 180
            }; // 181
            //
            LocalCollection.Cursor.prototype.getTransform = function () {
              // 183
              return this._transform; // 184
            }; /**                                                                                                                 // 185
                * @summary Map callback over all matching documents.  Returns an Array.                                            //
                * @locus Anywhere                                                                                                  //
                * @method map                                                                                                      //
                * @instance                                                                                                        //
                * @memberOf Mongo.Cursor                                                                                           //
                * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
                * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                            //
                */ //
            //
            LocalCollection.Cursor.prototype.map = function (callback, thisArg) {
              // 196
              var self = this; // 197
              var res = []; // 198
              self.forEach(function (doc, index) {
                // 199
                res.push(callback.call(thisArg, doc, index, self)); // 200
              }); // 201
              return res; // 202
            }; /**                                                                                                                 // 203
                * @summary Return all matching documents as an Array.                                                              //
                * @memberOf Mongo.Cursor                                                                                           //
                * @method  fetch                                                                                                   //
                * @instance                                                                                                        //
                * @locus Anywhere                                                                                                  //
                * @returns {Object[]}                                                                                              //
                */ //
            //
            LocalCollection.Cursor.prototype.fetch = function () {
              // 213
              var self = this; // 214
              var res = []; // 215
              self.forEach(function (doc) {
                // 216
                res.push(doc); // 217
              }); // 218
              return res; // 219
            }; /**                                                                                                                 // 220
                * @summary Returns the number of documents that match a query.                                                     //
                * @memberOf Mongo.Cursor                                                                                           //
                * @method  count                                                                                                   //
                * @instance                                                                                                        //
                * @locus Anywhere                                                                                                  //
                * @returns {Number}                                                                                                //
                */ //
            //
            LocalCollection.Cursor.prototype.count = function () {
              // 230
              var self = this; // 231
              if (self.reactive) self._depend({ // 233
                added: true, // 234
                removed: true // 234
              }, true /* allow the observe to be unordered */); // 234
              return self._getRawObjects({ // 237
                ordered: true // 237
              }).length; // 237
            }; // 238
            //
            LocalCollection.Cursor.prototype._publishCursor = function (sub) {
              // 240
              var self = this; // 241
              if (!self.collection.name) throw new Error("Can't publish a cursor from a collection without a name."); // 242
              var collection = self.collection.name; // XXX minimongo should not depend on mongo-livedata!                         // 244
              //
              if (!Package.mongo) {
                // 247
                throw new Error("Can't publish from Minimongo without the `mongo` package."); // 248
              } // 249
              //
              return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection); // 251
            }; // 252
            //
            LocalCollection.Cursor.prototype._getCollectionName = function () {
              // 254
              var self = this; // 255
              return self.collection.name; // 256
            }; // 257
            //
            LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {
              // 259
              if (callbacks.added && callbacks.addedBefore) throw new Error("Please specify only one of added() and addedBefore()");
              return !!(callbacks.addedBefore || callbacks.movedBefore); // 262
            }; // 263
            //
            LocalCollection._observeCallbacksAreOrdered = function (callbacks) {
              // 265
              if (callbacks.addedAt && callbacks.added) throw new Error("Please specify only one of added() and addedAt()"); // 266
              if (callbacks.changedAt && callbacks.changed) throw new Error("Please specify only one of changed() and changedAt()");
              if (callbacks.removed && callbacks.removedAt) throw new Error("Please specify only one of removed() and removedAt()");
              return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt || callbacks.removedAt); // 273
            }; // the handle that comes back from observe.                                                                         // 275
            //
            //
            LocalCollection.ObserveHandle = function () {}; // options to contain:                                                 // 278
            //  * callbacks for observe():                                                                                         // 281
            //    - addedAt (document, atIndex)                                                                                    // 282
            //    - added (document)                                                                                               // 283
            //    - changedAt (newDocument, oldDocument, atIndex)                                                                  // 284
            //    - changed (newDocument, oldDocument)                                                                             // 285
            //    - removedAt (document, atIndex)                                                                                  // 286
            //    - removed (document)                                                                                             // 287
            //    - movedTo (document, oldIndex, newIndex)                                                                         // 288
            //                                                                                                                     // 289
            // attributes available on returned query handle:                                                                      // 290
            //  * stop(): end updates                                                                                              // 291
            //  * collection: the collection this query is querying                                                                // 292
            //                                                                                                                     // 293
            // iff x is a returned query handle, (x instanceof                                                                     // 294
            // LocalCollection.ObserveHandle) is true                                                                              // 295
            //                                                                                                                     // 296
            // initial results delivered through added callback                                                                    // 297
            // XXX maybe callbacks should take a list of objects, to expose transactions?                                          // 298
            // XXX maybe support field limiting (to limit what you're notified on)                                                 // 299
            //
            //
            _.extend(LocalCollection.Cursor.prototype, { // 301
              /**                                                                                                                  // 302
               * @summary Watch a query.  Receive callbacks as the result set changes.                                             //
               * @locus Anywhere                                                                                                   //
               * @memberOf Mongo.Cursor                                                                                            //
               * @instance                                                                                                         //
               * @param {Object} callbacks Functions to call to deliver the result set as it changes                               //
               */observe: function (options) {
                //
                var self = this; // 310
                return LocalCollection._observeFromObserveChanges(self, options); // 311
              }, // 312
              /**                                                                                                                  // 314
               * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.
               * @locus Anywhere                                                                                                   //
               * @memberOf Mongo.Cursor                                                                                            //
               * @instance                                                                                                         //
               * @param {Object} callbacks Functions to call to deliver the result set as it changes                               //
               */observeChanges: function (options) {
                //
                var self = this; // 322
                //
                var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                // unordered observe.  eg, update's EJSON.clone, and the "there are several"                                       // 327
                // comment in _modifyAndNotify                                                                                     // 328
                // XXX allow skip/limit with unordered observe                                                                     // 329
                //
                //
                if (!options._allow_unordered && !ordered && (self.skip || self.limit)) throw new Error("must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit");
                if (self.fields && (self.fields._id === 0 || self.fields._id === false)) throw Error("You may not observe a cursor with {fields: {_id: 0}}");
                var query = { // 336
                  dirty: false, // 337
                  matcher: self.matcher, // 338
                  // not fast pathed                                                                                               // 338
                  sorter: ordered && self.sorter, // 339
                  distances: self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap(), // 340
                  resultsSnapshot: null, // 342
                  ordered: ordered, // 343
                  cursor: self, // 344
                  projectionFn: self._projectionFn // 345
                }; // 336
                var qid; // Non-reactive queries call added[Before] and then never call anything                                   // 347
                // else.                                                                                                           // 350
                //
                if (self.reactive) {
                  // 351
                  qid = self.collection.next_qid++; // 352
                  self.collection.queries[qid] = query; // 353
                } // 354
                //
                query.results = self._getRawObjects({ // 355
                  ordered: ordered, // 356
                  distances: query.distances // 356
                }); // 355
                if (self.collection.paused) query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap(); // wrap callbacks we were passed. callbacks only fire when not paused and
                // are never undefined                                                                                             // 361
                // Filters out blacklisted fields according to cursor's projection.                                                // 362
                // XXX wrong place for this?                                                                                       // 363
                // furthermore, callbacks enqueue until the operation we're working on is                                          // 365
                // done.                                                                                                           // 366
                //
                var wrapCallback = function (f) {
                  // 367
                  if (!f) return function () {}; // 368
                  return function () /*args*/{
                    // 370
                    var context = this; // 371
                    var args = arguments; // 372
                    if (self.collection.paused) return; // 374
                    //
                    self.collection._observeQueue.queueTask(function () {
                      // 377
                      f.apply(context, args); // 378
                    }); // 379
                  }; // 380
                }; // 381
                //
                query.added = wrapCallback(options.added); // 382
                query.changed = wrapCallback(options.changed); // 383
                query.removed = wrapCallback(options.removed); // 384
                //
                if (ordered) {
                  // 385
                  query.addedBefore = wrapCallback(options.addedBefore); // 386
                  query.movedBefore = wrapCallback(options.movedBefore); // 387
                } // 388
                //
                if (!options._suppress_initial && !self.collection.paused) {
                  // 390
                  // XXX unify ordered and unordered interface                                                                     // 391
                  var each = ordered ? _.bind(_.each, null, query.results) : _.bind(query.results.forEach, query.results); // 392
                  each(function (doc) {
                    // 395
                    var fields = EJSON.clone(doc); // 396
                    delete fields._id; // 398
                    if (ordered) query.addedBefore(doc._id, self._projectionFn(fields), null); // 399
                    query.added(doc._id, self._projectionFn(fields)); // 401
                  }); // 402
                } // 403
                //
                var handle = new LocalCollection.ObserveHandle(); // 405
                //
                _.extend(handle, { // 406
                  collection: self.collection, // 407
                  stop: function () {
                    // 408
                    if (self.reactive) delete self.collection.queries[qid]; // 409
                  } // 411
                }); // 406
                //
                if (self.reactive && Tracker.active) {
                  // 414
                  // XXX in many cases, the same observe will be recreated when                                                    // 415
                  // the current autorun is rerun.  we could save work by                                                          // 416
                  // letting it linger across rerun and potentially get                                                            // 417
                  // repurposed if the same observe is performed, using logic                                                      // 418
                  // similar to that of Meteor.subscribe.                                                                          // 419
                  Tracker.onInvalidate(function () {
                    // 420
                    handle.stop(); // 421
                  }); // 422
                } // run the observe callbacks resulting from the initial contents                                                 // 423
                // before we leave the observe.                                                                                    // 425
                //
                //
                self.collection._observeQueue.drain(); // 426
                //
                return handle; // 428
              } // 429
            }); // Returns a collection of matching objects, but doesn't deep copy them.                                           // 301
            //                                                                                                                     // 433
            // If ordered is set, returns a sorted array, respecting sorter, skip, and limit                                       // 434
            // properties of the query.  if sorter is falsey, no sort -- you get the natural                                       // 435
            // order.                                                                                                              // 436
            //                                                                                                                     // 437
            // If ordered is not set, returns an object mapping from ID to doc (sorter, skip                                       // 438
            // and limit should not be set).                                                                                       // 439
            //                                                                                                                     // 440
            // If ordered is set and this cursor is a $near geoquery, then this function                                           // 441
            // will use an _IdMap to track each distance from the $near argument point in                                          // 442
            // order to use it as a sort key. If an _IdMap is passed in the 'distances'                                            // 443
            // argument, this function will clear it and use it for this purpose (otherwise                                        // 444
            // it will just create its own _IdMap). The observeChanges implementation uses                                         // 445
            // this to remember the distances after this function returns.                                                         // 446
            //
            //
            LocalCollection.Cursor.prototype._getRawObjects = function (options) {
              // 447
              var self = this; // 448
              options = options || {}; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                     // 449
              // compatible                                                                                                        // 452
              //
              var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value                  // 453
              //
              if (self._selectorId !== undefined) {
                // 456
                // If you have non-zero skip and ask for a single id, you get                                                      // 457
                // nothing. This is so it matches the behavior of the '{_id: foo}'                                                 // 458
                // path.                                                                                                           // 459
                if (self.skip) return results; // 460
                //
                var selectedDoc = self.collection._docs.get(self._selectorId); // 463
                //
                if (selectedDoc) {
                  // 464
                  if (options.ordered) results.push(selectedDoc);else results.set(self._selectorId, selectedDoc); // 465
                } // 469
                //
                return results; // 470
              } // slow path for arbitrary selector, sort, skip, limit                                                             // 471
              // in the observeChanges case, distances is actually part of the "query" (ie,                                        // 475
              // live results set) object.  in other cases, distances is only used inside                                          // 476
              // this function.                                                                                                    // 477
              //
              //
              var distances; // 478
              //
              if (self.matcher.hasGeoQuery() && options.ordered) {
                // 479
                if (options.distances) {
                  // 480
                  distances = options.distances; // 481
                  distances.clear(); // 482
                } else {
                  // 483
                  distances = new LocalCollection._IdMap(); // 484
                } // 485
              } // 486
              //
              self.collection._docs.forEach(function (doc, id) {
                // 488
                var matchResult = self.matcher.documentMatches(doc); // 489
                //
                if (matchResult.result) {
                  // 490
                  if (options.ordered) {
                    // 491
                    results.push(doc); // 492
                    if (distances && matchResult.distance !== undefined) distances.set(id, matchResult.distance); // 493
                  } else {
                    // 495
                    results.set(id, doc); // 496
                  } // 497
                } // Fast path for limited unsorted queries.                                                                       // 498
                // XXX 'length' check here seems wrong for ordered                                                                 // 500
                //
                //
                if (self.limit && !self.skip && !self.sorter && results.length === self.limit) return false; // break              // 501
                //
                return true; // continue                                                                                           // 504
              }); // 505
              //
              if (!options.ordered) return results; // 507
              //
              if (self.sorter) {
                // 510
                var comparator = self.sorter.getComparator({ // 511
                  distances: distances // 511
                }); // 511
                results.sort(comparator); // 512
              } // 513
              //
              var idx_start = self.skip || 0; // 515
              var idx_end = self.limit ? self.limit + idx_start : results.length; // 516
              return results.slice(idx_start, idx_end); // 517
            }; // XXX Maybe we need a version of observe that just calls a callback if                                             // 518
            // anything changed.                                                                                                   // 521
            //
            //
            LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {
              // 522
              var self = this; // 523
              //
              if (Tracker.active) {
                // 525
                var v = new Tracker.Dependency(); // 526
                v.depend(); // 527
                //
                var notifyChange = _.bind(v.changed, v); // 528
                //
                var options = { // 530
                  _suppress_initial: true, // 531
                  _allow_unordered: _allow_unordered // 532
                }; // 530
                //
                _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'], function (fnName) {
                  // 534
                  if (changers[fnName]) options[fnName] = notifyChange; // 536
                }); // observeChanges will stop() when this computation is invalidated                                             // 538
                //
                //
                self.observeChanges(options); // 541
              } // 542
            }; // XXX possibly enforce that 'undefined' does not appear (we assume                                                 // 543
            // this in our handling of null and $exists)                                                                           // 546
            //
            //
            LocalCollection.prototype.insert = function (doc, callback) {
              // 547
              var self = this; // 548
              doc = EJSON.clone(doc); // 549
              assertHasValidFieldNames(doc); // 551
              //
              if (!_.has(doc, '_id')) {
                // 553
                // if you really want to use ObjectIDs, set this global.                                                           // 554
                // Mongo.Collection specifies its own ids and does not use this code.                                              // 555
                doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id(); // 556
              } // 558
              //
              var id = doc._id; // 559
              if (self._docs.has(id)) throw MinimongoError("Duplicate _id '" + id + "'"); // 561
              //
              self._saveOriginal(id, undefined); // 564
              //
              self._docs.set(id, doc); // 565
              //
              var queriesToRecompute = []; // trigger live queries that match                                                      // 567
              //
              for (var qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {
                // 569
                var query = self.queries[qid]; // 570
                if (query.dirty) continue; // 571
                var matchResult = query.matcher.documentMatches(doc); // 572
                //
                if (matchResult.result) {
                  // 573
                  if (query.distances && matchResult.distance !== undefined) query.distances.set(id, matchResult.distance); // 574
                  if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else LocalCollection._insertInResults(query, doc);
                } // 580
              } // 581
              //
              _.each(queriesToRecompute, function (qid) {
                // 583
                if (self.queries[qid]) self._recomputeResults(self.queries[qid]); // 584
              }); // 586
              //
              self._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run                 // 587
              // immediately.                                                                                                      // 590
              //
              //
              if (callback) Meteor.defer(function () {
                // 591
                callback(null, id); // 593
              }); // 594
              return id; // 595
            }; // Iterates over a subset of documents that could match selector; calls                                             // 596
            // f(doc, id) on each of them.  Specifically, if selector specifies                                                    // 599
            // specific _id's, it only looks at those.  doc is *not* cloned: it is the                                             // 600
            // same object that is in _docs.                                                                                       // 601
            //
            //
            LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {
              // 602
              var self = this; // 603
              //
              var specificIds = LocalCollection._idsMatchedBySelector(selector); // 604
              //
              if (specificIds) {
                // 605
                for (var i = 0; i < specificIds.length; ++i) {
                  // 606
                  var id = specificIds[i]; // 607
                  //
                  var doc = self._docs.get(id); // 608
                  //
                  if (doc) {
                    // 609
                    var breakIfFalse = f(doc, id); // 610
                    if (breakIfFalse === false) break; // 611
                  } // 613
                } // 614
              } else {
                // 615
                self._docs.forEach(f); // 616
              } // 617
            }; // 618
            //
            LocalCollection.prototype.remove = function (selector, callback) {
              // 620
              var self = this; // Easy special case: if we're not calling observeChanges callbacks and we're                       // 621
              // not saving originals and we got asked to remove everything, then just empty                                       // 624
              // everything directly.                                                                                              // 625
              //
              if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {
                // 626
                var result = self._docs.size(); // 627
                //
                self._docs.clear(); // 628
                //
                _.each(self.queries, function (query) {
                  // 629
                  if (query.ordered) {
                    // 630
                    query.results = []; // 631
                  } else {
                    // 632
                    query.results.clear(); // 633
                  } // 634
                }); // 635
                //
                if (callback) {
                  // 636
                  Meteor.defer(function () {
                    // 637
                    callback(null, result); // 638
                  }); // 639
                } // 640
                //
                return result; // 641
              } // 642
              //
              var matcher = new Minimongo.Matcher(selector); // 644
              var remove = []; // 645
              //
              self._eachPossiblyMatchingDoc(selector, function (doc, id) {
                // 646
                if (matcher.documentMatches(doc).result) remove.push(id); // 647
              }); // 649
              //
              var queriesToRecompute = []; // 651
              var queryRemove = []; // 652
              //
              for (var i = 0; i < remove.length; i++) {
                // 653
                var removeId = remove[i]; // 654
                //
                var removeDoc = self._docs.get(removeId); // 655
                //
                _.each(self.queries, function (query, qid) {
                  // 656
                  if (query.dirty) return; // 657
                  //
                  if (query.matcher.documentMatches(removeDoc).result) {
                    // 659
                    if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else queryRemove.push({ // 660
                      qid: qid, // 663
                      doc: removeDoc // 663
                    }); // 663
                  } // 664
                }); // 665
                //
                self._saveOriginal(removeId, removeDoc); // 666
                //
                self._docs.remove(removeId); // 667
              } // run live query callbacks _after_ we've removed the documents.                                                   // 668
              //
              //
              _.each(queryRemove, function (remove) {
                // 671
                var query = self.queries[remove.qid]; // 672
                //
                if (query) {
                  // 673
                  query.distances && query.distances.remove(remove.doc._id); // 674
                  //
                  LocalCollection._removeFromResults(query, remove.doc); // 675
                } // 676
              }); // 677
              //
              _.each(queriesToRecompute, function (qid) {
                // 678
                var query = self.queries[qid]; // 679
                if (query) self._recomputeResults(query); // 680
              }); // 682
              //
              self._observeQueue.drain(); // 683
              //
              result = remove.length; // 684
              if (callback) Meteor.defer(function () {
                // 685
                callback(null, result); // 687
              }); // 688
              return result; // 689
            }; // XXX atomicity: if multi is true, and one modification fails, do                                                  // 690
            // we rollback the whole operation, or what?                                                                           // 693
            //
            //
            LocalCollection.prototype.update = function (selector, mod, options, callback) {
              // 694
              var self = this; // 695
              //
              if (!callback && options instanceof Function) {
                // 696
                callback = options; // 697
                options = null; // 698
              } // 699
              //
              if (!options) options = {}; // 700
              var matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
              // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                         // 705
              // it. (We don't need to save the original results of paused queries because                                         // 706
              // they already have a resultsSnapshot and we won't be diffing in                                                    // 707
              // _recomputeResults.)                                                                                               // 708
              //
              var qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple queries    // 709
              //
              var docMap = new LocalCollection._IdMap(); // 711
              //
              var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector); // 712
              //
              _.each(self.queries, function (query, qid) {
                // 714
                if ((query.cursor.skip || query.cursor.limit) && !self.paused) {
                  // 715
                  // Catch the case of a reactive `count()` on a cursor with skip                                                  // 716
                  // or limit, which registers an unordered observe. This is a                                                     // 717
                  // pretty rare case, so we just clone the entire result set with                                                 // 718
                  // no optimizations for documents that appear in these result                                                    // 719
                  // sets and other queries.                                                                                       // 720
                  if (query.results instanceof LocalCollection._IdMap) {
                    // 721
                    qidToOriginalResults[qid] = query.results.clone(); // 722
                    return; // 723
                  } // 724
                  //
                  if (!(query.results instanceof Array)) {
                    // 726
                    throw new Error("Assertion failed: query.results not an array"); // 727
                  } // Clones a document to be stored in `qidToOriginalResults`                                                    // 728
                  // because it may be modified before the new and old result sets                                                 // 731
                  // are diffed. But if we know exactly which document IDs we're                                                   // 732
                  // going to modify, then we only need to clone those.                                                            // 733
                  //
                  //
                  var memoizedCloneIfNeeded = function (doc) {
                    // 734
                    if (docMap.has(doc._id)) {
                      // 735
                      return docMap.get(doc._id); // 736
                    } else {
                      // 737
                      var docToMemoize; // 738
                      //
                      if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function (id) {
                        // 740
                        return EJSON.equals(id, doc._id); // 741
                      })) {
                        // 742
                        docToMemoize = doc; // 743
                      } else {
                        // 744
                        docToMemoize = EJSON.clone(doc); // 745
                      } // 746
                      //
                      docMap.set(doc._id, docToMemoize); // 748
                      return docToMemoize; // 749
                    } // 750
                  }; // 751
                  //
                  qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded); // 753
                } // 754
              }); // 755
              //
              var recomputeQids = {}; // 756
              var updateCount = 0; // 758
              //
              self._eachPossiblyMatchingDoc(selector, function (doc, id) {
                // 760
                var queryResult = matcher.documentMatches(doc); // 761
                //
                if (queryResult.result) {
                  // 762
                  // XXX Should we save the original even if mod ends up being a no-op?                                            // 763
                  self._saveOriginal(id, doc); // 764
                  //
                  self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices); // 765
                  //
                  ++updateCount; // 766
                  if (!options.multi) return false; // break                                                                       // 767
                } // 769
                //
                return true; // 770
              }); // 771
              //
              _.each(recomputeQids, function (dummy, qid) {
                // 773
                var query = self.queries[qid]; // 774
                if (query) self._recomputeResults(query, qidToOriginalResults[qid]); // 775
              }); // 777
              //
              self._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then               // 778
              // it's time to do an insert. Figure out what document we are inserting, and                                         // 781
              // generate an id for it.                                                                                            // 782
              //
              //
              var insertedId; // 783
              //
              if (updateCount === 0 && options.upsert) {
                // 784
                var selectorModifier = LocalCollection._selectorIsId(selector) ? { // 786
                  _id: selector // 787
                } : selector; // 787
                selectorModifier = LocalCollection._removeDollarOperators(selectorModifier); // 790
                var newDoc = {}; // 792
                //
                if (selectorModifier._id) {
                  // 793
                  newDoc._id = selectorModifier._id; // 794
                  delete selectorModifier._id; // 795
                } // This double _modify call is made to help work around an issue where collection                                // 796
                // upserts won't work properly, with nested properties (see issue #8631).                                          // 799
                //
                //
                LocalCollection._modify(newDoc, { // 800
                  $set: selectorModifier // 800
                }); // 800
                //
                LocalCollection._modify(newDoc, mod, { // 801
                  isInsert: true // 801
                }); // 801
                //
                if (!newDoc._id && options.insertedId) newDoc._id = options.insertedId; // 803
                insertedId = self.insert(newDoc); // 805
                updateCount = 1; // 806
              } // Return the number of affected documents, or in the upsert case, an object                                       // 807
              // containing the number of affected docs and the id of the doc that was                                             // 810
              // inserted, if any.                                                                                                 // 811
              //
              //
              var result; // 812
              //
              if (options._returnObject) {
                // 813
                result = { // 814
                  numberAffected: updateCount // 815
                }; // 814
                if (insertedId !== undefined) result.insertedId = insertedId; // 817
              } else {
                // 819
                result = updateCount; // 820
              } // 821
              //
              if (callback) Meteor.defer(function () {
                // 823
                callback(null, result); // 825
              }); // 826
              return result; // 827
            }; // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                             // 828
            // equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                                       // 831
            // true }).                                                                                                            // 832
            //
            //
            LocalCollection.prototype.upsert = function (selector, mod, options, callback) {
              // 833
              var self = this; // 834
              //
              if (!callback && typeof options === "function") {
                // 835
                callback = options; // 836
                options = {}; // 837
              } // 838
              //
              return self.update(selector, mod, _.extend({}, options, { // 839
                upsert: true, // 840
                _returnObject: true // 841
              }), callback); // 839
            }; // 843
            //
            LocalCollection.prototype._modifyAndNotify = function (doc, mod, recomputeQids, arrayIndices) {
              // 845
              var self = this; // 847
              var matched_before = {}; // 849
              //
              for (var qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {
                // 850
                var query = self.queries[qid]; // 851
                if (query.dirty) continue; // 852
                //
                if (query.ordered) {
                  // 854
                  matched_before[qid] = query.matcher.documentMatches(doc).result; // 855
                } else {
                  // 856
                  // Because we don't support skip or limit (yet) in unordered queries, we                                         // 857
                  // can just do a direct lookup.                                                                                  // 858
                  matched_before[qid] = query.results.has(doc._id); // 859
                } // 860
              } // 861
              //
              var old_doc = EJSON.clone(doc); // 863
              //
              LocalCollection._modify(doc, mod, { // 865
                arrayIndices: arrayIndices // 865
              }); // 865
              //
              for (qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {
                // 867
                query = self.queries[qid]; // 868
                if (query.dirty) continue; // 869
                var before = matched_before[qid]; // 871
                var afterMatch = query.matcher.documentMatches(doc); // 872
                var after = afterMatch.result; // 873
                if (after && query.distances && afterMatch.distance !== undefined) query.distances.set(doc._id, afterMatch.distance);
                //
                if (query.cursor.skip || query.cursor.limit) {
                  // 877
                  // We need to recompute any query where the doc may have been in the                                             // 878
                  // cursor's window either before or after the update. (Note that if skip                                         // 879
                  // or limit is set, "before" and "after" being true do not necessarily                                           // 880
                  // mean that the document is in the cursor's output after skip/limit is                                          // 881
                  // applied... but if they are false, then the document definitely is NOT                                         // 882
                  // in the output. So it's safe to skip recompute if neither before or                                            // 883
                  // after are true.)                                                                                              // 884
                  if (before || after) recomputeQids[qid] = true; // 885
                } else if (before && !after) {
                  // 887
                  LocalCollection._removeFromResults(query, doc); // 888
                } else if (!before && after) {
                  // 889
                  LocalCollection._insertInResults(query, doc); // 890
                } else if (before && after) {
                  // 891
                  LocalCollection._updateInResults(query, doc, old_doc); // 892
                } // 893
              } // 894
            }; // XXX the sorted-query logic below is laughably inefficient. we'll                                                 // 895
            // need to come up with a better datastructure for this.                                                               // 898
            //                                                                                                                     // 899
            // XXX the logic for observing with a skip or a limit is even more                                                     // 900
            // laughably inefficient. we recompute the whole results every time!                                                   // 901
            //
            //
            LocalCollection._insertInResults = function (query, doc) {
              // 903
              var fields = EJSON.clone(doc); // 904
              delete fields._id; // 905
              //
              if (query.ordered) {
                // 906
                if (!query.sorter) {
                  // 907
                  query.addedBefore(doc._id, query.projectionFn(fields), null); // 908
                  query.results.push(doc); // 909
                } else {
                  // 910
                  var i = LocalCollection._insertInSortedList(query.sorter.getComparator({ // 911
                    distances: query.distances // 912
                  }), query.results, doc); // 912
                  //
                  var next = query.results[i + 1]; // 914
                  if (next) next = next._id;else next = null; // 915
                  query.addedBefore(doc._id, query.projectionFn(fields), next); // 919
                } // 920
                //
                query.added(doc._id, query.projectionFn(fields)); // 921
              } else {
                // 922
                query.added(doc._id, query.projectionFn(fields)); // 923
                query.results.set(doc._id, doc); // 924
              } // 925
            }; // 926
            //
            LocalCollection._removeFromResults = function (query, doc) {
              // 928
              if (query.ordered) {
                // 929
                var i = LocalCollection._findInOrderedResults(query, doc); // 930
                //
                query.removed(doc._id); // 931
                query.results.splice(i, 1); // 932
              } else {
                // 933
                var id = doc._id; // in case callback mutates doc                                                                  // 934
                //
                query.removed(doc._id); // 935
                query.results.remove(id); // 936
              } // 937
            }; // 938
            //
            LocalCollection._updateInResults = function (query, doc, old_doc) {
              // 940
              if (!EJSON.equals(doc._id, old_doc._id)) throw new Error("Can't change a doc's _id while updating"); // 941
              var projectionFn = query.projectionFn; // 943
              var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc)); // 944
              //
              if (!query.ordered) {
                // 947
                if (!_.isEmpty(changedFields)) {
                  // 948
                  query.changed(doc._id, changedFields); // 949
                  query.results.set(doc._id, doc); // 950
                } // 951
                //
                return; // 952
              } // 953
              //
              var orig_idx = LocalCollection._findInOrderedResults(query, doc); // 955
              //
              if (!_.isEmpty(changedFields)) query.changed(doc._id, changedFields); // 957
              if (!query.sorter) return; // just take it out and put it back in again, and see if the index                        // 959
              // changes                                                                                                           // 963
              //
              query.results.splice(orig_idx, 1); // 964
              //
              var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({ // 965
                distances: query.distances // 966
              }), query.results, doc); // 966
              //
              if (orig_idx !== new_idx) {
                // 968
                var next = query.results[new_idx + 1]; // 969
                if (next) next = next._id;else next = null; // 970
                query.movedBefore && query.movedBefore(doc._id, next); // 974
              } // 975
            }; // Recomputes the results of a query and runs observe callbacks for the                                             // 976
            // difference between the previous results and the current results (unless                                             // 979
            // paused). Used for skip/limit queries.                                                                               // 980
            //                                                                                                                     // 981
            // When this is used by insert or remove, it can just use query.results for the                                        // 982
            // old results (and there's no need to pass in oldResults), because these                                              // 983
            // operations don't mutate the documents in the collection. Update needs to pass                                       // 984
            // in an oldResults which was deep-copied before the modifier was applied.                                             // 985
            //                                                                                                                     // 986
            // oldResults is guaranteed to be ignored if the query is not paused.                                                  // 987
            //
            //
            LocalCollection.prototype._recomputeResults = function (query, oldResults) {
              // 988
              var self = this; // 989
              //
              if (self.paused) {
                // 990
                // There's no reason to recompute the results now as we're still paused.                                           // 991
                // By flagging the query as "dirty", the recompute will be performed                                               // 992
                // when resumeObservers is called.                                                                                 // 993
                query.dirty = true; // 994
                return; // 995
              } // 996
              //
              if (!self.paused && !oldResults) oldResults = query.results; // 998
              if (query.distances) query.distances.clear(); // 1000
              query.results = query.cursor._getRawObjects({ // 1002
                ordered: query.ordered, // 1003
                distances: query.distances // 1003
              }); // 1002
              //
              if (!self.paused) {
                // 1005
                LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, { // 1006
                  projectionFn: query.projectionFn // 1008
                }); // 1008
              } // 1009
            }; // 1010
            //
            LocalCollection._findInOrderedResults = function (query, doc) {
              // 1013
              if (!query.ordered) throw new Error("Can't call _findInOrderedResults on unordered query"); // 1014
              //
              for (var i = 0; i < query.results.length; i++) {
                // 1016
                if (query.results[i] === doc) return i; // 1017
              } // 1016
              //
              throw Error("object missing from query"); // 1019
            }; // This binary search puts a value between any equal values, and the first                                          // 1020
            // lesser value.                                                                                                       // 1023
            //
            //
            LocalCollection._binarySearch = function (cmp, array, value) {
              // 1024
              var first = 0,
                  // 1025
              rangeLength = array.length; // 1025
              //
              while (rangeLength > 0) {
                // 1027
                var halfRange = Math.floor(rangeLength / 2); // 1028
                //
                if (cmp(value, array[first + halfRange]) >= 0) {
                  // 1029
                  first += halfRange + 1; // 1030
                  rangeLength -= halfRange + 1; // 1031
                } else {
                  // 1032
                  rangeLength = halfRange; // 1033
                } // 1034
              } // 1035
              //
              return first; // 1036
            }; // 1037
            //
            LocalCollection._insertInSortedList = function (cmp, array, value) {
              // 1039
              if (array.length === 0) {
                // 1040
                array.push(value); // 1041
                return 0; // 1042
              } // 1043
              //
              var idx = LocalCollection._binarySearch(cmp, array, value); // 1045
              //
              array.splice(idx, 0, value); // 1046
              return idx; // 1047
            }; // To track what documents are affected by a piece of code, call saveOriginals()                                    // 1048
            // before it and retrieveOriginals() after it. retrieveOriginals returns an                                            // 1051
            // object whose keys are the ids of the documents that were affected since the                                         // 1052
            // call to saveOriginals(), and the values are equal to the document's contents                                        // 1053
            // at the time of saveOriginals. (In the case of an inserted document, undefined                                       // 1054
            // is the value.) You must alternate between calls to saveOriginals() and                                              // 1055
            // retrieveOriginals().                                                                                                // 1056
            //
            //
            LocalCollection.prototype.saveOriginals = function () {
              // 1057
              var self = this; // 1058
              if (self._savedOriginals) throw new Error("Called saveOriginals twice without retrieveOriginals"); // 1059
              self._savedOriginals = new LocalCollection._IdMap(); // 1061
            }; // 1062
            //
            LocalCollection.prototype.retrieveOriginals = function () {
              // 1063
              var self = this; // 1064
              if (!self._savedOriginals) throw new Error("Called retrieveOriginals without saveOriginals"); // 1065
              var originals = self._savedOriginals; // 1068
              self._savedOriginals = null; // 1069
              return originals; // 1070
            }; // 1071
            //
            LocalCollection.prototype._saveOriginal = function (id, doc) {
              // 1073
              var self = this; // Are we even trying to save originals?                                                            // 1074
              //
              if (!self._savedOriginals) return; // Have we previously mutated the original (and so 'doc' is not actually          // 1076
              // original)?  (Note the 'has' check rather than truth: we store undefined                                           // 1079
              // here for inserted docs!)                                                                                          // 1080
              //
              if (self._savedOriginals.has(id)) return; // 1081
              //
              self._savedOriginals.set(id, EJSON.clone(doc)); // 1083
            }; // Pause the observers. No callbacks from observers will fire until                                                 // 1084
            // 'resumeObservers' is called.                                                                                        // 1087
            //
            //
            LocalCollection.prototype.pauseObservers = function () {
              // 1088
              // No-op if already paused.                                                                                          // 1089
              if (this.paused) return; // Set the 'paused' flag such that new observer messages don't fire.                        // 1090
              //
              this.paused = true; // Take a snapshot of the query results for each query.                                          // 1094
              //
              for (var qid in meteorBabelHelpers.sanitizeForInObject(this.queries)) {
                // 1097
                var query = this.queries[qid]; // 1098
                query.resultsSnapshot = EJSON.clone(query.results); // 1100
              } // 1101
            }; // Resume the observers. Observers immediately receive change                                                       // 1102
            // notifications to bring them to the current state of the                                                             // 1105
            // database. Note that this is not just replaying all the changes that                                                 // 1106
            // happened during the pause, it is a smarter 'coalesced' diff.                                                        // 1107
            //
            //
            LocalCollection.prototype.resumeObservers = function () {
              // 1108
              var self = this; // No-op if not paused.                                                                             // 1109
              //
              if (!this.paused) return; // Unset the 'paused' flag. Make sure to do this first, otherwise                          // 1111
              // observer methods won't actually fire when we trigger them.                                                        // 1115
              //
              this.paused = false; // 1116
              //
              for (var qid in meteorBabelHelpers.sanitizeForInObject(this.queries)) {
                // 1118
                var query = self.queries[qid]; // 1119
                //
                if (query.dirty) {
                  // 1120
                  query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.       // 1121
                  //
                  self._recomputeResults(query, query.resultsSnapshot); // 1123
                } else {
                  // 1124
                  // Diff the current results against the snapshot and send to observers.                                          // 1125
                  // pass the query object for its observer callbacks.                                                             // 1126
                  LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, { // 1127
                    projectionFn: query.projectionFn // 1129
                  }); // 1129
                } // 1130
                //
                query.resultsSnapshot = null; // 1131
              } // 1132
              //
              self._observeQueue.drain(); // 1133
            }; // 1134
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "wrap_transform.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/wrap_transform.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Wrap a transform function to return objects that have the _id field                                                 // 1
            // of the untransformed document. This ensures that subsystems such as                                                 // 2
            // the observe-sequence package that call `observe` can keep track of                                                  // 3
            // the documents identities.                                                                                           // 4
            //                                                                                                                     // 5
            // - Require that it returns objects                                                                                   // 6
            // - If the return value has an _id field, verify that it matches the                                                  // 7
            //   original _id field                                                                                                // 8
            // - If the return value doesn't have an _id field, add it back.                                                       // 9
            LocalCollection.wrapTransform = function (transform) {
              // 10
              if (!transform) return null; // No need to doubly-wrap transforms.                                                   // 11
              //
              if (transform.__wrappedTransform__) return transform; // 15
              //
              var wrapped = function (doc) {
                // 18
                if (!_.has(doc, '_id')) {
                  // 19
                  // XXX do we ever have a transform on the oplog's collection? because that                                       // 20
                  // collection has no _id.                                                                                        // 21
                  throw new Error("can only transform documents with _id"); // 22
                } // 23
                //
                var id = doc._id; // XXX consider making tracker a weak dependency and checking Package.tracker here               // 25
                //
                var transformed = Tracker.nonreactive(function () {
                  // 27
                  return transform(doc); // 28
                }); // 29
                //
                if (!isPlainObject(transformed)) {
                  // 31
                  throw new Error("transform must return object"); // 32
                } // 33
                //
                if (_.has(transformed, '_id')) {
                  // 35
                  if (!EJSON.equals(transformed._id, id)) {
                    // 36
                    throw new Error("transformed document can't have different _id"); // 37
                  } // 38
                } else {
                  // 39
                  transformed._id = id; // 40
                } // 41
                //
                return transformed; // 42
              }; // 43
              //
              wrapped.__wrappedTransform__ = true; // 44
              return wrapped; // 45
            }; // 46
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "helpers.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/helpers.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                                        // 1
            // arrays.                                                                                                             // 2
            // XXX maybe this should be EJSON.isArray                                                                              // 3
            isArray = function (x) {
              // 4
              return _.isArray(x) && !EJSON.isBinary(x); // 5
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                         // 6
            // RegExp                                                                                                              // 9
            // XXX note that _type(undefined) === 3!!!!                                                                            // 10
            //
            //
            isPlainObject = LocalCollection._isPlainObject = function (x) {
              // 11
              return x && LocalCollection._f._type(x) === 3; // 12
            }; // 13
            //
            isIndexable = function (x) {
              // 15
              return isArray(x) || isPlainObject(x); // 16
            }; // Returns true if this is an object with at least one key and all keys begin                                       // 17
            // with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                                         // 20
            // others don't.                                                                                                       // 21
            //
            //
            isOperatorObject = function (valueSelector, inconsistentOK) {
              // 22
              if (!isPlainObject(valueSelector)) return false; // 23
              var theseAreOperators = undefined; // 26
              //
              _.each(valueSelector, function (value, selKey) {
                // 27
                var thisIsOperator = selKey.substr(0, 1) === '$'; // 28
                //
                if (theseAreOperators === undefined) {
                  // 29
                  theseAreOperators = thisIsOperator; // 30
                } else if (theseAreOperators !== thisIsOperator) {
                  // 31
                  if (!inconsistentOK) throw new Error("Inconsistent operator: " + JSON.stringify(valueSelector)); // 32
                  theseAreOperators = false; // 35
                } // 36
              }); // 37
              //
              return !!theseAreOperators; // {} has no operators                                                                   // 38
            }; // string can be converted to integer                                                                               // 39
            //
            //
            isNumericKey = function (s) {
              // 43
              return (/^[0-9]+$/.test(s) // 44

              ); // 44
            }; // 45
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "selector.js": function (_require3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/selector.js                                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _toConsumableArray2 = _require3("babel-runtime/helpers/toConsumableArray"); //
            //
            var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2); //
            //
            var _typeof2 = _require3("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            // The minimongo selector compiler!                                                                                    // 1
            // Terminology:                                                                                                        // 3
            //  - a "selector" is the EJSON object representing a selector                                                         // 4
            //  - a "matcher" is its compiled form (whether a full Minimongo.Matcher                                               // 5
            //    object or one of the component lambdas that matches parts of it)                                                 // 6
            //  - a "result object" is an object with a "result" field and maybe                                                   // 7
            //    distance and arrayIndices.                                                                                       // 8
            //  - a "branched value" is an object with a "value" field and maybe                                                   // 9
            //    "dontIterate" and "arrayIndices".                                                                                // 10
            //  - a "document" is a top-level object that can be stored in a collection.                                           // 11
            //  - a "lookup function" is a function that takes in a document and returns                                           // 12
            //    an array of "branched values".                                                                                   // 13
            //  - a "branched matcher" maps from an array of branched values to a result                                           // 14
            //    object.                                                                                                          // 15
            //  - an "element matcher" maps from a single value to a bool.                                                         // 16
            // Main entry point.                                                                                                   // 18
            //   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                                               // 19
            //   if (matcher.documentMatches({a: 7})) ...                                                                          // 20
            Minimongo.Matcher = function (selector) {
              // 21
              var isUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // 21
              var self = this; // A set (object mapping string -> *) of all of the document paths looked                           // 22
              // at by the selector. Also includes the empty string if it may look at any                                          // 24
              // path (eg, $where).                                                                                                // 25
              //
              self._paths = {}; // Set to true if compilation finds a $near.                                                       // 26
              //
              self._hasGeoQuery = false; // Set to true if compilation finds a $where.                                             // 28
              //
              self._hasWhere = false; // Set to false if compilation finds anything other than a simple equality or                // 30
              // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                                       // 32
              // scalars as operands.                                                                                              // 33
              //
              self._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null                  // 34
              // if such document is too hard to find.                                                                             // 36
              //
              self._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user       // 37
              // passed in a function; otherwise is definitely an object (eg, IDs are                                              // 39
              // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                              // 40
              // Sorter._useWithMatcher.                                                                                           // 41
              //
              self._selector = null; // 42
              self._docMatcher = self._compileSelector(selector); // Set to true if selection is done for an update operation      // 43
              // Default is false                                                                                                  // 45
              // Used for $near array update (issue #3599)                                                                         // 46
              //
              self._isUpdate = isUpdate; // 47
            }; // 48
            //
            _.extend(Minimongo.Matcher.prototype, { // 50
              documentMatches: function (doc) {
                // 51
                if (!doc || (typeof doc === "undefined" ? "undefined" : (0, _typeof3.default)(doc)) !== "object") {
                  // 52
                  throw Error("documentMatches needs a document"); // 53
                } // 54
                //
                return this._docMatcher(doc); // 55
              }, // 56
              hasGeoQuery: function () {
                // 57
                return this._hasGeoQuery; // 58
              }, // 59
              hasWhere: function () {
                // 60
                return this._hasWhere; // 61
              }, // 62
              isSimple: function () {
                // 63
                return this._isSimple; // 64
              }, // 65
              // Given a selector, return a function that takes one argument, a                                                    // 67
              // document. It returns a result object.                                                                             // 68
              _compileSelector: function (selector) {
                // 69
                var self = this; // you can pass a literal function instead of a selector                                          // 70
                //
                if (selector instanceof Function) {
                  // 72
                  self._isSimple = false; // 73
                  self._selector = selector; // 74
                  //
                  self._recordPathUsed(''); // 75
                  //
                  return function (doc) {
                    // 76
                    return { // 77
                      result: !!selector.call(doc) // 77
                    }; // 77
                  }; // 78
                } // shorthand -- scalars match _id                                                                                // 79
                //
                //
                if (LocalCollection._selectorIsId(selector)) {
                  // 82
                  self._selector = { // 83
                    _id: selector // 83
                  }; // 83
                  //
                  self._recordPathUsed('_id'); // 84
                  //
                  return function (doc) {
                    // 85
                    return { // 86
                      result: EJSON.equals(doc._id, selector) // 86
                    }; // 86
                  }; // 87
                } // protect against dangerous selectors.  falsey and {_id: falsey} are both                                       // 88
                // likely programmer error, and not what you want, particularly for                                                // 91
                // destructive operations.                                                                                         // 92
                //
                //
                if (!selector || '_id' in selector && !selector._id) {
                  // 93
                  self._isSimple = false; // 94
                  return nothingMatcher; // 95
                } // Top level can't be an array or true or binary.                                                                // 96
                //
                //
                if (typeof selector === 'boolean' || isArray(selector) || EJSON.isBinary(selector)) throw new Error("Invalid selector: " + selector);
                self._selector = EJSON.clone(selector); // 103
                return compileDocumentSelector(selector, self, { // 104
                  isRoot: true // 104
                }); // 104
              }, // 105
              _recordPathUsed: function (path) {
                // 106
                this._paths[path] = true; // 107
              }, // 108
              // Returns a list of key paths the given selector is looking for. It includes                                        // 109
              // the empty string if there is a $where.                                                                            // 110
              _getPaths: function () {
                // 111
                return _.keys(this._paths); // 112
              } // 113
            }); // Takes in a selector that could match a full document (eg, the original                                          // 50
            // selector). Returns a function mapping document->result object.                                                      // 118
            //                                                                                                                     // 119
            // matcher is the Matcher object we are compiling.                                                                     // 120
            //                                                                                                                     // 121
            // If this is the root document selector (ie, not wrapped in $and or the like),                                        // 122
            // then isRoot is true. (This is used by $near.)                                                                       // 123
            //
            //
            var compileDocumentSelector = function (docSelector, matcher, options) {
              // 124
              options = options || {}; // 125
              var docMatchers = []; // 126
              //
              _.each(docSelector, function (subSelector, key) {
                // 127
                if (key.substr(0, 1) === '$') {
                  // 128
                  // Outer operators are either logical operators (they recurse back into                                          // 129
                  // this function), or $where.                                                                                    // 130
                  if (!_.has(LOGICAL_OPERATORS, key)) throw new Error("Unrecognized logical operator: " + key); // 131
                  matcher._isSimple = false; // 133
                  docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch)); // 134
                } else {
                  // 136
                  // Record this path, but only if we aren't in an elemMatcher, since in an                                        // 137
                  // elemMatch this is a path inside an object in an array, not in the doc                                         // 138
                  // root.                                                                                                         // 139
                  if (!options.inElemMatch) matcher._recordPathUsed(key); // 140
                  var lookUpByIndex = makeLookupFunction(key); // 142
                  var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot); // 143
                  docMatchers.push(function (doc) {
                    // 145
                    var branchValues = lookUpByIndex(doc); // 146
                    return valueMatcher(branchValues); // 147
                  }); // 148
                } // 149
              }); // 150
              //
              return andDocumentMatchers(docMatchers); // 152
            }; // Takes in a selector that could match a key-indexed value in a document; eg,                                      // 153
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                         // 156
            // indicate equality).  Returns a branched matcher: a function mapping                                                 // 157
            // [branched value]->result object.                                                                                    // 158
            //
            //
            var compileValueSelector = function (valueSelector, matcher, isRoot) {
              // 159
              if (valueSelector instanceof RegExp) {
                // 160
                matcher._isSimple = false; // 161
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector)); // 162
              } else if (isOperatorObject(valueSelector)) {
                // 164
                return operatorBranchedMatcher(valueSelector, matcher, isRoot); // 165
              } else {
                // 166
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector)); // 167
              } // 169
            }; // Given an element matcher (which evaluates a single value), returns a branched                                    // 170
            // value (which evaluates the element matcher on all the branches and returns a                                        // 173
            // more structured return value possibly including arrayIndices).                                                      // 174
            //
            //
            var convertElementMatcherToBranchedMatcher = function (elementMatcher, options) {
              // 175
              options = options || {}; // 177
              return function (branches) {
                // 178
                var expanded = branches; // 179
                //
                if (!options.dontExpandLeafArrays) {
                  // 180
                  expanded = expandArraysInBranches(branches, options.dontIncludeLeafArrays); // 181
                } // 183
                //
                var ret = {}; // 184
                ret.result = _.any(expanded, function (element) {
                  // 185
                  var matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".                                                                          // 189
                  //
                  if (typeof matched === 'number') {
                    // 190
                    // XXX This code dates from when we only stored a single array index                                           // 191
                    // (for the outermost array). Should we be also including deeper array                                         // 192
                    // indices from the $elemMatch match?                                                                          // 193
                    if (!element.arrayIndices) element.arrayIndices = [matched]; // 194
                    matched = true; // 196
                  } // If some element matched, and it's tagged with array indices, include                                        // 197
                  // those indices in our result object.                                                                           // 200
                  //
                  //
                  if (matched && element.arrayIndices) ret.arrayIndices = element.arrayIndices; // 201
                  return matched; // 204
                }); // 205
                return ret; // 206
              }; // 207
            }; // Takes a RegExp object and returns an element matcher.                                                            // 208
            //
            //
            regexpElementMatcher = function (regexp) {
              // 211
              return function (value) {
                // 212
                if (value instanceof RegExp) {
                  // 213
                  // Comparing two regexps means seeing if the regexps are identical                                               // 214
                  // (really!). Underscore knows how.                                                                              // 215
                  return _.isEqual(value, regexp); // 216
                } // Regexps only work against strings.                                                                            // 217
                //
                //
                if (typeof value !== 'string') return false; // Reset regexp's state to avoid inconsistent matching for objects with the
                // same value on consecutive calls of regexp.test. This happens only if the                                        // 223
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                                       // 224
                // which we should *not* change the lastIndex but MongoDB doesn't support                                          // 225
                // either of these flags.                                                                                          // 226
                //
                regexp.lastIndex = 0; // 227
                return regexp.test(value); // 229
              }; // 230
            }; // Takes something that is not an operator object and returns an element matcher                                    // 231
            // for equality with that thing.                                                                                       // 234
            //
            //
            equalityElementMatcher = function (elementSelector) {
              // 235
              if (isOperatorObject(elementSelector)) throw Error("Can't create equalityValueSelector for operator object"); // Special-case: null and undefined are equal (if you got undefined in there
              // somewhere, or if you got it due to some branch being non-existent in the                                          // 240
              // weird special case), even though they aren't with EJSON.equals.                                                   // 241
              //
              if (elementSelector == null) {
                // 242
                // undefined or null                                                                                               // 242
                return function (value) {
                  // 243
                  return value == null; // undefined or null                                                                       // 244
                }; // 245
              } // 246
              //
              return function (value) {
                // 248
                return LocalCollection._f._equal(elementSelector, value); // 249
              }; // 250
            }; // Takes an operator object (an object with $ keys) and returns a branched                                          // 251
            // matcher for it.                                                                                                     // 254
            //
            //
            var operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {
              // 255
              // Each valueSelector works separately on the various branches.  So one                                              // 256
              // operator can match one branch and another can match another branch.  This                                         // 257
              // is OK.                                                                                                            // 258
              var operatorMatchers = []; // 260
              //
              _.each(valueSelector, function (operand, operator) {
                // 261
                var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) && _.isNumber(operand); // 262
                //
                var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand); // 264
                var simpleInclusion = _.contains(['$in', '$nin'], operator) && _.isArray(operand) && !_.any(operand, _.isObject); // 265
                //
                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  // 268
                  matcher._isSimple = false; // 269
                } // 270
                //
                if (_.has(VALUE_OPERATORS, operator)) {
                  // 272
                  operatorMatchers.push(VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot)); // 273
                } else if (_.has(ELEMENT_OPERATORS, operator)) {
                  // 275
                  var options = ELEMENT_OPERATORS[operator]; // 276
                  operatorMatchers.push(convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options));
                } else {
                  // 282
                  throw new Error("Unrecognized operator: " + operator); // 283
                } // 284
              }); // 285
              //
              return andBranchedMatchers(operatorMatchers); // 287
            }; // 288
            //
            var compileArrayOfDocumentSelectors = function (selectors, matcher, inElemMatch) {
              // 290
              if (!isArray(selectors) || _.isEmpty(selectors)) throw Error("$and/$or/$nor must be nonempty array"); // 292
              return _.map(selectors, function (subSelector) {
                // 294
                if (!isPlainObject(subSelector)) throw Error("$or/$and/$nor entries need to be full objects"); // 295
                return compileDocumentSelector(subSelector, matcher, { // 297
                  inElemMatch: inElemMatch // 298
                }); // 298
              }); // 299
            }; // Operators that appear at the top level of a document selector.                                                   // 300
            //
            //
            var LOGICAL_OPERATORS = { // 303
              $and: function (subSelector, matcher, inElemMatch) {
                // 304
                var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // 305
                return andDocumentMatchers(matchers); // 307
              }, // 308
              $or: function (subSelector, matcher, inElemMatch) {
                // 310
                var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.                                                                                    // 315
                //
                if (matchers.length === 1) return matchers[0]; // 316
                return function (doc) {
                  // 319
                  var result = _.any(matchers, function (f) {
                    // 320
                    return f(doc).result; // 321
                  }); // $or does NOT set arrayIndices when it has multiple                                                        // 322
                  // sub-expressions. (Tested against MongoDB.)                                                                    // 324
                  //
                  //
                  return { // 325
                    result: result // 325
                  }; // 325
                }; // 326
              }, // 327
              $nor: function (subSelector, matcher, inElemMatch) {
                // 329
                var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // 330
                return function (doc) {
                  // 332
                  var result = _.all(matchers, function (f) {
                    // 333
                    return !f(doc).result; // 334
                  }); // Never set arrayIndices, because we only match if nothing in particular                                    // 335
                  // "matched" (and because this is consistent with MongoDB).                                                      // 337
                  //
                  //
                  return { // 338
                    result: result // 338
                  }; // 338
                }; // 339
              }, // 340
              $where: function (selectorValue, matcher) {
                // 342
                // Record that *any* path may be used.                                                                             // 343
                matcher._recordPathUsed(''); // 344
                //
                matcher._hasWhere = true; // 345
                //
                if (!(selectorValue instanceof Function)) {
                  // 346
                  // XXX MongoDB seems to have more complex logic to decide where or or not                                        // 347
                  // to add "return"; not sure exactly what it is.                                                                 // 348
                  selectorValue = Function("obj", "return " + selectorValue); // 349
                } // 350
                //
                return function (doc) {
                  // 351
                  // We make the document available as both `this` and `obj`.                                                      // 352
                  // XXX not sure what we should do if this throws                                                                 // 353
                  return { // 354
                    result: selectorValue.call(doc, doc) // 354
                  }; // 354
                }; // 355
              }, // 356
              // This is just used as a comment in the query (in MongoDB, it also ends up in                                       // 358
              // query logs); it has no effect on the actual selection.                                                            // 359
              $comment: function () {
                // 360
                return function () {
                  // 361
                  return { // 362
                    result: true // 362
                  }; // 362
                }; // 363
              } // 364
            }; // Returns a branched matcher that matches iff the given matcher does not.                                          // 303
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it                                              // 368
            // means that ALL branch values need to fail to match innerBranchedMatcher.                                            // 369
            //
            var invertBranchedMatcher = function (branchedMatcher) {
              // 370
              return function (branchValues) {
                // 371
                var invertMe = branchedMatcher(branchValues); // We explicitly choose to strip arrayIndices here: it doesn't make sense to
                // say "update the array element that does not match something", at least                                          // 374
                // in mongo-land.                                                                                                  // 375
                //
                return { // 376
                  result: !invertMe.result // 376
                }; // 376
              }; // 377
            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                       // 378
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                         // 381
            // "match each branched value independently and combine with                                                           // 382
            // convertElementMatcherToBranchedMatcher".                                                                            // 383
            //
            //
            var VALUE_OPERATORS = { // 384
              $eq: function (operand) {
                // 385
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)); // 386
              }, // 388
              $not: function (operand, valueSelector, matcher) {
                // 389
                return invertBranchedMatcher(compileValueSelector(operand, matcher)); // 390
              }, // 391
              $ne: function (operand) {
                // 392
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))); // 393
              }, // 395
              $nin: function (operand) {
                // 396
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              }, // 399
              $exists: function (operand) {
                // 400
                var exists = convertElementMatcherToBranchedMatcher(function (value) {
                  // 401
                  return value !== undefined; // 402
                }); // 403
                return operand ? exists : invertBranchedMatcher(exists); // 404
              }, // 405
              // $options just provides options for $regex; its logic is inside $regex                                             // 406
              $options: function (operand, valueSelector) {
                // 407
                if (!_.has(valueSelector, '$regex')) throw Error("$options needs a $regex"); // 408
                return everythingMatcher; // 410
              }, // 411
              // $maxDistance is basically an argument to $near                                                                    // 412
              $maxDistance: function (operand, valueSelector) {
                // 413
                if (!valueSelector.$near) throw Error("$maxDistance needs a $near"); // 414
                return everythingMatcher; // 416
              }, // 417
              $all: function (operand, valueSelector, matcher) {
                // 418
                if (!isArray(operand)) throw Error("$all requires array"); // Not sure why, but this seems to be what MongoDB does.
                //
                if (_.isEmpty(operand)) return nothingMatcher; // 422
                var branchedMatchers = []; // 425
                //
                _.each(operand, function (criterion) {
                  // 426
                  // XXX handle $all/$elemMatch combination                                                                        // 427
                  if (isOperatorObject(criterion)) throw Error("no $ expressions in $all"); // This is always a regexp or equality selector.
                  //
                  branchedMatchers.push(compileValueSelector(criterion, matcher)); // 431
                }); // andBranchedMatchers does NOT require all selectors to return true on the                                    // 432
                // SAME branch.                                                                                                    // 434
                //
                //
                return andBranchedMatchers(branchedMatchers); // 435
              }, // 436
              $near: function (operand, valueSelector, matcher, isRoot) {
                // 437
                if (!isRoot) throw Error("$near can't be inside another $ operator"); // 438
                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and             // 440
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                          // 443
                // marked with a $geometry property, though legacy coordinates can be                                              // 444
                // matched using $geometry.                                                                                        // 445
                //
                var maxDistance, point, distance; // 447
                //
                if (isPlainObject(operand) && _.has(operand, '$geometry')) {
                  // 448
                  // GeoJSON "2dsphere" mode.                                                                                      // 449
                  maxDistance = operand.$maxDistance; // 450
                  point = operand.$geometry; // 451
                  //
                  distance = function (value) {
                    // 452
                    // XXX: for now, we don't calculate the actual distance between, say,                                          // 453
                    // polygon and circle. If people care about this use-case it will get                                          // 454
                    // a priority.                                                                                                 // 455
                    if (!value) return null; // 456
                    if (!value.type) return GeoJSON.pointDistance(point, { // 458
                      type: "Point", // 460
                      coordinates: pointToArray(value) // 460
                    }); // 460
                    //
                    if (value.type === "Point") {
                      // 461
                      return GeoJSON.pointDistance(point, value); // 462
                    } else {
                      // 463
                      return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1; // 464
                    } // 466
                  }; // 467
                } else {
                  // 468
                  maxDistance = valueSelector.$maxDistance; // 469
                  if (!isArray(operand) && !isPlainObject(operand)) throw Error("$near argument must be coordinate pair or GeoJSON");
                  point = pointToArray(operand); // 472
                  //
                  distance = function (value) {
                    // 473
                    if (!isArray(value) && !isPlainObject(value)) return null; // 474
                    return distanceCoordinatePairs(point, value); // 476
                  }; // 477
                } // 478
                //
                return function (branchedValues) {
                  // 480
                  // There might be multiple points in the document that match the given                                           // 481
                  // field. Only one of them needs to be within $maxDistance, but we need to                                       // 482
                  // evaluate all of them and use the nearest one for the implicit sort                                            // 483
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                             // 484
                  //                                                                                                               // 485
                  // Note: This differs from MongoDB's implementation, where a document will                                       // 486
                  // actually show up *multiple times* in the result set, with one entry for                                       // 487
                  // each within-$maxDistance branching point.                                                                     // 488
                  branchedValues = expandArraysInBranches(branchedValues); // 489
                  var result = { // 490
                    result: false // 490
                  }; // 490
                  //
                  _.every(branchedValues, function (branch) {
                    // 491
                    // if operation is an update, don't skip branches, just return the first one (#3599)                           // 492
                    if (!matcher._isUpdate) {
                      // 493
                      if (!((0, _typeof3.default)(branch.value) === "object")) {
                        // 494
                        return true; // 495
                      } // 496
                      //
                      var curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.      // 497
                      //
                      if (curDistance === null || curDistance > maxDistance) return true; // Skip anything that's a tie.           // 499
                      //
                      if (result.distance !== undefined && result.distance <= curDistance) return true; // 502
                    } // 504
                    //
                    result.result = true; // 505
                    result.distance = curDistance; // 506
                    if (!branch.arrayIndices) delete result.arrayIndices;else result.arrayIndices = branch.arrayIndices; // 507
                    if (matcher._isUpdate) return false; // 511
                    return true; // 513
                  }); // 514
                  //
                  return result; // 515
                }; // 516
              } // 517
            }; // Helpers for $near.                                                                                               // 384
            //
            var distanceCoordinatePairs = function (a, b) {
              // 521
              a = pointToArray(a); // 522
              b = pointToArray(b); // 523
              var x = a[0] - b[0]; // 524
              var y = a[1] - b[1]; // 525
              if (_.isNaN(x) || _.isNaN(y)) return null; // 526
              return Math.sqrt(x * x + y * y); // 528
            }; // Makes sure we get 2 elements array and assume the first one to be x and                                          // 529
            // the second one to y no matter what user passes.                                                                     // 531
            // In case user passes { lon: x, lat: y } returns [x, y]                                                               // 532
            //
            //
            var pointToArray = function (point) {
              // 533
              return _.map(point, _.identity); // 534
            }; // Helper for $lt/$gt/$lte/$gte.                                                                                    // 535
            //
            //
            var makeInequality = function (cmpValueComparator) {
              // 538
              return { // 539
                compileElementSelector: function (operand) {
                  // 540
                  // Arrays never compare false with non-arrays for any inequality.                                                // 541
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                             // 542
                  //     it seems to have been reverted.                                                                           // 543
                  //     See https://jira.mongodb.org/browse/SERVER-11444                                                          // 544
                  if (isArray(operand)) {
                    // 545
                    return function () {
                      // 546
                      return false; // 547
                    }; // 548
                  } // Special case: consider undefined and null the same (so true with                                            // 549
                  // $gte/$lte).                                                                                                   // 552
                  //
                  //
                  if (operand === undefined) operand = null; // 553
                  //
                  var operandType = LocalCollection._f._type(operand); // 556
                  //
                  return function (value) {
                    // 558
                    if (value === undefined) value = null; // Comparisons are never true among things of different type (except    // 559
                    // null vs undefined).                                                                                         // 562
                    //
                    if (LocalCollection._f._type(value) !== operandType) return false; // 563
                    return cmpValueComparator(LocalCollection._f._cmp(value, operand)); // 565
                  }; // 566
                } // 567
              }; // 539
            }; // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.                                                 // 569
            //
            //
            var getOperandBitmask = function (operand, selector) {
              // 572
              // numeric bitmask                                                                                                   // 573
              // You can provide a numeric bitmask to be matched against the operand field. It must be representable as a non-negative 32-bit signed integer.
              // Otherwise, $bitsAllSet will return an error.                                                                      // 575
              if (Number.isInteger(operand) && operand >= 0) {
                // 576
                return new Uint8Array(new Int32Array([operand]).buffer); // 577
              } // bindata bitmask                                                                                                 // 578
              // You can also use an arbitrarily large BinData instance as a bitmask.                                              // 580
              else if (EJSON.isBinary(operand)) {
                  // 576
                  return new Uint8Array(operand.buffer); // 582
                } // position list                                                                                                 // 583
                // If querying a list of bit positions, each <position> must be a non-negative integer. Bit positions start at 0 from the least significant bit.
                else if (isArray(operand) && operand.every(function (e) {
                    // 581
                    return Number.isInteger(e) && e >= 0; // 587
                  })) {
                    // 588
                    var buffer = new ArrayBuffer((Math.max.apply(Math, (0, _toConsumableArray3.default)(operand)) >> 3) + 1); // 589
                    var view = new Uint8Array(buffer); // 590
                    operand.forEach(function (x) {
                      // 591
                      view[x >> 3] |= 1 << (x & 0x7); // 592
                    }); // 593
                    return view; // 594
                  } // bad operand                                                                                                 // 595
                  else {
                      // 586
                      throw Error("operand to " + selector + " must be a numeric bitmask (representable as a non-negative 32-bit signed integer), a bindata bitmask or an array with bit positions (non-negative integers)");
                    } // 599
            }; // 600
            //
            var getValueBitmask = function (value, length) {
              // 601
              // The field value must be either numerical or a BinData instance. Otherwise, $bits... will not match the current document.
              // numerical                                                                                                         // 603
              if (Number.isSafeInteger(value)) {
                // 604
                // $bits... will not match numerical values that cannot be represented as a signed 64-bit integer                  // 605
                // This can be the case if a value is either too large or small to fit in a signed 64-bit integer, or if it has a fractional component.
                var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)); // 607
                var view = new Uint32Array(buffer, 0, 2); // 608
                view[0] = value % ((1 << 16) * (1 << 16)) | 0; // 609
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension                                                   // 610
                //
                if (value < 0) {
                  // 612
                  view = new Uint8Array(buffer, 2); // 613
                  view.forEach(function (byte, idx) {
                    // 614
                    view[idx] = 0xff; // 615
                  }); // 616
                } // 617
                //
                return new Uint8Array(buffer); // 618
              } // bindata                                                                                                         // 619
              else if (EJSON.isBinary(value)) {
                  // 604
                  return new Uint8Array(value.buffer); // 622
                } // no match                                                                                                      // 623
              //
              //
              return false; // 625
            }; // Each element selector contains:                                                                                  // 626
            //  - compileElementSelector, a function with args:                                                                    // 629
            //    - operand - the "right hand side" of the operator                                                                // 630
            //    - valueSelector - the "context" for the operator (so that $regex can find                                        // 631
            //      $options)                                                                                                      // 632
            //    - matcher - the Matcher this is going into (so that $elemMatch can compile                                       // 633
            //      more things)                                                                                                   // 634
            //    returning a function mapping a single value to bool.                                                             // 635
            //  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                                          // 636
            //    being called                                                                                                     // 637
            //  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                                           // 638
            //    expandArraysInBranches if it is called                                                                           // 639
            //
            //
            ELEMENT_OPERATORS = { // 640
              $lt: makeInequality(function (cmpValue) {
                // 641
                return cmpValue < 0; // 642
              }), // 643
              $gt: makeInequality(function (cmpValue) {
                // 644
                return cmpValue > 0; // 645
              }), // 646
              $lte: makeInequality(function (cmpValue) {
                // 647
                return cmpValue <= 0; // 648
              }), // 649
              $gte: makeInequality(function (cmpValue) {
                // 650
                return cmpValue >= 0; // 651
              }), // 652
              $mod: { // 653
                compileElementSelector: function (operand) {
                  // 654
                  if (!(isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error("argument to $mod must be an array of two numbers"); // 658
                  } // XXX could require to be ints or round or something                                                          // 659
                  //
                  //
                  var divisor = operand[0]; // 661
                  var remainder = operand[1]; // 662
                  return function (value) {
                    // 663
                    return typeof value === 'number' && value % divisor === remainder; // 664
                  }; // 665
                } // 666
              }, // 653
              $in: { // 668
                compileElementSelector: function (operand) {
                  // 669
                  if (!isArray(operand)) throw Error("$in needs an array"); // 670
                  var elementMatchers = []; // 673
                  //
                  _.each(operand, function (option) {
                    // 674
                    if (option instanceof RegExp) elementMatchers.push(regexpElementMatcher(option));else if (isOperatorObject(option)) throw Error("cannot nest $ under $in");else elementMatchers.push(equalityElementMatcher(option));
                  }); // 681
                  //
                  return function (value) {
                    // 683
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                                  // 684
                    if (value === undefined) value = null; // 685
                    return _.any(elementMatchers, function (e) {
                      // 687
                      return e(value); // 688
                    }); // 689
                  }; // 690
                } // 691
              }, // 668
              $size: { // 693
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                         // 694
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                         // 695
                // possible value.                                                                                                 // 696
                dontExpandLeafArrays: true, // 697
                compileElementSelector: function (operand) {
                  // 698
                  if (typeof operand === 'string') {
                    // 699
                    // Don't ask me why, but by experimentation, this seems to be what Mongo                                       // 700
                    // does.                                                                                                       // 701
                    operand = 0; // 702
                  } else if (typeof operand !== 'number') {
                    // 703
                    throw Error("$size needs a number"); // 704
                  } // 705
                  //
                  return function (value) {
                    // 706
                    return isArray(value) && value.length === operand; // 707
                  }; // 708
                } // 709
              }, // 693
              $type: { // 711
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                          // 712
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                          // 713
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                          // 714
                // should *not* include it itself.                                                                                 // 715
                dontIncludeLeafArrays: true, // 716
                compileElementSelector: function (operand) {
                  // 717
                  if (typeof operand !== 'number') throw Error("$type needs a number"); // 718
                  return function (value) {
                    // 720
                    return value !== undefined && LocalCollection._f._type(value) === operand; // 721
                  }; // 723
                } // 724
              }, // 711
              $bitsAllSet: { // 726
                compileElementSelector: function (operand) {
                  // 727
                  var op = getOperandBitmask(operand, '$bitsAllSet'); // 728
                  return function (value) {
                    // 729
                    var bitmask = getValueBitmask(value, op.length); // 730
                    return bitmask && op.every(function (byte, idx) {
                      // 731
                      return (bitmask[idx] & byte) == byte; // 732
                    }); // 733
                  }; // 734
                } // 735
              }, // 726
              $bitsAnySet: { // 737
                compileElementSelector: function (operand) {
                  // 738
                  var query = getOperandBitmask(operand, '$bitsAnySet'); // 739
                  return function (value) {
                    // 740
                    var bitmask = getValueBitmask(value, query.length); // 741
                    return bitmask && query.some(function (byte, idx) {
                      // 742
                      return (~bitmask[idx] & byte) !== byte; // 743
                    }); // 744
                  }; // 745
                } // 746
              }, // 737
              $bitsAllClear: { // 748
                compileElementSelector: function (operand) {
                  // 749
                  var query = getOperandBitmask(operand, '$bitsAllClear'); // 750
                  return function (value) {
                    // 751
                    var bitmask = getValueBitmask(value, query.length); // 752
                    return bitmask && query.every(function (byte, idx) {
                      // 753
                      return !(bitmask[idx] & byte); // 754
                    }); // 755
                  }; // 756
                } // 757
              }, // 748
              $bitsAnyClear: { // 759
                compileElementSelector: function (operand) {
                  // 760
                  var query = getOperandBitmask(operand, '$bitsAnyClear'); // 761
                  return function (value) {
                    // 762
                    var bitmask = getValueBitmask(value, query.length); // 763
                    return bitmask && query.some(function (byte, idx) {
                      // 764
                      return (bitmask[idx] & byte) !== byte; // 765
                    }); // 766
                  }; // 767
                } // 768
              }, // 759
              $regex: { // 770
                compileElementSelector: function (operand, valueSelector) {
                  // 771
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) throw Error("$regex has to be a string or RegExp");
                  var regexp; // 775
                  //
                  if (valueSelector.$options !== undefined) {
                    // 776
                    // Options passed in $options (even the empty string) always overrides                                         // 777
                    // options in the RegExp object itself. (See also                                                              // 778
                    // Mongo.Collection._rewriteSelector.)                                                                         // 779
                    // Be clear that we only support the JS-supported options, not extended                                        // 781
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s                                       // 782
                    // by transforming the regexp, but not today...                                                                // 783
                    if (/[^gim]/.test(valueSelector.$options)) throw new Error("Only the i, m, and g regexp options are supported");
                    var regexSource = operand instanceof RegExp ? operand.source : operand; // 787
                    regexp = new RegExp(regexSource, valueSelector.$options); // 788
                  } else if (operand instanceof RegExp) {
                    // 789
                    regexp = operand; // 790
                  } else {
                    // 791
                    regexp = new RegExp(operand); // 792
                  } // 793
                  //
                  return regexpElementMatcher(regexp); // 794
                } // 795
              }, // 770
              $elemMatch: { // 797
                dontExpandLeafArrays: true, // 798
                compileElementSelector: function (operand, valueSelector, matcher) {
                  // 799
                  if (!isPlainObject(operand)) throw Error("$elemMatch need an object"); // 800
                  var subMatcher, isDocMatcher; // 803
                  //
                  if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {
                    // 804
                    subMatcher = compileValueSelector(operand, matcher); // 805
                    isDocMatcher = false; // 806
                  } else {
                    // 807
                    // This is NOT the same as compileValueSelector(operand), and not just                                         // 808
                    // because of the slightly different calling convention.                                                       // 809
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not                                                // 810
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                                        // 811
                    subMatcher = compileDocumentSelector(operand, matcher, { // 812
                      inElemMatch: true // 813
                    }); // 813
                    isDocMatcher = true; // 814
                  } // 815
                  //
                  return function (value) {
                    // 817
                    if (!isArray(value)) return false; // 818
                    //
                    for (var i = 0; i < value.length; ++i) {
                      // 820
                      var arrayElement = value[i]; // 821
                      var arg; // 822
                      //
                      if (isDocMatcher) {
                        // 823
                        // We can only match {$elemMatch: {b: 3}} against objects.                                                 // 824
                        // (We can also match against arrays, if there's numeric indices,                                          // 825
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                                   // 826
                        if (!isPlainObject(arrayElement) && !isArray(arrayElement)) return false; // 827
                        arg = arrayElement; // 829
                      } else {
                        // 830
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                            // 831
                        // {a: [8]} but not {a: [[8]]}                                                                             // 832
                        arg = [{ // 833
                          value: arrayElement, // 833
                          dontIterate: true // 833
                        }]; // 833
                      } // XXX support $near in $elemMatch by propagating $distance?                                               // 834
                      //
                      //
                      if (subMatcher(arg).result) return i; // specially understood to mean "use as arrayIndices"                  // 836
                    } // 838
                    //
                    return false; // 839
                  }; // 840
                } // 841
                // 797
              } }; // makeLookupFunction(key) returns a lookup function.                                                               // 640
            //                                                                                                                     // 846
            // A lookup function takes in a document and returns an array of matching                                              // 847
            // branches.  If no arrays are found while looking up the key, this array will                                         // 848
            // have exactly one branches (possibly 'undefined', if some segment of the key                                         // 849
            // was not found).                                                                                                     // 850
            //                                                                                                                     // 851
            // If arrays are found in the middle, this can have more than one element, since                                       // 852
            // we "branch". When we "branch", if there are more key segments to look up,                                           // 853
            // then we only pursue branches that are plain objects (not arrays or scalars).                                        // 854
            // This means we can actually end up with no branches!                                                                 // 855
            //                                                                                                                     // 856
            // We do *NOT* branch on arrays that are found at the end (ie, at the last                                             // 857
            // dotted member of the key). We just return that array; if you want to                                                // 858
            // effectively "branch" over the array's values, post-process the lookup                                               // 859
            // function with expandArraysInBranches.                                                                               // 860
            //                                                                                                                     // 861
            // Each branch is an object with keys:                                                                                 // 862
            //  - value: the value at the branch                                                                                   // 863
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array                                        // 864
            //    that expandArraysInBranches should NOT expand. This specifically happens                                         // 865
            //    when there is a numeric index in the key, and ensures the                                                        // 866
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                                    // 867
            //    match {a: [[5]]}.                                                                                                // 868
            //  - arrayIndices: if any array indexing was done during lookup (either due to                                        // 869
            //    explicit numeric indices or implicit branching), this will be an array of                                        // 870
            //    the array indices used, from outermost to innermost; it is falsey or                                             // 871
            //    absent if no array index is used. If an explicit numeric index is used,                                          // 872
            //    the index will be followed in arrayIndices by the string 'x'.                                                    // 873
            //                                                                                                                     // 874
            //    Note: arrayIndices is used for two purposes. First, it is used to                                                // 875
            //    implement the '$' modifier feature, which only ever looks at its first                                           // 876
            //    element.                                                                                                         // 877
            //                                                                                                                     // 878
            //    Second, it is used for sort key generation, which needs to be able to tell                                       // 879
            //    the difference between different paths. Moreover, it needs to                                                    // 880
            //    differentiate between explicit and implicit branching, which is why                                              // 881
            //    there's the somewhat hacky 'x' entry: this means that explicit and                                               // 882
            //    implicit array lookups will have different full arrayIndices paths. (That                                        // 883
            //    code only requires that different paths have different arrayIndices; it                                          // 884
            //    doesn't actually "parse" arrayIndices. As an alternative, arrayIndices                                           // 885
            //    could contain objects with flags like "implicit", but I think that only                                          // 886
            //    makes the code surrounding them more complex.)                                                                   // 887
            //                                                                                                                     // 888
            //    (By the way, this field ends up getting passed around a lot without                                              // 889
            //    cloning, so never mutate any arrayIndices field/var in this package!)                                            // 890
            //                                                                                                                     // 891
            //                                                                                                                     // 892
            // At the top level, you may only pass in a plain object or array.                                                     // 893
            //                                                                                                                     // 894
            // See the test 'minimongo - lookup' for some examples of what lookup functions                                        // 895
            // return.                                                                                                             // 896
            //
            makeLookupFunction = function (key, options) {
              // 897
              options = options || {}; // 898
              var parts = key.split('.'); // 899
              var firstPart = parts.length ? parts[0] : ''; // 900
              var firstPartIsNumeric = isNumericKey(firstPart); // 901
              var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]); // 902
              var lookupRest; // 903
              //
              if (parts.length > 1) {
                // 904
                lookupRest = makeLookupFunction(parts.slice(1).join('.')); // 905
              } // 906
              //
              var omitUnnecessaryFields = function (retVal) {
                // 908
                if (!retVal.dontIterate) delete retVal.dontIterate; // 909
                if (retVal.arrayIndices && !retVal.arrayIndices.length) delete retVal.arrayIndices; // 911
                return retVal; // 913
              }; // Doc will always be a plain object or an array.                                                                 // 914
              // apply an explicit numeric index, an array.                                                                        // 917
              //
              //
              return function (doc, arrayIndices) {
                // 918
                if (!arrayIndices) arrayIndices = []; // 919
                //
                if (isArray(doc)) {
                  // 922
                  // If we're being asked to do an invalid lookup into an array (non-integer                                       // 923
                  // or out-of-bounds), return no results (which is different from returning                                       // 924
                  // a single undefined result, in that `null` equality checks won't match).                                       // 925
                  if (!(firstPartIsNumeric && firstPart < doc.length)) return []; // Remember that we used this array index. Include an 'x' to indicate that
                  // the previous index came from being considered as an explicit array                                            // 930
                  // index (not branching).                                                                                        // 931
                  //
                  arrayIndices = arrayIndices.concat(+firstPart, 'x'); // 932
                } // Do our first lookup.                                                                                          // 933
                //
                //
                var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.                            // 936
                //                                                                                                                 // 939
                // If what we found is an array, most value selectors will choose to treat                                         // 940
                // the elements of the array as matchable values in their own right, but                                           // 941
                // that's done outside of the lookup function. (Exceptions to this are $size                                       // 942
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                                       // 943
                // [[1, 2]]}.)                                                                                                     // 944
                //                                                                                                                 // 945
                // That said, if we just did an *explicit* array lookup (on doc) to find                                           // 946
                // firstLevel, and firstLevel is an array too, we do NOT want value                                                // 947
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                                        // 948
                // So in that case, we mark the return value as "don't iterate".                                                   // 949
                //
                if (!lookupRest) {
                  // 950
                  return [omitUnnecessaryFields({ // 951
                    value: firstLevel, // 952
                    dontIterate: isArray(doc) && isArray(firstLevel), // 953
                    arrayIndices: arrayIndices // 954
                  })]; // 951
                } // We need to dig deeper.  But if we can't, because what we've found is not                                      // 955
                // an array or plain object, we're done. If we just did a numeric index into                                       // 958
                // an array, we return nothing here (this is a change in Mongo 2.5 from                                            // 959
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                         // 960
                // return a single `undefined` (which can, for example, match via equality                                         // 961
                // with `null`).                                                                                                   // 962
                //
                //
                if (!isIndexable(firstLevel)) {
                  // 963
                  if (isArray(doc)) return []; // 964
                  return [omitUnnecessaryFields({ // 966
                    value: undefined, // 966
                    arrayIndices: arrayIndices // 967
                  })]; // 966
                } // 968
                //
                var result = []; // 970
                //
                var appendToResult = function (more) {
                  // 971
                  Array.prototype.push.apply(result, more); // 972
                }; // Dig deeper: look up the rest of the parts on whatever we've found.                                           // 973
                // (lookupRest is smart enough to not try to do invalid lookups into                                               // 976
                // firstLevel if it's an array.)                                                                                   // 977
                //
                //
                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also "branch": try to look up                                       // 981
                // the rest of the parts on each array element in parallel.                                                        // 982
                //                                                                                                                 // 983
                // In this case, we *only* dig deeper into array elements that are plain                                           // 984
                // objects. (Recall that we only got this far if we have further to dig.)                                          // 985
                // This makes sense: we certainly don't dig deeper into non-indexable                                              // 986
                // objects. And it would be weird to dig into an array: it's simpler to have                                       // 987
                // a rule that explicit integer indexes only apply to an outer array, not to                                       // 988
                // an array you find after a branching search.                                                                     // 989
                //                                                                                                                 // 990
                // In the special case of a numeric part in a *sort selector* (not a query                                         // 991
                // selector), we skip the branching: we ONLY allow the numeric part to mean                                        // 992
                // "look up this index" in that case, not "also look up this index in all                                          // 993
                // the elements of the array".                                                                                     // 994
                //
                if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {
                  // 995
                  _.each(firstLevel, function (branch, arrayIndex) {
                    // 996
                    if (isPlainObject(branch)) {
                      // 997
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex))); // 998
                    } // 1001
                  }); // 1002
                } // 1003
                //
                return result; // 1005
              }; // 1006
            }; // 1007
            //
            MinimongoTest.makeLookupFunction = makeLookupFunction; // 1008
            //
            expandArraysInBranches = function (branches, skipTheArrays) {
              // 1010
              var branchesOut = []; // 1011
              //
              _.each(branches, function (branch) {
                // 1012
                var thisIsArray = isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some                                       // 1015
                // arrays even skipTheArrays is true: these are arrays that were found via                                         // 1016
                // explicit numerical indices.)                                                                                    // 1017
                //
                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  // 1018
                  branchesOut.push({ // 1019
                    value: branch.value, // 1020
                    arrayIndices: branch.arrayIndices // 1021
                  }); // 1019
                } // 1023
                //
                if (thisIsArray && !branch.dontIterate) {
                  // 1024
                  _.each(branch.value, function (leaf, i) {
                    // 1025
                    branchesOut.push({ // 1026
                      value: leaf, // 1027
                      arrayIndices: (branch.arrayIndices || []).concat(i) // 1028
                    }); // 1026
                  }); // 1030
                } // 1031
              }); // 1032
              //
              return branchesOut; // 1033
            }; // 1034
            //
            var nothingMatcher = function (docOrBranchedValues) {
              // 1036
              return { // 1037
                result: false // 1037
              }; // 1037
            }; // 1038
            //
            var everythingMatcher = function (docOrBranchedValues) {
              // 1040
              return { // 1041
                result: true // 1041
              }; // 1041
            }; // NB: We are cheating and using this function to implement "AND" for both                                          // 1042
            // "document matchers" and "branched matchers". They both return result objects                                        // 1046
            // but the argument is different: for the former it's a whole doc, whereas for                                         // 1047
            // the latter it's an array of "branched values".                                                                      // 1048
            //
            //
            var andSomeMatchers = function (subMatchers) {
              // 1049
              if (subMatchers.length === 0) return everythingMatcher; // 1050
              if (subMatchers.length === 1) return subMatchers[0]; // 1052
              return function (docOrBranches) {
                // 1055
                var ret = {}; // 1056
                ret.result = _.all(subMatchers, function (f) {
                  // 1057
                  var subResult = f(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has              // 1058
                  // one. Yes, this means that if there are multiple $near fields in a                                             // 1060
                  // query, something arbitrary happens; this appears to be consistent with                                        // 1061
                  // Mongo.                                                                                                        // 1062
                  //
                  if (subResult.result && subResult.distance !== undefined && ret.distance === undefined) {
                    // 1063
                    ret.distance = subResult.distance; // 1065
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match                                         // 1066
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                          // 1068
                  // wins.                                                                                                         // 1069
                  //
                  //
                  if (subResult.result && subResult.arrayIndices) {
                    // 1070
                    ret.arrayIndices = subResult.arrayIndices; // 1071
                  } // 1072
                  //
                  return subResult.result; // 1073
                }); // If we didn't actually match, forget any extra metadata we came up with.                                     // 1074
                //
                if (!ret.result) {
                  // 1077
                  delete ret.distance; // 1078
                  delete ret.arrayIndices; // 1079
                } // 1080
                //
                return ret; // 1081
              }; // 1082
            }; // 1083
            //
            var andDocumentMatchers = andSomeMatchers; // 1085
            var andBranchedMatchers = andSomeMatchers; // helpers used by compiled selector code                                   // 1086
            //
            LocalCollection._f = { // 1090
              // XXX for _all and _in, consider building 'inquery' at compile time..                                               // 1091
              _type: function (v) {
                // 1093
                if (typeof v === "number") return 1; // 1094
                if (typeof v === "string") return 2; // 1096
                if (typeof v === "boolean") return 8; // 1098
                if (isArray(v)) return 4; // 1100
                if (v === null) return 10; // 1102
                if (v instanceof RegExp) // note that typeof(/x/) === "object"                                                     // 1104
                  return 11; // 1106
                if (typeof v === "function") return 13; // 1107
                if (v instanceof Date) return 9; // 1109
                if (EJSON.isBinary(v)) return 5; // 1111
                if (v instanceof MongoID.ObjectID) return 7; // 1113
                return 3; // object                                                                                                // 1115
                // XXX support some/all of these:                                                                                  // 1117
                // 14, symbol                                                                                                      // 1118
                // 15, javascript code with scope                                                                                  // 1119
                // 16, 18: 32-bit/64-bit integer                                                                                   // 1120
                // 17, timestamp                                                                                                   // 1121
                // 255, minkey                                                                                                     // 1122
                // 127, maxkey                                                                                                     // 1123
              }, // 1124
              // deep equality test: use for literal document and array matches                                                    // 1126
              _equal: function (a, b) {
                // 1127
                return EJSON.equals(a, b, { // 1128
                  keyOrderSensitive: true // 1128
                }); // 1128
              }, // 1129
              // maps a type code to a value that can be used to sort values of                                                    // 1131
              // different types                                                                                                   // 1132
              _typeorder: function (t) {
                // 1133
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                                    // 1134
                // XXX what is the correct sort position for Javascript code?                                                      // 1135
                // ('100' in the matrix below)                                                                                     // 1136
                // XXX minkey/maxkey                                                                                               // 1137
                return [-1, // (not a type)                                                                                        // 1138
                1, // number                                                                                                       // 1139
                2, // string                                                                                                       // 1140
                3, // object                                                                                                       // 1141
                4, // array                                                                                                        // 1142
                5, // binary                                                                                                       // 1143
                -1, // deprecated                                                                                                  // 1144
                6, // ObjectID                                                                                                     // 1145
                7, // bool                                                                                                         // 1146
                8, // Date                                                                                                         // 1147
                0, // null                                                                                                         // 1148
                9, // RegExp                                                                                                       // 1149
                -1, // deprecated                                                                                                  // 1150
                100, // JS code                                                                                                    // 1151
                2, // deprecated (symbol)                                                                                          // 1152
                100, // JS code                                                                                                    // 1153
                1, // 32-bit int                                                                                                   // 1154
                8, // Mongo timestamp                                                                                              // 1155
                1 // 64-bit int                                                                                                    // 1156
                ][t]; // 1138
              }, // 1158
              // compare two values of unknown type according to BSON ordering                                                     // 1160
              // semantics. (as an extension, consider 'undefined' to be less than                                                 // 1161
              // any other value.) return negative if a is less, positive if b is                                                  // 1162
              // less, or 0 if equal                                                                                               // 1163
              _cmp: function (a, b) {
                // 1164
                if (a === undefined) return b === undefined ? 0 : -1; // 1165
                if (b === undefined) return 1; // 1167
                //
                var ta = LocalCollection._f._type(a); // 1169
                //
                var tb = LocalCollection._f._type(b); // 1170
                //
                var oa = LocalCollection._f._typeorder(ta); // 1171
                //
                var ob = LocalCollection._f._typeorder(tb); // 1172
                //
                if (oa !== ob) return oa < ob ? -1 : 1; // 1173
                if (ta !== tb) // XXX need to implement this if we implement Symbol or integers, or                                // 1175
                  // Timestamp                                                                                                     // 1177
                  throw Error("Missing type coercion logic in _cmp"); // 1178
                //
                if (ta === 7) {
                  // 1179
                  // ObjectID                                                                                                      // 1179
                  // Convert to string.                                                                                            // 1180
                  ta = tb = 2; // 1181
                  a = a.toHexString(); // 1182
                  b = b.toHexString(); // 1183
                } // 1184
                //
                if (ta === 9) {
                  // 1185
                  // Date                                                                                                          // 1185
                  // Convert to millis.                                                                                            // 1186
                  ta = tb = 1; // 1187
                  a = a.getTime(); // 1188
                  b = b.getTime(); // 1189
                } // 1190
                //
                if (ta === 1) // double                                                                                            // 1192
                  return a - b; // 1193
                if (tb === 2) // string                                                                                            // 1194
                  return a < b ? -1 : a === b ? 0 : 1; // 1195
                //
                if (ta === 3) {
                  // 1196
                  // Object                                                                                                        // 1196
                  // this could be much more efficient in the expected case ...                                                    // 1197
                  var to_array = function (obj) {
                    // 1198
                    var ret = []; // 1199
                    //
                    for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {
                      // 1200
                      ret.push(key); // 1201
                      ret.push(obj[key]); // 1202
                    } // 1203
                    //
                    return ret; // 1204
                  }; // 1205
                  //
                  return LocalCollection._f._cmp(to_array(a), to_array(b)); // 1206
                } // 1207
                //
                if (ta === 4) {
                  // 1208
                  // Array                                                                                                         // 1208
                  for (var i = 0;; i++) {
                    // 1209
                    if (i === a.length) return i === b.length ? 0 : -1; // 1210
                    if (i === b.length) return 1; // 1212
                    //
                    var s = LocalCollection._f._cmp(a[i], b[i]); // 1214
                    //
                    if (s !== 0) return s; // 1215
                  } // 1217
                } // 1218
                //
                if (ta === 5) {
                  // 1219
                  // binary                                                                                                        // 1219
                  // Surprisingly, a small binary blob is always less than a large one in                                          // 1220
                  // Mongo.                                                                                                        // 1221
                  if (a.length !== b.length) return a.length - b.length; // 1222
                  //
                  for (i = 0; i < a.length; i++) {
                    // 1224
                    if (a[i] < b[i]) return -1; // 1225
                    if (a[i] > b[i]) return 1; // 1227
                  } // 1229
                  //
                  return 0; // 1230
                } // 1231
                //
                if (ta === 8) {
                  // 1232
                  // boolean                                                                                                       // 1232
                  if (a) return b ? 0 : 1; // 1233
                  return b ? -1 : 0; // 1234
                } // 1235
                //
                if (ta === 10) // null                                                                                             // 1236
                  return 0; // 1237
                if (ta === 11) // regexp                                                                                           // 1238
                  throw Error("Sorting not supported on regular expression"); // XXX                                               // 1239
                // 13: javascript code                                                                                             // 1240
                // 14: symbol                                                                                                      // 1241
                // 15: javascript code with scope                                                                                  // 1242
                // 16: 32-bit integer                                                                                              // 1243
                // 17: timestamp                                                                                                   // 1244
                // 18: 64-bit integer                                                                                              // 1245
                // 255: minkey                                                                                                     // 1246
                // 127: maxkey                                                                                                     // 1247
                //
                if (ta === 13) // javascript code                                                                                  // 1248
                  throw Error("Sorting not supported on Javascript code"); // XXX                                                  // 1249
                //
                throw Error("Unknown type to sort"); // 1250
              } // 1251
            }; // Oddball function used by upsert.                                                                                 // 1090
            //
            LocalCollection._removeDollarOperators = function (selector) {
              // 1255
              var selectorDoc = {}; // 1256
              //
              for (var k in meteorBabelHelpers.sanitizeForInObject(selector)) {
                // 1257
                if (k.substr(0, 1) !== '$') selectorDoc[k] = selector[k]; // 1258
              } // 1257
              //
              return selectorDoc; // 1260
            }; // 1261
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sort.js": function (_require4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sort.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require4("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            // Give a sort spec, which can be in any of these forms:                                                               // 1
            //   {"key1": 1, "key2": -1}                                                                                           // 2
            //   [["key1", "asc"], ["key2", "desc"]]                                                                               // 3
            //   ["key1", ["key2", "desc"]]                                                                                        // 4
            //                                                                                                                     // 5
            // (.. with the first form being dependent on the key enumeration                                                      // 6
            // behavior of your javascript VM, which usually does what you mean in                                                 // 7
            // this case if the key names don't look like integers ..)                                                             // 8
            //                                                                                                                     // 9
            // return a function that takes two objects, and returns -1 if the                                                     // 10
            // first object comes first in order, 1 if the second object comes                                                     // 11
            // first, or 0 if neither object comes before the other.                                                               // 12
            Minimongo.Sorter = function (spec, options) {
              // 14
              var self = this; // 15
              options = options || {}; // 16
              self._sortSpecParts = []; // 18
              self._sortFunction = null; // 19
              //
              var addSpecPart = function (path, ascending) {
                // 21
                if (!path) throw Error("sort keys must be non-empty"); // 22
                if (path.charAt(0) === '$') throw Error("unsupported sort key: " + path); // 24
                //
                self._sortSpecParts.push({ // 26
                  path: path, // 27
                  lookup: makeLookupFunction(path, { // 28
                    forSort: true // 28
                  }), // 28
                  ascending: ascending // 29
                }); // 26
              }; // 31
              //
              if (spec instanceof Array) {
                // 33
                for (var i = 0; i < spec.length; i++) {
                  // 34
                  if (typeof spec[i] === "string") {
                    // 35
                    addSpecPart(spec[i], true); // 36
                  } else {
                    // 37
                    addSpecPart(spec[i][0], spec[i][1] !== "desc"); // 38
                  } // 39
                } // 40
              } else if ((typeof spec === "undefined" ? "undefined" : (0, _typeof3.default)(spec)) === "object") {
                // 41
                _.each(spec, function (value, key) {
                  // 42
                  addSpecPart(key, value >= 0); // 43
                }); // 44
              } else if (typeof spec === "function") {
                // 45
                self._sortFunction = spec; // 46
              } else {
                // 47
                throw Error("Bad sort specification: " + JSON.stringify(spec)); // 48
              } // If a function is specified for sorting, we skip the rest.                                                       // 49
              //
              //
              if (self._sortFunction) return; // To implement affectedByModifier, we piggy-back on top of Matcher's                // 52
              // affectedByModifier code; we create a selector that is affected by the same                                        // 56
              // modifiers as this sort order. This is only implemented on the server.                                             // 57
              //
              if (self.affectedByModifier) {
                // 58
                var selector = {}; // 59
                //
                _.each(self._sortSpecParts, function (spec) {
                  // 60
                  selector[spec.path] = 1; // 61
                }); // 62
                //
                self._selectorForAffectedByModifier = new Minimongo.Matcher(selector); // 63
              } // 64
              //
              self._keyComparator = composeComparators(_.map(self._sortSpecParts, function (spec, i) {
                // 66
                return self._keyFieldComparator(i); // 68
              })); // If you specify a matcher for this Sorter, _keyFilter may be set to a                                         // 69
              // function which selects whether or not a given "sort key" (tuple of values                                         // 72
              // for the different sort spec fields) is compatible with the selector.                                              // 73
              //
              self._keyFilter = null; // 74
              options.matcher && self._useWithMatcher(options.matcher); // 75
            }; // In addition to these methods, sorter_project.js defines combineIntoProjection                                    // 76
            // on the server only.                                                                                                 // 79
            //
            //
            _.extend(Minimongo.Sorter.prototype, { // 80
              getComparator: function (options) {
                // 81
                var self = this; // If sort is specified or have no distances, just use the comparator from                        // 82
                // the source specification (which defaults to "everything is equal".                                              // 85
                // issue #3599                                                                                                     // 86
                // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation                                   // 87
                // sort effectively overrides $near                                                                                // 88
                //
                if (self._sortSpecParts.length || !options || !options.distances) {
                  // 89
                  return self._getBaseComparator(); // 90
                } // 91
                //
                var distances = options.distances; // Return a comparator which compares using $near distances.                    // 93
                //
                return function (a, b) {
                  // 96
                  if (!distances.has(a._id)) throw Error("Missing distance for " + a._id); // 97
                  if (!distances.has(b._id)) throw Error("Missing distance for " + b._id); // 99
                  return distances.get(a._id) - distances.get(b._id); // 101
                }; // 102
              }, // 103
              _getPaths: function () {
                // 105
                var self = this; // 106
                return _.pluck(self._sortSpecParts, 'path'); // 107
              }, // 108
              // Finds the minimum key from the doc, according to the sort specs.  (We say                                         // 110
              // "minimum" here but this is with respect to the sort spec, so "descending"                                         // 111
              // sort fields mean we're finding the max for that field.)                                                           // 112
              //                                                                                                                   // 113
              // Note that this is NOT "find the minimum value of the first field, the                                             // 114
              // minimum value of the second field, etc"... it's "choose the                                                       // 115
              // lexicographically minimum value of the key vector, allowing only keys which                                       // 116
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                         // 117
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                                       // 118
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                                 // 119
              _getMinKeyFromDoc: function (doc) {
                // 120
                var self = this; // 121
                var minKey = null; // 122
                //
                self._generateKeysFromDoc(doc, function (key) {
                  // 124
                  if (!self._keyCompatibleWithSelector(key)) return; // 125
                  //
                  if (minKey === null) {
                    // 128
                    minKey = key; // 129
                    return; // 130
                  } // 131
                  //
                  if (self._compareKeys(key, minKey) < 0) {
                    // 132
                    minKey = key; // 133
                  } // 134
                }); // This could happen if our key filter somehow filters out all the keys even                                   // 135
                // though somehow the selector matches.                                                                            // 138
                //
                //
                if (minKey === null) throw Error("sort selector found no keys in doc?"); // 139
                return minKey; // 141
              }, // 142
              _keyCompatibleWithSelector: function (key) {
                // 144
                var self = this; // 145
                return !self._keyFilter || self._keyFilter(key); // 146
              }, // 147
              // Iterates over each possible "key" from doc (ie, over each branch), calling                                        // 149
              // 'cb' with the key.                                                                                                // 150
              _generateKeysFromDoc: function (doc, cb) {
                // 151
                var self = this; // 152
                if (self._sortSpecParts.length === 0) throw new Error("can't generate keys without a spec"); // maps index -> ({'' -> value} or {path -> value})
                //
                var valuesByIndexAndPath = []; // 158
                //
                var pathFromIndices = function (indices) {
                  // 160
                  return indices.join(',') + ','; // 161
                }; // 162
                //
                var knownPaths = null; // 164
                //
                _.each(self._sortSpecParts, function (spec, whichField) {
                  // 166
                  // Expand any leaf arrays that we find, and ignore those arrays                                                  // 167
                  // themselves.  (We never sort based on an array itself.)                                                        // 168
                  var branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                  // pretend we found one null value.                                                                              // 172
                  //
                  if (!branches.length) branches = [{ // 173
                    value: null // 174
                  }]; // 174
                  var usedPaths = false; // 176
                  valuesByIndexAndPath[whichField] = {}; // 177
                  //
                  _.each(branches, function (branch) {
                    // 178
                    if (!branch.arrayIndices) {
                      // 179
                      // If there are no array indices for a branch, then it must be the                                           // 180
                      // only branch, because the only thing that produces multiple branches                                       // 181
                      // is the use of arrays.                                                                                     // 182
                      if (branches.length > 1) throw Error("multiple branches but no array used?"); // 183
                      valuesByIndexAndPath[whichField][''] = branch.value; // 185
                      return; // 186
                    } // 187
                    //
                    usedPaths = true; // 189
                    var path = pathFromIndices(branch.arrayIndices); // 190
                    if (_.has(valuesByIndexAndPath[whichField], path)) throw Error("duplicate path: " + path); // 191
                    valuesByIndexAndPath[whichField][path] = branch.value; // If two sort fields both go into arrays, they have to go into the
                    // exact same arrays and we have to find the same paths.  This is                                              // 196
                    // roughly the same condition that makes MongoDB throw this strange                                            // 197
                    // error message.  eg, the main thing is that if sort spec is {a: 1,                                           // 198
                    // b:1} then a and b cannot both be arrays.                                                                    // 199
                    //                                                                                                             // 200
                    // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                          // 201
                    // and 'a.x.y' are both arrays, but we don't allow this for now.                                               // 202
                    // #NestedArraySort                                                                                            // 203
                    // XXX achieve full compatibility here                                                                         // 204
                    //
                    if (knownPaths && !_.has(knownPaths, path)) {
                      // 205
                      throw Error("cannot index parallel arrays"); // 206
                    } // 207
                  }); // 208
                  //
                  if (knownPaths) {
                    // 210
                    // Similarly to above, paths must match everywhere, unless this is a                                           // 211
                    // non-array field.                                                                                            // 212
                    if (!_.has(valuesByIndexAndPath[whichField], '') && _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {
                      throw Error("cannot index parallel arrays!"); // 215
                    } // 216
                  } else if (usedPaths) {
                    // 217
                    knownPaths = {}; // 218
                    //
                    _.each(valuesByIndexAndPath[whichField], function (x, path) {
                      // 219
                      knownPaths[path] = true; // 220
                    }); // 221
                  } // 222
                }); // 223
                //
                if (!knownPaths) {
                  // 225
                  // Easy case: no use of arrays.                                                                                  // 226
                  var soleKey = _.map(valuesByIndexAndPath, function (values) {
                    // 227
                    if (!_.has(values, '')) throw Error("no value in sole key case?"); // 228
                    return values['']; // 230
                  }); // 231
                  //
                  cb(soleKey); // 232
                  return; // 233
                } // 234
                //
                _.each(knownPaths, function (x, path) {
                  // 236
                  var key = _.map(valuesByIndexAndPath, function (values) {
                    // 237
                    if (_.has(values, '')) return values['']; // 238
                    if (!_.has(values, path)) throw Error("missing path?"); // 240
                    return values[path]; // 242
                  }); // 243
                  //
                  cb(key); // 244
                }); // 245
              }, // 246
              // Takes in two keys: arrays whose lengths match the number of spec                                                  // 248
              // parts. Returns negative, 0, or positive based on using the sort spec to                                           // 249
              // compare fields.                                                                                                   // 250
              _compareKeys: function (key1, key2) {
                // 251
                var self = this; // 252
                //
                if (key1.length !== self._sortSpecParts.length || key2.length !== self._sortSpecParts.length) {
                  // 253
                  throw Error("Key has wrong length"); // 255
                } // 256
                //
                return self._keyComparator(key1, key2); // 258
              }, // 259
              // Given an index 'i', returns a comparator that compares two key arrays based                                       // 261
              // on field 'i'.                                                                                                     // 262
              _keyFieldComparator: function (i) {
                // 263
                var self = this; // 264
                var invert = !self._sortSpecParts[i].ascending; // 265
                return function (key1, key2) {
                  // 266
                  var compare = LocalCollection._f._cmp(key1[i], key2[i]); // 267
                  //
                  if (invert) compare = -compare; // 268
                  return compare; // 270
                }; // 271
              }, // 272
              // Returns a comparator that represents the sort specification (but not                                              // 274
              // including a possible geoquery distance tie-breaker).                                                              // 275
              _getBaseComparator: function () {
                // 276
                var self = this; // 277
                if (self._sortFunction) return self._sortFunction; // If we're only sorting on geoquery distance and no specs, just say
                // everything is equal.                                                                                            // 283
                //
                if (!self._sortSpecParts.length) {
                  // 284
                  return function (doc1, doc2) {
                    // 285
                    return 0; // 286
                  }; // 287
                } // 288
                //
                return function (doc1, doc2) {
                  // 290
                  var key1 = self._getMinKeyFromDoc(doc1); // 291
                  //
                  var key2 = self._getMinKeyFromDoc(doc2); // 292
                  //
                  return self._compareKeys(key1, key2); // 293
                }; // 294
              }, // 295
              // In MongoDB, if you have documents                                                                                 // 297
              //    {_id: 'x', a: [1, 10]} and                                                                                     // 298
              //    {_id: 'y', a: [5, 15]},                                                                                        // 299
              // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                               // 300
              // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                            // 301
              // match the selector, and 5 comes before 10).                                                                       // 302
              //                                                                                                                   // 303
              // The way this works is pretty subtle!  For example, if the documents                                               // 304
              // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                                 // 305
              //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                                    // 306
              // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                            // 307
              //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                                 // 308
              // both follow this rule (y before x).  (ie, you do have to apply this                                               // 309
              // through $elemMatch.)                                                                                              // 310
              //                                                                                                                   // 311
              // So if you pass a matcher to this sorter's constructor, we will attempt to                                         // 312
              // skip sort keys that don't match the selector. The logic here is pretty                                            // 313
              // subtle and undocumented; we've gotten as close as we can figure out based                                         // 314
              // on our understanding of Mongo's behavior.                                                                         // 315
              _useWithMatcher: function (matcher) {
                // 316
                var self = this; // 317
                if (self._keyFilter) throw Error("called _useWithMatcher twice?"); // If we are only sorting by distance, then we're not going to bother to
                // build a key filter.                                                                                             // 323
                // XXX figure out how geoqueries interact with this stuff                                                          // 324
                //
                if (_.isEmpty(self._sortSpecParts)) return; // 325
                var selector = matcher._selector; // If the user just passed a literal function to find(), then we can't get a     // 328
                // key filter from it.                                                                                             // 331
                //
                if (selector instanceof Function) return; // 332
                var constraintsByPath = {}; // 335
                //
                _.each(self._sortSpecParts, function (spec, i) {
                  // 336
                  constraintsByPath[spec.path] = []; // 337
                }); // 338
                //
                _.each(selector, function (subSelector, key) {
                  // 340
                  // XXX support $and and $or                                                                                      // 341
                  var constraints = constraintsByPath[key]; // 343
                  if (!constraints) return; // XXX it looks like the real MongoDB implementation isn't "does the                   // 344
                  // regexp match" but "does the value fall into a range named by the                                              // 348
                  // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                                              // 349
                  // "does the regexp match" is a good approximation.                                                              // 350
                  //
                  if (subSelector instanceof RegExp) {
                    // 351
                    // As far as we can tell, using either of the options that both we and                                         // 352
                    // MongoDB support ('i' and 'm') disables use of the key filter. This                                          // 353
                    // makes sense: MongoDB mostly appears to be calculating ranges of an                                          // 354
                    // index to use, which means it only cares about regexps that match                                            // 355
                    // one range (with a literal prefix), and both 'i' and 'm' prevent the                                         // 356
                    // literal prefix of the regexp from actually meaning one range.                                               // 357
                    if (subSelector.ignoreCase || subSelector.multiline) return; // 358
                    constraints.push(regexpElementMatcher(subSelector)); // 360
                    return; // 361
                  } // 362
                  //
                  if (isOperatorObject(subSelector)) {
                    // 364
                    _.each(subSelector, function (operand, operator) {
                      // 365
                      if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {
                        // 366
                        // XXX this depends on us knowing that these operators don't use any                                       // 367
                        // of the arguments to compileElementSelector other than operand.                                          // 368
                        constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand)); // 369
                      } // See comments in the RegExp block above.                                                                 // 371
                      //
                      //
                      if (operator === '$regex' && !subSelector.$options) {
                        // 374
                        constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector)); // 375
                      } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                               // 378
                      //
                    }); // 381
                    //
                    return; // 382
                  } // OK, it's an equality thing.                                                                                 // 383
                  //
                  //
                  constraints.push(equalityElementMatcher(subSelector)); // 386
                }); // It appears that the first sort field is treated differently from the                                        // 387
                // others; we shouldn't create a key filter unless the first sort field is                                         // 390
                // restricted, though after that point we can restrict the other sort fields                                       // 391
                // or not as we wish.                                                                                              // 392
                //
                //
                if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path])) return; // 393
                //
                self._keyFilter = function (key) {
                  // 396
                  return _.all(self._sortSpecParts, function (specPart, index) {
                    // 397
                    return _.all(constraintsByPath[specPart.path], function (f) {
                      // 398
                      return f(key[index]); // 399
                    }); // 400
                  }); // 401
                }; // 402
              } // 403
            }); // Given an array of comparators                                                                                   // 80
            // (functions (a,b)->(negative or positive or zero)), returns a single                                                 // 407
            // comparator which uses each comparator in order and returns the first                                                // 408
            // non-zero value.                                                                                                     // 409
            //
            //
            var composeComparators = function (comparatorArray) {
              // 410
              return function (a, b) {
                // 411
                for (var i = 0; i < comparatorArray.length; ++i) {
                  // 412
                  var compare = comparatorArray[i](a, b); // 413
                  if (compare !== 0) return compare; // 414
                } // 416
                //
                return 0; // 417
              }; // 418
            }; // 419
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "projection.js": function (_require5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/projection.js                                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require5("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            // Knows how to compile a fields projection to a predicate function.                                                   // 1
            // @returns - Function: a closure that filters out an object according to the                                          // 2
            //            fields projection rules:                                                                                 // 3
            //            @param obj - Object: MongoDB-styled document                                                             // 4
            //            @returns - Object: a document with the fields filtered out                                               // 5
            //                       according to projection rules. Doesn't retain subfields                                       // 6
            //                       of passed argument.                                                                           // 7
            LocalCollection._compileProjection = function (fields) {
              // 8
              LocalCollection._checkSupportedProjection(fields); // 9
              //
              var _idProjection = _.isUndefined(fields._id) ? true : fields._id; // 11
              //
              var details = projectionDetails(fields); // returns transformed doc according to ruleTree                            // 12
              //
              var transform = function (doc, ruleTree) {
                // 15
                // Special case for "sets"                                                                                         // 16
                if (_.isArray(doc)) return _.map(doc, function (subdoc) {
                  // 17
                  return transform(subdoc, ruleTree); // 18
                }); // 18
                var res = details.including ? {} : EJSON.clone(doc); // 20
                //
                _.each(ruleTree, function (rule, key) {
                  // 21
                  if (!_.has(doc, key)) return; // 22
                  //
                  if (_.isObject(rule)) {
                    // 24
                    // For sub-objects/subsets we branch                                                                           // 25
                    if (_.isObject(doc[key])) res[key] = transform(doc[key], rule); // Otherwise we don't even touch this subfield
                  } else if (details.including) res[key] = EJSON.clone(doc[key]);else delete res[key]; // 29
                }); // 33
                //
                return res; // 35
              }; // 36
              //
              return function (obj) {
                // 38
                var res = transform(obj, details.tree); // 39
                if (_idProjection && _.has(obj, '_id')) res._id = obj._id; // 41
                if (!_idProjection && _.has(res, '_id')) delete res._id; // 43
                return res; // 45
              }; // 46
            }; // Traverses the keys of passed projection and constructs a tree where all                                          // 47
            // leaves are either all True or all False                                                                             // 50
            // @returns Object:                                                                                                    // 51
            //  - tree - Object - tree representation of keys involved in projection                                               // 52
            //  (exception for '_id' as it is a special case handled separately)                                                   // 53
            //  - including - Boolean - "take only certain fields" type of projection                                              // 54
            //
            //
            projectionDetails = function (fields) {
              // 55
              // Find the non-_id keys (_id is handled specially because it is included unless                                     // 56
              // explicitly excluded). Sort the keys, so that our code to detect overlaps                                          // 57
              // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                                       // 58
              var fieldsKeys = _.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an                                          // 62
              // inclusive _id, since inclusive _id follows the normal rules about mixing                                          // 63
              // inclusive and exclusive fields. If _id is not the only field in the                                               // 64
              // projection and is exclusive, remove it so it can be handled later by a                                            // 65
              // special case, since exclusive _id is always allowed.                                                              // 66
              //
              //
              if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(_.contains(fieldsKeys, '_id') && fields['_id'])) fieldsKeys = _.reject(fieldsKeys, function (key) {
                return key === '_id'; // 70
              }); // 70
              var including = null; // Unknown                                                                                     // 72
              //
              _.each(fieldsKeys, function (keyPath) {
                // 74
                var rule = !!fields[keyPath]; // 75
                if (including === null) including = rule; // 76
                if (including !== rule) // This error message is copied from MongoDB shell                                         // 78
                  throw MinimongoError("You cannot currently mix including and excluding fields."); // 80
              }); // 81
              //
              var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {
                // 84
                return including; // 86
              }, function (node, path, fullPath) {
                // 86
                // Check passed projection fields' keys: If you have two rules such as                                             // 88
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                              // 89
                // that happens, there is a probability you are doing something wrong,                                             // 90
                // framework should notify you about such mistake earlier on cursor                                                // 91
                // compilation step than later during runtime.  Note, that real mongo                                              // 92
                // doesn't do anything about it and the later rule appears in projection                                           // 93
                // project, more priority it takes.                                                                                // 94
                //                                                                                                                 // 95
                // Example, assume following in mongo shell:                                                                       // 96
                // > db.coll.insert({ a: { b: 23, c: 44 } })                                                                       // 97
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                                        // 98
                // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23 } }                                            // 99
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                                        // 100
                // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23, "c" : 44 } }                                  // 101
                //                                                                                                                 // 102
                // Note, how second time the return set of keys is different.                                                      // 103
                var currentPath = fullPath; // 105
                var anotherPath = path; // 106
                throw MinimongoError("both " + currentPath + " and " + anotherPath + " found in fields option, using both of them may trigger " + "unexpected behavior. Did you mean to use only one of them?");
              }); // 110
              return { // 112
                tree: projectionRulesTree, // 113
                including: including // 114
              }; // 112
            }; // paths - Array: list of mongo style paths                                                                         // 116
            // newLeafFn - Function: of form function(path) should return a scalar value to                                        // 119
            //                       put into list created for that path                                                           // 120
            // conflictFn - Function: of form function(node, path, fullPath) is called                                             // 121
            //                        when building a tree path for 'fullPath' node on                                             // 122
            //                        'path' was already a leaf with a value. Must return a                                        // 123
            //                        conflict resolution.                                                                         // 124
            // initial tree - Optional Object: starting tree.                                                                      // 125
            // @returns - Object: tree represented as a set of nested objects                                                      // 126
            //
            //
            pathsToTree = function (paths, newLeafFn, conflictFn, tree) {
              // 127
              tree = tree || {}; // 128
              //
              _.each(paths, function (keyPath) {
                // 129
                var treePos = tree; // 130
                var pathArr = keyPath.split('.'); // use _.all just for iteration with break                                       // 131
                //
                var success = _.all(pathArr.slice(0, -1), function (key, idx) {
                  // 134
                  if (!_.has(treePos, key)) treePos[key] = {};else if (!_.isObject(treePos[key])) {
                    // 135
                    treePos[key] = conflictFn(treePos[key], pathArr.slice(0, idx + 1).join('.'), keyPath); // break out of loop if we are failing for this path
                    //
                    if (!_.isObject(treePos[key])) return false; // 142
                  } // 144
                  treePos = treePos[key]; // 146
                  return true; // 147
                }); // 148
                //
                if (success) {
                  // 150
                  var lastKey = _.last(pathArr); // 151
                  //
                  if (!_.has(treePos, lastKey)) treePos[lastKey] = newLeafFn(keyPath);else treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);
                } // 156
              }); // 157
              //
              return tree; // 159
            }; // 160
            //
            LocalCollection._checkSupportedProjection = function (fields) {
              // 162
              if (!_.isObject(fields) || _.isArray(fields)) throw MinimongoError("fields option must be an object"); // 163
              //
              _.each(fields, function (val, keyPath) {
                // 166
                if (_.contains(keyPath.split('.'), '$')) throw MinimongoError("Minimongo doesn't support $ operator in projections yet.");
                if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0) throw MinimongoError("Minimongo doesn't support operators in projections yet.");
                if (_.indexOf([1, 0, true, false], val) === -1) throw MinimongoError("Projection values should be one of 1, 0, true, or false");
              }); // 173
            }; // 174
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "modify.js": function (_require6, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/modify.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require6("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            var assertHasValidFieldNames = void 0,
                // 1
            assertIsValidFieldName = void 0; // 1
            _module2.watch(_require6("./validation.js"), { // 1
              assertHasValidFieldNames: function (v) {
                // 1
                assertHasValidFieldNames = v; // 1
              }, // 1
              assertIsValidFieldName: function (v) {
                // 1
                assertIsValidFieldName = v; // 1
              } // 1
            }, 0); // 1
            //
            // XXX need a strategy for passing the binding of $ into this                                                          // 3
            // function, from the compiled selector                                                                                // 4
            //                                                                                                                     // 5
            // maybe just {key.up.to.just.before.dollarsign: array_index}                                                          // 6
            //                                                                                                                     // 7
            // XXX atomicity: if one modification fails, do we roll back the whole                                                 // 8
            // change?                                                                                                             // 9
            //                                                                                                                     // 10
            // options:                                                                                                            // 11
            //   - isInsert is set when _modify is being called to compute the document to                                         // 12
            //     insert as part of an upsert operation. We use this primarily to figure                                          // 13
            //     out when to set the fields in $setOnInsert, if present.                                                         // 14
            LocalCollection._modify = function (doc, mod, options) {
              // 15
              options = options || {}; // 16
              if (!isPlainObject(mod)) throw MinimongoError("Modifier must be an object"); // Make sure the caller can't mutate our data structures.
              //
              mod = EJSON.clone(mod); // 21
              var isModifier = isOperatorObject(mod); // 23
              var newDoc; // 25
              //
              if (!isModifier) {
                // 27
                if (mod._id && !EJSON.equals(doc._id, mod._id)) throw MinimongoError("Cannot change the _id of a document"); // replace the whole document
                //
                assertHasValidFieldNames(mod); // 32
                newDoc = mod; // 33
              } else {
                // 34
                // apply modifiers to the doc.                                                                                     // 35
                newDoc = EJSON.clone(doc); // 36
                //
                _.each(mod, function (operand, op) {
                  // 38
                  var modFunc = MODIFIERS[op]; // Treat $setOnInsert as $set if this is an insert.                                 // 39
                  //
                  if (options.isInsert && op === '$setOnInsert') modFunc = MODIFIERS['$set']; // 41
                  if (!modFunc) throw MinimongoError("Invalid modifier specified " + op); // 43
                  //
                  _.each(operand, function (arg, keypath) {
                    // 45
                    if (keypath === '') {
                      // 46
                      throw MinimongoError("An empty update path is not valid."); // 47
                    } // 48
                    //
                    if (keypath === '_id' && op !== '$setOnInsert') {
                      // 50
                      throw MinimongoError("Mod on _id not allowed"); // 51
                    } // 52
                    //
                    var keyparts = keypath.split('.'); // 54
                    //
                    if (!_.all(keyparts, _.identity)) {
                      // 56
                      throw MinimongoError("The update path '" + keypath + "' contains an empty field name, which is not allowed.");
                    } // 60
                    //
                    var noCreate = _.has(NO_CREATE_MODIFIERS, op); // 62
                    //
                    var forbidArray = op === "$rename"; // 63
                    var target = findModTarget(newDoc, keyparts, { // 64
                      noCreate: NO_CREATE_MODIFIERS[op], // 65
                      forbidArray: op === "$rename", // 66
                      arrayIndices: options.arrayIndices // 67
                    }); // 64
                    var field = keyparts.pop(); // 69
                    modFunc(target, field, arg, keypath, newDoc); // 70
                  }); // 71
                }); // 72
              } // move new document into place.                                                                                   // 73
              //
              //
              _.each(_.keys(doc), function (k) {
                // 76
                // Note: this used to be for (var k in doc) however, this does not                                                 // 77
                // work right in Opera. Deleting from a doc while iterating over it                                                // 78
                // would sometimes cause opera to skip some keys.                                                                  // 79
                if (k !== '_id') delete doc[k]; // 80
              }); // 82
              //
              _.each(newDoc, function (v, k) {
                // 83
                doc[k] = v; // 84
              }); // 85
            }; // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                              // 86
            // and then you would operate on the 'e' property of the returned                                                      // 89
            // object.                                                                                                             // 90
            //                                                                                                                     // 91
            // if options.noCreate is falsey, creates intermediate levels of                                                       // 92
            // structure as necessary, like mkdir -p (and raises an exception if                                                   // 93
            // that would mean giving a non-numeric property to an array.) if                                                      // 94
            // options.noCreate is true, return undefined instead.                                                                 // 95
            //                                                                                                                     // 96
            // may modify the last element of keyparts to signal to the caller that it needs                                       // 97
            // to use a different value to index into the returned object (for example,                                            // 98
            // ['a', '01'] -> ['a', 1]).                                                                                           // 99
            //                                                                                                                     // 100
            // if forbidArray is true, return null if the keypath goes through an array.                                           // 101
            //                                                                                                                     // 102
            // if options.arrayIndices is set, use its first element for the (first) '$' in                                        // 103
            // the path.                                                                                                           // 104
            //
            //
            var findModTarget = function (doc, keyparts, options) {
              // 105
              options = options || {}; // 106
              var usedArrayIndex = false; // 107
              //
              for (var i = 0; i < keyparts.length; i++) {
                // 108
                var last = i === keyparts.length - 1; // 109
                var keypart = keyparts[i]; // 110
                var indexable = isIndexable(doc); // 111
                //
                if (!indexable) {
                  // 112
                  if (options.noCreate) return undefined; // 113
                  var e = MinimongoError("cannot use the part '" + keypart + "' to traverse " + doc); // 115
                  e.setPropertyError = true; // 117
                  throw e; // 118
                } // 119
                //
                if (doc instanceof Array) {
                  // 120
                  if (options.forbidArray) return null; // 121
                  //
                  if (keypart === '$') {
                    // 123
                    if (usedArrayIndex) throw MinimongoError("Too many positional (i.e. '$') elements"); // 124
                    //
                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      // 126
                      throw MinimongoError("The positional operator did not find the " + "match needed from the query"); // 127
                    } // 129
                    //
                    keypart = options.arrayIndices[0]; // 130
                    usedArrayIndex = true; // 131
                  } else if (isNumericKey(keypart)) {
                    // 132
                    keypart = parseInt(keypart); // 133
                  } else {
                    // 134
                    if (options.noCreate) return undefined; // 135
                    throw MinimongoError("can't append to array using string field name [" + keypart + "]"); // 137
                  } // 140
                  //
                  if (last) // handle 'a.01'                                                                                       // 141
                    keyparts[i] = keypart; // 143
                  if (options.noCreate && keypart >= doc.length) return undefined; // 144
                  //
                  while (doc.length < keypart) {
                    // 146
                    doc.push(null); // 147
                  } // 146
                  //
                  if (!last) {
                    // 148
                    if (doc.length === keypart) doc.push({});else if ((0, _typeof3.default)(doc[keypart]) !== "object") throw MinimongoError("can't modify field '" + keyparts[i + 1] + "' of list value " + JSON.stringify(doc[keypart]));
                  } // 154
                } else {
                  // 155
                  assertIsValidFieldName(keypart); // 156
                  //
                  if (!(keypart in doc)) {
                    // 157
                    if (options.noCreate) return undefined; // 158
                    if (!last) doc[keypart] = {}; // 160
                  } // 162
                } // 163
                //
                if (last) return doc; // 165
                doc = doc[keypart]; // 167
              } // notreached                                                                                                      // 168
              //
            }; // 171
            //
            var NO_CREATE_MODIFIERS = { // 173
              $unset: true, // 174
              $pop: true, // 175
              $rename: true, // 176
              $pull: true, // 177
              $pullAll: true // 178
            }; // 173
            var MODIFIERS = { // 181
              $currentDate: function (target, field, arg) {
                // 182
                if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg.hasOwnProperty("$type")) {
                  if (arg.$type !== "date") {
                    // 184
                    throw MinimongoError("Minimongo does currently only support the date type " + "in $currentDate modifiers", { // 185
                      field: field // 188
                    }); // 188
                  } // 189
                } else if (arg !== true) {
                  // 190
                  throw MinimongoError("Invalid $currentDate modifier", { // 191
                    field: field // 191
                  }); // 191
                } // 192
                //
                target[field] = new Date(); // 193
              }, // 194
              $min: function (target, field, arg) {
                // 195
                if (typeof arg !== "number") {
                  // 196
                  throw MinimongoError("Modifier $min allowed for numbers only", { // 197
                    field: field // 197
                  }); // 197
                } // 198
                //
                if (field in target) {
                  // 199
                  if (typeof target[field] !== "number") {
                    // 200
                    throw MinimongoError("Cannot apply $min modifier to non-number", { // 201
                      field: field // 202
                    }); // 202
                  } // 203
                  //
                  if (target[field] > arg) {
                    // 204
                    target[field] = arg; // 205
                  } // 206
                } else {
                  // 207
                  target[field] = arg; // 208
                } // 209
              }, // 210
              $max: function (target, field, arg) {
                // 211
                if (typeof arg !== "number") {
                  // 212
                  throw MinimongoError("Modifier $max allowed for numbers only", { // 213
                    field: field // 213
                  }); // 213
                } // 214
                //
                if (field in target) {
                  // 215
                  if (typeof target[field] !== "number") {
                    // 216
                    throw MinimongoError("Cannot apply $max modifier to non-number", { // 217
                      field: field // 218
                    }); // 218
                  } // 219
                  //
                  if (target[field] < arg) {
                    // 220
                    target[field] = arg; // 221
                  } // 222
                } else {
                  // 223
                  target[field] = arg; // 224
                } // 225
              }, // 226
              $inc: function (target, field, arg) {
                // 227
                if (typeof arg !== "number") throw MinimongoError("Modifier $inc allowed for numbers only", { // 228
                  field: field // 229
                }); // 229
                //
                if (field in target) {
                  // 230
                  if (typeof target[field] !== "number") throw MinimongoError("Cannot apply $inc modifier to non-number", { // 231
                    field: field // 233
                  }); // 233
                  target[field] += arg; // 234
                } else {
                  // 235
                  target[field] = arg; // 236
                } // 237
              }, // 238
              $set: function (target, field, arg) {
                // 239
                if (!_.isObject(target)) {
                  // 240
                  // not an array or an object                                                                                     // 240
                  var e = MinimongoError("Cannot set property on non-object field", { // 241
                    field: field // 242
                  }); // 242
                  e.setPropertyError = true; // 243
                  throw e; // 244
                } // 245
                //
                if (target === null) {
                  // 246
                  var e = MinimongoError("Cannot set property on null", { // 247
                    field: field // 247
                  }); // 247
                  e.setPropertyError = true; // 248
                  throw e; // 249
                } // 250
                //
                assertHasValidFieldNames(arg); // 251
                target[field] = arg; // 252
              }, // 253
              $setOnInsert: function (target, field, arg) {// converted to `$set` in `_modify`                                     // 254
              }, // 256
              $unset: function (target, field, arg) {
                // 257
                if (target !== undefined) {
                  // 258
                  if (target instanceof Array) {
                    // 259
                    if (field in target) target[field] = null; // 260
                  } else delete target[field]; // 262
                } // 264
              }, // 265
              $push: function (target, field, arg) {
                // 266
                if (target[field] === undefined) target[field] = []; // 267
                if (!(target[field] instanceof Array)) throw MinimongoError("Cannot apply $push modifier to non-array", { // 269
                  field: field // 271
                }); // 271
                //
                if (!(arg && arg.$each)) {
                  // 273
                  // Simple mode: not $each                                                                                        // 274
                  assertHasValidFieldNames(arg); // 275
                  target[field].push(arg); // 276
                  return; // 277
                } // Fancy mode: $each (and maybe $slice and $sort and $position)                                                  // 278
                //
                //
                var toPush = arg.$each; // 281
                if (!(toPush instanceof Array)) throw MinimongoError("$each must be an array", { // 282
                  field: field // 283
                }); // 283
                assertHasValidFieldNames(toPush); // Parse $position                                                               // 284
                //
                var position = undefined; // 287
                //
                if ('$position' in arg) {
                  // 288
                  if (typeof arg.$position !== "number") throw MinimongoError("$position must be a numeric value", { // 289
                    field: field // 290
                  }); // XXX should check to make sure integer                                                                     // 290
                  //
                  if (arg.$position < 0) throw MinimongoError("$position in $push must be zero or positive", { // 292
                    field: field // 294
                  }); // 294
                  position = arg.$position; // 295
                } // Parse $slice.                                                                                                 // 296
                //
                //
                var slice = undefined; // 299
                //
                if ('$slice' in arg) {
                  // 300
                  if (typeof arg.$slice !== "number") throw MinimongoError("$slice must be a numeric value", { // 301
                    field: field // 302
                  }); // XXX should check to make sure integer                                                                     // 302
                  //
                  slice = arg.$slice; // 304
                } // Parse $sort.                                                                                                  // 305
                //
                //
                var sortFunction = undefined; // 308
                //
                if (arg.$sort) {
                  // 309
                  if (slice === undefined) throw MinimongoError("$sort requires $slice to be present", { // 310
                    field: field // 311
                  }); // XXX this allows us to use a $sort whose value is an array, but that's                                     // 311
                  // actually an extension of the Node driver, so it won't work                                                    // 313
                  // server-side. Could be confusing!                                                                              // 314
                  // XXX is it correct that we don't do geo-stuff here?                                                            // 315
                  //
                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator(); // 316
                  //
                  for (var i = 0; i < toPush.length; i++) {
                    // 317
                    if (LocalCollection._f._type(toPush[i]) !== 3) {
                      // 318
                      throw MinimongoError("$push like modifiers using $sort " + "require all elements to be objects", { // 319
                        field: field // 320
                      }); // 320
                    } // 321
                  } // 322
                } // Actually push.                                                                                                // 323
                //
                //
                if (position === undefined) {
                  // 326
                  for (var j = 0; j < toPush.length; j++) {
                    // 327
                    target[field].push(toPush[j]); // 328
                  } // 327
                } else {
                  // 329
                  var spliceArguments = [position, 0]; // 330
                  //
                  for (var j = 0; j < toPush.length; j++) {
                    // 331
                    spliceArguments.push(toPush[j]); // 332
                  } // 331
                  //
                  Array.prototype.splice.apply(target[field], spliceArguments); // 333
                } // Actually sort.                                                                                                // 334
                //
                //
                if (sortFunction) target[field].sort(sortFunction); // Actually slice.                                             // 337
                //
                if (slice !== undefined) {
                  // 341
                  if (slice === 0) target[field] = []; // differs from Array.slice!                                                // 342
                  else if (slice < 0) target[field] = target[field].slice(slice);else target[field] = target[field].slice(0, slice);
                } // 348
              }, // 349
              $pushAll: function (target, field, arg) {
                // 350
                if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg instanceof Array)) throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");
                assertHasValidFieldNames(arg); // 353
                var x = target[field]; // 354
                if (x === undefined) target[field] = arg;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pushAll modifier to non-array", {
                  field: field // 359
                });else {
                  // 359
                  for (var i = 0; i < arg.length; i++) {
                    // 361
                    x.push(arg[i]); // 362
                  } // 361
                } // 363
              }, // 364
              $addToSet: function (target, field, arg) {
                // 365
                var isEach = false; // 366
                //
                if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object") {
                  // 367
                  //check if first key is '$each'                                                                                  // 368
                  var keys = Object.keys(arg); // 369
                  //
                  if (keys[0] === "$each") {
                    // 370
                    isEach = true; // 371
                  } // 372
                } // 373
                //
                var values = isEach ? arg["$each"] : [arg]; // 374
                assertHasValidFieldNames(values); // 375
                var x = target[field]; // 376
                if (x === undefined) target[field] = values;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $addToSet modifier to non-array", {
                  field: field // 381
                });else {
                  // 381
                  _.each(values, function (value) {
                    // 383
                    for (var i = 0; i < x.length; i++) {
                      // 384
                      if (LocalCollection._f._equal(value, x[i])) return; // 385
                    } // 384
                    //
                    x.push(value); // 387
                  }); // 388
                } // 389
              }, // 390
              $pop: function (target, field, arg) {
                // 391
                if (target === undefined) return; // 392
                var x = target[field]; // 394
                if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pop modifier to non-array", {
                  field: field // 399
                });else {
                  // 399
                  if (typeof arg === 'number' && arg < 0) x.splice(0, 1);else x.pop(); // 401
                } // 405
              }, // 406
              $pull: function (target, field, arg) {
                // 407
                if (target === undefined) return; // 408
                var x = target[field]; // 410
                if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array", {
                  field: field // 415
                });else {
                  // 415
                  var out = []; // 417
                  //
                  if (arg != null && (typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && !(arg instanceof Array)) {
                    // XXX would be much nicer to compile this once, rather than                                                   // 419
                    // for each document we modify.. but usually we're not                                                         // 420
                    // modifying that many documents, so we'll let it slide for                                                    // 421
                    // now                                                                                                         // 422
                    // XXX Minimongo.Matcher isn't up for the job, because we need                                                 // 424
                    // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                                     // 425
                    // like {$gt: 4} is not normally a complete selector.                                                          // 426
                    // same issue as $elemMatch possibly?                                                                          // 427
                    var matcher = new Minimongo.Matcher(arg); // 428
                    //
                    for (var i = 0; i < x.length; i++) {
                      // 429
                      if (!matcher.documentMatches(x[i]).result) out.push(x[i]); // 430
                    } // 429
                  } else {
                    // 432
                    for (var i = 0; i < x.length; i++) {
                      // 433
                      if (!LocalCollection._f._equal(x[i], arg)) out.push(x[i]); // 434
                    } // 433
                  } // 436
                  //
                  target[field] = out; // 437
                } // 438
              }, // 439
              $pullAll: function (target, field, arg) {
                // 440
                if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg instanceof Array)) throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only", {
                  field: field // 443
                }); // 443
                if (target === undefined) return; // 444
                var x = target[field]; // 446
                if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array", {
                  field: field // 451
                });else {
                  // 451
                  var out = []; // 453
                  //
                  for (var i = 0; i < x.length; i++) {
                    // 454
                    var exclude = false; // 455
                    //
                    for (var j = 0; j < arg.length; j++) {
                      // 456
                      if (LocalCollection._f._equal(x[i], arg[j])) {
                        // 457
                        exclude = true; // 458
                        break; // 459
                      } // 460
                    } // 461
                    //
                    if (!exclude) out.push(x[i]); // 462
                  } // 464
                  //
                  target[field] = out; // 465
                } // 466
              }, // 467
              $rename: function (target, field, arg, keypath, doc) {
                // 468
                if (keypath === arg) // no idea why mongo has this restriction..                                                   // 469
                  throw MinimongoError("$rename source must differ from target", { // 471
                    field: field // 471
                  }); // 471
                if (target === null) throw MinimongoError("$rename source field invalid", { // 472
                  field: field // 473
                }); // 473
                if (typeof arg !== "string") throw MinimongoError("$rename target must be a string", { // 474
                  field: field // 475
                }); // 475
                //
                if (arg.indexOf('\0') > -1) {
                  // 476
                  // Null bytes are not allowed in Mongo field names                                                               // 477
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                 // 478
                  throw MinimongoError("The 'to' field for $rename cannot contain an embedded null byte", { // 479
                    field: field // 481
                  }); // 481
                } // 482
                //
                if (target === undefined) return; // 483
                var v = target[field]; // 485
                delete target[field]; // 486
                var keyparts = arg.split('.'); // 488
                var target2 = findModTarget(doc, keyparts, { // 489
                  forbidArray: true // 489
                }); // 489
                if (target2 === null) throw MinimongoError("$rename target field invalid", { // 490
                  field: field // 491
                }); // 491
                var field2 = keyparts.pop(); // 492
                target2[field2] = v; // 493
              }, // 494
              $bit: function (target, field, arg) {
                // 495
                // XXX mongo only supports $bit on integers, and we only support                                                   // 496
                // native javascript numbers (doubles) so far, so we can't support $bit                                            // 497
                throw MinimongoError("$bit is not supported", { // 498
                  field: field // 498
                }); // 498
              } // 499
            }; // 181
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "diff.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/diff.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // ordered: bool.                                                                                                      // 1
            // old_results and new_results: collections of documents.                                                              // 2
            //    if ordered, they are arrays.                                                                                     // 3
            //    if unordered, they are IdMaps                                                                                    // 4
            LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              // 5
              return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options); // 6
            }; // 7
            //
            LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              // 9
              return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options); // 10
            }; // 11
            //
            LocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {
              // 14
              return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options); // 16
            }; // 17
            //
            LocalCollection._diffObjects = function (left, right, callbacks) {
              // 19
              return DiffSequence.diffObjects(left, right, callbacks); // 20
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "id_map.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/id_map.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            LocalCollection._IdMap = function () {
              // 1
              var self = this; // 2
              IdMap.call(self, MongoID.idStringify, MongoID.idParse); // 3
            }; // 4
            //
            Meteor._inherits(LocalCollection._IdMap, IdMap); // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX maybe move these into another ObserveHelpers package or something                                               // 1
            // _CachingChangeObserver is an object which receives observeChanges callbacks                                         // 3
            // and keeps a cache of the current cursor state up to date in self.docs. Users                                        // 4
            // of this class should read the docs field but not modify it. You should pass                                         // 5
            // the "applyChange" field as the callbacks to the underlying observeChanges                                           // 6
            // call. Optionally, you can specify your own observeChanges callbacks which are                                       // 7
            // invoked immediately before the docs field is updated; this object is made                                           // 8
            // available as `this` to those callbacks.                                                                             // 9
            LocalCollection._CachingChangeObserver = function (options) {
              // 10
              var self = this; // 11
              options = options || {}; // 12
              //
              var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);
              //
              if (_.has(options, 'ordered')) {
                // 16
                self.ordered = options.ordered; // 17
                if (options.callbacks && options.ordered !== orderedFromCallbacks) throw Error("ordered option doesn't match callbacks");
              } else if (options.callbacks) {
                // 20
                self.ordered = orderedFromCallbacks; // 21
              } else {
                // 22
                throw Error("must provide ordered or callbacks"); // 23
              } // 24
              //
              var callbacks = options.callbacks || {}; // 25
              //
              if (self.ordered) {
                // 27
                self.docs = new OrderedDict(MongoID.idStringify); // 28
                self.applyChange = { // 29
                  addedBefore: function (id, fields, before) {
                    // 30
                    var doc = EJSON.clone(fields); // 31
                    doc._id = id; // 32
                    callbacks.addedBefore && callbacks.addedBefore.call(self, id, fields, before); // This line triggers if we provide added with movedBefore.
                    //
                    callbacks.added && callbacks.added.call(self, id, fields); // XXX could `before` be a falsy ID?  Technically   // 36
                    // idStringify seems to allow for them -- though                                                               // 38
                    // OrderedDict won't call stringify on a falsy arg.                                                            // 39
                    //
                    self.docs.putBefore(id, doc, before || null); // 40
                  }, // 41
                  movedBefore: function (id, before) {
                    // 42
                    var doc = self.docs.get(id); // 43
                    callbacks.movedBefore && callbacks.movedBefore.call(self, id, before); // 44
                    self.docs.moveBefore(id, before || null); // 45
                  } // 46
                }; // 29
              } else {
                // 48
                self.docs = new LocalCollection._IdMap(); // 49
                self.applyChange = { // 50
                  added: function (id, fields) {
                    // 51
                    var doc = EJSON.clone(fields); // 52
                    callbacks.added && callbacks.added.call(self, id, fields); // 53
                    doc._id = id; // 54
                    self.docs.set(id, doc); // 55
                  } // 56
                }; // 50
              } // The methods in _IdMap and OrderedDict used by these callbacks are                                               // 58
              // identical.                                                                                                        // 61
              //
              //
              self.applyChange.changed = function (id, fields) {
                // 62
                var doc = self.docs.get(id); // 63
                if (!doc) throw new Error("Unknown id for changed: " + id); // 64
                callbacks.changed && callbacks.changed.call(self, id, EJSON.clone(fields)); // 66
                DiffSequence.applyChanges(doc, fields); // 68
              }; // 69
              //
              self.applyChange.removed = function (id) {
                // 70
                callbacks.removed && callbacks.removed.call(self, id); // 71
                self.docs.remove(id); // 72
              }; // 73
            }; // 74
            //
            LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {
              // 76
              var transform = cursor.getTransform() || function (doc) {
                // 77
                return doc; // 77
              }; // 77
              //
              var suppressed = !!observeCallbacks._suppress_initial; // 78
              var observeChangesCallbacks; // 80
              //
              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // 81
                // The "_no_indices" option sets all index arguments to -1 and skips the                                           // 82
                // linear scans required to generate them.  This lets observers that don't                                         // 83
                // need absolute indices benefit from the other features of this API --                                            // 84
                // relative order, transforms, and applyChanges -- without the speed hit.                                          // 85
                var indices = !observeCallbacks._no_indices; // 86
                observeChangesCallbacks = { // 87
                  addedBefore: function (id, fields, before) {
                    // 88
                    var self = this; // 89
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) return; // 90
                    var doc = transform(_.extend(fields, { // 92
                      _id: id // 92
                    })); // 92
                    //
                    if (observeCallbacks.addedAt) {
                      // 93
                      var index = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1; // 94
                      observeCallbacks.addedAt(doc, index, before); // 96
                    } else {
                      // 97
                      observeCallbacks.added(doc); // 98
                    } // 99
                  }, // 100
                  changed: function (id, fields) {
                    // 101
                    var self = this; // 102
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) return; // 103
                    var doc = EJSON.clone(self.docs.get(id)); // 105
                    if (!doc) throw new Error("Unknown id for changed: " + id); // 106
                    var oldDoc = transform(EJSON.clone(doc)); // 108
                    DiffSequence.applyChanges(doc, fields); // 109
                    doc = transform(doc); // 110
                    //
                    if (observeCallbacks.changedAt) {
                      // 111
                      var index = indices ? self.docs.indexOf(id) : -1; // 112
                      observeCallbacks.changedAt(doc, oldDoc, index); // 113
                    } else {
                      // 114
                      observeCallbacks.changed(doc, oldDoc); // 115
                    } // 116
                  }, // 117
                  movedBefore: function (id, before) {
                    // 118
                    var self = this; // 119
                    if (!observeCallbacks.movedTo) return; // 120
                    var from = indices ? self.docs.indexOf(id) : -1; // 122
                    var to = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.                                                                   // 127
                    //
                    if (to > from) --to; // 128
                    observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))), from, to, before || null); // 130
                  }, // 132
                  removed: function (id) {
                    // 133
                    var self = this; // 134
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) return; // technically maybe there should be an EJSON.clone here, but it's about
                    // to be removed from self.docs!                                                                               // 138
                    //
                    var doc = transform(self.docs.get(id)); // 139
                    //
                    if (observeCallbacks.removedAt) {
                      // 140
                      var index = indices ? self.docs.indexOf(id) : -1; // 141
                      observeCallbacks.removedAt(doc, index); // 142
                    } else {
                      // 143
                      observeCallbacks.removed(doc); // 144
                    } // 145
                  } // 146
                }; // 87
              } else {
                // 148
                observeChangesCallbacks = { // 149
                  added: function (id, fields) {
                    // 150
                    if (!suppressed && observeCallbacks.added) {
                      // 151
                      var doc = _.extend(fields, { // 152
                        _id: id // 152
                      }); // 152
                      //
                      observeCallbacks.added(transform(doc)); // 153
                    } // 154
                  }, // 155
                  changed: function (id, fields) {
                    // 156
                    var self = this; // 157
                    //
                    if (observeCallbacks.changed) {
                      // 158
                      var oldDoc = self.docs.get(id); // 159
                      var doc = EJSON.clone(oldDoc); // 160
                      DiffSequence.applyChanges(doc, fields); // 161
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc))); // 162
                    } // 164
                  }, // 165
                  removed: function (id) {
                    // 166
                    var self = this; // 167
                    //
                    if (observeCallbacks.removed) {
                      // 168
                      observeCallbacks.removed(transform(self.docs.get(id))); // 169
                    } // 170
                  } // 171
                }; // 149
              } // 173
              //
              var changeObserver = new LocalCollection._CachingChangeObserver({ // 175
                callbacks: observeChangesCallbacks // 176
              }); // 176
              var handle = cursor.observeChanges(changeObserver.applyChange); // 177
              suppressed = false; // 178
              return handle; // 180
            }; // 181
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "objectid.js": function (_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/objectid.js                                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require7("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            // Is this selector just shorthand for lookup by _id?                                                                  // 1
            LocalCollection._selectorIsId = function (selector) {
              // 2
              return typeof selector === "string" || typeof selector === "number" || selector instanceof MongoID.ObjectID; // 3
            }; // Is the selector just lookup by _id (shorthand or not)?                                                           // 6
            //
            //
            LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {
              // 9
              return LocalCollection._selectorIsId(selector) || selector && (typeof selector === "undefined" ? "undefined" : (0, _typeof3.default)(selector)) === "object" && selector._id && LocalCollection._selectorIsId(selector._id) && _.size(selector) === 1;
            }; // If this is a selector which explicitly constrains the match by ID to a finite                                    // 14
            // number of documents, returns a list of their IDs.  Otherwise returns                                                // 17
            // null. Note that the selector may have other restrictions so it may not even                                         // 18
            // match those document!  We care about $in and $and since those are generated                                         // 19
            // access-controlled update and remove.                                                                                // 20
            //
            //
            LocalCollection._idsMatchedBySelector = function (selector) {
              // 21
              // Is the selector just an ID?                                                                                       // 22
              if (LocalCollection._selectorIsId(selector)) return [selector]; // 23
              if (!selector) return null; // Do we have an _id clause?                                                             // 25
              //
              if (_.has(selector, '_id')) {
                // 29
                // Is the _id clause just an ID?                                                                                   // 30
                if (LocalCollection._selectorIsId(selector._id)) return [selector._id]; // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?
                //
                if (selector._id && selector._id.$in && _.isArray(selector._id.$in) && !_.isEmpty(selector._id.$in) && _.all(selector._id.$in, LocalCollection._selectorIsId)) {
                  return selector._id.$in; // 38
                } // 39
                //
                return null; // 40
              } // If this is a top-level $and, and any of the clauses constrain their                                             // 41
              // documents, then the whole selector is constrained by any one clause's                                             // 44
              // constraint. (Well, by their intersection, but that seems unlikely.)                                               // 45
              //
              //
              if (selector.$and && _.isArray(selector.$and)) {
                // 46
                for (var i = 0; i < selector.$and.length; ++i) {
                  // 47
                  var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]); // 48
                  //
                  if (subIds) return subIds; // 49
                } // 51
              } // 52
              //
              return null; // 54
            }; // 55
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "validation.js": function (_require8, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/validation.js                                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require8("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module3.export({ // 1
              assertIsValidFieldName: function () {
                // 1
                return assertIsValidFieldName; // 1
              }, // 1
              assertHasValidFieldNames: function () {
                // 1
                return assertHasValidFieldNames; // 1
              } // 1
            }); // 1
            // Make sure field names do not contain Mongo restricted                                                               // 1
            // characters ('.', '$', '\0').                                                                                        // 2
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                       // 3
            var invalidCharMsg = { // 4
              '.': "contain '.'", // 5
              '$': "start with '$'", // 6
              '\0': "contain null bytes" // 7
            }; // 4
            //
            function assertIsValidFieldName(key) {
              // 9
              var match = void 0; // 10
              //
              if (_.isString(key) && (match = key.match(/^\$|\.|\0/))) {
                // 11
                throw MinimongoError("Key " + key + " must not " + invalidCharMsg[match[0]]); // 12
              } // 13
            } // 14
            //
            ; // checks if all field names in an object are valid                                                                  // 14
            //
            function assertHasValidFieldNames(doc) {
              // 17
              if (doc && (typeof doc === "undefined" ? "undefined" : (0, _typeof3.default)(doc)) === "object") {
                // 18
                JSON.stringify(doc, function (key, value) {
                  // 19
                  assertIsValidFieldName(key); // 20
                  return value; // 21
                }); // 22
              } // 23
            } // 24
            //
            ; // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require2("./node_modules/meteor/minimongo/minimongo.js");
  _require2("./node_modules/meteor/minimongo/wrap_transform.js");
  _require2("./node_modules/meteor/minimongo/helpers.js");
  _require2("./node_modules/meteor/minimongo/selector.js");
  _require2("./node_modules/meteor/minimongo/sort.js");
  _require2("./node_modules/meteor/minimongo/projection.js");
  _require2("./node_modules/meteor/minimongo/modify.js");
  _require2("./node_modules/meteor/minimongo/diff.js");
  _require2("./node_modules/meteor/minimongo/id_map.js");
  _require2("./node_modules/meteor/minimongo/observe.js");
  _require2("./node_modules/meteor/minimongo/objectid.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.minimongo = {}, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function (_require, _exports) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/match.js                                                                                           //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX docs                                                                                                          // 1
            // 2
            // Things we explicitly do NOT support:                                                                              // 3
            //    - heterogenous arrays                                                                                          // 4
            // 5
            var currentArgumentChecker = new Meteor.EnvironmentVariable(); // 6
            var isPlainObject = _require("./isPlainObject.js").isPlainObject; // 7
            // 8
            /**                                                                                                                  // 9
             * @summary Check that a value matches a [pattern](#matchpatterns).                                                  // 10
             * If the value does not match the pattern, throw a `Match.Error`.                                                   // 11
             *                                                                                                                   // 12
             * Particularly useful to assert that arguments to a function have the right                                         // 13
             * types and structure.                                                                                              // 14
             * @locus Anywhere                                                                                                   // 15
             * @param {Any} value The value to check                                                                             // 16
             * @param {MatchPattern} pattern The pattern to match                                                                // 17
             * `value` against                                                                                                   // 18
             */ // 19
            var check = _exports.check = function (value, pattern) {
              // 20
              // Record that check got called, if somebody cared.                                                                // 21
              //                                                                                                                 // 22
              // We use getOrNullIfOutsideFiber so that it's OK to call check()                                                  // 23
              // from non-Fiber server contexts; the downside is that if you forget to                                           // 24
              // bindEnvironment on some random callback in your method/publisher,                                               // 25
              // it might not find the argumentChecker and you'll get an error about                                             // 26
              // not checking an argument that it looks like you're checking (instead                                            // 27
              // of just getting a "Node code must run in a Fiber" error).                                                       // 28
              var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber(); // 29
              if (argChecker) // 30
                argChecker.checking(value); // 31
              var result = testSubtree(value, pattern); // 32
              if (result) {
                // 33
                var err = new Match.Error(result.message); // 34
                if (result.path) {
                  // 35
                  err.message += " in field " + result.path; // 36
                  err.path = result.path; // 37
                } // 38
                throw err; // 39
              } // 40
            }; // 41
            // 42
            /**                                                                                                                  // 43
             * @namespace Match                                                                                                  // 44
             * @summary The namespace for all Match types and methods.                                                           // 45
             */ // 46
            var Match = _exports.Match = { // 47
              Optional: function (pattern) {
                // 48
                return new Optional(pattern); // 49
              }, // 50
              Maybe: function (pattern) {
                // 51
                return new Maybe(pattern); // 52
              }, // 53
              OneOf: function () /*arguments*/{
                // 54
                return new OneOf(_.toArray(arguments)); // 55
              }, // 56
              Any: ['__any__'], // 57
              Where: function (condition) {
                // 58
                return new Where(condition); // 59
              }, // 60
              ObjectIncluding: function (pattern) {
                // 61
                return new ObjectIncluding(pattern); // 62
              }, // 63
              ObjectWithValues: function (pattern) {
                // 64
                return new ObjectWithValues(pattern); // 65
              }, // 66
              // Matches only signed 32-bit integers                                                                             // 67
              Integer: ['__integer__'], // 68
              // 69
              // XXX matchers should know how to describe themselves for errors                                                  // 70
              Error: Meteor.makeErrorType("Match.Error", function (msg) {
                // 71
                this.message = "Match error: " + msg; // 72
                // The path of the value that failed to match. Initially empty, this gets                                        // 73
                // populated by catching and rethrowing the exception as it goes back up the                                     // 74
                // stack.                                                                                                        // 75
                // E.g.: "vals[3].entity.created"                                                                                // 76
                this.path = ""; // 77
                // If this gets sent over DDP, don't give full internal details but at least                                     // 78
                // provide something better than 500 Internal server error.                                                      // 79
                this.sanitizedError = new Meteor.Error(400, "Match failed"); // 80
              }), // 81
              // 82
              // Tests to see if value matches pattern. Unlike check, it merely returns true                                     // 83
              // or false (unless an error other than Match.Error was thrown). It does not                                       // 84
              // interact with _failIfArgumentsAreNotAllChecked.                                                                 // 85
              // XXX maybe also implement a Match.match which returns more information about                                     // 86
              //     failures but without using exception handling or doing what check()                                         // 87
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                                      // 88
              // 89
              /**                                                                                                                // 90
               * @summary Returns true if the value matches the pattern.                                                         // 91
               * @locus Anywhere                                                                                                 // 92
               * @param {Any} value The value to check                                                                           // 93
               * @param {MatchPattern} pattern The pattern to match `value` against                                              // 94
               */ // 95
              test: function (value, pattern) {
                // 96
                return !testSubtree(value, pattern); // 97
              }, // 98
              // 99
              // Runs `f.apply(context, args)`. If check() is not called on every element of                                     // 100
              // `args` (either directly or in the first level of an array), throws an error                                     // 101
              // (using `description` in the message).                                                                           // 102
              //                                                                                                                 // 103
              _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {
                // 104
                var argChecker = new ArgumentChecker(args, description); // 105
                var result = currentArgumentChecker.withValue(argChecker, function () {
                  // 106
                  return f.apply(context, args); // 107
                }); // 108
                // If f didn't itself throw, make sure it checked all of its arguments.                                          // 109
                argChecker.throwUnlessAllArgumentsHaveBeenChecked(); // 110
                return result; // 111
              } // 112
            }; // 113
            // 114
            var Optional = function (pattern) {
              // 115
              this.pattern = pattern; // 116
            }; // 117
            // 118
            var Maybe = function (pattern) {
              // 119
              this.pattern = pattern; // 120
            }; // 121
            // 122
            var OneOf = function (choices) {
              // 123
              if (_.isEmpty(choices)) // 124
                throw new Error("Must provide at least one choice to Match.OneOf"); // 125
              this.choices = choices; // 126
            }; // 127
            // 128
            var Where = function (condition) {
              // 129
              this.condition = condition; // 130
            }; // 131
            // 132
            var ObjectIncluding = function (pattern) {
              // 133
              this.pattern = pattern; // 134
            }; // 135
            // 136
            var ObjectWithValues = function (pattern) {
              // 137
              this.pattern = pattern; // 138
            }; // 139
            // 140
            var stringForErrorMessage = function (value, options) {
              // 141
              options = options || {}; // 142
              // 143
              if (value === null) return "null"; // 144
              // 145
              if (options.onlyShowType) {
                // 146
                return typeof value; // 147
              } // 148
              // 149
              // Your average non-object things.  Saves from doing the try/catch below for.                                      // 150
              if (typeof value !== "object") {
                // 151
                return EJSON.stringify(value); // 152
              } // 153
              // 154
              try {
                // 155
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)      // 156
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.                             // 157
                JSON.stringify(value); // 158
              } catch (stringifyError) {
                // 159
                if (stringifyError.name === "TypeError") {
                  // 160
                  return typeof value; // 161
                } // 162
              } // 163
              // 164
              return EJSON.stringify(value); // 165
            }; // 166
            // 167
            var typeofChecks = [// 168
            [String, "string"], // 169
            [Number, "number"], // 170
            [Boolean, "boolean"], // 171
            // While we don't allow undefined/function in EJSON, this is good for optional                                     // 172
            // arguments with OneOf.                                                                                           // 173
            [Function, "function"], // 174
            [undefined, "undefined"] // 175
            ]; // 176
            // 177
            // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.                    // 178
            var testSubtree = function (value, pattern) {
              // 179
              // Match anything!                                                                                                 // 180
              if (pattern === Match.Any) // 181
                return false; // 182
              // 183
              // Basic atomic types.                                                                                             // 184
              // Do not match boxed objects (e.g. String, Boolean)                                                               // 185
              for (var i = 0; i < typeofChecks.length; ++i) {
                // 186
                if (pattern === typeofChecks[i][0]) {
                  // 187
                  if (typeof value === typeofChecks[i][1]) // 188
                    return false; // 189
                  return { // 190
                    message: "Expected " + typeofChecks[i][1] + ", got " + stringForErrorMessage(value, { onlyShowType: true }),
                    path: "" // 192
                  }; // 193
                } // 194
              } // 195
              // 196
              if (pattern === null) {
                // 197
                if (value === null) {
                  // 198
                  return false; // 199
                } // 200
                return { // 201
                  message: "Expected null, got " + stringForErrorMessage(value), // 202
                  path: "" // 203
                }; // 204
              } // 205
              // 206
              // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                                     // 207
              if (typeof pattern === "string" || typeof pattern === "number" || typeof pattern === "boolean") {
                // 208
                if (value === pattern) // 209
                  return false; // 210
                return { // 211
                  message: "Expected " + pattern + ", got " + stringForErrorMessage(value), // 212
                  path: "" // 213
                }; // 214
              } // 215
              // 216
              // Match.Integer is special type encoded with array                                                                // 217
              if (pattern === Match.Integer) {
                // 218
                // There is no consistent and reliable way to check if variable is a 64-bit                                      // 219
                // integer. One of the popular solutions is to get reminder of division by 1                                     // 220
                // but this method fails on really large floats with big precision.                                              // 221
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                                   // 222
                // Bitwise operators work consistantly but always cast variable to 32-bit                                        // 223
                // signed integer according to JavaScript specs.                                                                 // 224
                if (typeof value === "number" && (value | 0) === value) // 225
                  return false; // 226
                return { // 227
                  message: "Expected Integer, got " + stringForErrorMessage(value), // 228
                  path: "" // 229
                }; // 230
              } // 231
              // 232
              // "Object" is shorthand for Match.ObjectIncluding({});                                                            // 233
              if (pattern === Object) // 234
                pattern = Match.ObjectIncluding({}); // 235
              // 236
              // Array (checked AFTER Any, which is implemented as an Array).                                                    // 237
              if (pattern instanceof Array) {
                // 238
                if (pattern.length !== 1) {
                  // 239
                  return { // 240
                    message: "Bad pattern: arrays must have one type element" + stringForErrorMessage(pattern), // 241
                    path: "" // 242
                  }; // 243
                } // 244
                if (!_.isArray(value) && !_.isArguments(value)) {
                  // 245
                  return { // 246
                    message: "Expected array, got " + stringForErrorMessage(value), // 247
                    path: "" // 248
                  }; // 249
                } // 250
                // 251
                for (var i = 0, length = value.length; i < length; i++) {
                  // 252
                  var result = testSubtree(value[i], pattern[0]); // 253
                  if (result) {
                    // 254
                    result.path = _prependPath(i, result.path); // 255
                    return result; // 256
                  } // 257
                } // 258
                return false; // 259
              } // 260
              // 261
              // Arbitrary validation checks. The condition can return false or throw a                                          // 262
              // Match.Error (ie, it can internally use check()) to fail.                                                        // 263
              if (pattern instanceof Where) {
                // 264
                var result; // 265
                try {
                  // 266
                  result = pattern.condition(value); // 267
                } catch (err) {
                  // 268
                  if (!(err instanceof Match.Error)) // 269
                    throw err; // 270
                  return { // 271
                    message: err.message, // 272
                    path: err.path // 273
                  }; // 274
                } // 275
                if (result) // 276
                  return false; // 277
                // XXX this error is terrible                                                                                    // 278
                return { // 279
                  message: "Failed Match.Where validation", // 280
                  path: "" // 281
                }; // 282
              } // 283
              // 284
              // 285
              if (pattern instanceof Maybe) {
                // 286
                pattern = Match.OneOf(undefined, null, pattern.pattern); // 287
              } // 288
              else if (pattern instanceof Optional) {
                  // 289
                  pattern = Match.OneOf(undefined, pattern.pattern); // 290
                } // 291
              // 292
              if (pattern instanceof OneOf) {
                // 293
                for (var i = 0; i < pattern.choices.length; ++i) {
                  // 294
                  var result = testSubtree(value, pattern.choices[i]); // 295
                  if (!result) {
                    // 296
                    // No error? Yay, return.                                                                                    // 297
                    return false; // 298
                  } // 299
                  // Match errors just mean try another choice.                                                                  // 300
                } // 301
                // XXX this error is terrible                                                                                    // 302
                return { // 303
                  message: "Failed Match.OneOf, Match.Maybe or Match.Optional validation", // 304
                  path: "" // 305
                }; // 306
              } // 307
              // 308
              // A function that isn't something we special-case is assumed to be a                                              // 309
              // constructor.                                                                                                    // 310
              if (pattern instanceof Function) {
                // 311
                if (value instanceof pattern) // 312
                  return false; // 313
                return { // 314
                  message: "Expected " + (pattern.name || "particular constructor"), // 315
                  path: "" // 316
                }; // 317
              } // 318
              // 319
              var unknownKeysAllowed = false; // 320
              var unknownKeyPattern; // 321
              if (pattern instanceof ObjectIncluding) {
                // 322
                unknownKeysAllowed = true; // 323
                pattern = pattern.pattern; // 324
              } // 325
              if (pattern instanceof ObjectWithValues) {
                // 326
                unknownKeysAllowed = true; // 327
                unknownKeyPattern = [pattern.pattern]; // 328
                pattern = {}; // no required keys                                                                               // 329
              } // 330
              // 331
              if (typeof pattern !== "object") {
                // 332
                return { // 333
                  message: "Bad pattern: unknown pattern type", // 334
                  path: "" // 335
                }; // 336
              } // 337
              // 338
              // An object, with required and optional keys. Note that this does NOT do                                          // 339
              // structural matches against objects of special types that happen to match                                        // 340
              // the pattern: this really needs to be a plain old {Object}!                                                      // 341
              if (typeof value !== 'object') {
                // 342
                return { // 343
                  message: "Expected object, got " + typeof value, // 344
                  path: "" // 345
                }; // 346
              } // 347
              if (value === null) {
                // 348
                return { // 349
                  message: "Expected object, got null", // 350
                  path: "" // 351
                }; // 352
              } // 353
              if (!isPlainObject(value)) {
                // 354
                return { // 355
                  message: "Expected plain object", // 356
                  path: "" // 357
                }; // 358
              } // 359
              // 360
              var requiredPatterns = {}; // 361
              var optionalPatterns = {}; // 362
              _.each(pattern, function (subPattern, key) {
                // 363
                if (subPattern instanceof Optional || subPattern instanceof Maybe) // 364
                  optionalPatterns[key] = subPattern.pattern; // 365
                else // 366
                  requiredPatterns[key] = subPattern; // 367
              }); // 368
              // 369
              //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)                        // 370
              var allKeys = function (obj) {
                // 371
                var keys = []; // 372
                if (_.isObject(obj)) {
                  // 373
                  for (var key in obj) keys.push(key); // 374
                } // 375
                return keys; // 376
              }; // 377
              // 378
              for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {
                // 379
                var key = keys[i]; // 380
                var subValue = value[key]; // 381
                if (_.has(requiredPatterns, key)) {
                  // 382
                  var result = testSubtree(subValue, requiredPatterns[key]); // 383
                  if (result) {
                    // 384
                    result.path = _prependPath(key, result.path); // 385
                    return result; // 386
                  } // 387
                  delete requiredPatterns[key]; // 388
                } else if (_.has(optionalPatterns, key)) {
                  // 389
                  var result = testSubtree(subValue, optionalPatterns[key]); // 390
                  if (result) {
                    // 391
                    result.path = _prependPath(key, result.path); // 392
                    return result; // 393
                  } // 394
                } else {
                  // 395
                  if (!unknownKeysAllowed) {
                    // 396
                    return { // 397
                      message: "Unknown key", // 398
                      path: key // 399
                    }; // 400
                  } // 401
                  if (unknownKeyPattern) {
                    // 402
                    var result = testSubtree(subValue, unknownKeyPattern[0]); // 403
                    if (result) {
                      // 404
                      result.path = _prependPath(key, result.path); // 405
                      return result; // 406
                    } // 407
                  } // 408
                } // 409
              } // 410
              // 411
              var keys = _.keys(requiredPatterns); // 412
              if (keys.length) {
                // 413
                return { // 414
                  message: "Missing key '" + keys[0] + "'", // 415
                  path: "" // 416
                }; // 417
              } // 418
            }; // 419
            // 420
            var ArgumentChecker = function (args, description) {
              // 421
              var self = this; // 422
              // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                                           // 423
              // against its contents.)                                                                                          // 424
              self.args = _.clone(args); // 425
              // Since the common case will be to check arguments in order, and we splice                                        // 426
              // out arguments when we check them, make it so we splice out from the end                                         // 427
              // rather than the beginning.                                                                                      // 428
              self.args.reverse(); // 429
              self.description = description; // 430
            }; // 431
            // 432
            _.extend(ArgumentChecker.prototype, { // 433
              checking: function (value) {
                // 434
                var self = this; // 435
                if (self._checkingOneValue(value)) // 436
                  return; // 437
                // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                                       // 438
                // or check([foo, bar], [String]) to count... but only if value wasn't                                           // 439
                // itself an argument.                                                                                           // 440
                if (_.isArray(value) || _.isArguments(value)) {
                  // 441
                  _.each(value, _.bind(self._checkingOneValue, self)); // 442
                } // 443
              }, // 444
              _checkingOneValue: function (value) {
                // 445
                var self = this; // 446
                for (var i = 0; i < self.args.length; ++i) {
                  // 447
                  // Is this value one of the arguments? (This can have a false positive if                                      // 448
                  // the argument is an interned primitive, but it's still a good enough                                         // 449
                  // check.)                                                                                                     // 450
                  // (NaN is not === to itself, so we have to check specially.)                                                  // 451
                  if (value === self.args[i] || _.isNaN(value) && _.isNaN(self.args[i])) {
                    // 452
                    self.args.splice(i, 1); // 453
                    return true; // 454
                  } // 455
                } // 456
                return false; // 457
              }, // 458
              throwUnlessAllArgumentsHaveBeenChecked: function () {
                // 459
                var self = this; // 460
                if (!_.isEmpty(self.args)) // 461
                  throw new Error("Did not check() all arguments during " + // 462
                  self.description); // 463
              } // 464
            }); // 465
            // 466
            var _jsKeywords = ["do", "if", "in", "for", "let", "new", "try", "var", "case", // 467
            "else", "enum", "eval", "false", "null", "this", "true", "void", "with", // 468
            "break", "catch", "class", "const", "super", "throw", "while", "yield", // 469
            "delete", "export", "import", "public", "return", "static", "switch", // 470
            "typeof", "default", "extends", "finally", "package", "private", "continue", // 471
            "debugger", "function", "arguments", "interface", "protected", "implements", // 472
            "instanceof"]; // 473
            // 474
            // Assumes the base of path is already escaped properly                                                              // 475
            // returns key + base                                                                                                // 476
            var _prependPath = function (key, base) {
              // 477
              if (typeof key === "number" || key.match(/^[0-9]+$/)) // 478
                key = "[" + key + "]"; // 479
              else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key)) // 480
                  key = JSON.stringify([key]); // 481
              // 482
              if (base && base[0] !== "[") // 483
                return key + '.' + base; // 484
              return key + base; // 485
            }; // 486
            // 487
            // 488
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function (_require3, _exports3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/isPlainObject.js                                                                                   //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.                                              // 1
            // 2
            var class2type = {}; // 3
            // 4
            var toString = class2type.toString; // 5
            // 6
            var hasOwn = class2type.hasOwnProperty; // 7
            // 8
            var fnToString = hasOwn.toString; // 9
            // 10
            var ObjectFunctionString = fnToString.call(Object); // 11
            // 12
            var getProto = Object.getPrototypeOf; // 13
            // 14
            _exports3.isPlainObject = function (obj) {
              // 15
              var proto, // 16
              Ctor; // 17
              // 18
              // Detect obvious negatives                                                                                        // 19
              // Use toString instead of jQuery.type to catch host objects                                                       // 20
              if (!obj || toString.call(obj) !== "[object Object]") {
                // 21
                return false; // 22
              } // 23
              // 24
              proto = getProto(obj); // 25
              // 26
              // Objects with no prototype (e.g., `Object.create( null )`) are plain                                             // 27
              if (!proto) {
                // 28
                return true; // 29
              } // 30
              // 31
              // Objects with prototype are plain iff they were constructed by a global Object function                          // 32
              Ctor = hasOwn.call(proto, "constructor") && proto.constructor; // 33
              return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString; // 34
            }; // 35
            // 36
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/check/match.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.check = _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var Retry;

  (function () {

    /////////////////////////////////////////////////////////////////////////////
    //                                                                         //
    // packages/retry/retry.js                                                 //
    //                                                                         //
    /////////////////////////////////////////////////////////////////////////////
    //
    // Retry logic with an exponential backoff.                                // 1
    //                                                                         // 2
    // options:                                                                // 3
    //  baseTimeout: time for initial reconnect attempt (ms).                  // 4
    //  exponent: exponential factor to increase timeout each attempt.         // 5
    //  maxTimeout: maximum time between retries (ms).                         // 6
    //  minCount: how many times to reconnect "instantly".                     // 7
    //  minTimeout: time to wait for the first `minCount` retries (ms).        // 8
    //  fuzz: factor to randomize retry times by (to avoid retry storms).      // 9
    // 10
    Retry = function (options) {
      // 11
      var self = this; // 12
      _.extend(self, _.defaults(_.clone(options || {}), { // 13
        baseTimeout: 1000, // 1 second                                         // 14
        exponent: 2.2, // 15
        // The default is high-ish to ensure a server can recover from a       // 16
        // failure caused by load.                                             // 17
        maxTimeout: 5 * 60000, // 5 minutes                                    // 18
        minTimeout: 10, // 19
        minCount: 2, // 20
        fuzz: 0.5 // +- 25%                                                    // 21
      })); // 22
      self.retryTimer = null; // 23
    }; // 24
    // 25
    _.extend(Retry.prototype, { // 26
      // 27
      // Reset a pending retry, if any.                                        // 28
      clear: function () {
        // 29
        var self = this; // 30
        if (self.retryTimer) // 31
          clearTimeout(self.retryTimer); // 32
        self.retryTimer = null; // 33
      }, // 34
      // 35
      // Calculate how long to wait in milliseconds to retry, based on the     // 36
      // `count` of which retry this is.                                       // 37
      _timeout: function (count) {
        // 38
        var self = this; // 39
        // 40
        if (count < self.minCount) // 41
          return self.minTimeout; // 42
        // 43
        var timeout = Math.min( // 44
        self.maxTimeout, // 45
        self.baseTimeout * Math.pow(self.exponent, count)); // 46
        // fuzz the timeout randomly, to avoid reconnect storms when a         // 47
        // server goes down.                                                   // 48
        timeout = timeout * (Random.fraction() * self.fuzz + ( // 49
        1 - self.fuzz / 2)); // 50
        return timeout; // 51
      }, // 52
      // 53
      // Call `fn` after a delay, based on the `count` of which retry this is.
      retryLater: function (count, fn) {
        // 55
        var self = this; // 56
        var timeout = self._timeout(count); // 57
        if (self.retryTimer) // 58
          clearTimeout(self.retryTimer); // 59
        self.retryTimer = Meteor.setTimeout(fn, timeout); // 60
        return timeout; // 61
      } // 62
      // 63
    }); // 64
    // 65
    /////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.retry = {}, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;

  /* Package-scope variables */
  var DDPCommon;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/namespace.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                  // 1
     * @namespace DDPCommon                                                                              // 2
     * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3
     * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4
     * of a ddp client for both client AND server; and the ddp server is the                             // 5
     * implementation of the livedata server and stream server. Common                                   // 6
     * functionality shared between both can be shared under this namespace                              // 7
     */ // 8
    DDPCommon = {}; // 9
    // 10
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/heartbeat.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Heartbeat options:                                                                                // 1
    //   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2
    //   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3
    //     received, in milliseconds.                                                                    // 4
    //   sendPing: function to call to send a ping on the connection.                                    // 5
    //   onTimeout: function to call to close the connection.                                            // 6
    // 7
    DDPCommon.Heartbeat = function (options) {
      // 8
      var self = this; // 9
      // 10
      self.heartbeatInterval = options.heartbeatInterval; // 11
      self.heartbeatTimeout = options.heartbeatTimeout; // 12
      self._sendPing = options.sendPing; // 13
      self._onTimeout = options.onTimeout; // 14
      self._seenPacket = false; // 15
      // 16
      self._heartbeatIntervalHandle = null; // 17
      self._heartbeatTimeoutHandle = null; // 18
    }; // 19
    // 20
    _.extend(DDPCommon.Heartbeat.prototype, { // 21
      stop: function () {
        // 22
        var self = this; // 23
        self._clearHeartbeatIntervalTimer(); // 24
        self._clearHeartbeatTimeoutTimer(); // 25
      }, // 26
      // 27
      start: function () {
        // 28
        var self = this; // 29
        self.stop(); // 30
        self._startHeartbeatIntervalTimer(); // 31
      }, // 32
      // 33
      _startHeartbeatIntervalTimer: function () {
        // 34
        var self = this; // 35
        self._heartbeatIntervalHandle = Meteor.setInterval( // 36
        _.bind(self._heartbeatIntervalFired, self), // 37
        self.heartbeatInterval // 38
        ); // 39
      }, // 40
      // 41
      _startHeartbeatTimeoutTimer: function () {
        // 42
        var self = this; // 43
        self._heartbeatTimeoutHandle = Meteor.setTimeout( // 44
        _.bind(self._heartbeatTimeoutFired, self), // 45
        self.heartbeatTimeout // 46
        ); // 47
      }, // 48
      // 49
      _clearHeartbeatIntervalTimer: function () {
        // 50
        var self = this; // 51
        if (self._heartbeatIntervalHandle) {
          // 52
          Meteor.clearInterval(self._heartbeatIntervalHandle); // 53
          self._heartbeatIntervalHandle = null; // 54
        } // 55
      }, // 56
      // 57
      _clearHeartbeatTimeoutTimer: function () {
        // 58
        var self = this; // 59
        if (self._heartbeatTimeoutHandle) {
          // 60
          Meteor.clearTimeout(self._heartbeatTimeoutHandle); // 61
          self._heartbeatTimeoutHandle = null; // 62
        } // 63
      }, // 64
      // 65
      // The heartbeat interval timer is fired when we should send a ping.                               // 66
      _heartbeatIntervalFired: function () {
        // 67
        var self = this; // 68
        // don't send ping if we've seen a packet since we last checked,                                 // 69
        // *or* if we have already sent a ping and are awaiting a timeout.                               // 70
        // That shouldn't happen, but it's possible if                                                   // 71
        // `self.heartbeatInterval` is smaller than                                                      // 72
        // `self.heartbeatTimeout`.                                                                      // 73
        if (!self._seenPacket && !self._heartbeatTimeoutHandle) {
          // 74
          self._sendPing(); // 75
          // Set up timeout, in case a pong doesn't arrive in time.                                      // 76
          self._startHeartbeatTimeoutTimer(); // 77
        } // 78
        self._seenPacket = false; // 79
      }, // 80
      // 81
      // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82
      // timed out waiting for the pong.                                                                 // 83
      _heartbeatTimeoutFired: function () {
        // 84
        var self = this; // 85
        self._heartbeatTimeoutHandle = null; // 86
        self._onTimeout(); // 87
      }, // 88
      // 89
      messageReceived: function () {
        // 90
        var self = this; // 91
        // Tell periodic checkin that we have seen a packet, and thus it                                 // 92
        // does not need to send a ping this cycle.                                                      // 93
        self._seenPacket = true; // 94
        // If we were waiting for a pong, we got it.                                                     // 95
        if (self._heartbeatTimeoutHandle) {
          // 96
          self._clearHeartbeatTimeoutTimer(); // 97
        } // 98
      } // 99
    }); // 100
    // 101
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/utils.js                                                                      //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1']; // 1
    // 2
    DDPCommon.parseDDP = function (stringMessage) {
      // 3
      try {
        // 4
        var msg = JSON.parse(stringMessage); // 5
      } catch (e) {
        // 6
        Meteor._debug("Discarding message with invalid JSON", stringMessage); // 7
        return null; // 8
      } // 9
      // DDP messages must be objects.                                                                   // 10
      if (msg === null || typeof msg !== 'object') {
        // 11
        Meteor._debug("Discarding non-object DDP message", stringMessage); // 12
        return null; // 13
      } // 14
      // 15
      // massage msg to get it into "abstract ddp" rather than "wire ddp" format.                        // 16
      // 17
      // switch between "cleared" rep of unsetting fields and "undefined"                                // 18
      // rep of same                                                                                     // 19
      if (_.has(msg, 'cleared')) {
        // 20
        if (!_.has(msg, 'fields')) // 21
          msg.fields = {}; // 22
        _.each(msg.cleared, function (clearKey) {
          // 23
          msg.fields[clearKey] = undefined; // 24
        }); // 25
        delete msg.cleared; // 26
      } // 27
      // 28
      _.each(['fields', 'params', 'result'], function (field) {
        // 29
        if (_.has(msg, field)) // 30
          msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]); // 31
      }); // 32
      // 33
      return msg; // 34
    }; // 35
    // 36
    DDPCommon.stringifyDDP = function (msg) {
      // 37
      var copy = EJSON.clone(msg); // 38
      // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39
      // and cleared' rep                                                                                // 40
      if (_.has(msg, 'fields')) {
        // 41
        var cleared = []; // 42
        _.each(msg.fields, function (value, key) {
          // 43
          if (value === undefined) {
            // 44
            cleared.push(key); // 45
            delete copy.fields[key]; // 46
          } // 47
        }); // 48
        if (!_.isEmpty(cleared)) // 49
          copy.cleared = cleared; // 50
        if (_.isEmpty(copy.fields)) // 51
          delete copy.fields; // 52
      } // 53
      // adjust types to basic                                                                           // 54
      _.each(['fields', 'params', 'result'], function (field) {
        // 55
        if (_.has(copy, field)) // 56
          copy[field] = EJSON._adjustTypesToJSONValue(copy[field]); // 57
      }); // 58
      if (msg.id && typeof msg.id !== 'string') {
        // 59
        throw new Error("Message id is not a string"); // 60
      } // 61
      return JSON.stringify(copy); // 62
    }; // 63
    // 64
    // 65
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/method_invocation.js                                                          //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Instance name is this because it is usually referred to as this inside a                          // 1
    // method definition                                                                                 // 2
    /**                                                                                                  // 3
     * @summary The state for a single invocation of a method, referenced by this                        // 4
     * inside a method definition.                                                                       // 5
     * @param {Object} options                                                                           // 6
     * @instanceName this                                                                                // 7
     * @showInstanceName true                                                                            // 8
     */ // 9
    DDPCommon.MethodInvocation = function (options) {
      // 10
      var self = this; // 11
      // 12
      // true if we're running not the actual method, but a stub (that is,                               // 13
      // if we're on a client (which may be a browser, or in the future a                                // 14
      // server connecting to another server) and presently running a                                    // 15
      // simulation of a server-side method for latency compensation                                     // 16
      // purposes). not currently true except in a client such as a browser,                             // 17
      // since there's usually no point in running stubs unless you have a                               // 18
      // zero-latency connection to the user.                                                            // 19
      // 20
      /**                                                                                                // 21
       * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 22
       * @locus Anywhere                                                                                 // 23
       * @name  isSimulation                                                                             // 24
       * @memberOf DDPCommon.MethodInvocation                                                            // 25
       * @instance                                                                                       // 26
       * @type {Boolean}                                                                                 // 27
       */ // 28
      this.isSimulation = options.isSimulation; // 29
      // 30
      // call this function to allow other method invocations (from the                                  // 31
      // same client) to continue running without waiting for this one to                                // 32
      // complete.                                                                                       // 33
      this._unblock = options.unblock || function () {}; // 34
      this._calledUnblock = false; // 35
      // 36
      // current user id                                                                                 // 37
      // 38
      /**                                                                                                // 39
       * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 40
       * @locus Anywhere                                                                                 // 41
       * @name  userId                                                                                   // 42
       * @memberOf DDPCommon.MethodInvocation                                                            // 43
       * @instance                                                                                       // 44
       */ // 45
      this.userId = options.userId; // 46
      // 47
      // sets current user id in all appropriate server contexts and                                     // 48
      // reruns subscriptions                                                                            // 49
      this._setUserId = options.setUserId || function () {}; // 50
      // 51
      // On the server, the connection this method call came in on.                                      // 52
      // 53
      /**                                                                                                // 54
       * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
       * @locus Server                                                                                   // 56
       * @name  connection                                                                               // 57
       * @memberOf DDPCommon.MethodInvocation                                                            // 58
       * @instance                                                                                       // 59
       */ // 60
      this.connection = options.connection; // 61
      // 62
      // The seed for randomStream value generation                                                      // 63
      this.randomSeed = options.randomSeed; // 64
      // 65
      // This is set by RandomStream.get; and holds the random stream state                              // 66
      this.randomStream = null; // 67
    }; // 68
    // 69
    _.extend(DDPCommon.MethodInvocation.prototype, { // 70
      /**                                                                                                // 71
       * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
       * @locus Server                                                                                   // 73
       * @memberOf DDPCommon.MethodInvocation                                                            // 74
       * @instance                                                                                       // 75
       */ // 76
      unblock: function () {
        // 77
        var self = this; // 78
        self._calledUnblock = true; // 79
        self._unblock(); // 80
      }, // 81
      // 82
      /**                                                                                                // 83
       * @summary Set the logged in user.                                                                // 84
       * @locus Server                                                                                   // 85
       * @memberOf DDPCommon.MethodInvocation                                                            // 86
       * @instance                                                                                       // 87
       * @param {String | null} userId The value that should be returned by `userId` on this connection.
       */ // 89
      setUserId: function (userId) {
        // 90
        var self = this; // 91
        if (self._calledUnblock) // 92
          throw new Error("Can't call setUserId in a method after calling unblock"); // 93
        self.userId = userId; // 94
        self._setUserId(userId); // 95
      } // 96
    }); // 97
    // 98
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/random_stream.js                                                              //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // RandomStream allows for generation of pseudo-random values, from a seed.                          // 1
    //                                                                                                   // 2
    // We use this for consistent 'random' numbers across the client and server.                         // 3
    // We want to generate probably-unique IDs on the client, and we ideally want                        // 4
    // the server to generate the same IDs when it executes the method.                                  // 5
    //                                                                                                   // 6
    // For generated values to be the same, we must seed ourselves the same way,                         // 7
    // and we must keep track of the current state of our pseudo-random generators.                      // 8
    // We call this state the scope. By default, we use the current DDP method                           // 9
    // invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10
    // If a randomSeed is provided it will be used to seed our random sequences.                         // 11
    // In this way, client and server method calls will generate the same values.                        // 12
    //                                                                                                   // 13
    // We expose multiple named streams; each stream is independent                                      // 14
    // and is seeded differently (but predictably from the name).                                        // 15
    // By using multiple streams, we support reordering of requests,                                     // 16
    // as long as they occur on different streams.                                                       // 17
    //                                                                                                   // 18
    // @param options {Optional Object}                                                                  // 19
    //   seed: Array or value - Seed value(s) for the generator.                                         // 20
    //                          If an array, will be used as-is                                          // 21
    //                          If a value, will be converted to a single-value array                    // 22
    //                          If omitted, a random array will be used as the seed.                     // 23
    DDPCommon.RandomStream = function (options) {
      // 24
      var self = this; // 25
      // 26
      this.seed = [].concat(options.seed || randomToken()); // 27
      // 28
      this.sequences = {}; // 29
    }; // 30
    // 31
    // Returns a random string of sufficient length for a random seed.                                   // 32
    // This is a placeholder function; a similar function is planned                                     // 33
    // for Random itself; when that is added we should remove this function,                             // 34
    // and call Random's randomToken instead.                                                            // 35
    function randomToken() {
      // 36
      return Random.hexString(20); // 37
    }; // 38
    // 39
    // Returns the random stream with the specified name, in the specified                               // 40
    // scope. If a scope is passed, then we use that to seed a (not                                      // 41
    // cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42
    // scope is null (or otherwise falsey) then we use a generated seed.                                 // 43
    //                                                                                                   // 44
    // However, scope will normally be the current DDP method invocation,                                // 45
    // so we'll use the stream with the specified name, and we should get                                // 46
    // consistent values on the client and server sides of a method call.                                // 47
    DDPCommon.RandomStream.get = function (scope, name) {
      // 48
      if (!name) {
        // 49
        name = "default"; // 50
      } // 51
      if (!scope) {
        // 52
        // There was no scope passed in; the sequence won't actually be                                  // 53
        // reproducible. but make it fast (and not cryptographically                                     // 54
        // secure) anyways, so that the behavior is similar to what you'd                                // 55
        // get by passing in a scope.                                                                    // 56
        return Random.insecure; // 57
      } // 58
      var randomStream = scope.randomStream; // 59
      if (!randomStream) {
        // 60
        scope.randomStream = randomStream = new DDPCommon.RandomStream({ // 61
          seed: scope.randomSeed // 62
        }); // 63
      } // 64
      return randomStream._sequence(name); // 65
    }; // 66
    // 67
    // 68
    // Creates a randomSeed for passing to a method call.                                                // 69
    // Note that we take enclosing as an argument,                                                       // 70
    // though we expect it to be DDP._CurrentInvocation.get()                                            // 71
    // However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72
    // invocation may not be the one currently in scope.                                                 // 73
    // If enclosing is null, we'll use Random and values won't be repeatable.                            // 74
    DDPCommon.makeRpcSeed = function (enclosing, methodName) {
      // 75
      var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName); // 76
      return stream.hexString(20); // 77
    }; // 78
    // 79
    _.extend(DDPCommon.RandomStream.prototype, { // 80
      // Get a random sequence with the specified name, creating it if does not exist.                   // 81
      // New sequences are seeded with the seed concatenated with the name.                              // 82
      // By passing a seed into Random.create, we use the Alea generator.                                // 83
      _sequence: function (name) {
        // 84
        var self = this; // 85
        // 86
        var sequence = self.sequences[name] || null; // 87
        if (sequence === null) {
          // 88
          var sequenceSeed = self.seed.concat(name); // 89
          for (var i = 0; i < sequenceSeed.length; i++) {
            // 90
            if (_.isFunction(sequenceSeed[i])) {
              // 91
              sequenceSeed[i] = sequenceSeed[i](); // 92
            } // 93
          } // 94
          self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed); // 95
        } // 96
        return sequence; // 97
      } // 98
    }); // 99
    // 100
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ddp-common'] = {}, {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var Reload;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/reload/reload.js                                                               //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                        // 1
     * This code does _NOT_ support hot (session-restoring) reloads on                         // 2
     * IE6,7. It only works on browsers with sessionStorage support.                           // 3
     *                                                                                         // 4
     * There are a couple approaches to add IE6,7 support:                                     // 5
     *                                                                                         // 6
     * - use IE's "userData" mechanism in combination with window.name.                        // 7
     * This mostly works, however the problem is that it can not get to the                    // 8
     * data until after DOMReady. This is a problem for us since this API                      // 9
     * relies on the data being ready before API users run. We could                           // 10
     * refactor using Meteor.startup in all API users, but that might slow                     // 11
     * page loads as we couldn't start the stream until after DOMReady.                        // 12
     * Here are some resources on this approach:                                               // 13
     * https://github.com/hugeinc/USTORE.js                                                    // 14
     * http://thudjs.tumblr.com/post/419577524/localstorage-userdata                           // 15
     * http://www.javascriptkit.com/javatutors/domstorage2.shtml                               // 16
     *                                                                                         // 17
     * - POST the data to the server, and have the server send it back on                      // 18
     * page load. This is nice because it sidesteps all the local storage                      // 19
     * compatibility issues, however it is kinda tricky. We can use a unique                   // 20
     * token in the URL, then get rid of it with HTML5 pushstate, but that                     // 21
     * only works on pushstate browsers.                                                       // 22
     *                                                                                         // 23
     * This will all need to be reworked entirely when we add server-side                      // 24
     * HTML rendering. In that case, the server will need to have access to                    // 25
     * the client's session to render properly.                                                // 26
     */ // 27
    // 28
    // XXX when making this API public, also expose a flag for the app                         // 29
    // developer to know whether a hot code push is happening. This is                         // 30
    // useful for apps using `window.onbeforeunload`. See                                      // 31
    // https://github.com/meteor/meteor/pull/657                                               // 32
    // 33
    Reload = {}; // 34
    // 35
    var KEY_NAME = 'Meteor_Reload'; // 36
    // 37
    var old_data = {}; // 38
    // read in old data at startup.                                                            // 39
    var old_json; // 40
    // 41
    // This logic for sessionStorage detection is based on browserstate/history.js             // 42
    var safeSessionStorage = null; // 43
    try {
      // 44
      // This throws a SecurityError on Chrome if cookies & localStorage are                   // 45
      // explicitly disabled                                                                   // 46
      //                                                                                       // 47
      // On Firefox with dom.storage.enabled set to false, sessionStorage is null              // 48
      //                                                                                       // 49
      // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely            // 50
      // on the throw if sessionStorage == null; the alternative is browser                    // 51
      // detection, but this seems better.                                                     // 52
      safeSessionStorage = window.sessionStorage; // 53
      // 54
      // Check we can actually use it                                                          // 55
      if (safeSessionStorage) {
        // 56
        safeSessionStorage.setItem('__dummy__', '1'); // 57
        safeSessionStorage.removeItem('__dummy__'); // 58
      } else {
        // 59
        // Be consistently null, for safety                                                    // 60
        safeSessionStorage = null; // 61
      } // 62
    } catch (e) {
      // 63
      // Expected on chrome with strict security, or if sessionStorage not supported           // 64
      safeSessionStorage = null; // 65
    } // 66
    // 67
    // Exported for test.                                                                      // 68
    Reload._getData = function () {
      // 69
      return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME); // 70
    }; // 71
    // 72
    if (safeSessionStorage) {
      // 73
      old_json = Reload._getData(); // 74
      safeSessionStorage.removeItem(KEY_NAME); // 75
    } else {} // 76
      // Unsupported browser (IE 6,7) or locked down security settings.                        // 77
      // No session resumption.                                                                // 78
      // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");                                    // 79
      // 80
      // 81
    if (!old_json) old_json = '{}'; // 82
    var old_parsed = {}; // 83
    try {
      // 84
      old_parsed = JSON.parse(old_json); // 85
      if (typeof old_parsed !== "object") {
        // 86
        Meteor._debug("Got bad data on reload. Ignoring."); // 87
        old_parsed = {}; // 88
      } // 89
    } catch (err) {
      // 90
      Meteor._debug("Got invalid JSON on reload. Ignoring."); // 91
    } // 92
    // 93
    if (old_parsed.reload && typeof old_parsed.data === "object") {
      // 94
      // Meteor._debug("Restoring reload data.");                                              // 95
      old_data = old_parsed.data; // 96
    } // 97
    // 98
    // 99
    var providers = []; // 100
    // 101
    ////////// External API //////////                                                         // 102
    // 103
    // Packages that support migration should register themselves by calling                   // 104
    // this function. When it's time to migrate, callback will be called                       // 105
    // with one argument, the "retry function," and an optional 'option'                       // 106
    // argument (containing a key 'immediateMigration'). If the package                        // 107
    // is ready to migrate, it should return [true, data], where data is                       // 108
    // its migration data, an arbitrary JSON value (or [true] if it has                        // 109
    // no migration data this time). If the package needs more time                            // 110
    // before it is ready to migrate, it should return false. Then, once                       // 111
    // it is ready to migrating again, it should call the retry                                // 112
    // function. The retry function will return immediately, but will                          // 113
    // schedule the migration to be retried, meaning that every package                        // 114
    // will be polled once again for its migration data. If they are all                       // 115
    // ready this time, then the migration will happen. name must be set if there              // 116
    // is migration data. If 'immediateMigration' is set in the options                        // 117
    // argument, then it doesn't matter whether the package is ready to                        // 118
    // migrate or not; the reload will happen immediately without waiting                      // 119
    // (used for OAuth redirect login).                                                        // 120
    //                                                                                         // 121
    Reload._onMigrate = function (name, callback) {
      // 122
      if (!callback) {
        // 123
        // name not provided, so first arg is callback.                                        // 124
        callback = name; // 125
        name = undefined; // 126
      } // 127
      providers.push({ name: name, callback: callback }); // 128
    }; // 129
    // 130
    // Called by packages when they start up.                                                  // 131
    // Returns the object that was saved, or undefined if none saved.                          // 132
    //                                                                                         // 133
    Reload._migrationData = function (name) {
      // 134
      return old_data[name]; // 135
    }; // 136
    // 137
    // Options are the same as for `Reload._migrate`.                                          // 138
    var pollProviders = function (tryReload, options) {
      // 139
      tryReload = tryReload || function () {}; // 140
      options = options || {}; // 141
      // 142
      var migrationData = {}; // 143
      var remaining = _.clone(providers); // 144
      var allReady = true; // 145
      while (remaining.length) {
        // 146
        var p = remaining.shift(); // 147
        var status = p.callback(tryReload, options); // 148
        if (!status[0]) // 149
          allReady = false; // 150
        if (status.length > 1 && p.name) // 151
          migrationData[p.name] = status[1]; // 152
      }; // 153
      if (allReady || options.immediateMigration) // 154
        return migrationData; // 155
      else // 156
        return null; // 157
    }; // 158
    // 159
    // Options are:                                                                            // 160
    //  - immediateMigration: true if the page will be reloaded immediately                    // 161
    //    regardless of whether packages report that they are ready or not.                    // 162
    Reload._migrate = function (tryReload, options) {
      // 163
      // Make sure each package is ready to go, and collect their                              // 164
      // migration data                                                                        // 165
      var migrationData = pollProviders(tryReload, options); // 166
      if (migrationData === null) // 167
        return false; // not ready yet..                                                       // 168
      // 169
      try {
        // 170
        // Persist the migration data                                                          // 171
        var json = JSON.stringify({ // 172
          data: migrationData, reload: true // 173
        }); // 174
      } catch (err) {
        // 175
        Meteor._debug("Couldn't serialize data for migration", migrationData); // 176
        throw err; // 177
      } // 178
      // 179
      if (safeSessionStorage) {
        // 180
        try {
          // 181
          safeSessionStorage.setItem(KEY_NAME, json); // 182
        } catch (err) {
          // 183
          // We should have already checked this, but just log - don't throw                   // 184
          Meteor._debug("Couldn't save data for migration to sessionStorage", err); // 185
        } // 186
      } else {
        // 187
        Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
      } // 189
      // 190
      return true; // 191
    }; // 192
    // 193
    // Allows tests to isolate the list of providers.                                          // 194
    Reload._withFreshProvidersForTest = function (f) {
      // 195
      var originalProviders = _.clone(providers); // 196
      providers = []; // 197
      try {
        // 198
        f(); // 199
      } finally {
        // 200
        providers = originalProviders; // 201
      } // 202
    }; // 203
    // 204
    // Migrating reload: reload this page (presumably to pick up a new                         // 205
    // version of the code or assets), but save the program state and                          // 206
    // migrate it over. This function returns immediately. The reload                          // 207
    // will happen at some point in the future once all of the packages                        // 208
    // are ready to migrate.                                                                   // 209
    //                                                                                         // 210
    var reloading = false; // 211
    Reload._reload = function (options) {
      // 212
      options = options || {}; // 213
      // 214
      if (reloading) // 215
        return; // 216
      reloading = true; // 217
      // 218
      var tryReload = function () {
        _.defer(function () {
          // 219
          if (Reload._migrate(tryReload, options)) {
            // 220
            // We'd like to make the browser reload the page using location.replace()            // 221
            // instead of location.reload(), because this avoids validating assets               // 222
            // with the server if we still have a valid cached copy. This doesn't work           // 223
            // when the location contains a hash however, because that wouldn't reload           // 224
            // the page and just scroll to the hash location instead.                            // 225
            if (window.location.hash || window.location.href.endsWith("#")) {
              // 226
              window.location.reload(); // 227
            } else {
              // 228
              window.location.replace(window.location.href); // 229
            } // 230
          } // 231
        });
      }; // 232
      // 233
      tryReload(); // 234
    }; // 235
    // 236
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/reload/deprecated.js                                                           //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Reload functionality used to live on Meteor._reload. Be nice and try not to             // 1
    // break code that uses it, even though it's internal.                                     // 2
    // XXX COMPAT WITH 0.6.4                                                                   // 3
    Meteor._reload = { // 4
      onMigrate: Reload._onMigrate, // 5
      migrationData: Reload._migrationData, // 6
      reload: Reload._reload // 7
    }; // 8
    // 9
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.reload = {}, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var check = Package.check.check;
    var Match = Package.check.Match;
    var Random = Package.random.Random;
    var EJSON = Package.ejson.EJSON;
    var _ = Package.underscore._;
    var Tracker = Package.tracker.Tracker;
    var Deps = Package.tracker.Deps;
    var Retry = Package.retry.Retry;
    var IdMap = Package['id-map'].IdMap;
    var DDPCommon = Package['ddp-common'].DDPCommon;
    var DiffSequence = Package['diff-sequence'].DiffSequence;
    var MongoID = Package['mongo-id'].MongoID;
    var meteorInstall = Package.modules.meteorInstall;
    var process = Package.modules.process;
    var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
    var Promise = Package.promise.Promise;
    var Symbol = Package['ecmascript-runtime-client'].Symbol;
    var Map = Package['ecmascript-runtime-client'].Map;
    var Set = Package['ecmascript-runtime-client'].Set;

    /* Package-scope variables */
    var SockJS, toSockjsUrl, toWebsocketUrl, allConnections, DDP;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "sockjs-0.3.4.js": function (_require) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/sockjs-0.3.4.js                                                                                 //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _typeof2 = _require("babel-runtime/helpers/typeof"); //
                        //
                        var _typeof3 = _interopRequireDefault(_typeof2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        // XXX METEOR changes in <METEOR>                                                                                      // 1
                        /* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                        // 3
                                                                                                                                               //
                        Copyright (c) 2011-2012 VMware, Inc.                                                                                   //
                                                                                                                                               //
                        Permission is hereby granted, free of charge, to any person obtaining a copy                                           //
                        of this software and associated documentation files (the "Software"), to deal                                          //
                        in the Software without restriction, including without limitation the rights                                           //
                        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                              //
                        copies of the Software, and to permit persons to whom the Software is                                                  //
                        furnished to do so, subject to the following conditions:                                                               //
                                                                                                                                               //
                        The above copyright notice and this permission notice shall be included in                                             //
                        all copies or substantial portions of the Software.                                                                    //
                                                                                                                                               //
                        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                             //
                        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                               //
                        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                            //
                        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                 //
                        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                          //
                        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                              //
                        THE SOFTWARE.                                                                                                          //
                        */ // <METEOR> Commented out JSO implementation (use json package instead).                                            //
                        // JSON2 by Douglas Crockford (minified).                                                                              // 27
                        // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
                        // </METEOR>                                                                                                           // 29
                        //     [*] Including lib/index.js                                                                                      // 31
                        // Public object                                                                                                       // 32
                        SockJS = function () {
                            // 33
                            var _document = document; // 34
                            var _window = window; // 35
                            var utils = {}; //         [*] Including lib/reventtarget.js                                                       // 36
                            /*                                                                                                                 // 40
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ /* Simplified implementation of DOM2 EventTarget.                                                              //
                                 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                    //
                                 */ //
                            //
                            var REventTarget = function () {}; // 51
                            //
                            REventTarget.prototype.addEventListener = function (eventType, listener) {
                                // 52
                                if (!this._listeners) {
                                    // 53
                                    this._listeners = {}; // 54
                                } // 55
                                //
                                if (!(eventType in this._listeners)) {
                                    // 56
                                    this._listeners[eventType] = []; // 57
                                } // 58
                                //
                                var arr = this._listeners[eventType]; // 59
                                //
                                if (utils.arrIndexOf(arr, listener) === -1) {
                                    // 60
                                    arr.push(listener); // 61
                                } // 62
                                //
                                return; // 63
                            }; // 64
                            //
                            REventTarget.prototype.removeEventListener = function (eventType, listener) {
                                // 66
                                if (!(this._listeners && eventType in this._listeners)) {
                                    // 67
                                    return; // 68
                                } // 69
                                //
                                var arr = this._listeners[eventType]; // 70
                                var idx = utils.arrIndexOf(arr, listener); // 71
                                //
                                if (idx !== -1) {
                                    // 72
                                    if (arr.length > 1) {
                                        // 73
                                        this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1)); // 74
                                    } else {
                                        // 75
                                        delete this._listeners[eventType]; // 76
                                    } // 77
                                    //
                                    return; // 78
                                } // 79
                                //
                                return; // 80
                            }; // 81
                            //
                            REventTarget.prototype.dispatchEvent = function (event) {
                                // 83
                                var t = event.type; // 84
                                var args = Array.prototype.slice.call(arguments, 0); // 85
                                //
                                if (this['on' + t]) {
                                    // 86
                                    this['on' + t].apply(this, args); // 87
                                } // 88
                                //
                                if (this._listeners && t in this._listeners) {
                                    // 89
                                    for (var i = 0; i < this._listeners[t].length; i++) {
                                        // 90
                                        this._listeners[t][i].apply(this, args); // 91
                                    } // 92
                                } // 93
                            }; //         [*] End of lib/reventtarget.js                                                                       // 94
                            //         [*] Including lib/simpleevent.js                                                                        // 98
                            /*                                                                                                                 // 99
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var SimpleEvent = function (type, obj) {
                                // 107
                                this.type = type; // 108
                                //
                                if (typeof obj !== 'undefined') {
                                    // 109
                                    for (var k in meteorBabelHelpers.sanitizeForInObject(obj)) {
                                        // 110
                                        if (!obj.hasOwnProperty(k)) continue; // 111
                                        this[k] = obj[k]; // 112
                                    } // 113
                                } // 114
                            }; // 115
                            //
                            SimpleEvent.prototype.toString = function () {
                                // 117
                                var r = []; // 118
                                //
                                for (var k in meteorBabelHelpers.sanitizeForInObject(this)) {
                                    // 119
                                    if (!this.hasOwnProperty(k)) continue; // 120
                                    var v = this[k]; // 121
                                    if (typeof v === 'function') v = '[function]'; // 122
                                    r.push(k + '=' + v); // 123
                                } // 124
                                //
                                return 'SimpleEvent(' + r.join(', ') + ')'; // 125
                            }; //         [*] End of lib/simpleevent.js                                                                        // 126
                            //         [*] Including lib/eventemitter.js                                                                       // 130
                            /*                                                                                                                 // 131
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventEmitter = function (events) {
                                // 139
                                var that = this; // 140
                                that._events = events || []; // 141
                                that._listeners = {}; // 142
                            }; // 143
                            //
                            EventEmitter.prototype.emit = function (type) {
                                // 144
                                var that = this; // 145
                                //
                                that._verifyType(type); // 146
                                //
                                if (that._nuked) return; // 147
                                var args = Array.prototype.slice.call(arguments, 1); // 149
                                //
                                if (that['on' + type]) {
                                    // 150
                                    that['on' + type].apply(that, args); // 151
                                } // 152
                                //
                                if (type in that._listeners) {
                                    // 153
                                    for (var i = 0; i < that._listeners[type].length; i++) {
                                        // 154
                                        that._listeners[type][i].apply(that, args); // 155
                                    } // 156
                                } // 157
                            }; // 158
                            //
                            EventEmitter.prototype.on = function (type, callback) {
                                // 160
                                var that = this; // 161
                                //
                                that._verifyType(type); // 162
                                //
                                if (that._nuked) return; // 163
                                //
                                if (!(type in that._listeners)) {
                                    // 165
                                    that._listeners[type] = []; // 166
                                } // 167
                                //
                                that._listeners[type].push(callback); // 168
                            }; // 169
                            //
                            EventEmitter.prototype._verifyType = function (type) {
                                // 171
                                var that = this; // 172
                                //
                                if (utils.arrIndexOf(that._events, type) === -1) {
                                    // 173
                                    utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                                } // 177
                            }; // 178
                            //
                            EventEmitter.prototype.nuke = function () {
                                // 180
                                var that = this; // 181
                                that._nuked = true; // 182
                                //
                                for (var i = 0; i < that._events.length; i++) {
                                    // 183
                                    delete that[that._events[i]]; // 184
                                } // 185
                                //
                                that._listeners = {}; // 186
                            }; //         [*] End of lib/eventemitter.js                                                                       // 187
                            //         [*] Including lib/utils.js                                                                              // 191
                            /*                                                                                                                 // 192
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_'; // 200
                            //
                            utils.random_string = function (length, max) {
                                // 201
                                max = max || random_string_chars.length; // 202
                                var i,
                                    // 203
                                ret = []; // 203
                                //
                                for (i = 0; i < length; i++) {
                                    // 204
                                    ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1)); // 205
                                } // 206
                                //
                                return ret.join(''); // 207
                            }; // 208
                            //
                            utils.random_number = function (max) {
                                // 209
                                return Math.floor(Math.random() * max); // 210
                            }; // 211
                            //
                            utils.random_number_string = function (max) {
                                // 212
                                var t = ('' + (max - 1)).length; // 213
                                var p = Array(t + 1).join('0'); // 214
                                return (p + utils.random_number(max)).slice(-t); // 215
                            }; // Assuming that url looks like: http://asdasd:111/asd                                                          // 216
                            //
                            //
                            utils.getOrigin = function (url) {
                                // 219
                                url += '/'; // 220
                                var parts = url.split('/').slice(0, 3); // 221
                                return parts.join('/'); // 222
                            }; // 223
                            //
                            utils.isSameOriginUrl = function (url_a, url_b) {
                                // 225
                                // location.origin would do, but it's not always available.                                                    // 226
                                if (!url_b) url_b = _window.location.href; // 227
                                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/'); // 229
                            }; // <METEOR>                                                                                                     // 232
                            // https://github.com/sockjs/sockjs-client/issues/79                                                               // 235
                            //
                            //
                            utils.isSameOriginScheme = function (url_a, url_b) {
                                // 236
                                if (!url_b) url_b = _window.location.href; // 237
                                return url_a.split(':')[0] === url_b.split(':')[0]; // 239
                            }; // </METEOR>                                                                                                    // 242
                            //
                            //
                            utils.getParentDomain = function (url) {
                                // 246
                                // ipv4 ip address                                                                                             // 247
                                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address                                                      // 248
                                //
                                if (/^\[/.test(url)) return url; // no dots                                                                    // 250
                                //
                                if (!/[.]/.test(url)) return url; // 252
                                var parts = url.split('.').slice(1); // 254
                                return parts.join('.'); // 255
                            }; // 256
                            //
                            utils.objectExtend = function (dst, src) {
                                // 258
                                for (var k in meteorBabelHelpers.sanitizeForInObject(src)) {
                                    // 259
                                    if (src.hasOwnProperty(k)) {
                                        // 260
                                        dst[k] = src[k]; // 261
                                    } // 262
                                } // 263
                                //
                                return dst; // 264
                            }; // 265
                            //
                            var WPrefix = '_jp'; // 267
                            //
                            utils.polluteGlobalNamespace = function () {
                                // 269
                                if (!(WPrefix in _window)) {
                                    // 270
                                    _window[WPrefix] = {}; // 271
                                } // 272
                            }; // 273
                            //
                            utils.closeFrame = function (code, reason) {
                                // 275
                                return 'c' + JSON.stringify([code, reason]); // 276
                            }; // 277
                            //
                            utils.userSetCode = function (code) {
                                // 279
                                return code === 1000 || code >= 3000 && code <= 4999; // 280
                            }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                       // 281
                            // and RFC 2988.                                                                                                   // 284
                            //
                            //
                            utils.countRTO = function (rtt) {
                                // 285
                                var rto; // 286
                                //
                                if (rtt > 100) {
                                    // 287
                                    rto = 3 * rtt; // rto > 300msec                                                                            // 288
                                } else {
                                    // 289
                                    rto = rtt + 200; // 200msec < rto <= 300msec                                                               // 290
                                } // 291
                                //
                                return rto; // 292
                            }; // 293
                            //
                            utils.log = function () {
                                // 295
                                if (_window.console && console.log && console.log.apply) {
                                    // 296
                                    console.log.apply(console, arguments); // 297
                                } // 298
                            }; // 299
                            //
                            utils.bind = function (fun, that) {
                                // 301
                                if (fun.bind) {
                                    // 302
                                    return fun.bind(that); // 303
                                } else {
                                    // 304
                                    return function () {
                                        // 305
                                        return fun.apply(that, arguments); // 306
                                    }; // 307
                                } // 308
                            }; // 309
                            //
                            utils.flatUrl = function (url) {
                                // 311
                                return url.indexOf('?') === -1 && url.indexOf('#') === -1; // 312
                            }; // `relativeTo` is an optional absolute URL. If provided, `url` will be                                         // 313
                            // interpreted relative to `relativeTo`. Defaults to `document.location`.                                          // 316
                            // <METEOR>                                                                                                        // 317
                            //
                            //
                            utils.amendUrl = function (url, relativeTo) {
                                // 318
                                var baseUrl; // 319
                                //
                                if (relativeTo === undefined) {
                                    // 320
                                    baseUrl = _document.location; // 321
                                } else {
                                    // 322
                                    var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo); // 323
                                    //
                                    if (protocolMatch) {
                                        // 324
                                        var protocol = protocolMatch[0].toLowerCase(); // 325
                                        var rest = relativeTo.substring(protocol.length); // 326
                                        var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest); // 327
                                        if (hostMatch) var host = hostMatch[0]; // 328
                                    } // 330
                                    //
                                    if (!protocol || !host) throw new Error("relativeTo must be an absolute url"); // 331
                                    baseUrl = { // 333
                                        protocol: protocol, // 334
                                        host: host // 335
                                    }; // 333
                                } // 337
                                //
                                if (!url) {
                                    // 338
                                    throw new Error('Wrong url for SockJS'); // 339
                                } // 340
                                //
                                if (!utils.flatUrl(url)) {
                                    // 341
                                    throw new Error('Only basic urls are supported in SockJS'); // 342
                                } //  '//abc' --> 'http://abc'                                                                                 // 343
                                //
                                //
                                if (url.indexOf('//') === 0) {
                                    // 346
                                    url = baseUrl.protocol + url; // 347
                                } // '/abc' --> 'http://localhost:1234/abc'                                                                    // 348
                                //
                                //
                                if (url.indexOf('/') === 0) {
                                    // 350
                                    url = baseUrl.protocol + '//' + baseUrl.host + url; // 351
                                } // </METEOR>                                                                                                 // 352
                                // strip trailing slashes                                                                                      // 354
                                //
                                //
                                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers             // 355
                                // http://localhost:80/ is not in the same origin as http://localhost/                                         // 358
                                // Remove explicit :80 or :443 in such cases. See #74                                                          // 359
                                //
                                var parts = url.split("/"); // 360
                                //
                                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                                    // 361
                                    parts[2] = parts[2].replace(/:(80|443)$/, ""); // 363
                                } // 364
                                //
                                url = parts.join("/"); // 365
                                return url; // 366
                            }; // IE doesn't support [].indexOf.                                                                               // 367
                            //
                            //
                            utils.arrIndexOf = function (arr, obj) {
                                // 370
                                for (var i = 0; i < arr.length; i++) {
                                    // 371
                                    if (arr[i] === obj) {
                                        // 372
                                        return i; // 373
                                    } // 374
                                } // 375
                                //
                                return -1; // 376
                            }; // 377
                            //
                            utils.arrSkip = function (arr, obj) {
                                // 379
                                var idx = utils.arrIndexOf(arr, obj); // 380
                                //
                                if (idx === -1) {
                                    // 381
                                    return arr.slice(); // 382
                                } else {
                                    // 383
                                    var dst = arr.slice(0, idx); // 384
                                    return dst.concat(arr.slice(idx + 1)); // 385
                                } // 386
                            }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                // 387
                            //
                            //
                            utils.isArray = Array.isArray || function (value) {
                                // 390
                                return {}.toString.call(value).indexOf('Array') >= 0; // 391
                            }; // 392
                            //
                            utils.delay = function (t, fun) {
                                // 394
                                if (typeof t === 'function') {
                                    // 395
                                    fun = t; // 396
                                    t = 0; // 397
                                } // 398
                                //
                                return setTimeout(fun, t); // 399
                            }; // Chars worth escaping, as defined by Douglas Crockford:                                                       // 400
                            //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196       // 404
                            //
                            //
                            var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                                json_lookup = { // 405
                                "\0": "\\u0000", // 407
                                "\x01": "\\u0001", // 407
                                "\x02": "\\u0002", // 407
                                "\x03": "\\u0003", // 407
                                "\x04": "\\u0004", // 408
                                "\x05": "\\u0005", // 408
                                "\x06": "\\u0006", // 408
                                "\x07": "\\u0007", // 408
                                "\b": "\\b", // 409
                                "\t": "\\t", // 409
                                "\n": "\\n", // 409
                                "\x0B": "\\u000b", // 409
                                "\f": "\\f", // 409
                                "\r": "\\r", // 409
                                "\x0E": "\\u000e", // 410
                                "\x0F": "\\u000f", // 410
                                "\x10": "\\u0010", // 410
                                "\x11": "\\u0011", // 410
                                "\x12": "\\u0012", // 411
                                "\x13": "\\u0013", // 411
                                "\x14": "\\u0014", // 411
                                "\x15": "\\u0015", // 411
                                "\x16": "\\u0016", // 412
                                "\x17": "\\u0017", // 412
                                "\x18": "\\u0018", // 412
                                "\x19": "\\u0019", // 412
                                "\x1A": "\\u001a", // 413
                                "\x1B": "\\u001b", // 413
                                "\x1C": "\\u001c", // 413
                                "\x1D": "\\u001d", // 413
                                "\x1E": "\\u001e", // 414
                                "\x1F": "\\u001f", // 414
                                "\"": "\\\"", // 414
                                "\\": "\\\\", // 414
                                "\x7F": "\\u007f", // 415
                                "\x80": "\\u0080", // 415
                                "\x81": "\\u0081", // 415
                                "\x82": "\\u0082", // 415
                                "\x83": "\\u0083", // 416
                                "\x84": "\\u0084", // 416
                                "\x85": "\\u0085", // 416
                                "\x86": "\\u0086", // 416
                                "\x87": "\\u0087", // 417
                                "\x88": "\\u0088", // 417
                                "\x89": "\\u0089", // 417
                                "\x8A": "\\u008a", // 417
                                "\x8B": "\\u008b", // 418
                                "\x8C": "\\u008c", // 418
                                "\x8D": "\\u008d", // 418
                                "\x8E": "\\u008e", // 418
                                "\x8F": "\\u008f", // 419
                                "\x90": "\\u0090", // 419
                                "\x91": "\\u0091", // 419
                                "\x92": "\\u0092", // 419
                                "\x93": "\\u0093", // 420
                                "\x94": "\\u0094", // 420
                                "\x95": "\\u0095", // 420
                                "\x96": "\\u0096", // 420
                                "\x97": "\\u0097", // 421
                                "\x98": "\\u0098", // 421
                                "\x99": "\\u0099", // 421
                                "\x9A": "\\u009a", // 421
                                "\x9B": "\\u009b", // 422
                                "\x9C": "\\u009c", // 422
                                "\x9D": "\\u009d", // 422
                                "\x9E": "\\u009e", // 422
                                "\x9F": "\\u009f", // 423
                                "\xAD": "\\u00ad", // 423
                                "\u0600": "\\u0600", // 423
                                "\u0601": "\\u0601", // 423
                                "\u0602": "\\u0602", // 424
                                "\u0603": "\\u0603", // 424
                                "\u0604": "\\u0604", // 424
                                "\u070F": "\\u070f", // 424
                                "\u17B4": "\\u17b4", // 425
                                "\u17B5": "\\u17b5", // 425
                                "\u200C": "\\u200c", // 425
                                "\u200D": "\\u200d", // 425
                                "\u200E": "\\u200e", // 426
                                "\u200F": "\\u200f", // 426
                                "\u2028": "\\u2028", // 426
                                "\u2029": "\\u2029", // 426
                                "\u202A": "\\u202a", // 427
                                "\u202B": "\\u202b", // 427
                                "\u202C": "\\u202c", // 427
                                "\u202D": "\\u202d", // 427
                                "\u202E": "\\u202e", // 428
                                "\u202F": "\\u202f", // 428
                                "\u2060": "\\u2060", // 428
                                "\u2061": "\\u2061", // 428
                                "\u2062": "\\u2062", // 429
                                "\u2063": "\\u2063", // 429
                                "\u2064": "\\u2064", // 429
                                "\u2065": "\\u2065", // 429
                                "\u2066": "\\u2066", // 430
                                "\u2067": "\\u2067", // 430
                                "\u2068": "\\u2068", // 430
                                "\u2069": "\\u2069", // 430
                                "\u206A": "\\u206a", // 431
                                "\u206B": "\\u206b", // 431
                                "\u206C": "\\u206c", // 431
                                "\u206D": "\\u206d", // 431
                                "\u206E": "\\u206e", // 432
                                "\u206F": "\\u206f", // 432
                                "\uFEFF": "\\ufeff", // 432
                                "\uFFF0": "\\ufff0", // 432
                                "\uFFF1": "\\ufff1", // 433
                                "\uFFF2": "\\ufff2", // 433
                                "\uFFF3": "\\ufff3", // 433
                                "\uFFF4": "\\ufff4", // 433
                                "\uFFF5": "\\ufff5", // 434
                                "\uFFF6": "\\ufff6", // 434
                                "\uFFF7": "\\ufff7", // 434
                                "\uFFF8": "\\ufff8", // 434
                                "\uFFF9": "\\ufff9", // 435
                                "\uFFFA": "\\ufffa", // 435
                                "\uFFFB": "\\ufffb", // 435
                                "\uFFFC": "\\ufffc", // 435
                                "\uFFFD": "\\ufffd", // 436
                                "\uFFFE": "\\ufffe", // 436
                                "\uFFFF": "\\uffff" // 436
                            }; // Some extra characters that Chrome gets wrong, and substitutes with                                           // 406
                            // something else on the wire.                                                                                     // 439
                            //
                            var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                                extra_lookup; // JSON Quote string. Use native implementation when possible.                                   // 440
                            //
                            var JSONQuote = JSON && JSON.stringify || function (string) {
                                // 444
                                json_escapable.lastIndex = 0; // 445
                                //
                                if (json_escapable.test(string)) {
                                    // 446
                                    string = string.replace(json_escapable, function (a) {
                                        // 447
                                        return json_lookup[a]; // 448
                                    }); // 449
                                } // 450
                                //
                                return '"' + string + '"'; // 451
                            }; // This may be quite slow, so let's delay until user actually uses bad                                          // 452
                            // characters.                                                                                                     // 455
                            //
                            //
                            var unroll_lookup = function (escapable) {
                                // 456
                                var i; // 457
                                var unrolled = {}; // 458
                                var c = []; // 459
                                //
                                for (i = 0; i < 65536; i++) {
                                    // 460
                                    c.push(String.fromCharCode(i)); // 461
                                } // 462
                                //
                                escapable.lastIndex = 0; // 463
                                c.join('').replace(escapable, function (a) {
                                    // 464
                                    unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); // 465
                                    return ''; // 466
                                }); // 467
                                escapable.lastIndex = 0; // 468
                                return unrolled; // 469
                            }; // Quote string, also taking care of unicode characters that browsers                                           // 470
                            // often break. Especially, take care of unicode surrogates:                                                       // 473
                            //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                        // 474
                            //
                            //
                            utils.quote = function (string) {
                                // 475
                                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.                     // 476
                                //
                                extra_escapable.lastIndex = 0; // 479
                                //
                                if (!extra_escapable.test(quoted)) {
                                    // 480
                                    return quoted; // 481
                                } // 482
                                //
                                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable); // 484
                                return quoted.replace(extra_escapable, function (a) {
                                    // 486
                                    return extra_lookup[a]; // 487
                                }); // 488
                            }; // 489
                            //
                            var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];
                            //
                            utils.probeProtocols = function () {
                                // 501
                                var probed = {}; // 502
                                //
                                for (var i = 0; i < _all_protocols.length; i++) {
                                    // 503
                                    var protocol = _all_protocols[i]; // User can have a typo in protocol name.                                // 504
                                    //
                                    probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled(); // 506
                                } // 508
                                //
                                return probed; // 509
                            }; // 510
                            //
                            utils.detectProtocols = function (probed, protocols_whitelist, info) {
                                // 512
                                var pe = {},
                                    // 513
                                protocols = []; // 513
                                if (!protocols_whitelist) protocols_whitelist = _all_protocols; // 515
                                //
                                for (var i = 0; i < protocols_whitelist.length; i++) {
                                    // 516
                                    var protocol = protocols_whitelist[i]; // 517
                                    pe[protocol] = probed[protocol]; // 518
                                } // 519
                                //
                                var maybe_push = function (protos) {
                                    // 520
                                    var proto = protos.shift(); // 521
                                    //
                                    if (pe[proto]) {
                                        // 522
                                        protocols.push(proto); // 523
                                    } else {
                                        // 524
                                        if (protos.length > 0) {
                                            // 525
                                            maybe_push(protos); // 526
                                        } // 527
                                    } // 528
                                }; // 1. Websocket                                                                                             // 529
                                //
                                //
                                if (info.websocket !== false) {
                                    // 532
                                    maybe_push(['websocket']); // 533
                                } // 2. Streaming                                                                                              // 534
                                //
                                //
                                if (pe['xhr-streaming'] && !info.null_origin) {
                                    // 537
                                    protocols.push('xhr-streaming'); // 538
                                } else {
                                    // 539
                                    if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                                        // 540
                                        protocols.push('xdr-streaming'); // 541
                                    } else {
                                        // 542
                                        maybe_push(['iframe-eventsource', 'iframe-htmlfile']); // 543
                                    } // 545
                                } // 3. Polling                                                                                                // 546
                                //
                                //
                                if (pe['xhr-polling'] && !info.null_origin) {
                                    // 549
                                    protocols.push('xhr-polling'); // 550
                                } else {
                                    // 551
                                    if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                                        // 552
                                        protocols.push('xdr-polling'); // 553
                                    } else {
                                        // 554
                                        maybe_push(['iframe-xhr-polling', 'jsonp-polling']); // 555
                                    } // 557
                                } // 558
                                //
                                return protocols; // 559
                            }; //         [*] End of lib/utils.js                                                                              // 560
                            //         [*] Including lib/dom.js                                                                                // 564
                            /*                                                                                                                 // 565
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // May be used by htmlfile jsonp and transports.                                                               //
                            //
                            //
                            var MPrefix = '_sockjs_global'; // 574
                            //
                            utils.createHook = function () {
                                // 575
                                var window_id = 'a' + utils.random_string(8); // 576
                                //
                                if (!(MPrefix in _window)) {
                                    // 577
                                    var map = {}; // 578
                                    //
                                    _window[MPrefix] = function (window_id) {
                                        // 579
                                        if (!(window_id in map)) {
                                            // 580
                                            map[window_id] = { // 581
                                                id: window_id, // 582
                                                del: function () {
                                                    // 583
                                                    delete map[window_id]; // 583
                                                } // 583
                                            }; // 581
                                        } // 585
                                        //
                                        return map[window_id]; // 586
                                    }; // 587
                                } // 588
                                //
                                return _window[MPrefix](window_id); // 589
                            }; // 590
                            //
                            utils.attachMessage = function (listener) {
                                // 594
                                utils.attachEvent('message', listener); // 595
                            }; // 596
                            //
                            utils.attachEvent = function (event, listener) {
                                // 597
                                if (typeof _window.addEventListener !== 'undefined') {
                                    // 598
                                    _window.addEventListener(event, listener, false); // 599
                                } else {
                                    // 600
                                    // IE quirks.                                                                                              // 601
                                    // According to: http://stevesouders.com/misc/test-postmessage.php                                         // 602
                                    // the message gets delivered only to 'document', not 'window'.                                            // 603
                                    _document.attachEvent("on" + event, listener); // I get 'window' for ie8.                                  // 604
                                    //
                                    //
                                    _window.attachEvent("on" + event, listener); // 606
                                } // 607
                            }; // 608
                            //
                            utils.detachMessage = function (listener) {
                                // 610
                                utils.detachEvent('message', listener); // 611
                            }; // 612
                            //
                            utils.detachEvent = function (event, listener) {
                                // 613
                                if (typeof _window.addEventListener !== 'undefined') {
                                    // 614
                                    _window.removeEventListener(event, listener, false); // 615
                                } else {
                                    // 616
                                    _document.detachEvent("on" + event, listener); // 617
                                    //
                                    _window.detachEvent("on" + event, listener); // 618
                                } // 619
                            }; // 620
                            //
                            var on_unload = {}; // Things registered after beforeunload are to be called immediately.                          // 623
                            //
                            var after_unload = false; // 625
                            //
                            var trigger_unload_callbacks = function () {
                                // 627
                                for (var ref in meteorBabelHelpers.sanitizeForInObject(on_unload)) {
                                    // 628
                                    on_unload[ref](); // 629
                                    delete on_unload[ref]; // 630
                                } // 631
                                //
                                ; // 631
                            }; // 632
                            //
                            var unload_triggered = function () {
                                // 634
                                if (after_unload) return; // 635
                                after_unload = true; // 636
                                trigger_unload_callbacks(); // 637
                            }; // 'unload' alone is not reliable in opera within an iframe, but we                                             // 638
                            // can't use `beforeunload` as IE fires it on javascript: links.                                                   // 641
                            //
                            //
                            utils.attachEvent('unload', unload_triggered); // 642
                            //
                            utils.unload_add = function (listener) {
                                // 644
                                var ref = utils.random_string(8); // 645
                                on_unload[ref] = listener; // 646
                                //
                                if (after_unload) {
                                    // 647
                                    utils.delay(trigger_unload_callbacks); // 648
                                } // 649
                                //
                                return ref; // 650
                            }; // 651
                            //
                            utils.unload_del = function (ref) {
                                // 652
                                if (ref in on_unload) delete on_unload[ref]; // 653
                            }; // 655
                            //
                            utils.createIframe = function (iframe_url, error_callback) {
                                // 658
                                var iframe = _document.createElement('iframe'); // 659
                                //
                                var tref, unload_ref; // 660
                                //
                                var unattach = function () {
                                    // 661
                                    clearTimeout(tref); // Explorer had problems with that.                                                    // 662
                                    //
                                    try {
                                        // 664
                                        iframe.onload = null; // 664
                                    } catch (x) {} // 664
                                    //
                                    iframe.onerror = null; // 665
                                }; // 666
                                //
                                var cleanup = function () {
                                    // 667
                                    if (iframe) {
                                        // 668
                                        unattach(); // This timeout makes chrome fire onbeforeunload event                                     // 669
                                        // within iframe. Without the timeout it goes straight to                                              // 671
                                        // onunload.                                                                                           // 672
                                        //
                                        setTimeout(function () {
                                            // 673
                                            if (iframe) {
                                                // 674
                                                iframe.parentNode.removeChild(iframe); // 675
                                            } // 676
                                            //
                                            iframe = null; // 677
                                        }, 0); // 678
                                        utils.unload_del(unload_ref); // 679
                                    } // 680
                                }; // 681
                                //
                                var onerror = function (r) {
                                    // 682
                                    if (iframe) {
                                        // 683
                                        cleanup(); // 684
                                        error_callback(r); // 685
                                    } // 686
                                }; // 687
                                //
                                var post = function (msg, origin) {
                                    // 688
                                    try {
                                        // 689
                                        // When the iframe is not loaded, IE raises an exception                                               // 690
                                        // on 'contentWindow'.                                                                                 // 691
                                        if (iframe && iframe.contentWindow) {
                                            // 692
                                            iframe.contentWindow.postMessage(msg, origin); // 693
                                        } // 694
                                    } catch (x) {} // 695
                                    //
                                    ; // 695
                                }; // 696
                                //
                                iframe.src = iframe_url; // 698
                                iframe.style.display = 'none'; // 699
                                iframe.style.position = 'absolute'; // 700
                                //
                                iframe.onerror = function () {
                                    // 701
                                    onerror('onerror'); // 701
                                }; // 701
                                //
                                iframe.onload = function () {
                                    // 702
                                    // `onload` is triggered before scripts on the iframe are                                                  // 703
                                    // executed. Give it few seconds to actually load stuff.                                                   // 704
                                    clearTimeout(tref); // 705
                                    tref = setTimeout(function () {
                                        // 706
                                        onerror('onload timeout'); // 706
                                    }, 2000); // 706
                                }; // 707
                                //
                                _document.body.appendChild(iframe); // 708
                                //
                                tref = setTimeout(function () {
                                    // 709
                                    onerror('timeout'); // 709
                                }, 15000); // 709
                                unload_ref = utils.unload_add(cleanup); // 710
                                return { // 711
                                    post: post, // 712
                                    cleanup: cleanup, // 713
                                    loaded: unattach // 714
                                }; // 711
                            }; // 716
                            //
                            utils.createHtmlfile = function (iframe_url, error_callback) {
                                // 718
                                var doc = new ActiveXObject('htmlfile'); // 719
                                var tref, unload_ref; // 720
                                var iframe; // 721
                                //
                                var unattach = function () {
                                    // 722
                                    clearTimeout(tref); // 723
                                }; // 724
                                //
                                var cleanup = function () {
                                    // 725
                                    if (doc) {
                                        // 726
                                        unattach(); // 727
                                        utils.unload_del(unload_ref); // 728
                                        iframe.parentNode.removeChild(iframe); // 729
                                        iframe = doc = null; // 730
                                        CollectGarbage(); // 731
                                    } // 732
                                }; // 733
                                //
                                var onerror = function (r) {
                                    // 734
                                    if (doc) {
                                        // 735
                                        cleanup(); // 736
                                        error_callback(r); // 737
                                    } // 738
                                }; // 739
                                //
                                var post = function (msg, origin) {
                                    // 740
                                    try {
                                        // 741
                                        // When the iframe is not loaded, IE raises an exception                                               // 742
                                        // on 'contentWindow'.                                                                                 // 743
                                        if (iframe && iframe.contentWindow) {
                                            // 744
                                            iframe.contentWindow.postMessage(msg, origin); // 745
                                        } // 746
                                    } catch (x) {} // 747
                                    //
                                    ; // 747
                                }; // 748
                                //
                                doc.open(); // 750
                                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>'); // 751
                                doc.close(); // 754
                                doc.parentWindow[WPrefix] = _window[WPrefix]; // 755
                                var c = doc.createElement('div'); // 756
                                doc.body.appendChild(c); // 757
                                iframe = doc.createElement('iframe'); // 758
                                c.appendChild(iframe); // 759
                                iframe.src = iframe_url; // 760
                                tref = setTimeout(function () {
                                    // 761
                                    onerror('timeout'); // 761
                                }, 15000); // 761
                                unload_ref = utils.unload_add(cleanup); // 762
                                return { // 763
                                    post: post, // 764
                                    cleanup: cleanup, // 765
                                    loaded: unattach // 766
                                }; // 763
                            }; //         [*] End of lib/dom.js                                                                                // 768
                            //         [*] Including lib/dom2.js                                                                               // 772
                            /*                                                                                                                 // 773
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var AbstractXHRObject = function () {}; // 781
                            //
                            AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']); // 782
                            //
                            AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                                // 784
                                var that = this; // 785
                                //
                                try {
                                    // 787
                                    that.xhr = new XMLHttpRequest(); // 788
                                } catch (x) {} // 789
                                //
                                ; // 789
                                //
                                if (!that.xhr) {
                                    // 791
                                    try {
                                        // 792
                                        that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP'); // 793
                                    } catch (x) {} // 794
                                    //
                                    ; // 794
                                } // 795
                                //
                                if (_window.ActiveXObject || _window.XDomainRequest) {
                                    // 796
                                    // IE8 caches even POSTs                                                                                   // 797
                                    url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date(); // 798
                                } // Explorer tends to keep connection open, even after the                                                    // 799
                                // tab gets closed: http://bugs.jquery.com/ticket/5280                                                         // 802
                                //
                                //
                                that.unload_ref = utils.unload_add(function () {
                                    // 803
                                    that._cleanup(true); // 803
                                }); // 803
                                //
                                try {
                                    // 804
                                    that.xhr.open(method, url, true); // 805
                                } catch (e) {
                                    // 806
                                    // IE raises an exception on wrong port.                                                                   // 807
                                    that.emit('finish', 0, ''); // 808
                                    //
                                    that._cleanup(); // 809
                                    //
                                    return; // 810
                                } // 811
                                //
                                ; // 811
                                //
                                if (!opts || !opts.no_credentials) {
                                    // 813
                                    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                     // 814
                                    // "This never affects same-site requests."                                                                // 815
                                    that.xhr.withCredentials = 'true'; // 816
                                } // 817
                                //
                                if (opts && opts.headers) {
                                    // 818
                                    for (var key in meteorBabelHelpers.sanitizeForInObject(opts.headers)) {
                                        // 819
                                        that.xhr.setRequestHeader(key, opts.headers[key]); // 820
                                    } // 821
                                } // 822
                                //
                                that.xhr.onreadystatechange = function () {
                                    // 824
                                    if (that.xhr) {
                                        // 825
                                        var x = that.xhr; // 826
                                        //
                                        switch (x.readyState) {// 827
                                            case 3:
                                                // 828
                                                // IE doesn't like peeking into responseText or status                                         // 829
                                                // on Microsoft.XMLHTTP and readystate=3                                                       // 830
                                                try {
                                                    // 831
                                                    var status = x.status; // 832
                                                    var text = x.responseText; // 833
                                                } catch (x) {} // 834
                                                //
                                                ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                               // 834
                                                //
                                                if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.          // 836
                                                //
                                                if (text && text.length > 0) {
                                                    // 839
                                                    that.emit('chunk', status, text); // 840
                                                } // 841
                                                //
                                                break; // 842
                                            //
                                            case 4:
                                                // 843
                                                var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450          // 844
                                                //
                                                if (status === 1223) status = 204; // 846
                                                that.emit('finish', status, x.responseText); // 848
                                                //
                                                that._cleanup(false); // 849
                                                //
                                                break; // 850
                                        } // 827
                                    } // 852
                                }; // 853
                                //
                                that.xhr.send(payload); // 854
                            }; // 855
                            //
                            AbstractXHRObject.prototype._cleanup = function (abort) {
                                // 857
                                var that = this; // 858
                                if (!that.xhr) return; // 859
                                utils.unload_del(that.unload_ref); // IE needs this field to be a function                                     // 860
                                //
                                that.xhr.onreadystatechange = function () {}; // 863
                                //
                                if (abort) {
                                    // 865
                                    try {
                                        // 866
                                        that.xhr.abort(); // 867
                                    } catch (x) {} // 868
                                    //
                                    ; // 868
                                } // 869
                                //
                                that.unload_ref = that.xhr = null; // 870
                            }; // 871
                            //
                            AbstractXHRObject.prototype.close = function () {
                                // 873
                                var that = this; // 874
                                that.nuke(); // 875
                                //
                                that._cleanup(true); // 876
                            }; // 877
                            //
                            var XHRCorsObject = utils.XHRCorsObject = function () {
                                // 879
                                var that = this,
                                    // 880
                                args = arguments; // 880
                                utils.delay(function () {
                                    // 881
                                    that._start.apply(that, args); // 881
                                }); // 881
                            }; // 882
                            //
                            XHRCorsObject.prototype = new AbstractXHRObject(); // 883
                            //
                            var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                                // 885
                                var that = this; // 886
                                utils.delay(function () {
                                    // 887
                                    that._start(method, url, payload, { // 888
                                        no_credentials: true // 889
                                    }); // 888
                                }); // 891
                            }; // 892
                            //
                            XHRLocalObject.prototype = new AbstractXHRObject(); // References:                                                 // 893
                            //   http://ajaxian.com/archives/100-line-ajax-wrapper                                                             // 898
                            //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                                // 899
                            //
                            var XDRObject = utils.XDRObject = function (method, url, payload) {
                                // 900
                                var that = this; // 901
                                utils.delay(function () {
                                    // 902
                                    that._start(method, url, payload); // 902
                                }); // 902
                            }; // 903
                            //
                            XDRObject.prototype = new EventEmitter(['chunk', 'finish']); // 904
                            //
                            XDRObject.prototype._start = function (method, url, payload) {
                                // 905
                                var that = this; // 906
                                var xdr = new XDomainRequest(); // IE caches even POSTs                                                        // 907
                                //
                                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date(); // 909
                                //
                                var onerror = xdr.ontimeout = xdr.onerror = function () {
                                    // 911
                                    that.emit('finish', 0, ''); // 912
                                    //
                                    that._cleanup(false); // 913
                                }; // 914
                                //
                                xdr.onprogress = function () {
                                    // 915
                                    that.emit('chunk', 200, xdr.responseText); // 916
                                }; // 917
                                //
                                xdr.onload = function () {
                                    // 918
                                    that.emit('finish', 200, xdr.responseText); // 919
                                    //
                                    that._cleanup(false); // 920
                                }; // 921
                                //
                                that.xdr = xdr; // 922
                                that.unload_ref = utils.unload_add(function () {
                                    // 923
                                    that._cleanup(true); // 923
                                }); // 923
                                //
                                try {
                                    // 924
                                    // Fails with AccessDenied if port number is bogus                                                         // 925
                                    that.xdr.open(method, url); // 926
                                    that.xdr.send(payload); // 927
                                } catch (x) {
                                    // 928
                                    onerror(); // 929
                                } // 930
                            }; // 931
                            //
                            XDRObject.prototype._cleanup = function (abort) {
                                // 933
                                var that = this; // 934
                                if (!that.xdr) return; // 935
                                utils.unload_del(that.unload_ref); // 936
                                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null; // 938
                                //
                                if (abort) {
                                    // 940
                                    try {
                                        // 941
                                        that.xdr.abort(); // 942
                                    } catch (x) {} // 943
                                    //
                                    ; // 943
                                } // 944
                                //
                                that.unload_ref = that.xdr = null; // 945
                            }; // 946
                            //
                            XDRObject.prototype.close = function () {
                                // 948
                                var that = this; // 949
                                that.nuke(); // 950
                                //
                                that._cleanup(true); // 951
                            }; // 1. Is natively via XHR                                                                                       // 952
                            // 2. Is natively via XDR                                                                                          // 955
                            // 3. Nope, but postMessage is there so it should work via the Iframe.                                             // 956
                            // 4. Nope, sorry.                                                                                                 // 957
                            //
                            //
                            utils.isXHRCorsCapable = function () {
                                // 958
                                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                                    // 959
                                    return 1; // 960
                                } // XDomainRequest doesn't work if page is served from file://                                                // 961
                                //
                                //
                                if (_window.XDomainRequest && _document.domain) {
                                    // 963
                                    return 2; // 964
                                } // 965
                                //
                                if (IframeTransport.enabled()) {
                                    // 966
                                    return 3; // 967
                                } // 968
                                //
                                return 4; // 969
                            }; //         [*] End of lib/dom2.js                                                                               // 970
                            //         [*] Including lib/sockjs.js                                                                             // 974
                            /*                                                                                                                 // 975
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var SockJS = function (url, dep_protocols_whitelist, options) {
                                // 983
                                if (!(this instanceof SockJS)) {
                                    // 984
                                    // makes `new` optional                                                                                    // 985
                                    return new SockJS(url, dep_protocols_whitelist, options); // 986
                                } // 987
                                //
                                var that = this,
                                    // 989
                                protocols_whitelist; // 989
                                that._options = { // 990
                                    devel: false, // 990
                                    debug: false, // 990
                                    protocols_whitelist: [], // 990
                                    info: undefined, // 991
                                    rtt: undefined // 991
                                }; // 990
                                //
                                if (options) {
                                    // 992
                                    utils.objectExtend(that._options, options); // 993
                                } // 994
                                //
                                that._base_url = utils.amendUrl(url); // 995
                                that._server = that._options.server || utils.random_number_string(1000); // 996
                                //
                                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                                    // 997
                                    protocols_whitelist = that._options.protocols_whitelist; // 999
                                } else {
                                    // 1000
                                    // Deprecated API                                                                                          // 1001
                                    if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                                        // 1002
                                        protocols_whitelist = [dep_protocols_whitelist]; // 1004
                                    } else if (utils.isArray(dep_protocols_whitelist)) {
                                        // 1005
                                        protocols_whitelist = dep_protocols_whitelist; // 1006
                                    } else {
                                        // 1007
                                        protocols_whitelist = null; // 1008
                                    } // 1009
                                    //
                                    if (protocols_whitelist) {
                                        // 1010
                                        that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                                    } // 1014
                                } // 1015
                                //
                                that._protocols = []; // 1016
                                that.protocol = null; // 1017
                                that.readyState = SockJS.CONNECTING; // 1018
                                that._ir = createInfoReceiver(that._base_url); // 1019
                                //
                                that._ir.onfinish = function (info, rtt) {
                                    // 1020
                                    that._ir = null; // 1021
                                    //
                                    if (info) {
                                        // 1022
                                        if (that._options.info) {
                                            // 1023
                                            // Override if user supplies the option                                                            // 1024
                                            info = utils.objectExtend(info, that._options.info); // 1025
                                        } // 1026
                                        //
                                        if (that._options.rtt) {
                                            // 1027
                                            rtt = that._options.rtt; // 1028
                                        } // 1029
                                        //
                                        that._applyInfo(info, rtt, protocols_whitelist); // 1030
                                        //
                                        that._didClose(); // 1031
                                    } else {
                                        // 1032
                                        that._didClose(1002, 'Can\'t connect to server', true); // 1033
                                    } // 1034
                                }; // 1035
                            }; // Inheritance                                                                                                  // 1036
                            //
                            //
                            SockJS.prototype = new REventTarget(); // 1038
                            SockJS.version = "0.3.4"; // 1040
                            SockJS.CONNECTING = 0; // 1042
                            SockJS.OPEN = 1; // 1043
                            SockJS.CLOSING = 2; // 1044
                            SockJS.CLOSED = 3; // 1045
                            //
                            SockJS.prototype._debug = function () {
                                // 1047
                                if (this._options.debug) utils.log.apply(utils, arguments); // 1048
                            }; // 1050
                            //
                            SockJS.prototype._dispatchOpen = function () {
                                // 1052
                                var that = this; // 1053
                                //
                                if (that.readyState === SockJS.CONNECTING) {
                                    // 1054
                                    if (that._transport_tref) {
                                        // 1055
                                        clearTimeout(that._transport_tref); // 1056
                                        that._transport_tref = null; // 1057
                                    } // 1058
                                    //
                                    that.readyState = SockJS.OPEN; // 1059
                                    that.dispatchEvent(new SimpleEvent("open")); // 1060
                                } else {
                                    // 1061
                                    // The server might have been restarted, and lost track of our                                             // 1062
                                    // connection.                                                                                             // 1063
                                    that._didClose(1006, "Server lost session"); // 1064
                                } // 1065
                            }; // 1066
                            //
                            SockJS.prototype._dispatchMessage = function (data) {
                                // 1068
                                var that = this; // 1069
                                if (that.readyState !== SockJS.OPEN) return; // 1070
                                that.dispatchEvent(new SimpleEvent("message", { // 1072
                                    data: data // 1072
                                })); // 1072
                            }; // 1073
                            //
                            SockJS.prototype._dispatchHeartbeat = function (data) {
                                // 1075
                                var that = this; // 1076
                                if (that.readyState !== SockJS.OPEN) return; // 1077
                                that.dispatchEvent(new SimpleEvent('heartbeat', {})); // 1079
                            }; // 1080
                            //
                            SockJS.prototype._didClose = function (code, reason, force) {
                                // 1082
                                var that = this; // 1083
                                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');
                                //
                                if (that._ir) {
                                    // 1088
                                    that._ir.nuke(); // 1089
                                    //
                                    that._ir = null; // 1090
                                } // 1091
                                //
                                if (that._transport) {
                                    // 1093
                                    that._transport.doCleanup(); // 1094
                                    //
                                    that._transport = null; // 1095
                                } // 1096
                                //
                                var close_event = new SimpleEvent("close", { // 1098
                                    code: code, // 1099
                                    reason: reason, // 1100
                                    wasClean: utils.userSetCode(code) // 1101
                                }); // 1098
                                //
                                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                                    // 1103
                                    if (that._try_next_protocol(close_event)) {
                                        // 1105
                                        return; // 1106
                                    } // 1107
                                    //
                                    close_event = new SimpleEvent("close", { // 1108
                                        code: 2000, // 1108
                                        reason: "All transports failed", // 1109
                                        wasClean: false, // 1110
                                        last_event: close_event // 1111
                                    }); // 1108
                                } // 1112
                                //
                                that.readyState = SockJS.CLOSED; // 1113
                                utils.delay(function () {
                                    // 1115
                                    that.dispatchEvent(close_event); // 1116
                                }); // 1117
                            }; // 1118
                            //
                            SockJS.prototype._didMessage = function (data) {
                                // 1120
                                var that = this; // 1121
                                var type = data.slice(0, 1); // 1122
                                //
                                switch (type) {// 1123
                                    case 'o':
                                        // 1124
                                        that._dispatchOpen(); // 1125
                                        //
                                        break; // 1126
                                    //
                                    case 'a':
                                        // 1127
                                        var payload = JSON.parse(data.slice(1) || '[]'); // 1128
                                        //
                                        for (var i = 0; i < payload.length; i++) {
                                            // 1129
                                            that._dispatchMessage(payload[i]); // 1130
                                        } // 1131
                                        //
                                        break; // 1132
                                    //
                                    case 'm':
                                        // 1133
                                        var payload = JSON.parse(data.slice(1) || 'null'); // 1134
                                        //
                                        that._dispatchMessage(payload); // 1135
                                        //
                                        break; // 1136
                                    //
                                    case 'c':
                                        // 1137
                                        var payload = JSON.parse(data.slice(1) || '[]'); // 1138
                                        //
                                        that._didClose(payload[0], payload[1]); // 1139
                                        //
                                        break; // 1140
                                    //
                                    case 'h':
                                        // 1141
                                        that._dispatchHeartbeat(); // 1142
                                        //
                                        break; // 1143
                                } // 1123
                            }; // 1145
                            //
                            SockJS.prototype._try_next_protocol = function (close_event) {
                                // 1147
                                var that = this; // 1148
                                //
                                if (that.protocol) {
                                    // 1149
                                    that._debug('Closed transport:', that.protocol, '' + close_event); // 1150
                                    //
                                    that.protocol = null; // 1151
                                } // 1152
                                //
                                if (that._transport_tref) {
                                    // 1153
                                    clearTimeout(that._transport_tref); // 1154
                                    that._transport_tref = null; // 1155
                                } // 1156
                                //
                                while (1) {
                                    // 1158
                                    var protocol = that.protocol = that._protocols.shift(); // 1159
                                    //
                                    if (!protocol) {
                                        // 1160
                                        return false; // 1161
                                    } // Some protocols require access to `body`, what if were in                                              // 1162
                                    // the `head`?                                                                                             // 1164
                                    //
                                    //
                                    if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                                        that._protocols.unshift(protocol); // 1170
                                        //
                                        that.protocol = 'waiting-for-load'; // 1171
                                        utils.attachEvent('load', function () {
                                            // 1172
                                            that._try_next_protocol(); // 1173
                                        }); // 1174
                                        return true; // 1175
                                    } // 1176
                                    //
                                    if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                                        // 1178
                                        that._debug('Skipping transport:', protocol); // 1180
                                    } else {
                                        // 1181
                                        var roundTrips = SockJS[protocol].roundTrips || 1; // 1182
                                        var to = (that._options.rto || 0) * roundTrips || 5000; // 1183
                                        that._transport_tref = utils.delay(to, function () {
                                            // 1184
                                            if (that.readyState === SockJS.CONNECTING) {
                                                // 1185
                                                // I can't understand how it is possible to run                                                // 1186
                                                // this timer, when the state is CLOSED, but                                                   // 1187
                                                // apparently in IE everythin is possible.                                                     // 1188
                                                that._didClose(2007, "Transport timeouted"); // 1189
                                            } // 1190
                                        }); // 1191
                                        var connid = utils.random_string(8); // 1193
                                        var trans_url = that._base_url + '/' + that._server + '/' + connid; // 1194
                                        //
                                        that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto); // 1195
                                        //
                                        that._transport = new SockJS[protocol](that, trans_url, that._base_url); // 1197
                                        return true; // 1199
                                    } // 1200
                                } // 1201
                            }; // 1202
                            //
                            SockJS.prototype.close = function (code, reason) {
                                // 1204
                                var that = this; // 1205
                                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR"); // 1206
                                //
                                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                                    // 1208
                                    return false; // 1210
                                } // 1211
                                //
                                that.readyState = SockJS.CLOSING; // 1212
                                //
                                that._didClose(code || 1000, reason || "Normal closure"); // 1213
                                //
                                return true; // 1214
                            }; // 1215
                            //
                            SockJS.prototype.send = function (data) {
                                // 1217
                                var that = this; // 1218
                                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR'); // 1219
                                //
                                if (that.readyState === SockJS.OPEN) {
                                    // 1221
                                    that._transport.doSend(utils.quote('' + data)); // 1222
                                } // 1223
                                //
                                return true; // 1224
                            }; // 1225
                            //
                            SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                                // 1227
                                var that = this; // 1228
                                that._options.info = info; // 1229
                                that._options.rtt = rtt; // 1230
                                that._options.rto = utils.countRTO(rtt); // 1231
                                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                                // avoid browser per-domain connection limits.                                                                 // 1234
                                //
                                if (info.base_url) // <METEOR>                                                                                 // 1235
                                    that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>                               // 1237
                                //
                                var probed = utils.probeProtocols(); // 1239
                                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>                        // 1240
                                // https://github.com/sockjs/sockjs-client/issues/79                                                           // 1242
                                // Hack to avoid XDR when using different protocols                                                            // 1243
                                // We're on IE trying to do cross-protocol. jsonp only.                                                        // 1244
                                //
                                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                                    // 1245
                                    that._protocols = ['jsonp-polling']; // 1247
                                } // </METEOR>                                                                                                 // 1248
                                //
                            }; //         [*] End of lib/sockjs.js                                                                             // 1250
                            //         [*] Including lib/trans-websocket.js                                                                    // 1254
                            /*                                                                                                                 // 1255
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                                // 1263
                                var that = this; // 1264
                                var url = trans_url + '/websocket'; // 1265
                                //
                                if (url.slice(0, 5) === 'https') {
                                    // 1266
                                    url = 'wss' + url.slice(5); // 1267
                                } else {
                                    // 1268
                                    url = 'ws' + url.slice(4); // 1269
                                } // 1270
                                //
                                that.ri = ri; // 1271
                                that.url = url; // 1272
                                var Constructor = _window.WebSocket || _window.MozWebSocket; // 1273
                                that.ws = new Constructor(that.url); // 1275
                                //
                                that.ws.onmessage = function (e) {
                                    // 1276
                                    that.ri._didMessage(e.data); // 1277
                                }; // Firefox has an interesting bug. If a websocket connection is                                             // 1278
                                // created after onunload, it stays alive even when user                                                       // 1280
                                // navigates away from the page. In such situation let's lie -                                                 // 1281
                                // let's not open the ws connection at all. See:                                                               // 1282
                                // https://github.com/sockjs/sockjs-client/issues/28                                                           // 1283
                                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                         // 1284
                                //
                                //
                                that.unload_ref = utils.unload_add(function () {
                                    // 1285
                                    that.ws.close(); // 1285
                                }); // 1285
                                //
                                that.ws.onclose = function () {
                                    // 1286
                                    that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken")); // 1287
                                }; // 1288
                            }; // 1289
                            //
                            WebSocketTransport.prototype.doSend = function (data) {
                                // 1291
                                this.ws.send('[' + data + ']'); // 1292
                            }; // 1293
                            //
                            WebSocketTransport.prototype.doCleanup = function () {
                                // 1295
                                var that = this; // 1296
                                var ws = that.ws; // 1297
                                //
                                if (ws) {
                                    // 1298
                                    ws.onmessage = ws.onclose = null; // 1299
                                    ws.close(); // 1300
                                    utils.unload_del(that.unload_ref); // 1301
                                    that.unload_ref = that.ri = that.ws = null; // 1302
                                } // 1303
                            }; // 1304
                            //
                            WebSocketTransport.enabled = function () {
                                // 1306
                                return !!(_window.WebSocket || _window.MozWebSocket); // 1307
                            }; // In theory, ws should require 1 round trip. But in chrome, this is                                            // 1308
                            // not very stable over SSL. Most likely a ws connection requires a                                                // 1311
                            // separate SSL connection, in which case 2 round trips are an                                                     // 1312
                            // absolute minumum.                                                                                               // 1313
                            //
                            //
                            WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js                                    // 1314
                            //         [*] Including lib/trans-sender.js                                                                       // 1318
                            /*                                                                                                                 // 1319
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var BufferedSender = function () {}; // 1327
                            //
                            BufferedSender.prototype.send_constructor = function (sender) {
                                // 1328
                                var that = this; // 1329
                                that.send_buffer = []; // 1330
                                that.sender = sender; // 1331
                            }; // 1332
                            //
                            BufferedSender.prototype.doSend = function (message) {
                                // 1333
                                var that = this; // 1334
                                that.send_buffer.push(message); // 1335
                                //
                                if (!that.send_stop) {
                                    // 1336
                                    that.send_schedule(); // 1337
                                } // 1338
                            }; // For polling transports in a situation when in the message callback,                                          // 1339
                            // new message is being send. If the sending connection was started                                                // 1342
                            // before receiving one, it is possible to saturate the network and                                                // 1343
                            // timeout due to the lack of receiving socket. To avoid that we delay                                             // 1344
                            // sending messages by some small time, in order to let receiving                                                  // 1345
                            // connection be started beforehand. This is only a halfmeasure and                                                // 1346
                            // does not fix the big problem, but it does make the tests go more                                                // 1347
                            // stable on slow networks.                                                                                        // 1348
                            //
                            //
                            BufferedSender.prototype.send_schedule_wait = function () {
                                // 1349
                                var that = this; // 1350
                                var tref; // 1351
                                //
                                that.send_stop = function () {
                                    // 1352
                                    that.send_stop = null; // 1353
                                    clearTimeout(tref); // 1354
                                }; // 1355
                                //
                                tref = utils.delay(25, function () {
                                    // 1356
                                    that.send_stop = null; // 1357
                                    that.send_schedule(); // 1358
                                }); // 1359
                            }; // 1360
                            //
                            BufferedSender.prototype.send_schedule = function () {
                                // 1362
                                var that = this; // 1363
                                //
                                if (that.send_buffer.length > 0) {
                                    // 1364
                                    var payload = '[' + that.send_buffer.join(',') + ']'; // 1365
                                    that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                                        // 1366
                                        that.send_stop = null; // 1367
                                        //
                                        if (success === false) {
                                            // 1368
                                            that.ri._didClose(1006, 'Sending error ' + abort_reason); // 1369
                                        } else {
                                            // 1370
                                            that.send_schedule_wait(); // 1371
                                        } // 1372
                                    }); // 1373
                                    that.send_buffer = []; // 1374
                                } // 1375
                            }; // 1376
                            //
                            BufferedSender.prototype.send_destructor = function () {
                                // 1378
                                var that = this; // 1379
                                //
                                if (that._send_stop) {
                                    // 1380
                                    that._send_stop(); // 1381
                                } // 1382
                                //
                                that._send_stop = null; // 1383
                            }; // 1384
                            //
                            var jsonPGenericSender = function (url, payload, callback) {
                                // 1386
                                var that = this; // 1387
                                //
                                if (!('_send_form' in that)) {
                                    // 1389
                                    var form = that._send_form = _document.createElement('form'); // 1390
                                    //
                                    var area = that._send_area = _document.createElement('textarea'); // 1391
                                    //
                                    area.name = 'd'; // 1392
                                    form.style.display = 'none'; // 1393
                                    form.style.position = 'absolute'; // 1394
                                    form.method = 'POST'; // 1395
                                    form.enctype = 'application/x-www-form-urlencoded'; // 1396
                                    form.acceptCharset = "UTF-8"; // 1397
                                    form.appendChild(area); // 1398
                                    //
                                    _document.body.appendChild(form); // 1399
                                } // 1400
                                //
                                var form = that._send_form; // 1401
                                var area = that._send_area; // 1402
                                var id = 'a' + utils.random_string(8); // 1403
                                form.target = id; // 1404
                                form.action = url + '/jsonp_send?i=' + id; // 1405
                                var iframe; // 1407
                                //
                                try {
                                    // 1408
                                    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)                                     // 1409
                                    iframe = _document.createElement('<iframe name="' + id + '">'); // 1410
                                } catch (x) {
                                    // 1411
                                    iframe = _document.createElement('iframe'); // 1412
                                    iframe.name = id; // 1413
                                } // 1414
                                //
                                iframe.id = id; // 1415
                                form.appendChild(iframe); // 1416
                                iframe.style.display = 'none'; // 1417
                                //
                                try {
                                    // 1419
                                    area.value = payload; // 1420
                                } catch (e) {
                                    // 1421
                                    utils.log('Your browser is seriously broken. Go home! ' + e.message); // 1422
                                } // 1423
                                //
                                form.submit(); // 1424
                                //
                                var completed = function (e) {
                                    // 1426
                                    if (!iframe.onerror) return; // 1427
                                    iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                                    // immediately, thus this timeout.                                                                         // 1430
                                    //
                                    utils.delay(500, function () {
                                        // 1431
                                        iframe.parentNode.removeChild(iframe); // 1432
                                        iframe = null; // 1433
                                    }); // 1434
                                    area.value = ''; // It is not possible to detect if the iframe succeeded or                                // 1435
                                    // failed to submit our form.                                                                              // 1437
                                    //
                                    callback(true); // 1438
                                }; // 1439
                                //
                                iframe.onerror = iframe.onload = completed; // 1440
                                //
                                iframe.onreadystatechange = function (e) {
                                    // 1441
                                    if (iframe.readyState == 'complete') completed(); // 1442
                                }; // 1443
                                //
                                return completed; // 1444
                            }; // 1445
                            //
                            var createAjaxSender = function (AjaxObject) {
                                // 1447
                                return function (url, payload, callback) {
                                    // 1448
                                    var xo = new AjaxObject('POST', url + '/xhr_send', payload); // 1449
                                    //
                                    xo.onfinish = function (status, text) {
                                        // 1450
                                        callback(status === 200 || status === 204, 'http status ' + status); // 1451
                                    }; // 1453
                                    //
                                    return function (abort_reason) {
                                        // 1454
                                        callback(false, abort_reason); // 1455
                                    }; // 1456
                                }; // 1457
                            }; //         [*] End of lib/trans-sender.js                                                                       // 1458
                            //         [*] Including lib/trans-jsonp-receiver.js                                                               // 1462
                            /*                                                                                                                 // 1463
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // Parts derived from Socket.io:                                                                               //
                            //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js                // 1472
                            // and jQuery-JSONP:                                                                                               // 1473
                            //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                              // 1474
                            //
                            //
                            var jsonPGenericReceiver = function (url, callback) {
                                // 1475
                                var tref; // 1476
                                //
                                var script = _document.createElement('script'); // 1477
                                //
                                var script2; // Opera synchronous load trick.                                                                  // 1478
                                //
                                var close_script = function (frame) {
                                    // 1479
                                    if (script2) {
                                        // 1480
                                        script2.parentNode.removeChild(script2); // 1481
                                        script2 = null; // 1482
                                    } // 1483
                                    //
                                    if (script) {
                                        // 1484
                                        clearTimeout(tref); // Unfortunately, you can't really abort script loading of                         // 1485
                                        // the script.                                                                                         // 1487
                                        //
                                        script.parentNode.removeChild(script); // 1488
                                        script.onreadystatechange = script.onerror = script.onload = script.onclick = null; // 1489
                                        script = null; // 1491
                                        callback(frame); // 1492
                                        callback = null; // 1493
                                    } // 1494
                                }; // IE9 fires 'error' event after orsc or before, in random order.                                           // 1495
                                //
                                //
                                var loaded_okay = false; // 1498
                                var error_timer = null; // 1499
                                script.id = 'a' + utils.random_string(8); // 1501
                                script.src = url; // 1502
                                script.type = 'text/javascript'; // 1503
                                script.charset = 'UTF-8'; // 1504
                                //
                                script.onerror = function (e) {
                                    // 1505
                                    if (!error_timer) {
                                        // 1506
                                        // Delay firing close_script.                                                                          // 1507
                                        error_timer = setTimeout(function () {
                                            // 1508
                                            if (!loaded_okay) {
                                                // 1509
                                                close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)")); // 1510
                                            } // 1513
                                        }, 1000); // 1514
                                    } // 1515
                                }; // 1516
                                //
                                script.onload = function (e) {
                                    // 1517
                                    close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)")); // 1518
                                }; // 1519
                                //
                                script.onreadystatechange = function (e) {
                                    // 1521
                                    if (/loaded|closed/.test(script.readyState)) {
                                        // 1522
                                        if (script && script.htmlFor && script.onclick) {
                                            // 1523
                                            loaded_okay = true; // 1524
                                            //
                                            try {
                                                // 1525
                                                // In IE, actually execute the script.                                                         // 1526
                                                script.onclick(); // 1527
                                            } catch (x) {} // 1528
                                        } // 1529
                                        //
                                        if (script) {
                                            // 1530
                                            close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)")); // 1531
                                        } // 1532
                                    } // 1533
                                }; // IE: event/htmlFor/onclick trick.                                                                         // 1534
                                // One can't rely on proper order for onreadystatechange. In order to                                          // 1536
                                // make sure, set a 'htmlFor' and 'event' properties, so that                                                  // 1537
                                // script code will be installed as 'onclick' handler for the                                                  // 1538
                                // script object. Later, onreadystatechange, manually execute this                                             // 1539
                                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                 // 1540
                                // set. For reference see:                                                                                     // 1541
                                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                     // 1542
                                // Also, read on that about script ordering:                                                                   // 1543
                                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                                // 1544
                                //
                                //
                                if (typeof script.async === 'undefined' && _document.attachEvent) {
                                    // 1545
                                    // According to mozilla docs, in recent browsers script.async defaults                                     // 1546
                                    // to 'true', so we may use it to detect a good browser:                                                   // 1547
                                    // https://developer.mozilla.org/en/HTML/Element/script                                                    // 1548
                                    if (!/opera/i.test(navigator.userAgent)) {
                                        // 1549
                                        // Naively assume we're in IE                                                                          // 1550
                                        try {
                                            // 1551
                                            script.htmlFor = script.id; // 1552
                                            script.event = "onclick"; // 1553
                                        } catch (x) {} // 1554
                                        //
                                        script.async = true; // 1555
                                    } else {
                                        // 1556
                                        // Opera, second sync script hack                                                                      // 1557
                                        script2 = _document.createElement('script'); // 1558
                                        script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                                        script.async = script2.async = false; // 1560
                                    } // 1561
                                } // 1562
                                //
                                if (typeof script.async !== 'undefined') {
                                    // 1563
                                    script.async = true; // 1564
                                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                 // 1565
                                //
                                //
                                tref = setTimeout(function () {
                                    // 1568
                                    close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)")); // 1569
                                }, 35000); // 1570
                                //
                                var head = _document.getElementsByTagName('head')[0]; // 1572
                                //
                                head.insertBefore(script, head.firstChild); // 1573
                                //
                                if (script2) {
                                    // 1574
                                    head.insertBefore(script2, head.firstChild); // 1575
                                } // 1576
                                //
                                return close_script; // 1577
                            }; //         [*] End of lib/trans-jsonp-receiver.js                                                               // 1578
                            //         [*] Including lib/trans-jsonp-polling.js                                                                // 1582
                            /*                                                                                                                 // 1583
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // The simplest and most robust transport, using the well-know cross                                           //
                            // domain hack - JSONP. This transport is quite inefficient - one                                                  // 1592
                            // mssage could use up to one http request. But at least it works almost                                           // 1593
                            // everywhere.                                                                                                     // 1594
                            // Known limitations:                                                                                              // 1595
                            //   o you will get a spinning cursor                                                                              // 1596
                            //   o for Konqueror a dumb timer is needed to detect errors                                                       // 1597
                            //
                            //
                            var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                                // 1600
                                utils.polluteGlobalNamespace(); // 1601
                                var that = this; // 1602
                                that.ri = ri; // 1603
                                that.trans_url = trans_url; // 1604
                                that.send_constructor(jsonPGenericSender); // 1605
                                //
                                that._schedule_recv(); // 1606
                            }; // Inheritnace                                                                                                  // 1607
                            //
                            //
                            JsonPTransport.prototype = new BufferedSender(); // 1610
                            //
                            JsonPTransport.prototype._schedule_recv = function () {
                                // 1612
                                var that = this; // 1613
                                //
                                var callback = function (data) {
                                    // 1614
                                    that._recv_stop = null; // 1615
                                    //
                                    if (data) {
                                        // 1616
                                        // no data - heartbeat;                                                                                // 1617
                                        if (!that._is_closing) {
                                            // 1618
                                            that.ri._didMessage(data); // 1619
                                        } // 1620
                                    } // The message can be a close message, and change is_closing state.                                      // 1621
                                    //
                                    //
                                    if (!that._is_closing) {
                                        // 1623
                                        that._schedule_recv(); // 1624
                                    } // 1625
                                }; // 1626
                                //
                                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback); // 1627
                            }; // 1629
                            //
                            JsonPTransport.enabled = function () {
                                // 1631
                                return true; // 1632
                            }; // 1633
                            //
                            JsonPTransport.need_body = true; // 1635
                            //
                            JsonPTransport.prototype.doCleanup = function () {
                                // 1638
                                var that = this; // 1639
                                that._is_closing = true; // 1640
                                //
                                if (that._recv_stop) {
                                    // 1641
                                    that._recv_stop(); // 1642
                                } // 1643
                                //
                                that.ri = that._recv_stop = null; // 1644
                                that.send_destructor(); // 1645
                            }; // Abstract away code that handles global namespace pollution.                                                  // 1646
                            //
                            //
                            var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                                // 1650
                                var id = 'a' + utils.random_string(6); // 1651
                                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                                // script. We need to keep track of frake close frames.                                                        // 1655
                                //
                                var aborting = 0; // Callback will be called exactly once.                                                     // 1656
                                //
                                var callback = function (frame) {
                                    // 1659
                                    switch (aborting) {// 1660
                                        case 0:
                                            // 1661
                                            // Normal behaviour - delete hook _and_ emit message.                                              // 1662
                                            delete _window[WPrefix][id]; // 1663
                                            user_callback(frame); // 1664
                                            break; // 1665
                                        //
                                        case 1:
                                            // 1666
                                            // Fake close frame - emit but don't delete hook.                                                  // 1667
                                            user_callback(frame); // 1668
                                            aborting = 2; // 1669
                                            break; // 1670
                                        //
                                        case 2:
                                            // 1671
                                            // Got frame after connection was closed, delete hook, don't emit.                                 // 1672
                                            delete _window[WPrefix][id]; // 1673
                                            break; // 1674
                                    } // 1660
                                }; // 1676
                                //
                                var close_script = constructReceiver(url_id, callback); // 1678
                                _window[WPrefix][id] = close_script; // 1679
                                //
                                var stop = function () {
                                    // 1680
                                    if (_window[WPrefix][id]) {
                                        // 1681
                                        aborting = 1; // 1682
                                        //
                                        _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read")); // 1683
                                    } // 1684
                                }; // 1685
                                //
                                return stop; // 1686
                            }; //         [*] End of lib/trans-jsonp-polling.js                                                                // 1687
                            //         [*] Including lib/trans-xhr.js                                                                          // 1691
                            /*                                                                                                                 // 1692
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var AjaxBasedTransport = function () {}; // 1700
                            //
                            AjaxBasedTransport.prototype = new BufferedSender(); // 1701
                            //
                            AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                                // 1703
                                var that = this; // 1705
                                that.ri = ri; // 1706
                                that.trans_url = trans_url; // 1707
                                that.send_constructor(createAjaxSender(AjaxObject)); // 1708
                                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject); // 1709
                            }; // 1711
                            //
                            AjaxBasedTransport.prototype.doCleanup = function () {
                                // 1713
                                var that = this; // 1714
                                //
                                if (that.poll) {
                                    // 1715
                                    that.poll.abort(); // 1716
                                    that.poll = null; // 1717
                                } // 1718
                            }; // xhr-streaming                                                                                                // 1719
                            //
                            //
                            var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                                // 1722
                                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject); // 1723
                            }; // 1724
                            //
                            XhrStreamingTransport.prototype = new AjaxBasedTransport(); // 1726
                            //
                            XhrStreamingTransport.enabled = function () {
                                // 1728
                                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                   // 1729
                                // doesn't do streaming.                                                                                       // 1730
                                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
                            }; // 1734
                            //
                            XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1735
                            // Safari gets confused when a streaming ajax request is started                                                   // 1737
                            // before onload. This causes the load indicator to spin indefinetely.                                             // 1738
                            //
                            XhrStreamingTransport.need_body = true; // According to:                                                           // 1739
                            //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests            // 1743
                            //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                         // 1744
                            // xdr-streaming                                                                                                   // 1747
                            //
                            var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                                // 1748
                                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject); // 1749
                            }; // 1750
                            //
                            XdrStreamingTransport.prototype = new AjaxBasedTransport(); // 1752
                            //
                            XdrStreamingTransport.enabled = function () {
                                // 1754
                                return !!_window.XDomainRequest; // 1755
                            }; // 1756
                            //
                            XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1757
                            // xhr-polling                                                                                                     // 1761
                            //
                            var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                                // 1762
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject); // 1763
                            }; // 1764
                            //
                            XhrPollingTransport.prototype = new AjaxBasedTransport(); // 1766
                            XhrPollingTransport.enabled = XhrStreamingTransport.enabled; // 1768
                            XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1769
                            // xdr-polling                                                                                                     // 1772
                            //
                            var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                                // 1773
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject); // 1774
                            }; // 1775
                            //
                            XdrPollingTransport.prototype = new AjaxBasedTransport(); // 1777
                            XdrPollingTransport.enabled = XdrStreamingTransport.enabled; // 1779
                            XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1780
                            //         [*] End of lib/trans-xhr.js                                                                             // 1781
                            //         [*] Including lib/trans-iframe.js                                                                       // 1784
                            /*                                                                                                                 // 1785
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // Few cool transports do work only for same-origin. In order to make                                          //
                            // them working cross-domain we shall use iframe, served form the                                                  // 1794
                            // remote domain. New browsers, have capabilities to communicate with                                              // 1795
                            // cross domain iframe, using postMessage(). In IE it was implemented                                              // 1796
                            // from IE 8+, but of course, IE got some details wrong:                                                           // 1797
                            //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                               // 1798
                            //    http://stevesouders.com/misc/test-postmessage.php                                                            // 1799
                            //
                            var IframeTransport = function () {}; // 1801
                            //
                            IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                                // 1803
                                var that = this; // 1804
                                that.ri = ri; // 1805
                                that.origin = utils.getOrigin(base_url); // 1806
                                that.base_url = base_url; // 1807
                                that.trans_url = trans_url; // 1808
                                var iframe_url = base_url + '/iframe.html'; // 1810
                                //
                                if (that.ri._options.devel) {
                                    // 1811
                                    iframe_url += '?t=' + +new Date(); // 1812
                                } // 1813
                                //
                                that.window_id = utils.random_string(8); // 1814
                                iframe_url += '#' + that.window_id; // 1815
                                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                                    // 1817
                                    that.ri._didClose(1006, "Unable to load an iframe (" + r + ")"); // 1818
                                }); // 1819
                                that.onmessage_cb = utils.bind(that.onmessage, that); // 1821
                                utils.attachMessage(that.onmessage_cb); // 1822
                            }; // 1823
                            //
                            IframeTransport.prototype.doCleanup = function () {
                                // 1825
                                var that = this; // 1826
                                //
                                if (that.iframeObj) {
                                    // 1827
                                    utils.detachMessage(that.onmessage_cb); // 1828
                                    //
                                    try {
                                        // 1829
                                        // When the iframe is not loaded, IE raises an exception                                               // 1830
                                        // on 'contentWindow'.                                                                                 // 1831
                                        if (that.iframeObj.iframe.contentWindow) {
                                            // 1832
                                            that.postMessage('c'); // 1833
                                        } // 1834
                                    } catch (x) {} // 1835
                                    //
                                    that.iframeObj.cleanup(); // 1836
                                    that.iframeObj = null; // 1837
                                    that.onmessage_cb = that.iframeObj = null; // 1838
                                } // 1839
                            }; // 1840
                            //
                            IframeTransport.prototype.onmessage = function (e) {
                                // 1842
                                var that = this; // 1843
                                if (e.origin !== that.origin) return; // 1844
                                var window_id = e.data.slice(0, 8); // 1845
                                var type = e.data.slice(8, 9); // 1846
                                var data = e.data.slice(9); // 1847
                                if (window_id !== that.window_id) return; // 1849
                                //
                                switch (type) {// 1851
                                    case 's':
                                        // 1852
                                        that.iframeObj.loaded(); // 1853
                                        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                                        break; // 1855
                                    //
                                    case 't':
                                        // 1856
                                        that.ri._didMessage(data); // 1857
                                        //
                                        break; // 1858
                                } // 1851
                            }; // 1860
                            //
                            IframeTransport.prototype.postMessage = function (type, data) {
                                // 1862
                                var that = this; // 1863
                                that.iframeObj.post(that.window_id + type + (data || ''), that.origin); // 1864
                            }; // 1865
                            //
                            IframeTransport.prototype.doSend = function (message) {
                                // 1867
                                this.postMessage('m', message); // 1868
                            }; // 1869
                            //
                            IframeTransport.enabled = function () {
                                // 1871
                                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                 // 1872
                                // huge delay, or not at all.                                                                                  // 1873
                                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1; // 1874
                                return (typeof _window.postMessage === 'function' || (0, _typeof3.default)(_window.postMessage) === 'object') && !konqueror;
                            }; //         [*] End of lib/trans-iframe.js                                                                       // 1877
                            //         [*] Including lib/trans-iframe-within.js                                                                // 1881
                            /*                                                                                                                 // 1882
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var curr_window_id; // 1890
                            //
                            var postMessage = function (type, data) {
                                // 1892
                                if (parent !== _window) {
                                    // 1893
                                    parent.postMessage(curr_window_id + type + (data || ''), '*'); // 1894
                                } else {
                                    // 1895
                                    utils.log("Can't postMessage, no parent window.", type, data); // 1896
                                } // 1897
                            }; // 1898
                            //
                            var FacadeJS = function () {}; // 1900
                            //
                            FacadeJS.prototype._didClose = function (code, reason) {
                                // 1901
                                postMessage('t', utils.closeFrame(code, reason)); // 1902
                            }; // 1903
                            //
                            FacadeJS.prototype._didMessage = function (frame) {
                                // 1904
                                postMessage('t', frame); // 1905
                            }; // 1906
                            //
                            FacadeJS.prototype._doSend = function (data) {
                                // 1907
                                this._transport.doSend(data); // 1908
                            }; // 1909
                            //
                            FacadeJS.prototype._doCleanup = function () {
                                // 1910
                                this._transport.doCleanup(); // 1911
                            }; // 1912
                            //
                            utils.parent_origin = undefined; // 1914
                            //
                            SockJS.bootstrap_iframe = function () {
                                // 1916
                                var facade; // 1917
                                curr_window_id = _document.location.hash.slice(1); // 1918
                                //
                                var onMessage = function (e) {
                                    // 1919
                                    if (e.source !== parent) return; // 1920
                                    if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin; // 1921
                                    if (e.origin !== utils.parent_origin) return; // 1923
                                    var window_id = e.data.slice(0, 8); // 1925
                                    var type = e.data.slice(8, 9); // 1926
                                    var data = e.data.slice(9); // 1927
                                    if (window_id !== curr_window_id) return; // 1928
                                    //
                                    switch (type) {// 1929
                                        case 's':
                                            // 1930
                                            var p = JSON.parse(data); // 1931
                                            var version = p[0]; // 1932
                                            var protocol = p[1]; // 1933
                                            var trans_url = p[2]; // 1934
                                            var base_url = p[3]; // 1935
                                            //
                                            if (version !== SockJS.version) {
                                                // 1936
                                                utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                                            } // 1940
                                            //
                                            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                                                // 1941
                                                utils.log("Only basic urls are supported in SockJS"); // 1942
                                                return; // 1943
                                            } // 1944
                                            //
                                            if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                                                // 1946
                                                utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                                                return; // 1951
                                            } // 1952
                                            //
                                            facade = new FacadeJS(); // 1953
                                            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url); // 1954
                                            break; // 1955
                                        //
                                        case 'm':
                                            // 1956
                                            facade._doSend(data); // 1957
                                            //
                                            break; // 1958
                                        //
                                        case 'c':
                                            // 1959
                                            if (facade) facade._doCleanup(); // 1960
                                            facade = null; // 1962
                                            break; // 1963
                                    } // 1929
                                }; // alert('test ticker');                                                                                    // 1965
                                // facade = new FacadeJS();                                                                                    // 1968
                                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');    // 1969
                                //
                                //
                                utils.attachMessage(onMessage); // Start                                                                       // 1971
                                //
                                postMessage('s'); // 1974
                            }; //         [*] End of lib/trans-iframe-within.js                                                                // 1975
                            //         [*] Including lib/info.js                                                                               // 1979
                            /*                                                                                                                 // 1980
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var InfoReceiver = function (base_url, AjaxObject) {
                                // 1988
                                var that = this; // 1989
                                utils.delay(function () {
                                    // 1990
                                    that.doXhr(base_url, AjaxObject); // 1990
                                }); // 1990
                            }; // 1991
                            //
                            InfoReceiver.prototype = new EventEmitter(['finish']); // 1993
                            //
                            InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                                // 1995
                                var that = this; // 1996
                                var t0 = new Date().getTime(); // <METEOR>                                                                     // 1997
                                // https://github.com/sockjs/sockjs-client/pull/129                                                            // 2000
                                // var xo = new AjaxObject('GET', base_url + '/info');                                                         // 2001
                                //
                                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:                     // 2003
                                // https://code.google.com/p/chromium/issues/detail?id=263981                                                  // 2005
                                // or misbehaving proxies.                                                                                     // 2006
                                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>                                         // 2007
                                //
                                var tref = utils.delay(8000, function () {
                                    // 2010
                                    xo.ontimeout(); // 2011
                                }); // 2011
                                //
                                xo.onfinish = function (status, text) {
                                    // 2013
                                    clearTimeout(tref); // 2014
                                    tref = null; // 2015
                                    //
                                    if (status === 200) {
                                        // 2016
                                        var rtt = new Date().getTime() - t0; // 2017
                                        var info = JSON.parse(text); // 2018
                                        if ((typeof info === "undefined" ? "undefined" : (0, _typeof3.default)(info)) !== 'object') info = {};
                                        that.emit('finish', info, rtt); // 2020
                                    } else {
                                        // 2021
                                        that.emit('finish'); // 2022
                                    } // 2023
                                }; // 2024
                                //
                                xo.ontimeout = function () {
                                    // 2025
                                    xo.close(); // 2026
                                    that.emit('finish'); // 2027
                                }; // 2028
                            }; // 2029
                            //
                            var InfoReceiverIframe = function (base_url) {
                                // 2031
                                var that = this; // 2032
                                //
                                var go = function () {
                                    // 2033
                                    var ifr = new IframeTransport(); // 2034
                                    ifr.protocol = 'w-iframe-info-receiver'; // 2035
                                    //
                                    var fun = function (r) {
                                        // 2036
                                        if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                                            // 2037
                                            var d = JSON.parse(r.substr(1)); // 2038
                                            var info = d[0],
                                                // 2039
                                            rtt = d[1]; // 2039
                                            that.emit('finish', info, rtt); // 2040
                                        } else {
                                            // 2041
                                            that.emit('finish'); // 2042
                                        } // 2043
                                        //
                                        ifr.doCleanup(); // 2044
                                        ifr = null; // 2045
                                    }; // 2046
                                    //
                                    var mock_ri = { // 2047
                                        _options: {}, // 2048
                                        _didClose: fun, // 2049
                                        _didMessage: fun // 2050
                                    }; // 2047
                                    ifr.i_constructor(mock_ri, base_url, base_url); // 2052
                                }; // 2053
                                //
                                if (!_document.body) {
                                    // 2054
                                    utils.attachEvent('load', go); // 2055
                                } else {
                                    // 2056
                                    go(); // 2057
                                } // 2058
                            }; // 2059
                            //
                            InfoReceiverIframe.prototype = new EventEmitter(['finish']); // 2060
                            //
                            var InfoReceiverFake = function () {
                                // 2063
                                // It may not be possible to do cross domain AJAX to get the info                                              // 2064
                                // data, for example for IE7. But we want to run JSONP, so let's                                               // 2065
                                // fake the response, with rtt=2s (rto=6s).                                                                    // 2066
                                var that = this; // 2067
                                utils.delay(function () {
                                    // 2068
                                    that.emit('finish', {}, 2000); // 2069
                                }); // 2070
                            }; // 2071
                            //
                            InfoReceiverFake.prototype = new EventEmitter(['finish']); // 2072
                            //
                            var createInfoReceiver = function (base_url) {
                                // 2074
                                if (utils.isSameOriginUrl(base_url)) {
                                    // 2075
                                    // If, for some reason, we have SockJS locally - there's no                                                // 2076
                                    // need to start up the complex machinery. Just use ajax.                                                  // 2077
                                    return new InfoReceiver(base_url, utils.XHRLocalObject); // 2078
                                } // 2079
                                //
                                switch (utils.isXHRCorsCapable()) {// 2080
                                    case 1:
                                        // 2081
                                        // XHRLocalObject -> no_credentials=true                                                               // 2082
                                        return new InfoReceiver(base_url, utils.XHRLocalObject); // 2083
                                    //
                                    case 2:
                                        // 2084
                                        // <METEOR>                                                                                            // 2085
                                        // https://github.com/sockjs/sockjs-client/issues/79                                                   // 2086
                                        // XDR doesn't work across different schemes                                                           // 2087
                                        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                                        if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                                    // </METEOR>                                                                                               // 2093
                                    //
                                    case 3:
                                        // 2094
                                        // Opera                                                                                               // 2095
                                        return new InfoReceiverIframe(base_url); // 2096
                                    //
                                    default:
                                        // 2097
                                        // IE 7                                                                                                // 2098
                                        return new InfoReceiverFake(); // 2099
                                } // 2080
                                //
                                ; // 2100
                            }; // 2101
                            //
                            var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                                // 2104
                                var ir = new InfoReceiver(base_url, utils.XHRLocalObject); // 2105
                                //
                                ir.onfinish = function (info, rtt) {
                                    // 2106
                                    ri._didMessage('m' + JSON.stringify([info, rtt])); // 2107
                                    //
                                    ri._didClose(); // 2108
                                }; // 2109
                            }; // 2110
                            //
                            WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js                        // 2111
                            //         [*] Including lib/trans-iframe-eventsource.js                                                           // 2115
                            /*                                                                                                                 // 2116
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                                // 2124
                                var that = this; // 2125
                                that.protocol = 'w-iframe-eventsource'; // 2126
                                that.i_constructor.apply(that, arguments); // 2127
                            }; // 2128
                            //
                            EventSourceIframeTransport.prototype = new IframeTransport(); // 2130
                            //
                            EventSourceIframeTransport.enabled = function () {
                                // 2132
                                return 'EventSource' in _window && IframeTransport.enabled(); // 2133
                            }; // 2134
                            //
                            EventSourceIframeTransport.need_body = true; // 2136
                            EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                        // 2137
                            // w-iframe-eventsource                                                                                            // 2140
                            //
                            var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                                // 2141
                                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject); // 2142
                            }; // 2143
                            //
                            EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js   // 2144
                            //         [*] Including lib/trans-iframe-xhr-polling.js                                                           // 2148
                            /*                                                                                                                 // 2149
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                                // 2157
                                var that = this; // 2158
                                that.protocol = 'w-iframe-xhr-polling'; // 2159
                                that.i_constructor.apply(that, arguments); // 2160
                            }; // 2161
                            //
                            XhrPollingIframeTransport.prototype = new IframeTransport(); // 2163
                            //
                            XhrPollingIframeTransport.enabled = function () {
                                // 2165
                                return _window.XMLHttpRequest && IframeTransport.enabled(); // 2166
                            }; // 2167
                            //
                            XhrPollingIframeTransport.need_body = true; // 2169
                            XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                 // 2170
                            // w-iframe-xhr-polling                                                                                            // 2173
                            //
                            var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                                // 2174
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject); // 2175
                            }; // 2176
                            //
                            XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js   // 2178
                            //         [*] Including lib/trans-iframe-htmlfile.js                                                              // 2182
                            /*                                                                                                                 // 2183
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // This transport generally works in any browser, but will cause a                                             //
                            // spinning cursor to appear in any browser other than IE.                                                         // 2192
                            // We may test this transport in all browsers - why not, but in                                                    // 2193
                            // production it should be only run in IE.                                                                         // 2194
                            //
                            var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                                // 2196
                                var that = this; // 2197
                                that.protocol = 'w-iframe-htmlfile'; // 2198
                                that.i_constructor.apply(that, arguments); // 2199
                            }; // Inheritance.                                                                                                 // 2200
                            //
                            //
                            HtmlFileIframeTransport.prototype = new IframeTransport(); // 2203
                            //
                            HtmlFileIframeTransport.enabled = function () {
                                // 2205
                                return IframeTransport.enabled(); // 2206
                            }; // 2207
                            //
                            HtmlFileIframeTransport.need_body = true; // 2209
                            HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                              // 2210
                            // w-iframe-htmlfile                                                                                               // 2213
                            //
                            var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                                // 2214
                                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject); // 2215
                            }; // 2216
                            //
                            HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js         // 2217
                            //         [*] Including lib/trans-polling.js                                                                      // 2221
                            /*                                                                                                                 // 2222
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                                // 2230
                                var that = this; // 2231
                                that.ri = ri; // 2232
                                that.Receiver = Receiver; // 2233
                                that.recv_url = recv_url; // 2234
                                that.AjaxObject = AjaxObject; // 2235
                                //
                                that._scheduleRecv(); // 2236
                            }; // 2237
                            //
                            Polling.prototype._scheduleRecv = function () {
                                // 2239
                                var that = this; // 2240
                                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject); // 2241
                                var msg_counter = 0; // 2242
                                //
                                poll.onmessage = function (e) {
                                    // 2243
                                    msg_counter += 1; // 2244
                                    //
                                    that.ri._didMessage(e.data); // 2245
                                }; // 2246
                                //
                                poll.onclose = function (e) {
                                    // 2247
                                    that.poll = poll = poll.onmessage = poll.onclose = null; // 2248
                                    //
                                    if (!that.poll_is_closing) {
                                        // 2249
                                        if (e.reason === 'permanent') {
                                            // 2250
                                            that.ri._didClose(1006, 'Polling error (' + e.reason + ')'); // 2251
                                        } else {
                                            // 2252
                                            that._scheduleRecv(); // 2253
                                        } // 2254
                                    } // 2255
                                }; // 2256
                            }; // 2257
                            //
                            Polling.prototype.abort = function () {
                                // 2259
                                var that = this; // 2260
                                that.poll_is_closing = true; // 2261
                                //
                                if (that.poll) {
                                    // 2262
                                    that.poll.abort(); // 2263
                                } // 2264
                            }; //         [*] End of lib/trans-polling.js                                                                      // 2265
                            //         [*] Including lib/trans-receiver-eventsource.js                                                         // 2269
                            /*                                                                                                                 // 2270
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventSourceReceiver = function (url) {
                                // 2278
                                var that = this; // 2279
                                var es = new EventSource(url); // 2280
                                //
                                es.onmessage = function (e) {
                                    // 2281
                                    that.dispatchEvent(new SimpleEvent('message', { // 2282
                                        'data': unescape(e.data) // 2283
                                    })); // 2283
                                }; // 2284
                                //
                                that.es_close = es.onerror = function (e, abort_reason) {
                                    // 2285
                                    // ES on reconnection has readyState = 0 or 1.                                                             // 2286
                                    // on network error it's CLOSED = 2                                                                        // 2287
                                    var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent'; // 2288
                                    that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.                 // 2290
                                    //
                                    es.close(); // 2292
                                    es = null; // Safari and chrome < 15 crash if we close window before                                       // 2293
                                    // waiting for ES cleanup. See:                                                                            // 2295
                                    //   https://code.google.com/p/chromium/issues/detail?id=89155                                             // 2296
                                    //
                                    utils.delay(200, function () {
                                        // 2297
                                        that.dispatchEvent(new SimpleEvent('close', { // 2298
                                            reason: reason // 2298
                                        })); // 2298
                                    }); // 2299
                                }; // 2300
                            }; // 2301
                            //
                            EventSourceReceiver.prototype = new REventTarget(); // 2303
                            //
                            EventSourceReceiver.prototype.abort = function () {
                                // 2305
                                var that = this; // 2306
                                //
                                if (that.es_close) {
                                    // 2307
                                    that.es_close({}, true); // 2308
                                } // 2309
                            }; //         [*] End of lib/trans-receiver-eventsource.js                                                         // 2310
                            //         [*] Including lib/trans-receiver-htmlfile.js                                                            // 2314
                            /*                                                                                                                 // 2315
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var _is_ie_htmlfile_capable; // 2323
                            //
                            var isIeHtmlfileCapable = function () {
                                // 2324
                                if (_is_ie_htmlfile_capable === undefined) {
                                    // 2325
                                    if ('ActiveXObject' in _window) {
                                        // 2326
                                        try {
                                            // 2327
                                            _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile'); // 2328
                                        } catch (x) {} // 2329
                                    } else {
                                        // 2330
                                        _is_ie_htmlfile_capable = false; // 2331
                                    } // 2332
                                } // 2333
                                //
                                return _is_ie_htmlfile_capable; // 2334
                            }; // 2335
                            //
                            var HtmlfileReceiver = function (url) {
                                // 2338
                                var that = this; // 2339
                                utils.polluteGlobalNamespace(); // 2340
                                that.id = 'a' + utils.random_string(6, 26); // 2342
                                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id); // 2343
                                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe; // 2346
                                var iframeObj; // 2349
                                _window[WPrefix][that.id] = { // 2350
                                    start: function () {
                                        // 2351
                                        iframeObj.loaded(); // 2352
                                    }, // 2353
                                    message: function (data) {
                                        // 2354
                                        that.dispatchEvent(new SimpleEvent('message', { // 2355
                                            'data': data // 2355
                                        })); // 2355
                                    }, // 2356
                                    stop: function () {
                                        // 2357
                                        that.iframe_close({}, 'network'); // 2358
                                    } // 2359
                                }; // 2350
                                //
                                that.iframe_close = function (e, abort_reason) {
                                    // 2361
                                    iframeObj.cleanup(); // 2362
                                    that.iframe_close = iframeObj = null; // 2363
                                    delete _window[WPrefix][that.id]; // 2364
                                    that.dispatchEvent(new SimpleEvent('close', { // 2365
                                        reason: abort_reason // 2365
                                    })); // 2365
                                }; // 2366
                                //
                                iframeObj = constructor(url, function (e) {
                                    // 2367
                                    that.iframe_close({}, 'permanent'); // 2368
                                }); // 2369
                            }; // 2370
                            //
                            HtmlfileReceiver.prototype = new REventTarget(); // 2372
                            //
                            HtmlfileReceiver.prototype.abort = function () {
                                // 2374
                                var that = this; // 2375
                                //
                                if (that.iframe_close) {
                                    // 2376
                                    that.iframe_close({}, 'user'); // 2377
                                } // 2378
                            }; //         [*] End of lib/trans-receiver-htmlfile.js                                                            // 2379
                            //         [*] Including lib/trans-receiver-xhr.js                                                                 // 2383
                            /*                                                                                                                 // 2384
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var XhrReceiver = function (url, AjaxObject) {
                                // 2392
                                var that = this; // 2393
                                var buf_pos = 0; // 2394
                                that.xo = new AjaxObject('POST', url, null); // 2396
                                //
                                that.xo.onchunk = function (status, text) {
                                    // 2397
                                    if (status !== 200) return; // 2398
                                    //
                                    while (1) {
                                        // 2399
                                        var buf = text.slice(buf_pos); // 2400
                                        var p = buf.indexOf('\n'); // 2401
                                        if (p === -1) break; // 2402
                                        buf_pos += p + 1; // 2403
                                        var msg = buf.slice(0, p); // 2404
                                        that.dispatchEvent(new SimpleEvent('message', { // 2405
                                            data: msg // 2405
                                        })); // 2405
                                    } // 2406
                                }; // 2407
                                //
                                that.xo.onfinish = function (status, text) {
                                    // 2408
                                    that.xo.onchunk(status, text); // 2409
                                    that.xo = null; // 2410
                                    var reason = status === 200 ? 'network' : 'permanent'; // 2411
                                    that.dispatchEvent(new SimpleEvent('close', { // 2412
                                        reason: reason // 2412
                                    })); // 2412
                                }; // 2413
                            }; // 2414
                            //
                            XhrReceiver.prototype = new REventTarget(); // 2416
                            //
                            XhrReceiver.prototype.abort = function () {
                                // 2418
                                var that = this; // 2419
                                //
                                if (that.xo) {
                                    // 2420
                                    that.xo.close(); // 2421
                                    that.dispatchEvent(new SimpleEvent('close', { // 2422
                                        reason: 'user' // 2422
                                    })); // 2422
                                    that.xo = null; // 2423
                                } // 2424
                            }; //         [*] End of lib/trans-receiver-xhr.js                                                                 // 2425
                            //         [*] Including lib/test-hooks.js                                                                         // 2429
                            /*                                                                                                                 // 2430
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // For testing                                                                                                 //
                            //
                            //
                            SockJS.getUtils = function () {
                                // 2439
                                return utils; // 2440
                            }; // 2441
                            //
                            SockJS.getIframeTransport = function () {
                                // 2443
                                return IframeTransport; // 2444
                            }; //         [*] End of lib/test-hooks.js                                                                         // 2445
                            //
                            //
                            return SockJS; // 2448
                        }(); // 2449
                        //
                        if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance                                       // 2450
                        //
                        if (typeof define === 'function' && define.amd) {
                            // 2453
                            define('sockjs', [], function () {
                                // 2454
                                return SockJS; // 2454
                            }); // 2454
                        } //     [*] End of lib/index.js                                                                                       // 2455
                        // [*] End of lib/all.js                                                                                               // 2458
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "stream_client_sockjs.js": function (_require3, _exports2, _module) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/stream_client_sockjs.js                                                                         //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module.watch(_require3("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // @param url {String} URL to Meteor app                                                                               // 3
                        //   "http://subdomain.meteor.com/" or "/" or                                                                          // 4
                        //   "ddp+sockjs://foo-**.meteor.com/sockjs"                                                                           // 5
                        LivedataTest.ClientStream = function (url, options) {
                            // 6
                            var self = this; // 7
                            self.options = _.extend({ // 8
                                retry: true // 9
                            }, options); // 8
                            //
                            self._initCommon(self.options); //// Constants                                                                       // 11
                            // how long between hearing heartbeat from the server until we declare                                               // 16
                            // the connection dead. heartbeats come every 45s (stream_server.js)                                                 // 17
                            //                                                                                                                   // 18
                            // NOTE: this is a older timeout mechanism. We now send heartbeats at                                                // 19
                            // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                                   // 20
                            // expect those timeouts to kill a non-responsive connection before                                                  // 21
                            // this timeout fires. This is kept around for compatibility (when                                                   // 22
                            // talking to a server that doesn't support DDP heartbeats) and can be                                               // 23
                            // removed later.                                                                                                    // 24
                            //
                            //
                            self.HEARTBEAT_TIMEOUT = 100 * 1000; // 25
                            self.rawUrl = url; // 27
                            self.socket = null; // 28
                            self.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.                       // 30
                            // (IE8 does not support addEventListener)                                                                           // 33
                            //
                            if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener("online", _.bind(self._online, self), false /* useCapture. make FF3.6 happy. */); //// Kickoff!
                            //
                            self._launchConnection(); // 39
                        }; // 40
                        //
                        _.extend(LivedataTest.ClientStream.prototype, { // 42
                            // data is a utf8 string. Data sent while not connected is dropped on                                                // 44
                            // the floor, and it is up the user of this API to retransmit lost                                                   // 45
                            // messages on 'reset'                                                                                               // 46
                            send: function (data) {
                                // 47
                                var self = this; // 48
                                //
                                if (self.currentStatus.connected) {
                                    // 49
                                    self.socket.send(data); // 50
                                } // 51
                            }, // 52
                            // Changes where this connection points                                                                              // 54
                            _changeUrl: function (url) {
                                // 55
                                var self = this; // 56
                                self.rawUrl = url; // 57
                            }, // 58
                            _connected: function () {
                                // 60
                                var self = this; // 61
                                //
                                if (self.connectionTimer) {
                                    // 63
                                    clearTimeout(self.connectionTimer); // 64
                                    self.connectionTimer = null; // 65
                                } // 66
                                //
                                if (self.currentStatus.connected) {
                                    // 68
                                    // already connected. do nothing. this probably shouldn't happen.                                                // 69
                                    return; // 70
                                } // update status                                                                                                 // 71
                                //
                                //
                                self.currentStatus.status = "connected"; // 74
                                self.currentStatus.connected = true; // 75
                                self.currentStatus.retryCount = 0; // 76
                                self.statusChanged(); // fire resets. This must come after status change so that clients                           // 77
                                // can call send from within a reset callback.                                                                     // 80
                                //
                                _.each(self.eventCallbacks.reset, function (callback) {
                                    // 81
                                    callback(); // 81
                                }); // 81
                            }, // 83
                            _cleanup: function (maybeError) {
                                // 85
                                var self = this; // 86
                                //
                                self._clearConnectionAndHeartbeatTimers(); // 88
                                //
                                if (self.socket) {
                                    // 89
                                    self.socket.onmessage = self.socket.onclose = self.socket.onerror = self.socket.onheartbeat = function () {}; // 90
                                    //
                                    self.socket.close(); // 92
                                    self.socket = null; // 93
                                } // 94
                                //
                                _.each(self.eventCallbacks.disconnect, function (callback) {
                                    // 96
                                    callback(maybeError); // 97
                                }); // 98
                            }, // 99
                            _clearConnectionAndHeartbeatTimers: function () {
                                // 101
                                var self = this; // 102
                                //
                                if (self.connectionTimer) {
                                    // 103
                                    clearTimeout(self.connectionTimer); // 104
                                    self.connectionTimer = null; // 105
                                } // 106
                                //
                                if (self.heartbeatTimer) {
                                    // 107
                                    clearTimeout(self.heartbeatTimer); // 108
                                    self.heartbeatTimer = null; // 109
                                } // 110
                            }, // 111
                            _heartbeat_timeout: function () {
                                // 113
                                var self = this; // 114
                                //
                                Meteor._debug("Connection timeout. No sockjs heartbeat received."); // 115
                                //
                                self._lostConnection(new DDP.ConnectionError("Heartbeat timed out")); // 116
                            }, // 117
                            _heartbeat_received: function () {
                                // 119
                                var self = this; // If we've already permanently shut down this stream, the timeout is                             // 120
                                // already cleared, and we don't need to set it again.                                                             // 122
                                //
                                if (self._forcedToDisconnect) return; // 123
                                if (self.heartbeatTimer) clearTimeout(self.heartbeatTimer); // 125
                                self.heartbeatTimer = setTimeout(_.bind(self._heartbeat_timeout, self), self.HEARTBEAT_TIMEOUT); // 127
                            }, // 130
                            _sockjsProtocolsWhitelist: function () {
                                // 132
                                // only allow polling protocols. no streaming.  streaming                                                          // 133
                                // makes safari spin.                                                                                              // 134
                                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                                // proxies. this seems to be resolved with iOS 6. eg                                                               // 139
                                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                        // 140
                                //                                                                                                                 // 141
                                // iOS <4 doesn't support websockets at all so sockjs will just                                                    // 142
                                // immediately fall back to http                                                                                   // 143
                                //
                                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist); // 148
                                return protocolsWhitelist; // 151
                            }, // 152
                            _launchConnection: function () {
                                // 154
                                var self = this; // 155
                                //
                                self._cleanup(); // cleanup the old socket, if there was one.                                                      // 156
                                //
                                //
                                var options = _.extend({ // 158
                                    protocols_whitelist: self._sockjsProtocolsWhitelist() // 159
                                }, self.options._sockjsOptions); // Convert raw URL to SockJS URL each time we open a connection, so that we       // 158
                                // can connect to random hostnames and get around browser per-host                                                 // 163
                                // connection limits.                                                                                              // 164
                                //
                                //
                                self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options); // 165
                                //
                                self.socket.onopen = function (data) {
                                    // 166
                                    self._connected(); // 167
                                }; // 168
                                //
                                self.socket.onmessage = function (data) {
                                    // 169
                                    self._heartbeat_received(); // 170
                                    //
                                    if (self.currentStatus.connected) _.each(self.eventCallbacks.message, function (callback) {
                                        // 172
                                        callback(data.data); // 174
                                    }); // 175
                                }; // 176
                                //
                                self.socket.onclose = function () {
                                    // 177
                                    self._lostConnection(); // 178
                                }; // 179
                                //
                                self.socket.onerror = function () {
                                    // 180
                                    // XXX is this ever called?                                                                                      // 181
                                    Meteor._debug("stream error", _.toArray(arguments), new Date().toDateString()); // 182
                                }; // 183
                                //
                                self.socket.onheartbeat = function () {
                                    // 185
                                    self._heartbeat_received(); // 186
                                }; // 187
                                //
                                if (self.connectionTimer) clearTimeout(self.connectionTimer); // 189
                                self.connectionTimer = setTimeout(function () {
                                    // 191
                                    self._lostConnection(new DDP.ConnectionError("DDP connection timed out")); // 192
                                }, self.CONNECT_TIMEOUT); // 194
                            } // 195
                        }); // 42
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "stream_client_common.js": function (_require4, _exports3, _module2) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/stream_client_common.js                                                                         //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module2.watch(_require4("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                             // 3
                        var startsWith = function (str, starts) {
                            // 4
                            return str.length >= starts.length && str.substring(0, starts.length) === starts; // 5
                        }; // 7
                        //
                        var endsWith = function (str, ends) {
                            // 8
                            return str.length >= ends.length && str.substring(str.length - ends.length) === ends; // 9
                        }; // @param url {String} URL to Meteor app, eg:                                                                       // 11
                        //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"                                                          // 14
                        //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                                 // 15
                        // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                                    // 16
                        // for scheme "http" and subPath "sockjs"                                                                              // 17
                        //   "http://subdomain.meteor.com/sockjs" or "/sockjs"                                                                 // 18
                        //   or "https://ddp--1234-foo.meteor.com/sockjs"                                                                      // 19
                        //
                        //
                        var translateUrl = function (url, newSchemeBase, subPath) {
                            // 20
                            if (!newSchemeBase) {
                                // 21
                                newSchemeBase = "http"; // 22
                            } // 23
                            //
                            var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//); // 25
                            var httpUrlMatch = url.match(/^http(s?):\/\//); // 26
                            var newScheme; // 27
                            //
                            if (ddpUrlMatch) {
                                // 28
                                // Remove scheme and split off the host.                                                                           // 29
                                var urlAfterDDP = url.substr(ddpUrlMatch[0].length); // 30
                                newScheme = ddpUrlMatch[1] === "i" ? newSchemeBase : newSchemeBase + "s"; // 31
                                var slashPos = urlAfterDDP.indexOf('/'); // 32
                                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos); // 33
                                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                                // allows different stream connections to connect to different hostnames                                           // 38
                                // and avoid browser per-hostname connection limits.                                                               // 39
                                //
                                host = host.replace(/\*/g, function () {
                                    // 40
                                    return Math.floor(Random.fraction() * 10); // 41
                                }); // 42
                                return newScheme + '://' + host + rest; // 44
                            } else if (httpUrlMatch) {
                                // 45
                                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + "s"; // 46
                                var urlAfterHttp = url.substr(httpUrlMatch[0].length); // 47
                                url = newScheme + "://" + urlAfterHttp; // 48
                            } // Prefix FQDNs but not relative URLs                                                                              // 49
                            //
                            //
                            if (url.indexOf("://") === -1 && !startsWith(url, "/")) {
                                // 52
                                url = newSchemeBase + "://" + url; // 53
                            } // XXX This is not what we should be doing: if I have a site                                                       // 54
                            // deployed at "/foo", then DDP.connect("/") should actually connect                                                 // 57
                            // to "/", not to "/foo". "/" is an absolute path. (Contrast: if                                                     // 58
                            // deployed at "/foo", it would be reasonable for DDP.connect("bar")                                                 // 59
                            // to connect to "/foo/bar").                                                                                        // 60
                            //                                                                                                                   // 61
                            // We should make this properly honor absolute paths rather than                                                     // 62
                            // forcing the path to be relative to the site root. Simultaneously,                                                 // 63
                            // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                      // 64
                            // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                                // 65
                            //
                            //
                            url = Meteor._relativeToSiteRootUrl(url); // 66
                            if (endsWith(url, "/")) return url + subPath;else return url + "/" + subPath; // 68
                        }; // 72
                        //
                        toSockjsUrl = function (url) {
                            // 74
                            return translateUrl(url, "http", "sockjs"); // 75
                        }; // 76
                        //
                        toWebsocketUrl = function (url) {
                            // 78
                            var ret = translateUrl(url, "ws", "websocket"); // 79
                            return ret; // 80
                        }; // 81
                        //
                        LivedataTest.toSockjsUrl = toSockjsUrl; // 83
                        //
                        _.extend(LivedataTest.ClientStream.prototype, { // 86
                            // Register for callbacks.                                                                                           // 88
                            on: function (name, callback) {
                                // 89
                                var self = this; // 90
                                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error("unknown event type: " + name);
                                if (!self.eventCallbacks[name]) self.eventCallbacks[name] = []; // 95
                                self.eventCallbacks[name].push(callback); // 97
                            }, // 98
                            _initCommon: function (options) {
                                // 101
                                var self = this; // 102
                                options = options || {}; //// Constants                                                                            // 103
                                // how long to wait until we declare the connection attempt                                                        // 107
                                // failed.                                                                                                         // 108
                                //
                                self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000; // 109
                                self.eventCallbacks = {}; // name -> [callback]                                                                    // 111
                                //
                                self._forcedToDisconnect = false; //// Reactive status                                                             // 113
                                //
                                self.currentStatus = { // 116
                                    status: "connecting", // 117
                                    connected: false, // 118
                                    retryCount: 0 // 119
                                }; // 116
                                self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency(); // 123
                                //
                                self.statusChanged = function () {
                                    // 124
                                    if (self.statusListeners) self.statusListeners.changed(); // 125
                                }; //// Retry logic                                                                                                // 127
                                //
                                //
                                self._retry = new Retry(); // 130
                                self.connectionTimer = null; // 131
                            }, // 133
                            // Trigger a reconnect.                                                                                              // 135
                            reconnect: function (options) {
                                // 136
                                var self = this; // 137
                                options = options || {}; // 138
                                //
                                if (options.url) {
                                    // 140
                                    self._changeUrl(options.url); // 141
                                } // 142
                                //
                                if (options._sockjsOptions) {
                                    // 144
                                    self.options._sockjsOptions = options._sockjsOptions; // 145
                                } // 146
                                //
                                if (self.currentStatus.connected) {
                                    // 148
                                    if (options._force || options.url) {
                                        // 149
                                        // force reconnect.                                                                                            // 150
                                        self._lostConnection(new DDP.ForcedReconnectError()); // 151
                                    } // else, noop.                                                                                                 // 152
                                    //
                                    //
                                    return; // 153
                                } // if we're mid-connection, stop it.                                                                             // 154
                                //
                                //
                                if (self.currentStatus.status === "connecting") {
                                    // 157
                                    // Pretend it's a clean close.                                                                                   // 158
                                    self._lostConnection(); // 159
                                } // 160
                                //
                                self._retry.clear(); // 162
                                //
                                self.currentStatus.retryCount -= 1; // don't count manual retries                                                  // 163
                                //
                                self._retryNow(); // 164
                            }, // 165
                            disconnect: function (options) {
                                // 167
                                var self = this; // 168
                                options = options || {}; // Failed is permanent. If we're failed, don't let people go back                         // 169
                                // online by calling 'disconnect' then 'reconnect'.                                                                // 172
                                //
                                if (self._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream      // 173
                                // is forced to disconnect, it can never reconnect. This is for                                                    // 177
                                // error cases such as ddp version mismatch, where trying again                                                    // 178
                                // won't fix the problem.                                                                                          // 179
                                //
                                if (options._permanent) {
                                    // 180
                                    self._forcedToDisconnect = true; // 181
                                } // 182
                                //
                                self._cleanup(); // 184
                                //
                                self._retry.clear(); // 185
                                //
                                self.currentStatus = { // 187
                                    status: options._permanent ? "failed" : "offline", // 188
                                    connected: false, // 189
                                    retryCount: 0 // 190
                                }; // 187
                                if (options._permanent && options._error) self.currentStatus.reason = options._error; // 193
                                self.statusChanged(); // 196
                            }, // 197
                            // maybeError is set unless it's a clean protocol-level close.                                                       // 199
                            _lostConnection: function (maybeError) {
                                // 200
                                var self = this; // 201
                                //
                                self._cleanup(maybeError); // 203
                                //
                                self._retryLater(maybeError); // sets status. no need to do it here.                                               // 204
                                //
                            }, // 205
                            // fired when we detect that we've gone online. try to reconnect                                                     // 207
                            // immediately.                                                                                                      // 208
                            _online: function () {
                                // 209
                                // if we've requested to be offline by disconnecting, don't reconnect.                                             // 210
                                if (this.currentStatus.status != "offline") this.reconnect(); // 211
                            }, // 213
                            _retryLater: function (maybeError) {
                                // 215
                                var self = this; // 216
                                var timeout = 0; // 218
                                //
                                if (self.options.retry || maybeError && maybeError.errorType === "DDP.ForcedReconnectError") {
                                    // 219
                                    timeout = self._retry.retryLater(self.currentStatus.retryCount, _.bind(self._retryNow, self)); // 221
                                    self.currentStatus.status = "waiting"; // 225
                                    self.currentStatus.retryTime = new Date().getTime() + timeout; // 226
                                } else {
                                    // 227
                                    self.currentStatus.status = "failed"; // 228
                                    delete self.currentStatus.retryTime; // 229
                                } // 230
                                //
                                self.currentStatus.connected = false; // 232
                                self.statusChanged(); // 233
                            }, // 234
                            _retryNow: function () {
                                // 236
                                var self = this; // 237
                                if (self._forcedToDisconnect) return; // 239
                                self.currentStatus.retryCount += 1; // 242
                                self.currentStatus.status = "connecting"; // 243
                                self.currentStatus.connected = false; // 244
                                delete self.currentStatus.retryTime; // 245
                                self.statusChanged(); // 246
                                //
                                self._launchConnection(); // 248
                            }, // 249
                            // Get current status. Reactive.                                                                                     // 252
                            status: function () {
                                // 253
                                var self = this; // 254
                                if (self.statusListeners) self.statusListeners.depend(); // 255
                                return self.currentStatus; // 257
                            } // 258
                        }); // 86
                        //
                        DDP.ConnectionError = Meteor.makeErrorType("DDP.ConnectionError", function (message) {
                            // 261
                            var self = this; // 263
                            self.message = message; // 264
                        }); // 265
                        DDP.ForcedReconnectError = Meteor.makeErrorType("DDP.ForcedReconnectError", function () {}); // 267
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "livedata_common.js": function (_require5, _exports4, _module3) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/livedata_common.js                                                                              //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module3.watch(_require5("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS; // This is private but it's used in a few places. accounts-base uses
                        // it to get the current user. Meteor.setTimeout and friends clear                                                     // 6
                        // it. We can probably find a better way to factor this.                                                               // 7
                        //
                        DDP._CurrentInvocation = new Meteor.EnvironmentVariable(); // 8
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "random_stream.js": function (_require6, _exports5, _module4) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/random_stream.js                                                                                //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0; // 1
                        _module4.watch(_require6("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // Returns the named sequence of pseudo-random values.                                                                 // 3
                        // The scope will be DDP._CurrentInvocation.get(), so the stream will produce                                          // 4
                        // consistent values for method calls on the client and server.                                                        // 5
                        DDP.randomStream = function (name) {
                            // 6
                            var scope = DDP._CurrentInvocation.get(); // 7
                            //
                            return DDPCommon.RandomStream.get(scope, name); // 8
                        }; // 9
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "livedata_connection.js": function (_require7, _exports6, _module5) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/livedata_connection.js                                                                          //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _typeof2 = _require7("babel-runtime/helpers/typeof"); //
                        //
                        var _typeof3 = _interopRequireDefault(_typeof2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module5.watch(_require7("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        var MongoIDMap = void 0; // 1
                        _module5.watch(_require7("./id_map.js"), { // 1
                            MongoIDMap: function (v) {
                                // 1
                                MongoIDMap = v; // 1
                            } // 1
                        }, 1); // 1
                        //
                        if (Meteor.isServer) {
                            // 4
                            var path = Npm.require('path'); // 5
                            //
                            var Fiber = Npm.require('fibers'); // 6
                            //
                            var Future = Npm.require(path.join('fibers', 'future')); // 7
                        } // @param url {String|Object} URL to Meteor app,                                                                     // 8
                        //   or an object as a test hook (see code)                                                                            // 11
                        // Options:                                                                                                            // 12
                        //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                       // 13
                        //   headers: extra headers to send on the websockets connection, for                                                  // 14
                        //     server-to-server DDP only                                                                                       // 15
                        //   _sockjsOptions: Specifies options to pass through to the sockjs client                                            // 16
                        //   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                          // 17
                        //                                                                                                                     // 18
                        // XXX There should be a way to destroy a DDP connection, causing all                                                  // 19
                        // outstanding method calls to fail.                                                                                   // 20
                        //                                                                                                                     // 21
                        // XXX Our current way of handling failure and reconnection is great                                                   // 22
                        // for an app (where we want to tolerate being disconnected as an                                                      // 23
                        // expect state, and keep trying forever to reconnect) but cumbersome                                                  // 24
                        // for something like a command line tool that wants to make a                                                         // 25
                        // connection, call a method, and print an error if connection                                                         // 26
                        // fails. We should have better usability in the latter case (while                                                    // 27
                        // still transparently reconnecting if it's just a transient failure                                                   // 28
                        // or the server migrating us).                                                                                        // 29
                        //
                        //
                        var Connection = function (url, options) {
                            // 30
                            var self = this; // 31
                            options = _.extend({ // 32
                                onConnected: function () {}, // 33
                                onDDPVersionNegotiationFailure: function (description) {
                                    // 34
                                    Meteor._debug(description); // 35
                                }, // 36
                                heartbeatInterval: 17500, // 37
                                heartbeatTimeout: 15000, // 38
                                npmFayeOptions: {}, // 39
                                // These options are only for testing.                                                                             // 40
                                reloadWithOutstanding: false, // 41
                                supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS, // 42
                                retry: true, // 43
                                respondToPings: true, // 44
                                // When updates are coming within this ms interval, batch them together.                                           // 45
                                bufferedWritesInterval: 5, // 46
                                // Flush buffers immediately if writes are happening continuously for more than this many ms.                      // 47
                                bufferedWritesMaxAge: 500 // 48
                            }, options); // If set, called when we reconnect, queuing method calls _before_ the                                  // 32
                            // existing outstanding ones. This is the only data member that is part of the                                       // 52
                            // public API!                                                                                                       // 53
                            //
                            self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.                                 // 54
                            //
                            if ((typeof url === "undefined" ? "undefined" : (0, _typeof3.default)(url)) === "object") {
                                // 57
                                self._stream = url; // 58
                            } else {
                                // 59
                                self._stream = new LivedataTest.ClientStream(url, { // 60
                                    retry: options.retry, // 61
                                    headers: options.headers, // 62
                                    _sockjsOptions: options._sockjsOptions, // 63
                                    // Used to keep some tests quiet, or for other cases in which                                                    // 64
                                    // the right thing to do with connection errors is to silently                                                   // 65
                                    // fail (e.g. sending package usage stats). At some point we                                                     // 66
                                    // should have a real API for handling client-stream-level                                                       // 67
                                    // errors.                                                                                                       // 68
                                    _dontPrintErrors: options._dontPrintErrors, // 69
                                    connectTimeoutMs: options.connectTimeoutMs, // 70
                                    npmFayeOptions: options.npmFayeOptions // 71
                                }); // 60
                            } // 73
                            //
                            self._lastSessionId = null; // 75
                            self._versionSuggestion = null; // The last proposed DDP version.                                                    // 76
                            //
                            self._version = null; // The DDP version agreed on by client and server.                                             // 77
                            //
                            self._stores = {}; // name -> object with methods                                                                    // 78
                            //
                            self._methodHandlers = {}; // name -> func                                                                           // 79
                            //
                            self._nextMethodId = 1; // 80
                            self._supportedDDPVersions = options.supportedDDPVersions; // 81
                            self._heartbeatInterval = options.heartbeatInterval; // 83
                            self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                            // called their user callback (ie, they are waiting on their result or for all                                       // 87
                            // of their writes to be written to the local cache). Map from method ID to                                          // 88
                            // MethodInvoker object.                                                                                             // 89
                            //
                            self._methodInvokers = {}; // Tracks methods which the user has called but whose result messages have not            // 90
                            // arrived yet.                                                                                                      // 93
                            //                                                                                                                   // 94
                            // _outstandingMethodBlocks is an array of blocks of methods. Each block                                             // 95
                            // represents a set of methods that can run at the same time. The first block                                        // 96
                            // represents the methods which are currently in flight; subsequent blocks                                           // 97
                            // must wait for previous blocks to be fully finished before they can be sent                                        // 98
                            // to the server.                                                                                                    // 99
                            //                                                                                                                   // 100
                            // Each block is an object with the following fields:                                                                // 101
                            // - methods: a list of MethodInvoker objects                                                                        // 102
                            // - wait: a boolean; if true, this block had a single method invoked with                                           // 103
                            //         the "wait" option                                                                                         // 104
                            //                                                                                                                   // 105
                            // There will never be adjacent blocks with wait=false, because the only thing                                       // 106
                            // that makes methods need to be serialized is a wait method.                                                        // 107
                            //                                                                                                                   // 108
                            // Methods are removed from the first block when their "result" is                                                   // 109
                            // received. The entire first block is only removed when all of the in-flight                                        // 110
                            // methods have received their results (so the "methods" list is empty) *AND*                                        // 111
                            // all of the data written by those methods are visible in the local cache. So                                       // 112
                            // it is possible for the first block's methods list to be empty, if we are                                          // 113
                            // still waiting for some objects to quiesce.                                                                        // 114
                            //                                                                                                                   // 115
                            // Example:                                                                                                          // 116
                            //  _outstandingMethodBlocks = [                                                                                     // 117
                            //    {wait: false, methods: []},                                                                                    // 118
                            //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                          // 119
                            //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                             // 120
                            //                            <MethodInvoker for 'bar'>]}]                                                           // 121
                            // This means that there were some methods which were sent to the server and                                         // 122
                            // which have returned their results, but some of the data written by                                                // 123
                            // the methods may not be visible in the local cache. Once all that data is                                          // 124
                            // visible, we will send a 'login' method. Once the login method has returned                                        // 125
                            // and all the data is visible (including re-running subs if userId changes),                                        // 126
                            // we will send the 'foo' and 'bar' methods in parallel.                                                             // 127
                            //
                            self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing        // 128
                            // documents written by a given method's stub. keys are associated with                                              // 131
                            // methods whose stub wrote at least one document, and whose data-done message                                       // 132
                            // has not yet been received.                                                                                        // 133
                            //
                            self._documentsWrittenByStub = {}; // collection -> IdMap of "server document" object. A "server document" has:      // 134
                            // - "document": the version of the document according the                                                           // 136
                            //   server (ie, the snapshot before a stub wrote it, amended by any changes                                         // 137
                            //   received from the server)                                                                                       // 138
                            //   It is undefined if we think the document does not exist                                                         // 139
                            // - "writtenByStubs": a set of method IDs whose stubs wrote to the document                                         // 140
                            //   whose "data done" messages have not yet been processed                                                          // 141
                            //
                            self._serverDocuments = {}; // Array of callbacks to be called after the next update of the local                    // 142
                            // cache. Used for:                                                                                                  // 145
                            //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                                // 146
                            //    the relevant data is flushed.                                                                                  // 147
                            //  - Invoking the callbacks of "half-finished" methods after reconnect                                              // 148
                            //    quiescence. Specifically, methods whose result was received over the old                                       // 149
                            //    connection (so we don't re-send it) but whose data had not been made                                           // 150
                            //    visible.                                                                                                       // 151
                            //
                            self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them      // 152
                            // all at once in a single update:                                                                                   // 155
                            //   - During reconnect, we buffer all data messages until all subs that had                                         // 156
                            //     been ready before reconnect are ready again, and all methods that are                                         // 157
                            //     active have returned their "data done message"; then                                                          // 158
                            //   - During the execution of a "wait" method, we buffer all data messages                                          // 159
                            //     until the wait method gets its "data done" message. (If the wait method                                       // 160
                            //     occurs during reconnect, it doesn't get any special handling.)                                                // 161
                            // all data messages are processed in one update.                                                                    // 162
                            //                                                                                                                   // 163
                            // The following fields are used for this "quiescence" process.                                                      // 164
                            // This buffers the messages that aren't being processed yet.                                                        // 166
                            //
                            self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their  // 167
                            // "data done" message is received, and we will not quiesce until it is                                              // 169
                            // empty.                                                                                                            // 170
                            //
                            self._methodsBlockingQuiescence = {}; // map from sub ID -> true for subs that were ready (ie, called the sub        // 171
                            // ready callback) before reconnect but haven't become ready again yet                                               // 173
                            //
                            self._subsBeingRevived = {}; // map from sub._id -> true                                                             // 174
                            // if true, the next data update should reset all stores. (set during                                                // 175
                            // reconnect.)                                                                                                       // 176
                            //
                            self._resetStores = false; // name -> array of updates for (yet to be created) collections                           // 177
                            //
                            self._updatesForUnknownStores = {}; // if we're blocking a migration, the retry func                                 // 180
                            //
                            self._retryMigrate = null; // 182
                            self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, "flushing DDP buffered writes", self); // Collection name -> array of messages.
                            //
                            self._bufferedWrites = {}; // When current buffer of updates must be flushed at, in ms timestamp.                    // 187
                            //
                            self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes                  // 189
                            //
                            self._bufferedWritesFlushHandle = null; // 191
                            self._bufferedWritesInterval = options.bufferedWritesInterval; // 193
                            self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                            //   - id                                                                                                            // 197
                            //   - name                                                                                                          // 198
                            //   - params                                                                                                        // 199
                            //   - inactive (if true, will be cleaned up if not reused in re-run)                                                // 200
                            //   - ready (has the 'ready' message been received?)                                                                // 201
                            //   - readyCallback (an optional callback to call when ready)                                                       // 202
                            //   - errorCallback (an optional callback to call if the sub terminates with                                        // 203
                            //                    an error, XXX COMPAT WITH 1.0.3.1)                                                             // 204
                            //   - stopCallback (an optional callback to call when the sub terminates                                            // 205
                            //     for any reason, with an error argument if an error triggered the stop)                                        // 206
                            //
                            self._subscriptions = {}; // Reactive userId.                                                                        // 207
                            //
                            self._userId = null; // 210
                            self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.          // 211
                            //
                            if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                                // 214
                                Package.reload.Reload._onMigrate(function (retry) {
                                    // 215
                                    if (!self._readyToMigrate()) {
                                        // 216
                                        if (self._retryMigrate) throw new Error("Two migrations in progress?"); // 217
                                        self._retryMigrate = retry; // 219
                                        return false; // 220
                                    } else {
                                        // 221
                                        return [true]; // 222
                                    } // 223
                                }); // 224
                            } // 225
                            //
                            var onMessage = function (raw_msg) {
                                // 227
                                try {
                                    // 228
                                    var msg = DDPCommon.parseDDP(raw_msg); // 229
                                } catch (e) {
                                    // 230
                                    Meteor._debug("Exception while parsing DDP", e); // 231
                                    //
                                    return; // 232
                                } // Any message counts as receiving a pong, as it demonstrates that                                               // 233
                                // the server is still alive.                                                                                      // 236
                                //
                                //
                                if (self._heartbeat) {
                                    // 237
                                    self._heartbeat.messageReceived(); // 238
                                } // 239
                                //
                                if (msg === null || !msg.msg) {
                                    // 241
                                    // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                                // 242
                                    // compat.  Remove this 'if' once the server stops sending welcome                                               // 243
                                    // messages (stream_server.js).                                                                                  // 244
                                    if (!(msg && msg.server_id)) Meteor._debug("discarding invalid livedata message", msg); // 245
                                    return; // 247
                                } // 248
                                //
                                if (msg.msg === 'connected') {
                                    // 250
                                    self._version = self._versionSuggestion; // 251
                                    //
                                    self._livedata_connected(msg); // 252
                                    //
                                    options.onConnected(); // 253
                                } else if (msg.msg === 'failed') {
                                    // 254
                                    if (_.contains(self._supportedDDPVersions, msg.version)) {
                                        // 256
                                        self._versionSuggestion = msg.version; // 257
                                        //
                                        self._stream.reconnect({ // 258
                                            _force: true // 258
                                        }); // 258
                                    } else {
                                        // 259
                                        var description = "DDP version negotiation failed; server requested version " + msg.version; // 260
                                        //
                                        self._stream.disconnect({ // 262
                                            _permanent: true, // 262
                                            _error: description // 262
                                        }); // 262
                                        //
                                        options.onDDPVersionNegotiationFailure(description); // 263
                                    } // 264
                                } else if (msg.msg === 'ping' && options.respondToPings) {
                                    // 265
                                    self._send({ // 267
                                        msg: "pong", // 267
                                        id: msg.id // 267
                                    }); // 267
                                } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong                                          // 268
                                } else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg)) self._livedata_data(msg);else if (msg.msg === 'nosub') self._livedata_nosub(msg);else if (msg.msg === 'result') self._livedata_result(msg);else if (msg.msg === 'error') self._livedata_error(msg);else Meteor._debug("discarding unknown livedata message type", msg);
                            }; // 282
                            //
                            var onReset = function () {
                                // 284
                                // Send a connect message at the beginning of the stream.                                                          // 285
                                // NOTE: reset is called even on the first connection, so this is                                                  // 286
                                // the only place we send this message.                                                                            // 287
                                var msg = { // 288
                                    msg: 'connect' // 288
                                }; // 288
                                if (self._lastSessionId) msg.session = self._lastSessionId; // 289
                                msg.version = self._versionSuggestion || self._supportedDDPVersions[0]; // 291
                                self._versionSuggestion = msg.version; // 292
                                msg.support = self._supportedDDPVersions; // 293
                                //
                                self._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the  // 294
                                // current block is pretty important to making sure that quiescence is properly calculated, as                     // 297
                                // well as possibly moving on to another useful block.                                                             // 298
                                // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if                    // 300
                                // we are connecting for the first time.                                                                           // 301
                                //
                                //
                                if (self._outstandingMethodBlocks.length > 0) {
                                    // 302
                                    // If there is an outstanding method block, we only care about the first one as that is the                      // 303
                                    // one that could have already sent messages with no response, that are not allowed to retry.                    // 304
                                    var currentMethodBlock = self._outstandingMethodBlocks[0].methods; // 305
                                    self._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(function (methodInvoker) {
                                        // 306
                                        // Methods with 'noRetry' option set are not allowed to re-send after                                          // 308
                                        // recovering dropped connection.                                                                              // 309
                                        if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                                            // 310
                                            // Make sure that the method is told that it failed.                                                         // 311
                                            methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                                        } // Only keep a method if it wasn't sent or it's allowed to retry.                                            // 315
                                        // This may leave the block empty, but we don't move on to the next                                            // 318
                                        // block until the callback has been delivered, in _outstandingMethodFinished.                                 // 319
                                        //
                                        //
                                        return !(methodInvoker.sentMessage && methodInvoker.noRetry); // 320
                                    }); // 321
                                } // Now, to minimize setup latency, go ahead and blast out all of                                                 // 322
                                // our pending methods ands subscriptions before we've even taken                                                  // 325
                                // the necessary RTT to know if we successfully reconnected. (1)                                                   // 326
                                // They're supposed to be idempotent, and where they are not,                                                      // 327
                                // they can block retry in apply; (2) even if we did reconnect,                                                    // 328
                                // we're not sure what messages might have gotten lost                                                             // 329
                                // (in either direction) since we were disconnected (TCP being                                                     // 330
                                // sloppy about that.)                                                                                             // 331
                                // If the current block of methods all got their results (but didn't all get                                       // 333
                                // their data visible), discard the empty block now.                                                               // 334
                                //
                                //
                                if (!_.isEmpty(self._outstandingMethodBlocks) && _.isEmpty(self._outstandingMethodBlocks[0].methods)) {
                                    // 335
                                    self._outstandingMethodBlocks.shift(); // 337
                                } // Mark all messages as unsent, they have not yet been sent on this                                              // 338
                                // connection.                                                                                                     // 341
                                //
                                //
                                _.each(self._methodInvokers, function (m) {
                                    // 342
                                    m.sentMessage = false; // 343
                                }); // If an `onReconnect` handler is set, call it first. Go through                                               // 344
                                // some hoops to ensure that methods that are called from within                                                   // 347
                                // `onReconnect` get executed _before_ ones that were originally                                                   // 348
                                // outstanding (since `onReconnect` is used to re-establish auth                                                   // 349
                                // certificates)                                                                                                   // 350
                                //
                                //
                                if (self.onReconnect) self._callOnReconnectAndSendAppropriateOutstandingMethods();else self._sendOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                                // the handlers and we don't see flicker.                                                                          // 357
                                //
                                _.each(self._subscriptions, function (sub, id) {
                                    // 358
                                    self._send({ // 359
                                        msg: 'sub', // 360
                                        id: id, // 361
                                        name: sub.name, // 362
                                        params: sub.params // 363
                                    }); // 359
                                }); // 365
                            }; // 366
                            //
                            var onDisconnect = function () {
                                // 368
                                if (self._heartbeat) {
                                    // 369
                                    self._heartbeat.stop(); // 370
                                    //
                                    self._heartbeat = null; // 371
                                } // 372
                            }; // 373
                            //
                            if (Meteor.isServer) {
                                // 375
                                self._stream.on('message', Meteor.bindEnvironment(onMessage, "handling DDP message")); // 376
                                //
                                self._stream.on('reset', Meteor.bindEnvironment(onReset, "handling DDP reset")); // 377
                                //
                                self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, "handling DDP disconnect")); // 378
                            } else {
                                // 379
                                self._stream.on('message', onMessage); // 380
                                //
                                self._stream.on('reset', onReset); // 381
                                //
                                self._stream.on('disconnect', onDisconnect); // 382
                            } // 383
                        }; // A MethodInvoker manages sending a method to the server and calling the user's                                    // 384
                        // callbacks. On construction, it registers itself in the connection's                                                 // 387
                        // _methodInvokers map; it removes itself once the method is fully finished and                                        // 388
                        // the callback is invoked. This occurs when it has both received a result,                                            // 389
                        // and the data written by it is fully visible.                                                                        // 390
                        //
                        //
                        var MethodInvoker = function (options) {
                            // 391
                            var self = this; // Public (within this file) fields.                                                                // 392
                            //
                            self.methodId = options.methodId; // 395
                            self.sentMessage = false; // 396
                            self._callback = options.callback; // 398
                            self._connection = options.connection; // 399
                            self._message = options.message; // 400
                            //
                            self._onResultReceived = options.onResultReceived || function () {}; // 401
                            //
                            self._wait = options.wait; // 402
                            self.noRetry = options.noRetry; // 403
                            self._methodResult = null; // 404
                            self._dataVisible = false; // Register with the connection.                                                          // 405
                            //
                            self._connection._methodInvokers[self.methodId] = self; // 408
                        }; // 409
                        //
                        _.extend(MethodInvoker.prototype, { // 410
                            // Sends the method message to the server. May be called additional times if                                         // 411
                            // we lose the connection and reconnect before receiving a result.                                                   // 412
                            sendMessage: function () {
                                // 413
                                var self = this; // This function is called before sending a method (including resending on                        // 414
                                // reconnect). We should only (re)send methods where we don't already have a                                       // 416
                                // result!                                                                                                         // 417
                                //
                                if (self.gotResult()) throw new Error("sendingMethod is called on method with result"); // If we're re-sending it, it doesn't matter if data was written the first
                                // time.                                                                                                           // 423
                                //
                                self._dataVisible = false; // 424
                                self.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is               // 425
                                // done.                                                                                                           // 428
                                //
                                if (self._wait) self._connection._methodsBlockingQuiescence[self.methodId] = true; // Actually send the message.   // 429
                                //
                                self._connection._send(self._message); // 433
                            }, // 434
                            // Invoke the callback, if we have both a result and know that all data has                                          // 435
                            // been written to the local cache.                                                                                  // 436
                            _maybeInvokeCallback: function () {
                                // 437
                                var self = this; // 438
                                //
                                if (self._methodResult && self._dataVisible) {
                                    // 439
                                    // Call the callback. (This won't throw: the callback was wrapped with                                           // 440
                                    // bindEnvironment.)                                                                                             // 441
                                    self._callback(self._methodResult[0], self._methodResult[1]); // Forget about this method.                       // 442
                                    //
                                    //
                                    delete self._connection._methodInvokers[self.methodId]; // Let the connection know that this method is finished, so it can try to
                                    // move on to the next block of methods.                                                                         // 448
                                    //
                                    self._connection._outstandingMethodFinished(); // 449
                                } // 450
                            }, // 451
                            // Call with the result of the method from the server. Only may be called                                            // 452
                            // once; once it is called, you should not call sendMessage again.                                                   // 453
                            // If the user provided an onResultReceived callback, call it immediately.                                           // 454
                            // Then invoke the main callback if data is also visible.                                                            // 455
                            receiveResult: function (err, result) {
                                // 456
                                var self = this; // 457
                                if (self.gotResult()) throw new Error("Methods should only receive results once"); // 458
                                self._methodResult = [err, result]; // 460
                                //
                                self._onResultReceived(err, result); // 461
                                //
                                self._maybeInvokeCallback(); // 462
                            }, // 463
                            // Call this when all data written by the method is visible. This means that                                         // 464
                            // the method has returns its "data is done" message *AND* all server                                                // 465
                            // documents that are buffered at that time have been written to the local                                           // 466
                            // cache. Invokes the main callback if the result has been received.                                                 // 467
                            dataVisible: function () {
                                // 468
                                var self = this; // 469
                                self._dataVisible = true; // 470
                                //
                                self._maybeInvokeCallback(); // 471
                            }, // 472
                            // True if receiveResult has been called.                                                                            // 473
                            gotResult: function () {
                                // 474
                                var self = this; // 475
                                return !!self._methodResult; // 476
                            } // 477
                        }); // 410
                        //
                        _.extend(Connection.prototype, { // 480
                            // 'name' is the name of the data on the wire that should go in the                                                  // 481
                            // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                       // 482
                            // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                       // 483
                            registerStore: function (name, wrappedStore) {
                                // 484
                                var self = this; // 485
                                if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not     // 487
                                // implemented by 'store' into a no-op.                                                                            // 491
                                //
                                var store = {}; // 492
                                //
                                _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'], function (method) {
                                    store[method] = function () {
                                        // 496
                                        return wrappedStore[method] ? wrappedStore[method].apply(wrappedStore, arguments) : undefined; // 497
                                    }; // 500
                                }); // 501
                                //
                                self._stores[name] = store; // 503
                                var queued = self._updatesForUnknownStores[name]; // 505
                                //
                                if (queued) {
                                    // 506
                                    store.beginUpdate(queued.length, false); // 507
                                    //
                                    _.each(queued, function (msg) {
                                        // 508
                                        store.update(msg); // 509
                                    }); // 510
                                    //
                                    store.endUpdate(); // 511
                                    delete self._updatesForUnknownStores[name]; // 512
                                } // 513
                                //
                                return true; // 515
                            }, // 516
                            /**                                                                                                                  // 518
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Subscribe to a record set.  Returns a handle that provides                                               //
                             * `stop()` and `ready()` methods.                                                                                   //
                             * @locus Client                                                                                                     //
                             * @param {String} name Name of the subscription.  Matches the name of the                                           //
                             * server's `publish()` call.                                                                                        //
                             * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher                                          //
                             * function on server.                                                                                               //
                             * @param {Function|Object} [callbacks] Optional. May include `onStop`                                               //
                             * and `onReady` callbacks. If there is an error, it is passed as an                                                 //
                             * argument to `onStop`. If a function is passed instead of an object, it                                            //
                             * is interpreted as an `onReady` callback.                                                                          //
                             */subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {
                                //
                                var self = this; // 534
                                var params = Array.prototype.slice.call(arguments, 1); // 536
                                var callbacks = {}; // 537
                                //
                                if (params.length) {
                                    // 538
                                    var lastParam = params[params.length - 1]; // 539
                                    //
                                    if (_.isFunction(lastParam)) {
                                        // 540
                                        callbacks.onReady = params.pop(); // 541
                                    } else if (lastParam && // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                         // 542
                                    // onStop with an error callback instead.                                                                        // 544
                                    _.any([lastParam.onReady, lastParam.onError, lastParam.onStop], _.isFunction)) {
                                        // 545
                                        callbacks = params.pop(); // 547
                                    } // 548
                                } // Is there an existing sub with the same name and param, run in an                                              // 549
                                // invalidated Computation? This will happen if we are rerunning an                                                // 552
                                // existing computation.                                                                                           // 553
                                //                                                                                                                 // 554
                                // For example, consider a rerun of:                                                                               // 555
                                //                                                                                                                 // 556
                                //     Tracker.autorun(function () {                                                                               // 557
                                //       Meteor.subscribe("foo", Session.get("foo"));                                                              // 558
                                //       Meteor.subscribe("bar", Session.get("bar"));                                                              // 559
                                //     });                                                                                                         // 560
                                //                                                                                                                 // 561
                                // If "foo" has changed but "bar" has not, we will match the "bar"                                                 // 562
                                // subcribe to an existing inactive subscription in order to not                                                   // 563
                                // unsub and resub the subscription unnecessarily.                                                                 // 564
                                //                                                                                                                 // 565
                                // We only look for one such sub; if there are N apparently-identical subs                                         // 566
                                // being invalidated, we will require N matching subscribe calls to keep                                           // 567
                                // them all active.                                                                                                // 568
                                //
                                //
                                var existing = _.find(self._subscriptions, function (sub) {
                                    // 569
                                    return sub.inactive && sub.name === name && EJSON.equals(sub.params, params); // 570
                                }); // 572
                                //
                                var id; // 574
                                //
                                if (existing) {
                                    // 575
                                    id = existing.id; // 576
                                    existing.inactive = false; // reactivate                                                                         // 577
                                    //
                                    if (callbacks.onReady) {
                                        // 579
                                        // If the sub is not already ready, replace any ready callback with the                                        // 580
                                        // one provided now. (It's not really clear what users would expect for                                        // 581
                                        // an onReady callback inside an autorun; the semantics we provide is                                          // 582
                                        // that at the time the sub first becomes ready, we call the last                                              // 583
                                        // onReady callback provided, if any.)                                                                         // 584
                                        if (!existing.ready) existing.readyCallback = callbacks.onReady; // 585
                                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                             // 587
                                    // onStop with an optional error argument                                                                        // 590
                                    //
                                    //
                                    if (callbacks.onError) {
                                        // 591
                                        // Replace existing callback if any, so that errors aren't                                                     // 592
                                        // double-reported.                                                                                            // 593
                                        existing.errorCallback = callbacks.onError; // 594
                                    } // 595
                                    //
                                    if (callbacks.onStop) {
                                        // 597
                                        existing.stopCallback = callbacks.onStop; // 598
                                    } // 599
                                } else {
                                    // 600
                                    // New sub! Generate an id, save it locally, and send message.                                                   // 601
                                    id = Random.id(); // 602
                                    self._subscriptions[id] = { // 603
                                        id: id, // 604
                                        name: name, // 605
                                        params: EJSON.clone(params), // 606
                                        inactive: false, // 607
                                        ready: false, // 608
                                        readyDeps: new Tracker.Dependency(), // 609
                                        readyCallback: callbacks.onReady, // 610
                                        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                      // 611
                                        errorCallback: callbacks.onError, // 612
                                        stopCallback: callbacks.onStop, // 613
                                        connection: self, // 614
                                        remove: function () {
                                            // 615
                                            delete this.connection._subscriptions[this.id]; // 616
                                            this.ready && this.readyDeps.changed(); // 617
                                        }, // 618
                                        stop: function () {
                                            // 619
                                            this.connection._send({ // 620
                                                msg: 'unsub', // 620
                                                id: id // 620
                                            }); // 620
                                            //
                                            this.remove(); // 621
                                            //
                                            if (callbacks.onStop) {
                                                // 623
                                                callbacks.onStop(); // 624
                                            } // 625
                                        } // 626
                                    }; // 603
                                    //
                                    self._send({ // 628
                                        msg: 'sub', // 628
                                        id: id, // 628
                                        name: name, // 628
                                        params: params // 628
                                    }); // 628
                                } // return a handle to the application.                                                                           // 629
                                //
                                //
                                var handle = { // 632
                                    stop: function () {
                                        // 633
                                        if (!_.has(self._subscriptions, id)) return; // 634
                                        //
                                        self._subscriptions[id].stop(); // 637
                                    }, // 638
                                    ready: function () {
                                        // 639
                                        // return false if we've unsubscribed.                                                                         // 640
                                        if (!_.has(self._subscriptions, id)) return false; // 641
                                        var record = self._subscriptions[id]; // 643
                                        record.readyDeps.depend(); // 644
                                        return record.ready; // 645
                                    }, // 646
                                    subscriptionId: id // 647
                                }; // 632
                                //
                                if (Tracker.active) {
                                    // 650
                                    // We're in a reactive computation, so we'd like to unsubscribe when the                                         // 651
                                    // computation is invalidated... but not if the rerun just re-subscribes                                         // 652
                                    // to the same subscription!  When a rerun happens, we use onInvalidate                                          // 653
                                    // as a change to mark the subscription "inactive" so that it can                                                // 654
                                    // be reused from the rerun.  If it isn't reused, it's killed from                                               // 655
                                    // an afterFlush.                                                                                                // 656
                                    Tracker.onInvalidate(function (c) {
                                        // 657
                                        if (_.has(self._subscriptions, id)) self._subscriptions[id].inactive = true; // 658
                                        Tracker.afterFlush(function () {
                                            // 661
                                            if (_.has(self._subscriptions, id) && self._subscriptions[id].inactive) handle.stop(); // 662
                                        }); // 665
                                    }); // 666
                                } // 667
                                //
                                return handle; // 669
                            }, // 670
                            // options:                                                                                                          // 672
                            // - onLateError {Function(error)} called if an error was received after the ready event.                            // 673
                            //     (errors received before ready cause an error to be thrown)                                                    // 674
                            _subscribeAndWait: function (name, args, options) {
                                // 675
                                var self = this; // 676
                                var f = new Future(); // 677
                                var ready = false; // 678
                                var handle; // 679
                                args = args || []; // 680
                                args.push({ // 681
                                    onReady: function () {
                                        // 682
                                        ready = true; // 683
                                        f['return'](); // 684
                                    }, // 685
                                    onError: function (e) {
                                        // 686
                                        if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e); // 687
                                    } // 691
                                }); // 681
                                handle = self.subscribe.apply(self, [name].concat(args)); // 694
                                f.wait(); // 695
                                return handle; // 696
                            }, // 697
                            methods: function (methods) {
                                // 699
                                var self = this; // 700
                                //
                                _.each(methods, function (func, name) {
                                    // 701
                                    if (typeof func !== 'function') throw new Error("Method '" + name + "' must be a function"); // 702
                                    if (self._methodHandlers[name]) throw new Error("A method named '" + name + "' is already defined"); // 704
                                    self._methodHandlers[name] = func; // 706
                                }); // 707
                            }, // 708
                            /**                                                                                                                  // 710
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Invokes a method passing any number of arguments.                                                        //
                             * @locus Anywhere                                                                                                   //
                             * @param {String} name Name of method to invoke                                                                     //
                             * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                       //
                             * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                             */call: function (name /* .. [arguments] .. callback */) {
                                //
                                // if it's a function, the last argument is the result callback,                                                   // 720
                                // not a parameter to the remote method.                                                                           // 721
                                var args = Array.prototype.slice.call(arguments, 1); // 722
                                if (args.length && typeof args[args.length - 1] === "function") var callback = args.pop(); // 723
                                return this.apply(name, args, callback); // 725
                            }, // 726
                            // @param options {Optional Object}                                                                                  // 728
                            //   wait: Boolean - Should we wait to call this until all current methods                                           // 729
                            //                   are fully finished, and block subsequent method calls                                           // 730
                            //                   until this method is fully finished?                                                            // 731
                            //                   (does not affect methods called from within this method)                                        // 732
                            //   onResultReceived: Function - a callback to call as soon as the method                                           // 733
                            //                                result is received. the data written by                                            // 734
                            //                                the method may not yet be in the cache!                                            // 735
                            //   returnStubValue: Boolean - If true then in cases where we would have                                            // 736
                            //                              otherwise discarded the stub's return value                                          // 737
                            //                              and returned undefined, instead we go ahead                                          // 738
                            //                              and return it.  Specifically, this is any                                            // 739
                            //                              time other than when (a) we are already                                              // 740
                            //                              inside a stub or (b) we are in Node and no                                           // 741
                            //                              callback was provided.  Currently we require                                         // 742
                            //                              this flag to be explicitly passed to reduce                                          // 743
                            //                              the likelihood that stub return values will                                          // 744
                            //                              be confused with server return values; we                                            // 745
                            //                              may improve this in future.                                                          // 746
                            // @param callback {Optional Function}                                                                               // 747
                            /**                                                                                                                  // 749
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Invoke a method passing an array of arguments.                                                           //
                             * @locus Anywhere                                                                                                   //
                             * @param {String} name Name of method to invoke                                                                     //
                             * @param {EJSONable[]} args Method arguments                                                                        //
                             * @param {Object} [options]                                                                                         //
                             * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                             * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                             * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                             * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                             * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).          //
                             */apply: function (name, args, options, callback) {
                                //
                                var self = this; // We were passed 3 arguments. They may be either (name, args, options)                           // 764
                                // or (name, args, callback)                                                                                       // 767
                                //
                                if (!callback && typeof options === 'function') {
                                    // 768
                                    callback = options; // 769
                                    options = {}; // 770
                                } // 771
                                //
                                options = options || {}; // 772
                                //
                                if (callback) {
                                    // 774
                                    // XXX would it be better form to do the binding in stream.on,                                                   // 775
                                    // or caller, instead of here?                                                                                   // 776
                                    // XXX improve error message (and how we report it)                                                              // 777
                                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'"); // 778
                                } // Keep our args safe from mutation (eg if we don't send the message for a                                       // 782
                                // while because of a wait method).                                                                                // 785
                                //
                                //
                                args = EJSON.clone(args); // Lazily allocate method ID once we know that it'll be needed.                          // 786
                                //
                                var methodId = function () {
                                    // 789
                                    var id; // 790
                                    return function () {
                                        // 791
                                        if (id === undefined) id = '' + self._nextMethodId++; // 792
                                        return id; // 794
                                    }; // 795
                                }(); // 796
                                //
                                var enclosing = DDP._CurrentInvocation.get(); // 798
                                //
                                var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                                // The random streams only have utility if they're used on both the client                                         // 802
                                // and the server; if the client doesn't generate any 'random' values                                              // 803
                                // then we don't expect the server to generate any either.                                                         // 804
                                // Less commonly, the server may perform different actions from the client,                                        // 805
                                // and may in fact generate values where the client did not, but we don't                                          // 806
                                // have any client-side values to match, so even here we may as well just                                          // 807
                                // use a random seed on the server.  In that case, we don't pass the                                               // 808
                                // randomSeed to save bandwidth, and we don't even generate it to save a                                           // 809
                                // bit of CPU and to avoid consuming entropy.                                                                      // 810
                                //
                                var randomSeed = null; // 811
                                //
                                var randomSeedGenerator = function () {
                                    // 812
                                    if (randomSeed === null) {
                                        // 813
                                        randomSeed = DDPCommon.makeRpcSeed(enclosing, name); // 814
                                    } // 815
                                    //
                                    return randomSeed; // 816
                                }; // Run the stub, if we have one. The stub is supposed to make some                                              // 817
                                // temporary writes to the database to give the user a smooth experience                                           // 820
                                // until the actual result of executing the method comes back from the                                             // 821
                                // server (whereupon the temporary writes to the database will be reversed                                         // 822
                                // during the beginUpdate/endUpdate process.)                                                                      // 823
                                //                                                                                                                 // 824
                                // Normally, we ignore the return value of the stub (even if it is an                                              // 825
                                // exception), in favor of the real return value from the server. The                                              // 826
                                // exception is if the *caller* is a stub. In that case, we're not going                                           // 827
                                // to do a RPC, so we use the return value of the stub as our return                                               // 828
                                // value.                                                                                                          // 829
                                //
                                //
                                var stub = self._methodHandlers[name]; // 831
                                //
                                if (stub) {
                                    // 832
                                    var setUserId = function (userId) {
                                        // 833
                                        self.setUserId(userId); // 834
                                    }; // 835
                                    //
                                    var invocation = new DDPCommon.MethodInvocation({ // 837
                                        isSimulation: true, // 838
                                        userId: self.userId(), // 839
                                        setUserId: setUserId, // 840
                                        randomSeed: function () {
                                            // 841
                                            return randomSeedGenerator(); // 841
                                        } // 841
                                    }); // 837
                                    if (!alreadyInSimulation) self._saveOriginals(); // 844
                                    //
                                    try {
                                        // 847
                                        // Note that unlike in the corresponding server code, we never audit                                           // 848
                                        // that stubs check() their arguments.                                                                         // 849
                                        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {
                                            // 850
                                            if (Meteor.isServer) {
                                                // 851
                                                // Because saveOriginals and retrieveOriginals aren't reentrant,                                           // 852
                                                // don't allow stubs to yield.                                                                             // 853
                                                return Meteor._noYieldsAllowed(function () {
                                                    // 854
                                                    // re-clone, so that the stub can't affect our caller's values                                           // 855
                                                    return stub.apply(invocation, EJSON.clone(args)); // 856
                                                }); // 857
                                            } else {
                                                // 858
                                                return stub.apply(invocation, EJSON.clone(args)); // 859
                                            } // 860
                                        }); // 861
                                    } catch (e) {
                                        // 862
                                        var exception = e; // 864
                                    } // 865
                                    //
                                    if (!alreadyInSimulation) self._retrieveAndStoreOriginals(methodId()); // 867
                                } // If we're in a simulation, stop and return the result we have,                                                 // 869
                                // rather than going on to do an RPC. If there was no stub,                                                        // 872
                                // we'll end up returning undefined.                                                                               // 873
                                //
                                //
                                if (alreadyInSimulation) {
                                    // 874
                                    if (callback) {
                                        // 875
                                        callback(exception, stubReturnValue); // 876
                                        return undefined; // 877
                                    } // 878
                                    //
                                    if (exception) throw exception; // 879
                                    return stubReturnValue; // 881
                                } // If an exception occurred in a stub, and we're ignoring it                                                     // 882
                                // because we're doing an RPC and want to use what the server                                                      // 885
                                // returns instead, log it so the developer knows                                                                  // 886
                                // (unless they explicitly ask to see the error).                                                                  // 887
                                //                                                                                                                 // 888
                                // Tests can set the 'expected' flag on an exception so it won't                                                   // 889
                                // go to log.                                                                                                      // 890
                                //
                                //
                                if (exception) {
                                    // 891
                                    if (options.throwStubExceptions) {
                                        // 892
                                        throw exception; // 893
                                    } else if (!exception.expected) {
                                        // 894
                                        Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception, exception.stack);
                                    } // 897
                                } // At this point we're definitely doing an RPC, and we're going to                                               // 898
                                // return the value of the RPC to the caller.                                                                      // 902
                                // If the caller didn't give a callback, decide what to do.                                                        // 904
                                //
                                //
                                if (!callback) {
                                    // 905
                                    if (Meteor.isClient) {
                                        // 906
                                        // On the client, we don't have fibers, so we can't block. The                                                 // 907
                                        // only thing we can do is to return undefined and discard the                                                 // 908
                                        // result of the RPC. If an error occurred then print the error                                                // 909
                                        // to the console.                                                                                             // 910
                                        callback = function (err) {
                                            // 911
                                            err && Meteor._debug("Error invoking Method '" + name + "':", err.message); // 912
                                        }; // 914
                                    } else {
                                        // 915
                                        // On the server, make the function synchronous. Throw on                                                      // 916
                                        // errors, return on success.                                                                                  // 917
                                        var future = new Future(); // 918
                                        callback = future.resolver(); // 919
                                    } // 920
                                } // Send the RPC. Note that on the client, it is important that the                                               // 921
                                // stub have finished before we send the RPC, so that we know we have                                              // 923
                                // a complete list of which local documents the stub wrote.                                                        // 924
                                //
                                //
                                var message = { // 925
                                    msg: 'method', // 926
                                    method: name, // 927
                                    params: args, // 928
                                    id: methodId() // 929
                                }; // Send the randomSeed only if we used it                                                                       // 925
                                //
                                if (randomSeed !== null) {
                                    // 933
                                    message.randomSeed = randomSeed; // 934
                                } // 935
                                //
                                var methodInvoker = new MethodInvoker({ // 937
                                    methodId: methodId(), // 938
                                    callback: callback, // 939
                                    connection: self, // 940
                                    onResultReceived: options.onResultReceived, // 941
                                    wait: !!options.wait, // 942
                                    message: message, // 943
                                    noRetry: !!options.noRetry // 944
                                }); // 937
                                //
                                if (options.wait) {
                                    // 947
                                    // It's a wait method! Wait methods go in their own block.                                                       // 948
                                    self._outstandingMethodBlocks.push({ // 949
                                        wait: true, // 950
                                        methods: [methodInvoker] // 950
                                    }); // 950
                                } else {
                                    // 951
                                    // Not a wait method. Start a new block if the previous block was a wait                                         // 952
                                    // block, and add it to the last block of methods.                                                               // 953
                                    if (_.isEmpty(self._outstandingMethodBlocks) || _.last(self._outstandingMethodBlocks).wait) self._outstandingMethodBlocks.push({
                                        wait: false, // 956
                                        methods: [] // 956
                                    }); // 956
                                    //
                                    _.last(self._outstandingMethodBlocks).methods.push(methodInvoker); // 957
                                } // If we added it to the first block, send it out now.                                                           // 958
                                //
                                //
                                if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                                // block waiting for the result.                                                                                   // 965
                                //
                                if (future) {
                                    // 966
                                    return future.wait(); // 967
                                } // 968
                                //
                                return options.returnStubValue ? stubReturnValue : undefined; // 969
                            }, // 970
                            // Before calling a method stub, prepare all stores to track changes and allow                                       // 972
                            // _retrieveAndStoreOriginals to get the original versions of changed                                                // 973
                            // documents.                                                                                                        // 974
                            _saveOriginals: function () {
                                // 975
                                var self = this; // 976
                                if (!self._waitingForQuiescence()) self._flushBufferedWrites(); // 977
                                //
                                _.each(self._stores, function (s) {
                                    // 979
                                    s.saveOriginals(); // 980
                                }); // 981
                            }, // 982
                            // Retrieves the original versions of all documents modified by the stub for                                         // 983
                            // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                       // 984
                            // by document) and _documentsWrittenByStub (keyed by method ID).                                                    // 985
                            _retrieveAndStoreOriginals: function (methodId) {
                                // 986
                                var self = this; // 987
                                if (self._documentsWrittenByStub[methodId]) throw new Error("Duplicate methodId in _retrieveAndStoreOriginals"); // 988
                                var docsWritten = []; // 991
                                //
                                _.each(self._stores, function (s, collection) {
                                    // 992
                                    var originals = s.retrieveOriginals(); // not all stores define retrieveOriginals                                // 993
                                    //
                                    if (!originals) return; // 995
                                    originals.forEach(function (doc, id) {
                                        // 997
                                        docsWritten.push({ // 998
                                            collection: collection, // 998
                                            id: id // 998
                                        }); // 998
                                        if (!_.has(self._serverDocuments, collection)) self._serverDocuments[collection] = new MongoIDMap(); // 999
                                        //
                                        var serverDoc = self._serverDocuments[collection].setDefault(id, {}); // 1001
                                        //
                                        if (serverDoc.writtenByStubs) {
                                            // 1002
                                            // We're not the first stub to write this doc. Just add our method ID                                        // 1003
                                            // to the record.                                                                                            // 1004
                                            serverDoc.writtenByStubs[methodId] = true; // 1005
                                        } else {
                                            // 1006
                                            // First stub! Save the original value and our method ID.                                                    // 1007
                                            serverDoc.document = doc; // 1008
                                            serverDoc.flushCallbacks = []; // 1009
                                            serverDoc.writtenByStubs = {}; // 1010
                                            serverDoc.writtenByStubs[methodId] = true; // 1011
                                        } // 1012
                                    }); // 1013
                                }); // 1014
                                //
                                if (!_.isEmpty(docsWritten)) {
                                    // 1015
                                    self._documentsWrittenByStub[methodId] = docsWritten; // 1016
                                } // 1017
                            }, // 1018
                            // This is very much a private function we use to make the tests                                                     // 1020
                            // take up fewer server resources after they complete.                                                               // 1021
                            _unsubscribeAll: function () {
                                // 1022
                                var self = this; // 1023
                                //
                                _.each(_.clone(self._subscriptions), function (sub, id) {
                                    // 1024
                                    // Avoid killing the autoupdate subscription so that developers                                                  // 1025
                                    // still get hot code pushes when writing tests.                                                                 // 1026
                                    //                                                                                                               // 1027
                                    // XXX it's a hack to encode knowledge about autoupdate here,                                                    // 1028
                                    // but it doesn't seem worth it yet to have a special API for                                                    // 1029
                                    // subscriptions to preserve after unit tests.                                                                   // 1030
                                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                                        // 1031
                                        self._subscriptions[id].stop(); // 1032
                                    } // 1033
                                }); // 1034
                            }, // 1035
                            // Sends the DDP stringification of the given message object                                                         // 1037
                            _send: function (obj) {
                                // 1038
                                var self = this; // 1039
                                //
                                self._stream.send(DDPCommon.stringifyDDP(obj)); // 1040
                            }, // 1041
                            // We detected via DDP-level heartbeats that we've lost the                                                          // 1043
                            // connection.  Unlike `disconnect` or `close`, a lost connection                                                    // 1044
                            // will be automatically retried.                                                                                    // 1045
                            _lostConnection: function (error) {
                                // 1046
                                var self = this; // 1047
                                //
                                self._stream._lostConnection(error); // 1048
                            }, // 1049
                            /**                                                                                                                  // 1051
                             * @summary Get the current connection status. A reactive data source.                                               //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */status: function () /*passthrough args*/{
                                //
                                var self = this; // 1058
                                return self._stream.status.apply(self._stream, arguments); // 1059
                            }, // 1060
                            /**                                                                                                                  // 1062
                             * @summary Force an immediate reconnection attempt if the client is not connected to the server.                    //
                             This method does nothing if the client is already connected.                                                        //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */reconnect: function () /*passthrough args*/{
                                //
                                var self = this; // 1071
                                return self._stream.reconnect.apply(self._stream, arguments); // 1072
                            }, // 1073
                            /**                                                                                                                  // 1075
                             * @summary Disconnect the client from the server.                                                                   //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */disconnect: function () /*passthrough args*/{
                                //
                                var self = this; // 1082
                                return self._stream.disconnect.apply(self._stream, arguments); // 1083
                            }, // 1084
                            close: function () {
                                // 1086
                                var self = this; // 1087
                                return self._stream.disconnect({ // 1088
                                    _permanent: true // 1088
                                }); // 1088
                            }, // 1089
                            ///                                                                                                                  // 1091
                            /// Reactive user system                                                                                             // 1092
                            ///                                                                                                                  // 1093
                            userId: function () {
                                // 1094
                                var self = this; // 1095
                                if (self._userIdDeps) self._userIdDeps.depend(); // 1096
                                return self._userId; // 1098
                            }, // 1099
                            setUserId: function (userId) {
                                // 1101
                                var self = this; // Avoid invalidating dependents if setUserId is called with current value.                       // 1102
                                //
                                if (self._userId === userId) return; // 1104
                                self._userId = userId; // 1106
                                if (self._userIdDeps) self._userIdDeps.changed(); // 1107
                            }, // 1109
                            // Returns true if we are in a state after reconnect of waiting for subs to be                                       // 1111
                            // revived or early methods to finish their data, or we are waiting for a                                            // 1112
                            // "wait" method to finish.                                                                                          // 1113
                            _waitingForQuiescence: function () {
                                // 1114
                                var self = this; // 1115
                                return !_.isEmpty(self._subsBeingRevived) || !_.isEmpty(self._methodsBlockingQuiescence); // 1116
                            }, // 1118
                            // Returns true if any method whose message has been sent to the server has                                          // 1120
                            // not yet invoked its user callback.                                                                                // 1121
                            _anyMethodsAreOutstanding: function () {
                                // 1122
                                var self = this; // 1123
                                return _.any(_.pluck(self._methodInvokers, 'sentMessage')); // 1124
                            }, // 1125
                            _livedata_connected: function (msg) {
                                // 1127
                                var self = this; // 1128
                                //
                                if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                                    // 1130
                                    self._heartbeat = new DDPCommon.Heartbeat({ // 1131
                                        heartbeatInterval: self._heartbeatInterval, // 1132
                                        heartbeatTimeout: self._heartbeatTimeout, // 1133
                                        onTimeout: function () {
                                            // 1134
                                            self._lostConnection(new DDP.ConnectionError("DDP heartbeat timed out")); // 1135
                                        }, // 1137
                                        sendPing: function () {
                                            // 1138
                                            self._send({ // 1139
                                                msg: 'ping' // 1139
                                            }); // 1139
                                        } // 1140
                                    }); // 1131
                                    //
                                    self._heartbeat.start(); // 1142
                                } // If this is a reconnect, we'll have to reset all stores.                                                       // 1143
                                //
                                //
                                if (self._lastSessionId) self._resetStores = true; // 1146
                                //
                                if (typeof msg.session === "string") {
                                    // 1149
                                    var reconnectedToPreviousSession = self._lastSessionId === msg.session; // 1150
                                    self._lastSessionId = msg.session; // 1151
                                } // 1152
                                //
                                if (reconnectedToPreviousSession) {
                                    // 1154
                                    // Successful reconnection -- pick up where we left off.  Note that right                                        // 1155
                                    // now, this never happens: the server never connects us to a previous                                           // 1156
                                    // session, because DDP doesn't provide enough data for the server to know                                       // 1157
                                    // what messages the client has processed. We need to improve DDP to make                                        // 1158
                                    // this possible, at which point we'll probably need more code here.                                             // 1159
                                    return; // 1160
                                } // Server doesn't have our data any more. Re-sync a new session.                                                 // 1161
                                // Forget about messages we were buffering for unknown collections. They'll                                        // 1165
                                // be resent if still relevant.                                                                                    // 1166
                                //
                                //
                                self._updatesForUnknownStores = {}; // 1167
                                //
                                if (self._resetStores) {
                                    // 1169
                                    // Forget about the effects of stubs. We'll be resetting all collections                                         // 1170
                                    // anyway.                                                                                                       // 1171
                                    self._documentsWrittenByStub = {}; // 1172
                                    self._serverDocuments = {}; // 1173
                                } // Clear _afterUpdateCallbacks.                                                                                  // 1174
                                //
                                //
                                self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the        // 1177
                                // ready callback) as needing to be revived.                                                                       // 1180
                                // XXX We should also block reconnect quiescence until unnamed subscriptions                                       // 1181
                                //     (eg, autopublish) are done re-publishing to avoid flicker!                                                  // 1182
                                //
                                self._subsBeingRevived = {}; // 1183
                                //
                                _.each(self._subscriptions, function (sub, id) {
                                    // 1184
                                    if (sub.ready) self._subsBeingRevived[id] = true; // 1185
                                }); // Arrange for "half-finished" methods to have their callbacks run, and                                        // 1187
                                // track methods that were sent on this connection so that we don't                                                // 1190
                                // quiesce until they are all done.                                                                                // 1191
                                //                                                                                                                 // 1192
                                // Start by clearing _methodsBlockingQuiescence: methods sent before                                               // 1193
                                // reconnect don't matter, and any "wait" methods sent on the new connection                                       // 1194
                                // that we drop here will be restored by the loop below.                                                           // 1195
                                //
                                //
                                self._methodsBlockingQuiescence = {}; // 1196
                                //
                                if (self._resetStores) {
                                    // 1197
                                    _.each(self._methodInvokers, function (invoker) {
                                        // 1198
                                        if (invoker.gotResult()) {
                                            // 1199
                                            // This method already got its result, but it didn't call its callback                                       // 1200
                                            // because its data didn't become visible. We did not resend the                                             // 1201
                                            // method RPC. We'll call its callback when we get a full quiesce,                                           // 1202
                                            // since that's as close as we'll get to "data must be visible".                                             // 1203
                                            self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker)); // 1204
                                        } else if (invoker.sentMessage) {
                                            // 1205
                                            // This method has been sent on this connection (maybe as a resend                                           // 1206
                                            // from the last connection, maybe from onReconnect, maybe just very                                         // 1207
                                            // quickly before processing the connected message).                                                         // 1208
                                            //                                                                                                           // 1209
                                            // We don't need to do anything special to ensure its callbacks get                                          // 1210
                                            // called, but we'll count it as a method which is preventing                                                // 1211
                                            // reconnect quiescence. (eg, it might be a login method that was run                                        // 1212
                                            // from onReconnect, and we don't want to see flicker by seeing a                                            // 1213
                                            // logged-out state.)                                                                                        // 1214
                                            self._methodsBlockingQuiescence[invoker.methodId] = true; // 1215
                                        } // 1216
                                    }); // 1217
                                } // 1218
                                //
                                self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                                // call the callbacks immediately.                                                                                 // 1223
                                //
                                if (!self._waitingForQuiescence()) {
                                    // 1224
                                    if (self._resetStores) {
                                        // 1225
                                        _.each(self._stores, function (s) {
                                            // 1226
                                            s.beginUpdate(0, true); // 1227
                                            s.endUpdate(); // 1228
                                        }); // 1229
                                        //
                                        self._resetStores = false; // 1230
                                    } // 1231
                                    //
                                    self._runAfterUpdateCallbacks(); // 1232
                                } // 1233
                            }, // 1234
                            _processOneDataMessage: function (msg, updates) {
                                // 1237
                                var self = this; // Using underscore here so as not to need to capitalize.                                         // 1238
                                //
                                self['_process_' + msg.msg](msg, updates); // 1240
                            }, // 1241
                            _livedata_data: function (msg) {
                                // 1244
                                var self = this; // 1245
                                //
                                if (self._waitingForQuiescence()) {
                                    // 1247
                                    self._messagesBufferedUntilQuiescence.push(msg); // 1248
                                    //
                                    if (msg.msg === "nosub") delete self._subsBeingRevived[msg.id]; // 1250
                                    //
                                    _.each(msg.subs || [], function (subId) {
                                        // 1253
                                        delete self._subsBeingRevived[subId]; // 1254
                                    }); // 1255
                                    //
                                    _.each(msg.methods || [], function (methodId) {
                                        // 1256
                                        delete self._methodsBlockingQuiescence[methodId]; // 1257
                                    }); // 1258
                                    //
                                    if (self._waitingForQuiescence()) return; // No methods or subs are blocking quiescence!                         // 1260
                                    // We'll now process and all of our buffered messages, reset all stores,                                         // 1264
                                    // and apply them all at once.                                                                                   // 1265
                                    //
                                    _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {
                                        // 1266
                                        self._processOneDataMessage(bufferedMsg, self._bufferedWrites); // 1267
                                    }); // 1268
                                    //
                                    self._messagesBufferedUntilQuiescence = []; // 1269
                                } else {
                                    // 1270
                                    self._processOneDataMessage(msg, self._bufferedWrites); // 1271
                                } // Immediately flush writes when:                                                                                // 1272
                                //  1. Buffering is disabled. Or;                                                                                  // 1275
                                //  2. any non-(added/changed/removed) message arrives.                                                            // 1276
                                //
                                //
                                var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg); // 1277
                                //
                                if (self._bufferedWritesInterval === 0 || !standardWrite) {
                                    // 1278
                                    self._flushBufferedWrites(); // 1279
                                    //
                                    return; // 1280
                                } // 1281
                                //
                                if (self._bufferedWritesFlushAt === null) {
                                    // 1283
                                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge; // 1284
                                } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                                    // 1285
                                    self._flushBufferedWrites(); // 1287
                                    //
                                    return; // 1288
                                } // 1289
                                //
                                if (self._bufferedWritesFlushHandle) {
                                    // 1291
                                    clearTimeout(self._bufferedWritesFlushHandle); // 1292
                                } // 1293
                                //
                                self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval); // 1294
                            }, // 1296
                            _flushBufferedWrites: function () {
                                // 1298
                                var self = this; // 1299
                                //
                                if (self._bufferedWritesFlushHandle) {
                                    // 1300
                                    clearTimeout(self._bufferedWritesFlushHandle); // 1301
                                    self._bufferedWritesFlushHandle = null; // 1302
                                } // 1303
                                //
                                self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to                            // 1305
                                //  performWrites. As there's no guarantee that it                                                                 // 1307
                                //  will exit cleanly.                                                                                             // 1308
                                //
                                var writes = self._bufferedWrites; // 1309
                                self._bufferedWrites = {}; // 1310
                                //
                                self._performWrites(writes); // 1311
                            }, // 1312
                            _performWrites: function (updates) {
                                // 1314
                                var self = this; // 1315
                                //
                                if (self._resetStores || !_.isEmpty(updates)) {
                                    // 1317
                                    // Begin a transactional update of each store.                                                                   // 1318
                                    _.each(self._stores, function (s, storeName) {
                                        // 1319
                                        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0, self._resetStores); // 1320
                                    }); // 1322
                                    //
                                    self._resetStores = false; // 1323
                                    //
                                    _.each(updates, function (updateMessages, storeName) {
                                        // 1325
                                        var store = self._stores[storeName]; // 1326
                                        //
                                        if (store) {
                                            // 1327
                                            _.each(updateMessages, function (updateMessage) {
                                                // 1328
                                                store.update(updateMessage); // 1329
                                            }); // 1330
                                        } else {
                                            // 1331
                                            // Nobody's listening for this data. Queue it up until                                                       // 1332
                                            // someone wants it.                                                                                         // 1333
                                            // XXX memory use will grow without bound if you forget to                                                   // 1334
                                            // create a collection or just don't care about it... going                                                  // 1335
                                            // to have to do something about that.                                                                       // 1336
                                            if (!_.has(self._updatesForUnknownStores, storeName)) self._updatesForUnknownStores[storeName] = []; // 1337
                                            Array.prototype.push.apply(self._updatesForUnknownStores[storeName], updateMessages); // 1339
                                        } // 1341
                                    }); // End update transaction.                                                                                   // 1342
                                    //
                                    //
                                    _.each(self._stores, function (s) {
                                        // 1345
                                        s.endUpdate(); // 1345
                                    }); // 1345
                                } // 1346
                                //
                                self._runAfterUpdateCallbacks(); // 1348
                            }, // 1349
                            // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                            // 1351
                            // relevant docs have been flushed, as well as dataVisible callbacks at                                              // 1352
                            // reconnect-quiescence time.                                                                                        // 1353
                            _runAfterUpdateCallbacks: function () {
                                // 1354
                                var self = this; // 1355
                                var callbacks = self._afterUpdateCallbacks; // 1356
                                self._afterUpdateCallbacks = []; // 1357
                                //
                                _.each(callbacks, function (c) {
                                    // 1358
                                    c(); // 1359
                                }); // 1360
                            }, // 1361
                            _pushUpdate: function (updates, collection, msg) {
                                // 1363
                                var self = this; // 1364
                                //
                                if (!_.has(updates, collection)) {
                                    // 1365
                                    updates[collection] = []; // 1366
                                } // 1367
                                //
                                updates[collection].push(msg); // 1368
                            }, // 1369
                            _getServerDoc: function (collection, id) {
                                // 1371
                                var self = this; // 1372
                                if (!_.has(self._serverDocuments, collection)) return null; // 1373
                                var serverDocsForCollection = self._serverDocuments[collection]; // 1375
                                return serverDocsForCollection.get(id) || null; // 1376
                            }, // 1377
                            _process_added: function (msg, updates) {
                                // 1379
                                var self = this; // 1380
                                var id = MongoID.idParse(msg.id); // 1381
                                //
                                var serverDoc = self._getServerDoc(msg.collection, id); // 1382
                                //
                                if (serverDoc) {
                                    // 1383
                                    // Some outstanding stub wrote here.                                                                             // 1384
                                    var isExisting = serverDoc.document !== undefined; // 1385
                                    serverDoc.document = msg.fields || {}; // 1387
                                    serverDoc.document._id = id; // 1388
                                    //
                                    if (self._resetStores) {
                                        // 1390
                                        // During reconnect the server is sending adds for existing ids.                                               // 1391
                                        // Always push an update so that document stays in the store after                                             // 1392
                                        // reset. Use current version of the document for this update, so                                              // 1393
                                        // that stub-written values are preserved.                                                                     // 1394
                                        var currentDoc = self._stores[msg.collection].getDoc(msg.id); // 1395
                                        //
                                        if (currentDoc !== undefined) msg.fields = currentDoc; // 1396
                                        //
                                        self._pushUpdate(updates, msg.collection, msg); // 1399
                                    } else if (isExisting) {
                                        // 1400
                                        throw new Error("Server sent add for existing id: " + msg.id); // 1401
                                    } // 1402
                                } else {
                                    // 1403
                                    self._pushUpdate(updates, msg.collection, msg); // 1404
                                } // 1405
                            }, // 1406
                            _process_changed: function (msg, updates) {
                                // 1408
                                var self = this; // 1409
                                //
                                var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id)); // 1410
                                //
                                if (serverDoc) {
                                    // 1412
                                    if (serverDoc.document === undefined) throw new Error("Server sent changed for nonexisting id: " + msg.id); // 1413
                                    DiffSequence.applyChanges(serverDoc.document, msg.fields); // 1415
                                } else {
                                    // 1416
                                    self._pushUpdate(updates, msg.collection, msg); // 1417
                                } // 1418
                            }, // 1419
                            _process_removed: function (msg, updates) {
                                // 1421
                                var self = this; // 1422
                                //
                                var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id)); // 1423
                                //
                                if (serverDoc) {
                                    // 1425
                                    // Some outstanding stub wrote here.                                                                             // 1426
                                    if (serverDoc.document === undefined) throw new Error("Server sent removed for nonexisting id:" + msg.id); // 1427
                                    serverDoc.document = undefined; // 1429
                                } else {
                                    // 1430
                                    self._pushUpdate(updates, msg.collection, { // 1431
                                        msg: 'removed', // 1432
                                        collection: msg.collection, // 1433
                                        id: msg.id // 1434
                                    }); // 1431
                                } // 1436
                            }, // 1437
                            _process_updated: function (msg, updates) {
                                // 1439
                                var self = this; // Process "method done" messages.                                                                // 1440
                                //
                                _.each(msg.methods, function (methodId) {
                                    // 1442
                                    _.each(self._documentsWrittenByStub[methodId], function (written) {
                                        // 1443
                                        var serverDoc = self._getServerDoc(written.collection, written.id); // 1444
                                        //
                                        if (!serverDoc) throw new Error("Lost serverDoc for " + JSON.stringify(written)); // 1445
                                        if (!serverDoc.writtenByStubs[methodId]) throw new Error("Doc " + JSON.stringify(written) + " not written by  method " + methodId);
                                        delete serverDoc.writtenByStubs[methodId]; // 1450
                                        //
                                        if (_.isEmpty(serverDoc.writtenByStubs)) {
                                            // 1451
                                            // All methods whose stubs wrote this method have completed! We can                                          // 1452
                                            // now copy the saved document to the database (reverting the stub's                                         // 1453
                                            // change if the server did not write to this object, or applying the                                        // 1454
                                            // server's writes if it did).                                                                               // 1455
                                            // This is a fake ddp 'replace' message.  It's just for talking                                              // 1457
                                            // between livedata connections and minimongo.  (We have to stringify                                        // 1458
                                            // the ID because it's supposed to look like a wire message.)                                                // 1459
                                            self._pushUpdate(updates, written.collection, { // 1460
                                                msg: 'replace', // 1461
                                                id: MongoID.idStringify(written.id), // 1462
                                                replace: serverDoc.document // 1463
                                            }); // Call all flush callbacks.                                                                             // 1460
                                            //
                                            //
                                            _.each(serverDoc.flushCallbacks, function (c) {
                                                // 1466
                                                c(); // 1467
                                            }); // Delete this completed serverDocument. Don't bother to GC empty                                        // 1468
                                            // IdMaps inside self._serverDocuments, since there probably aren't                                          // 1471
                                            // many collections and they'll be written repeatedly.                                                       // 1472
                                            //
                                            //
                                            self._serverDocuments[written.collection].remove(written.id); // 1473
                                        } // 1474
                                    }); // 1475
                                    //
                                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                                    // currently buffered messages are flushed.                                                                      // 1479
                                    //
                                    var callbackInvoker = self._methodInvokers[methodId]; // 1480
                                    if (!callbackInvoker) throw new Error("No callback invoker for method " + methodId); // 1481
                                    //
                                    self._runWhenAllServerDocsAreFlushed(_.bind(callbackInvoker.dataVisible, callbackInvoker)); // 1483
                                }); // 1485
                            }, // 1486
                            _process_ready: function (msg, updates) {
                                // 1488
                                var self = this; // Process "sub ready" messages. "sub ready" messages don't take effect                           // 1489
                                // until all current server documents have been flushed to the local                                               // 1491
                                // database. We can use a write fence to implement this.                                                           // 1492
                                //
                                _.each(msg.subs, function (subId) {
                                    // 1493
                                    self._runWhenAllServerDocsAreFlushed(function () {
                                        // 1494
                                        var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?                                     // 1495
                                        //
                                        if (!subRecord) return; // Did we already receive a ready message? (Oops!)                                     // 1497
                                        //
                                        if (subRecord.ready) return; // 1500
                                        subRecord.ready = true; // 1502
                                        subRecord.readyCallback && subRecord.readyCallback(); // 1503
                                        subRecord.readyDeps.changed(); // 1504
                                    }); // 1505
                                }); // 1506
                            }, // 1507
                            // Ensures that "f" will be called after all documents currently in                                                  // 1509
                            // _serverDocuments have been written to the local cache. f will not be called                                       // 1510
                            // if the connection is lost before then!                                                                            // 1511
                            _runWhenAllServerDocsAreFlushed: function (f) {
                                // 1512
                                var self = this; // 1513
                                //
                                var runFAfterUpdates = function () {
                                    // 1514
                                    self._afterUpdateCallbacks.push(f); // 1515
                                }; // 1516
                                //
                                var unflushedServerDocCount = 0; // 1517
                                //
                                var onServerDocFlush = function () {
                                    // 1518
                                    --unflushedServerDocCount; // 1519
                                    //
                                    if (unflushedServerDocCount === 0) {
                                        // 1520
                                        // This was the last doc to flush! Arrange to run f after the updates                                          // 1521
                                        // have been applied.                                                                                          // 1522
                                        runFAfterUpdates(); // 1523
                                    } // 1524
                                }; // 1525
                                //
                                _.each(self._serverDocuments, function (collectionDocs) {
                                    // 1526
                                    collectionDocs.forEach(function (serverDoc) {
                                        // 1527
                                        var writtenByStubForAMethodWithSentMessage = _.any(serverDoc.writtenByStubs, function (dummy, methodId) {
                                            // 1528
                                            var invoker = self._methodInvokers[methodId]; // 1530
                                            return invoker && invoker.sentMessage; // 1531
                                        }); // 1532
                                        //
                                        if (writtenByStubForAMethodWithSentMessage) {
                                            // 1533
                                            ++unflushedServerDocCount; // 1534
                                            serverDoc.flushCallbacks.push(onServerDocFlush); // 1535
                                        } // 1536
                                    }); // 1537
                                }); // 1538
                                //
                                if (unflushedServerDocCount === 0) {
                                    // 1539
                                    // There aren't any buffered docs --- we can call f as soon as the current                                       // 1540
                                    // round of updates is applied!                                                                                  // 1541
                                    runFAfterUpdates(); // 1542
                                } // 1543
                            }, // 1544
                            _livedata_nosub: function (msg) {
                                // 1546
                                var self = this; // First pass it through _livedata_data, which only uses it to help get                           // 1547
                                // towards quiescence.                                                                                             // 1550
                                //
                                self._livedata_data(msg); // Do the rest of our processing immediately, with no                                    // 1551
                                // buffering-until-quiescence.                                                                                     // 1554
                                // we weren't subbed anyway, or we initiated the unsub.                                                            // 1556
                                //
                                //
                                if (!_.has(self._subscriptions, msg.id)) return; // XXX COMPAT WITH 1.0.3.1 #errorCallback                         // 1557
                                //
                                var errorCallback = self._subscriptions[msg.id].errorCallback; // 1561
                                var stopCallback = self._subscriptions[msg.id].stopCallback; // 1562
                                //
                                self._subscriptions[msg.id].remove(); // 1564
                                //
                                var meteorErrorFromMsg = function (msgArg) {
                                    // 1566
                                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                                }; // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                       // 1569
                                //
                                //
                                if (errorCallback && msg.error) {
                                    // 1572
                                    errorCallback(meteorErrorFromMsg(msg)); // 1573
                                } // 1574
                                //
                                if (stopCallback) {
                                    // 1576
                                    stopCallback(meteorErrorFromMsg(msg)); // 1577
                                } // 1578
                            }, // 1579
                            _process_nosub: function () {// This is called as part of the "buffer until quiescence" process, but                 // 1581
                                // nosub's effect is always immediate. It only goes in the buffer at all                                           // 1583
                                // because it's possible for a nosub to be the thing that triggers                                                 // 1584
                                // quiescence, if we were waiting for a sub to be revived and it dies                                              // 1585
                                // instead.                                                                                                        // 1586
                            }, // 1587
                            _livedata_result: function (msg) {
                                // 1589
                                // id, result or error. error has error (code), reason, details                                                    // 1590
                                var self = this; // Lets make sure there are no buffered writes before returning result.                           // 1592
                                //
                                if (!_.isEmpty(self._bufferedWrites)) {
                                    // 1595
                                    self._flushBufferedWrites(); // 1596
                                } // find the outstanding request                                                                                  // 1597
                                // should be O(1) in nearly all realistic use cases                                                                // 1600
                                //
                                //
                                if (_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1601
                                    Meteor._debug("Received method result but no methods outstanding"); // 1602
                                    //
                                    return; // 1603
                                } // 1604
                                //
                                var currentMethodBlock = self._outstandingMethodBlocks[0].methods; // 1605
                                var m; // 1606
                                //
                                for (var i = 0; i < currentMethodBlock.length; i++) {
                                    // 1607
                                    m = currentMethodBlock[i]; // 1608
                                    if (m.methodId === msg.id) break; // 1609
                                } // 1611
                                //
                                if (!m) {
                                    // 1613
                                    Meteor._debug("Can't match method response to original method call", msg); // 1614
                                    //
                                    return; // 1615
                                } // Remove from current method block. This may leave the block empty, but we                                      // 1616
                                // don't move on to the next block until the callback has been delivered, in                                       // 1619
                                // _outstandingMethodFinished.                                                                                     // 1620
                                //
                                //
                                currentMethodBlock.splice(i, 1); // 1621
                                //
                                if (_.has(msg, 'error')) {
                                    // 1623
                                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details)); // 1624
                                } else {
                                    // 1627
                                    // msg.result may be undefined if the method didn't return a                                                     // 1628
                                    // value                                                                                                         // 1629
                                    m.receiveResult(undefined, msg.result); // 1630
                                } // 1631
                            }, // 1632
                            // Called by MethodInvoker after a method's callback is invoked.  If this was                                        // 1634
                            // the last outstanding method in the current block, runs the next block. If                                         // 1635
                            // there are no more methods, consider accepting a hot code push.                                                    // 1636
                            _outstandingMethodFinished: function () {
                                // 1637
                                var self = this; // 1638
                                if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                                // methods is empty. (Or it might not exist, if this was a method that                                             // 1643
                                // half-finished before disconnect/reconnect.)                                                                     // 1644
                                //
                                if (!_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1645
                                    var firstBlock = self._outstandingMethodBlocks.shift(); // 1646
                                    //
                                    if (!_.isEmpty(firstBlock.methods)) throw new Error("No methods outstanding but nonempty block: " + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.
                                    //
                                    if (!_.isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods(); // 1652
                                } // Maybe accept a hot code push.                                                                                 // 1654
                                //
                                //
                                self._maybeMigrate(); // 1657
                            }, // 1658
                            // Sends messages for all the methods in the first block in                                                          // 1660
                            // _outstandingMethodBlocks.                                                                                         // 1661
                            _sendOutstandingMethods: function () {
                                // 1662
                                var self = this; // 1663
                                if (_.isEmpty(self._outstandingMethodBlocks)) return; // 1664
                                //
                                _.each(self._outstandingMethodBlocks[0].methods, function (m) {
                                    // 1666
                                    m.sendMessage(); // 1667
                                }); // 1668
                            }, // 1669
                            _livedata_error: function (msg) {
                                // 1671
                                Meteor._debug("Received error from server: ", msg.reason); // 1672
                                //
                                if (msg.offendingMessage) Meteor._debug("For: ", msg.offendingMessage); // 1673
                            }, // 1675
                            _callOnReconnectAndSendAppropriateOutstandingMethods: function () {
                                // 1677
                                var self = this; // 1678
                                var oldOutstandingMethodBlocks = self._outstandingMethodBlocks; // 1679
                                self._outstandingMethodBlocks = []; // 1680
                                self.onReconnect(); // 1682
                                if (_.isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                                // again. First: did onReconnect actually send anything? If not, we just                                           // 1688
                                // restore all outstanding methods and run the first block.                                                        // 1689
                                //
                                if (_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1690
                                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks; // 1691
                                    //
                                    self._sendOutstandingMethods(); // 1692
                                    //
                                    return; // 1693
                                } // OK, there are blocks on both sides. Special case: merge the last block of                                     // 1694
                                // the reconnect methods with the first block of the original methods, if                                          // 1697
                                // neither of them are "wait" blocks.                                                                              // 1698
                                //
                                //
                                if (!_.last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                                    // 1699
                                    _.each(oldOutstandingMethodBlocks[0].methods, function (m) {
                                        // 1701
                                        _.last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.
                                        //
                                        //
                                        if (self._outstandingMethodBlocks.length === 1) m.sendMessage(); // 1705
                                    }); // 1707
                                    //
                                    oldOutstandingMethodBlocks.shift(); // 1709
                                } // Now add the rest of the original blocks on.                                                                   // 1710
                                //
                                //
                                _.each(oldOutstandingMethodBlocks, function (block) {
                                    // 1713
                                    self._outstandingMethodBlocks.push(block); // 1714
                                }); // 1715
                            }, // 1716
                            // We can accept a hot code push if there are no methods in flight.                                                  // 1718
                            _readyToMigrate: function () {
                                // 1719
                                var self = this; // 1720
                                return _.isEmpty(self._methodInvokers); // 1721
                            }, // 1722
                            // If we were blocking a migration, see if it's now possible to continue.                                            // 1724
                            // Call whenever the set of outstanding/blocked methods shrinks.                                                     // 1725
                            _maybeMigrate: function () {
                                // 1726
                                var self = this; // 1727
                                //
                                if (self._retryMigrate && self._readyToMigrate()) {
                                    // 1728
                                    self._retryMigrate(); // 1729
                                    //
                                    self._retryMigrate = null; // 1730
                                } // 1731
                            } // 1732
                        }); // 480
                        //
                        LivedataTest.Connection = Connection; // @param url {String} URL to Meteor app,                                        // 1735
                        //     e.g.:                                                                                                           // 1738
                        //     "subdomain.meteor.com",                                                                                         // 1739
                        //     "http://subdomain.meteor.com",                                                                                  // 1740
                        //     "/",                                                                                                            // 1741
                        //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                                  // 1742
                        /**                                                                                                                    // 1744
                         * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
                         * @locus Anywhere                                                                                                     //
                         * @param {String} url The URL of another Meteor application.                                                          //
                         */ //
                        //
                        DDP.connect = function (url, options) {
                            // 1749
                            var ret = new Connection(url, options); // 1750
                            allConnections.push(ret); // hack. see below.                                                                        // 1751
                            //
                            return ret; // 1752
                        }; // Hack for `spiderable` package: a way to see if the page is done                                                  // 1753
                        // loading all the data it needs.                                                                                      // 1756
                        //                                                                                                                     // 1757
                        //
                        //
                        allConnections = []; // 1758
                        //
                        DDP._allSubscriptionsReady = function () {
                            // 1759
                            return _.all(allConnections, function (conn) {
                                // 1760
                                return _.all(conn._subscriptions, function (sub) {
                                    // 1761
                                    return sub.ready; // 1762
                                }); // 1763
                            }); // 1764
                        }; // 1765
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "client_convenience.js": function (_require8, _exports7, _module6) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/client_convenience.js                                                                           //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0; // 1
                        _module6.watch(_require8("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // Meteor.refresh can be called on the client (if you're in common code) but it                                        // 3
                        // only has an effect on the server.                                                                                   // 4
                        Meteor.refresh = function (notification) {}; // 5
                        //
                        if (Meteor.isClient) {
                            // 8
                            // By default, try to connect back to the same endpoint as the page                                                  // 9
                            // was served from.                                                                                                  // 10
                            //                                                                                                                   // 11
                            // XXX We should be doing this a different way. Right now we don't                                                   // 12
                            // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                     // 13
                            // include it on the server when computing                                                                           // 14
                            // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                        // 15
                            // default, '/'.) We get by with this because DDP.connect then                                                       // 16
                            // forces the URL passed to it to be interpreted relative to the                                                     // 17
                            // app's deploy path, even if it is absolute. Instead, we should                                                     // 18
                            // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                                 // 19
                            // make the default ddpUrl be '' rather that '/'; and make                                                           // 20
                            // _translateUrl in stream_client_common.js not force absolute paths                                                 // 21
                            // to be treated like relative paths. See also                                                                       // 22
                            // stream_client_common.js #RationalizingRelativeDDPURLs                                                             // 23
                            var ddpUrl = '/'; // 24
                            //
                            if (typeof __meteor_runtime_config__ !== "undefined") {
                                // 25
                                if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;
                            } // 28
                            //
                            var retry = new Retry(); // 30
                            //
                            var onDDPVersionNegotiationFailure = function (description) {
                                // 32
                                Meteor._debug(description); // 33
                                //
                                if (Package.reload) {
                                    // 34
                                    var migrationData = Package.reload.Reload._migrationData('livedata') || {}; // 35
                                    var failures = migrationData.DDPVersionNegotiationFailures || 0; // 36
                                    ++failures; // 37
                                    //
                                    Package.reload.Reload._onMigrate('livedata', function () {
                                        // 38
                                        return [true, { // 39
                                            DDPVersionNegotiationFailures: failures // 39
                                        }]; // 39
                                    }); // 40
                                    //
                                    retry.retryLater(failures, function () {
                                        // 41
                                        Package.reload.Reload._reload(); // 42
                                    }); // 43
                                } // 44
                            }; // 45
                            //
                            Meteor.connection = DDP.connect(ddpUrl, { // 47
                                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure // 49
                            }); // Proxy the public methods of Meteor.connection so they can                                                     // 48
                            // be called directly on Meteor.                                                                                     // 53
                            //
                            _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'], function (name) {
                                // 54
                                Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection); // 57
                            }); // 58
                        } else {
                            // 59
                            // Never set up a default connection on the server. Don't even map                                                   // 60
                            // subscribe/call/etc onto Meteor.                                                                                   // 61
                            Meteor.connection = null; // 62
                        } // Meteor.connection used to be called                                                                               // 63
                        // Meteor.default_connection. Provide backcompat as a courtesy even                                                    // 66
                        // though it was never documented.                                                                                     // 67
                        // XXX COMPAT WITH 0.6.4                                                                                               // 68
                        //
                        //
                        Meteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.             // 69
                        // XXX COMPAT WITH 0.6.4                                                                                               // 72
                        //
                        Meteor.connect = DDP.connect; // 73
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "namespace.js": function (_require9, _exports8, _module7) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/namespace.js                                                                                    //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        _module7.export({ // 1
                            DDP: function () {
                                // 1
                                return DDP; // 1
                            }, // 1
                            LivedataTest: function () {
                                // 1
                                return LivedataTest; // 1
                            } // 1
                        }); // 1
                        var DDP = {}; // 5
                        var LivedataTest = {}; // 6
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "id_map.js": function (_require10, _exports9, _module8) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/id_map.js                                                                                       //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _classCallCheck2 = _require10("babel-runtime/helpers/classCallCheck"); //
                        //
                        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
                        //
                        var _possibleConstructorReturn2 = _require10("babel-runtime/helpers/possibleConstructorReturn"); //
                        //
                        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2); //
                        //
                        var _inherits2 = _require10("babel-runtime/helpers/inherits"); //
                        //
                        var _inherits3 = _interopRequireDefault(_inherits2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        _module8.export({ // 1
                            MongoIDMap: function () {
                                // 1
                                return MongoIDMap; // 1
                            } // 1
                        }); // 1
                        //
                        var MongoIDMap = function (_IdMap) {
                            //
                            (0, _inherits3.default)(MongoIDMap, _IdMap); //
                            //
                            function MongoIDMap() {
                                // 2
                                (0, _classCallCheck3.default)(this, MongoIDMap); // 2
                                return (0, _possibleConstructorReturn3.default)(this, _IdMap.call(this, MongoID.idStringify, MongoID.idParse)); // 2
                            } // 7
                            //
                            return MongoIDMap; //
                        }(IdMap); //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    } } } } }, {
        "extensions": [".js", ".json"]
    });
    _require2("./node_modules/meteor/ddp-client/sockjs-0.3.4.js");
    _require2("./node_modules/meteor/ddp-client/stream_client_sockjs.js");
    _require2("./node_modules/meteor/ddp-client/stream_client_common.js");
    _require2("./node_modules/meteor/ddp-client/livedata_common.js");
    _require2("./node_modules/meteor/ddp-client/random_stream.js");
    _require2("./node_modules/meteor/ddp-client/livedata_connection.js");
    _require2("./node_modules/meteor/ddp-client/client_convenience.js");
    var _exports = _require2("./node_modules/meteor/ddp-client/namespace.js");

    /* Exports */
    if (typeof Package === 'undefined') Package = {};
    (function (pkg, symbols) {
        for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
    })(Package['ddp-client'] = _exports, {
        DDP: DDP
    });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.ddp = {}, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['ddp-server'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function () {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/allow-deny/allow-deny.js                                                                             //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///                                                                                                              // 1
            /// Remote methods and access control.                                                                           // 2
            ///                                                                                                              // 3
            // Restrict default mutators on collection. allow() and deny() take the                                          // 5
            // same options:                                                                                                 // 6
            //                                                                                                               // 7
            // options.insert {Function(userId, doc)}                                                                        // 8
            //   return true to allow/deny adding this document                                                              // 9
            //                                                                                                               // 10
            // options.update {Function(userId, docs, fields, modifier)}                                                     // 11
            //   return true to allow/deny updating these documents.                                                         // 12
            //   `fields` is passed as an array of fields that are to be modified                                            // 13
            //                                                                                                               // 14
            // options.remove {Function(userId, docs)}                                                                       // 15
            //   return true to allow/deny removing these documents                                                          // 16
            //                                                                                                               // 17
            // options.fetch {Array}                                                                                         // 18
            //   Fields to fetch for these validators. If any call to allow or deny                                          // 19
            //   does not have this option then all fields are loaded.                                                       // 20
            //                                                                                                               // 21
            // allow and deny can be called multiple times. The validators are                                               // 22
            // evaluated as follows:                                                                                         // 23
            // - If neither deny() nor allow() has been called on the collection,                                            // 24
            //   then the request is allowed if and only if the "insecure" smart                                             // 25
            //   package is in use.                                                                                          // 26
            // - Otherwise, if any deny() function returns true, the request is denied.                                      // 27
            // - Otherwise, if any allow() function returns true, the request is allowed.                                    // 28
            // - Otherwise, the request is denied.                                                                           // 29
            //                                                                                                               // 30
            // Meteor may call your deny() and allow() functions in any order, and may not                                   // 31
            // call all of them if it is able to make a decision without calling them all                                    // 32
            // (so don't include side effects).                                                                              // 33
            AllowDeny = { // 35
              CollectionPrototype: {} // 36
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these                               // 35
            // methods                                                                                                       // 40
            //
            var CollectionPrototype = AllowDeny.CollectionPrototype; /**                                                     // 41
                                                                      * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
                                                                      * @locus Server                                        //
                                                                      * @method allow                                        //
                                                                      * @memberOf Mongo.Collection                           //
                                                                      * @instance                                            //
                                                                      * @param {Object} options                              //
                                                                      * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
                                                                      * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
                                                                      * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
                                                                      */ //
            //
            CollectionPrototype.allow = function (options) {
              // 54
              addValidator(this, 'allow', options); // 55
            }; /**                                                                                                           // 56
                * @summary Override `allow` rules.                                                                           //
                * @locus Server                                                                                              //
                * @method deny                                                                                               //
                * @memberOf Mongo.Collection                                                                                 //
                * @instance                                                                                                  //
                * @param {Object} options                                                                                    //
                * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
                * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
                * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
                */ //
            //
            CollectionPrototype.deny = function (options) {
              // 69
              addValidator(this, 'deny', options); // 70
            }; // 71
            //
            CollectionPrototype._defineMutationMethods = function (options) {
              // 73
              var self = this; // 74
              options = options || {}; // set to true once we call any allow or deny methods. If true, use                   // 75
              // allow/deny semantics. If false, use insecure mode semantics.                                                // 78
              //
              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which         // 79
              // means insecure iff the insecure package is loaded. This property can be                                     // 82
              // overriden by tests or packages wishing to change insecure mode behavior of                                  // 83
              // their collections.                                                                                          // 84
              //
              self._insecure = undefined; // 85
              self._validators = { // 87
                insert: { // 88
                  allow: [], // 88
                  deny: [] // 88
                }, // 88
                update: { // 89
                  allow: [], // 89
                  deny: [] // 89
                }, // 89
                remove: { // 90
                  allow: [], // 90
                  deny: [] // 90
                }, // 90
                upsert: { // 91
                  allow: [], // 91
                  deny: [] // 91
                }, // 91
                // dummy arrays; can't set these!                                                                            // 91
                fetch: [], // 92
                fetchAllFields: false // 93
              }; // 87
              if (!self._name) return; // anonymous collection                                                               // 96
              // XXX Think about method namespacing. Maybe methods should be                                                 // 99
              // "Meteor:Mongo:insert/NAME"?                                                                                 // 100
              //
              self._prefix = '/' + self._name + '/'; // Mutation Methods                                                     // 101
              // Minimongo on the server gets no stubs; instead, by default                                                  // 104
              // it wait()s until its result is ready, yielding.                                                             // 105
              // This matches the behavior of macromongo on the server better.                                               // 106
              // XXX see #MeteorServerNull                                                                                   // 107
              //
              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                // 108
                var m = {}; // 109
                //
                _.each(['insert', 'update', 'remove'], function (method) {
                  // 111
                  var methodName = self._prefix + method; // 112
                  //
                  if (options.useExisting) {
                    // 114
                    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)                                            // 117
                    //
                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  } // 120
                  //
                  m[methodName] = function () /* ... */{
                    // 122
                    // All the methods do their own validation, instead of using check().                                    // 123
                    check(arguments, [Match.Any]); // 124
                    //
                    var args = _.toArray(arguments); // 125
                    //
                    try {
                      // 126
                      // For an insert, if the client didn't specify an _id, generate one                                    // 127
                      // now; because this uses DDP.randomStream, it will be consistent with                                 // 128
                      // what the client generated. We generate it now rather than later so                                  // 129
                      // that if (eg) an allow/deny rule does an insert to the same                                          // 130
                      // collection (not that it really should), the generated _id will                                      // 131
                      // still be the first use of the stream and will be consistent.                                        // 132
                      //                                                                                                     // 133
                      // However, we don't actually stick the _id onto the document yet,                                     // 134
                      // because we want allow/deny rules to be able to differentiate                                        // 135
                      // between arbitrary client-specified _id fields and merely                                            // 136
                      // client-controlled-via-randomSeed fields.                                                            // 137
                      var generatedId = null; // 138
                      //
                      if (method === "insert" && !_.has(args[0], '_id')) {
                        // 139
                        generatedId = self._makeNewID(); // 140
                      } // 141
                      //
                      if (this.isSimulation) {
                        // 143
                        // In a client simulation, you can do any mutation (even with a                                      // 144
                        // complex selector).                                                                                // 145
                        if (generatedId !== null) args[0]._id = generatedId; // 146
                        return self._collection[method].apply(self._collection, args); // 148
                      } // This is the server receiving a method call from the client.                                       // 150
                      // We don't allow arbitrary selectors in mutations from the client: only                               // 154
                      // single-ID selectors.                                                                                // 155
                      //
                      //
                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method); // 156
                      //
                      if (self._restricted) {
                        // 159
                        // short circuit if there is no way it will pass.                                                    // 160
                        if (self._validators[method].allow.length === 0) {
                          // 161
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        } // 165
                        //
                        var validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1); // 167
                        args.unshift(this.userId); // 169
                        method === 'insert' && args.push(generatedId); // 170
                        return self[validatedMethodName].apply(self, args); // 171
                      } else if (self._isInsecure()) {
                        // 172
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever                                   // 176
                        //     we get from the network to this function, we should actually                                  // 177
                        //     know the correct arguments for the function and pass just                                     // 178
                        //     them.  For example, if you have an extraneous extra null                                      // 179
                        //     argument and this is Mongo on the server, the .wrapAsync'd                                    // 180
                        //     functions like update will get confused and pass the                                          // 181
                        //     "fut.resolver()" in the wrong slot, where _update will never                                  // 182
                        //     invoke it. Bam, broken DDP connection.  Probably should just                                  // 183
                        //     take this whole method and write it three times, invoking                                     // 184
                        //     helpers for the common code.                                                                  // 185
                        //
                        return self._collection[method].apply(self._collection, args); // 186
                      } else {
                        // 187
                        // In secure mode, if we haven't called allow or deny, then nothing                                  // 188
                        // is permitted.                                                                                     // 189
                        throw new Meteor.Error(403, "Access denied"); // 190
                      } // 191
                    } catch (e) {
                      // 192
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        // 193
                        throw new Meteor.Error(409, e.toString()); // 194
                      } else {
                        // 195
                        throw e; // 196
                      } // 197
                    } // 198
                  }; // 199
                }); // 200
                //
                self._connection.methods(m); // 202
              } // 203
            }; // 204
            //
            CollectionPrototype._updateFetch = function (fields) {
              // 206
              var self = this; // 207
              //
              if (!self._validators.fetchAllFields) {
                // 209
                if (fields) {
                  // 210
                  self._validators.fetch = _.union(self._validators.fetch, fields); // 211
                } else {
                  // 212
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it     // 213
                  //
                  self._validators.fetch = null; // 215
                } // 216
              } // 217
            }; // 218
            //
            CollectionPrototype._isInsecure = function () {
              // 220
              var self = this; // 221
              if (self._insecure === undefined) return !!Package.insecure; // 222
              return self._insecure; // 224
            }; // 225
            //
            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              // 227
              var self = this; // call user validators.                                                                      // 229
              // Any deny returns true means denied.                                                                         // 232
              //
              if (_.any(self._validators.insert.deny, function (validator) {
                // 233
                return validator(userId, docToValidate(validator, doc, generatedId)); // 234
              })) {
                // 235
                throw new Meteor.Error(403, "Access denied"); // 236
              } // Any allow returns true means proceed. Throw error if they all fail.                                       // 237
              //
              //
              if (_.all(self._validators.insert.allow, function (validator) {
                // 239
                return !validator(userId, docToValidate(validator, doc, generatedId)); // 240
              })) {
                // 241
                throw new Meteor.Error(403, "Access denied"); // 242
              } // If we generated an ID above, insert it now: after the validation, but                                     // 243
              // before actually inserting.                                                                                  // 246
              //
              //
              if (generatedId !== null) doc._id = generatedId; // 247
              //
              self._collection.insert.call(self._collection, doc); // 250
            }; // Simulate a mongo `update` operation while validating that the access                                       // 251
            // control rules set by calls to `allow/deny` are satisfied. If all                                              // 254
            // pass, rewrite the mongo operation to use $in to set the list of                                               // 255
            // document ids to change ##ValidatedChange                                                                      // 256
            //
            //
            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              // 257
              var self = this; // 259
              check(mutator, Object); // 261
              options = _.clone(options) || {}; // 263
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.                                                                                                      // 269
              //
              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              var noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'."; // compute modified fields
              //
              var fields = []; // 279
              //
              if (_.isEmpty(mutator)) {
                // 280
                throw new Meteor.Error(403, noReplaceError); // 281
              } // 282
              //
              _.each(mutator, function (params, op) {
                // 283
                if (op.charAt(0) !== '$') {
                  // 284
                  throw new Meteor.Error(403, noReplaceError); // 285
                } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {
                  // 286
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
                } else {
                  // 289
                  _.each(_.keys(params), function (field) {
                    // 290
                    // treat dotted fields as if they are replacing their                                                    // 291
                    // top-level part                                                                                        // 292
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change
                    //
                    if (!_.contains(fields, field)) fields.push(field); // 297
                  }); // 299
                } // 300
              }); // 301
              //
              var findOptions = { // 303
                transform: null // 303
              }; // 303
              //
              if (!self._validators.fetchAllFields) {
                // 304
                findOptions.fields = {}; // 305
                //
                _.each(self._validators.fetch, function (fieldName) {
                  // 306
                  findOptions.fields[fieldName] = 1; // 307
                }); // 308
              } // 309
              //
              var doc = self._collection.findOne(selector, findOptions); // 311
              //
              if (!doc) // none satisfied!                                                                                   // 312
                return 0; // call user validators.                                                                           // 313
              // Any deny returns true means denied.                                                                         // 316
              //
              if (_.any(self._validators.update.deny, function (validator) {
                // 317
                var factoriedDoc = transformDoc(validator, doc); // 318
                return validator(userId, factoriedDoc, fields, mutator); // 319
              })) {
                // 323
                throw new Meteor.Error(403, "Access denied"); // 324
              } // Any allow returns true means proceed. Throw error if they all fail.                                       // 325
              //
              //
              if (_.all(self._validators.update.allow, function (validator) {
                // 327
                var factoriedDoc = transformDoc(validator, doc); // 328
                return !validator(userId, factoriedDoc, fields, mutator); // 329
              })) {
                // 333
                throw new Meteor.Error(403, "Access denied"); // 334
              } // 335
              //
              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually      // 337
              // rewrote the selector to include an _id clause before passing to Mongo to                                    // 340
              // avoid races, but since selector is guaranteed to already just be an ID, we                                  // 341
              // don't have to any more.                                                                                     // 342
              //
              return self._collection.update.call(self._collection, selector, mutator, options); // 344
            }; // Only allow these operations in validated updates. Specifically                                             // 346
            // whitelist operations, rather than blacklist, so new complex                                                   // 349
            // operations that are added aren't automatically allowed. A complex                                             // 350
            // operation is one that does more than just modify its target                                                   // 351
            // field. For now this contains all update operations except '$rename'.                                          // 352
            // http://docs.mongodb.org/manual/reference/operators/#update                                                    // 353
            //
            //
            var ALLOWED_UPDATE_OPERATIONS = { // 354
              $inc: 1, // 355
              $set: 1, // 355
              $unset: 1, // 355
              $addToSet: 1, // 355
              $pop: 1, // 355
              $pullAll: 1, // 355
              $pull: 1, // 355
              $pushAll: 1, // 356
              $push: 1, // 356
              $bit: 1 // 356
            }; // Simulate a mongo `remove` operation while validating access control                                        // 354
            // rules. See #ValidatedChange                                                                                   // 360
            //
            CollectionPrototype._validatedRemove = function (userId, selector) {
              // 361
              var self = this; // 362
              var findOptions = { // 364
                transform: null // 364
              }; // 364
              //
              if (!self._validators.fetchAllFields) {
                // 365
                findOptions.fields = {}; // 366
                //
                _.each(self._validators.fetch, function (fieldName) {
                  // 367
                  findOptions.fields[fieldName] = 1; // 368
                }); // 369
              } // 370
              //
              var doc = self._collection.findOne(selector, findOptions); // 372
              //
              if (!doc) return 0; // call user validators.                                                                   // 373
              // Any deny returns true means denied.                                                                         // 377
              //
              if (_.any(self._validators.remove.deny, function (validator) {
                // 378
                return validator(userId, transformDoc(validator, doc)); // 379
              })) {
                // 380
                throw new Meteor.Error(403, "Access denied"); // 381
              } // Any allow returns true means proceed. Throw error if they all fail.                                       // 382
              //
              //
              if (_.all(self._validators.remove.allow, function (validator) {
                // 384
                return !validator(userId, transformDoc(validator, doc)); // 385
              })) {
                // 386
                throw new Meteor.Error(403, "Access denied"); // 387
              } // Back when we supported arbitrary client-provided selectors, we actually                                   // 388
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                 // 391
              // Mongo to avoid races, but since selector is guaranteed to already just be                                   // 392
              // an ID, we don't have to any more.                                                                           // 393
              //
              //
              return self._collection.remove.call(self._collection, selector); // 395
            }; // 396
            //
            CollectionPrototype._callMutatorMethod = function () {
              // 398
              function _callMutatorMethod(name, args, callback) {
                // 398
                if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                  // 399
                  // Client can't block, so it can't report errors by exception,                                             // 400
                  // only by callback. If they forget the callback, give them a                                              // 401
                  // default one that logs the error, so they aren't totally                                                 // 402
                  // baffled if their writes don't work because their database is                                            // 403
                  // down.                                                                                                   // 404
                  // Don't give a default callback in simulation, because inside stubs we                                    // 405
                  // want to return the results from the local collection immediately and                                    // 406
                  // not force a callback.                                                                                   // 407
                  callback = function (err) {
                    // 408
                    if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack)); // 409
                  }; // 411
                } // For two out of three mutator methods, the first argument is a selector                                  // 412
                //
                //
                var firstArgIsSelector = name === "update" || name === "remove"; // 415
                //
                if (firstArgIsSelector && !alreadyInSimulation()) {
                  // 416
                  // If we're about to actually send an RPC, we should throw an error if                                     // 417
                  // this is a non-ID selector, because the mutation methods only allow                                      // 418
                  // single-ID selectors. (If we don't throw here, we'll see flicker.)                                       // 419
                  throwIfSelectorIsNotId(args[0], name); // 420
                } // 421
                //
                var mutatorMethodName = this._prefix + name; // 423
                return this._connection.apply(mutatorMethodName, args, { // 424
                  returnStubValue: true // 425
                }, callback); // 425
              } // 426
              //
              return _callMutatorMethod; // 398
            }(); // 398
            //
            function transformDoc(validator, doc) {
              // 428
              if (validator.transform) return validator.transform(doc); // 429
              return doc; // 431
            } // 432
            //
            function docToValidate(validator, doc, generatedId) {
              // 434
              var ret = doc; // 435
              //
              if (validator.transform) {
                // 436
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get         // 437
                // to tell the difference between "client specified the ID" and "server                                      // 439
                // generated the ID", because transforms expect to get _id.  If you want to                                  // 440
                // do that check, you can do it with a specific                                                              // 441
                // `C.allow({insert: f, transform: null})` validator.                                                        // 442
                //
                if (generatedId !== null) {
                  // 443
                  ret._id = generatedId; // 444
                } // 445
                //
                ret = validator.transform(ret); // 446
              } // 447
              //
              return ret; // 448
            } // 449
            //
            function addValidator(collection, allowOrDeny, options) {
              // 451
              // validate keys                                                                                               // 452
              var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform']; // 453
              //
              _.each(_.keys(options), function (key) {
                // 454
                if (!_.contains(VALID_KEYS, key)) throw new Error(allowOrDeny + ": Invalid key: " + key); // 455
              }); // 457
              //
              collection._restricted = true; // 459
              //
              _.each(['insert', 'update', 'remove'], function (name) {
                // 461
                if (options.hasOwnProperty(name)) {
                  // 462
                  if (!(options[name] instanceof Function)) {
                    // 463
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function"); // 464
                  } // If the transform is specified at all (including as 'null') in this                                    // 465
                  // call, then take that; otherwise, take the transform from the                                            // 468
                  // collection.                                                                                             // 469
                  //
                  //
                  if (options.transform === undefined) {
                    // 470
                    options[name].transform = collection._transform; // already wrapped                                      // 471
                  } else {
                    // 472
                    options[name].transform = LocalCollection.wrapTransform(options.transform); // 473
                  } // 475
                  //
                  collection._validators[name][allowOrDeny].push(options[name]); // 477
                } // 478
              }); // Only update the fetch fields if we're passed things that affect                                         // 479
              // fetching. This way allow({}) and allow({insert: f}) don't result in                                         // 482
              // setting fetchAllFields                                                                                      // 483
              //
              //
              if (options.update || options.remove || options.fetch) {
                // 484
                if (options.fetch && !(options.fetch instanceof Array)) {
                  // 485
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array"); // 486
                } // 487
                //
                collection._updateFetch(options.fetch); // 488
              } // 489
            } // 490
            //
            function throwIfSelectorIsNotId(selector, methodName) {
              // 492
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                // 493
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID."); // 494
              } // 497
            } // 498
            //
            ; // Determine if we are in a DDP method simulation                                                              // 498
            //
            function alreadyInSimulation() {
              // 501
              var enclosing = DDP._CurrentInvocation.get(); // 502
              //
              return enclosing && enclosing.isSimulation; // 503
            } // 504
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require("./node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['allow-deny'] = {}, {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package.insecure = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var LocalCollectionDriver, Mongo;

  var _require = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function () {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                              //
            // packages/mongo/local_collection_driver.js                                                                    //
            //                                                                                                              //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            LocalCollectionDriver = function () {
              // 1
              var self = this; // 2
              self.noConnCollections = {}; // 3
            }; // 4
            //
            var ensureCollection = function (name, collections) {
              // 6
              if (!(name in collections)) collections[name] = new LocalCollection(name); // 7
              return collections[name]; // 9
            }; // 10
            //
            _.extend(LocalCollectionDriver.prototype, { // 12
              open: function (name, conn) {
                // 13
                var self = this; // 14
                if (!name) return new LocalCollection(); // 15
                //
                if (!conn) {
                  // 17
                  return ensureCollection(name, self.noConnCollections); // 18
                } // 19
                //
                if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {}; // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?                                                                   // 23
                //
                return ensureCollection(name, conn._mongo_livedata_collections); // 24
              } // 25
            }); // singleton                                                                                                // 12
            //
            //
            LocalCollectionDriver = new LocalCollectionDriver(); // 29
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function (_require2, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                              //
            // packages/mongo/collection.js                                                                                 //
            //                                                                                                              //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // options.connection, if given, is a LivedataClient or LivedataServer                                          // 1
            // XXX presently there is no way to destroy/clean up a Collection                                               // 2
            /**                                                                                                             // 4
             * @summary Namespace for MongoDB-related items                                                                 //
             * @namespace                                                                                                   //
             */Mongo = {}; /**                                                                                              //
                            * @summary Constructor for a Collection                                                         //
                            * @locus Anywhere                                                                               //
                            * @instancename collection                                                                      //
                            * @class                                                                                        //
                            * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
                            * @param {Object} [options]                                                                     //
                            * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
                            * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
                                                                                                                            //
                            - **`'STRING'`**: random strings                                                                //
                            - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                            //
                                                                                                                            //
                           The default id generation technique is `'STRING'`.                                               //
                            * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
                            * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
                            */ //
            //
            Mongo.Collection = function (name, options) {
              // 27
              var self = this; // 28
              if (!(self instanceof Mongo.Collection)) throw new Error('use "new" to construct a Mongo.Collection'); // 29
              //
              if (!name && name !== null) {
                // 32
                Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");
                //
                name = null; // 36
              } // 37
              //
              if (name !== null && typeof name !== "string") {
                // 39
                throw new Error("First argument to new Mongo.Collection must be a string or null"); // 40
              } // 42
              //
              if (options && options.methods) {
                // 44
                // Backwards compatibility hack with original signature (which passed                                       // 45
                // "connection" directly instead of in options. (Connections must have a "methods"                          // 46
                // method.)                                                                                                 // 47
                // XXX remove before 1.0                                                                                    // 48
                options = { // 49
                  connection: options // 49
                }; // 49
              } // Backwards compatibility: "connection" used to be called "manager".                                       // 50
              //
              //
              if (options && options.manager && !options.connection) {
                // 52
                options.connection = options.manager; // 53
              } // 54
              //
              options = _.extend({ // 55
                connection: undefined, // 56
                idGeneration: 'STRING', // 57
                transform: null, // 58
                _driver: undefined, // 59
                _preventAutopublish: false // 60
              }, options); // 55
              //
              switch (options.idGeneration) {// 63
                case 'MONGO':
                  // 64
                  self._makeNewID = function () {
                    // 65
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure; // 66
                    return new Mongo.ObjectID(src.hexString(24)); // 67
                  }; // 68
                  //
                  break; // 69
                //
                case 'STRING': // 70
                default:
                  // 71
                  self._makeNewID = function () {
                    // 72
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure; // 73
                    return src.id(); // 74
                  }; // 75
                  //
                  break; // 76
              } // 63
              //
              self._transform = LocalCollection.wrapTransform(options.transform); // 79
              if (!name || options.connection === null) // note: nameless collections never have a connection               // 81
                self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;
              //
              if (!options._driver) {
                // 91
                // XXX This check assumes that webapp is loaded so that Meteor.server !==                                   // 92
                // null. We should fully support the case of "want to use a Mongo-backed                                    // 93
                // collection from Node code without webapp", but we don't yet.                                             // 94
                // #MeteorServerNull                                                                                        // 95
                if (name && self._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                  options._driver = MongoInternals.defaultRemoteCollectionDriver(); // 99
                } else {
                  // 100
                  options._driver = LocalCollectionDriver; // 101
                } // 102
              } // 103
              //
              self._collection = options._driver.open(name, self._connection); // 105
              self._name = name; // 106
              self._driver = options._driver; // 107
              //
              if (self._connection && self._connection.registerStore) {
                // 109
                // OK, we're going to be a slave, replicating some remote                                                   // 110
                // database, except possibly with some temporary divergence while                                           // 111
                // we have unacknowledged RPC's.                                                                            // 112
                var ok = self._connection.registerStore(name, { // 113
                  // Called at the beginning of a batch of updates. batchSize is the number                                 // 114
                  // of update calls to expect.                                                                             // 115
                  //                                                                                                        // 116
                  // XXX This interface is pretty janky. reset probably ought to go back to                                 // 117
                  // being its own function, and callers shouldn't have to calculate                                        // 118
                  // batchSize. The optimization of not calling pause/remove should be                                      // 119
                  // delayed until later: the first call to update() should buffer its                                      // 120
                  // message, and then we can either directly apply it at endUpdate time if                                 // 121
                  // it was the only update, or do pauseObservers/apply/apply at the next                                   // 122
                  // update() if there's another one.                                                                       // 123
                  beginUpdate: function (batchSize, reset) {
                    // 124
                    // pause observers so users don't see flicker when updating several                                     // 125
                    // objects at once (including the post-reconnect reset-and-reapply                                      // 126
                    // stage), and so that a re-sorting of a query can take advantage of the                                // 127
                    // full _diffQuery moved calculation instead of applying change one at a                                // 128
                    // time.                                                                                                // 129
                    if (batchSize > 1 || reset) self._collection.pauseObservers(); // 130
                    if (reset) self._collection.remove({}); // 133
                  }, // 135
                  // Apply an update.                                                                                       // 137
                  // XXX better specify this interface (not in terms of a wire message)?                                    // 138
                  update: function (msg) {
                    // 139
                    var mongoId = MongoID.idParse(msg.id); // 140
                    //
                    var doc = self._collection.findOne(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
                    // of method writes to an object? (Note that 'undefined' is a valid                                     // 144
                    // value meaning "remove it".)                                                                          // 145
                    //
                    //
                    if (msg.msg === 'replace') {
                      // 146
                      var replace = msg.replace; // 147
                      //
                      if (!replace) {
                        // 148
                        if (doc) self._collection.remove(mongoId); // 149
                      } else if (!doc) {
                        // 151
                        self._collection.insert(replace); // 152
                      } else {
                        // 153
                        // XXX check that replace has no $ ops                                                              // 154
                        self._collection.update(mongoId, replace); // 155
                      } // 156
                      //
                      return; // 157
                    } else if (msg.msg === 'added') {
                      // 158
                      if (doc) {
                        // 159
                        throw new Error("Expected not to find a document already present for an add"); // 160
                      } // 161
                      //
                      self._collection.insert(_.extend({ // 162
                        _id: mongoId // 162
                      }, msg.fields)); // 162
                    } else if (msg.msg === 'removed') {
                      // 163
                      if (!doc) throw new Error("Expected to find a document already present for removed"); // 164
                      //
                      self._collection.remove(mongoId); // 166
                    } else if (msg.msg === 'changed') {
                      // 167
                      if (!doc) throw new Error("Expected to find a document to change"); // 168
                      //
                      if (!_.isEmpty(msg.fields)) {
                        // 170
                        var modifier = {}; // 171
                        //
                        _.each(msg.fields, function (value, key) {
                          // 172
                          if (value === undefined) {
                            // 173
                            if (!modifier.$unset) modifier.$unset = {}; // 174
                            modifier.$unset[key] = 1; // 176
                          } else {
                            // 177
                            if (!modifier.$set) modifier.$set = {}; // 178
                            modifier.$set[key] = value; // 180
                          } // 181
                        }); // 182
                        //
                        self._collection.update(mongoId, modifier); // 183
                      } // 184
                    } else {
                      // 185
                      throw new Error("I don't know how to deal with this message"); // 186
                    } // 187
                  }, // 189
                  // Called at the end of a batch of updates.                                                               // 191
                  endUpdate: function () {
                    // 192
                    self._collection.resumeObservers(); // 193
                  }, // 194
                  // Called around method stub invocations to capture the original versions                                 // 196
                  // of modified documents.                                                                                 // 197
                  saveOriginals: function () {
                    // 198
                    self._collection.saveOriginals(); // 199
                  }, // 200
                  retrieveOriginals: function () {
                    // 201
                    return self._collection.retrieveOriginals(); // 202
                  }, // 203
                  // Used to preserve current versions of documents across a store reset.                                   // 205
                  getDoc: function (id) {
                    // 206
                    return self.findOne(id); // 207
                  }, // 208
                  // To be able to get back to the collection from the store.                                               // 210
                  _getCollection: function () {
                    // 211
                    return self; // 212
                  } // 213
                }); // 113
                //
                if (!ok) {
                  // 216
                  var message = "There is already a collection named \"" + name + "\""; // 217
                  //
                  if (options._suppressSameNameError === true) {
                    // 218
                    // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined               // 219
                    // for this collection name, but this will simply be another reference to it and everything             // 220
                    // should work. However, we have historically thrown an error here, so for now we will                  // 221
                    // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in               // 222
                    // and give this some real world testing.                                                               // 223
                    console.warn ? console.warn(message) : console.log(message); // 224
                  } else {
                    // 225
                    throw new Error(message); // 226
                  } // 227
                } // 228
              } // XXX don't define these until allow or deny is actually used for this                                     // 229
              // collection. Could be hard if the security rules are only defined on the                                    // 232
              // server.                                                                                                    // 233
              //
              //
              if (options.defineMutationMethods !== false) {
                // 234
                try {
                  // 235
                  self._defineMutationMethods({ // 236
                    useExisting: options._suppressSameNameError === true // 236
                  }); // 236
                } catch (error) {
                  // 237
                  // Throw a more understandable error on the server for same collection name                               // 238
                  if (error.message === "A method named '/" + name + "/insert' is already defined") throw new Error("There is already a collection named \"" + name + "\"");
                  throw error; // 241
                } // 242
              } // autopublish                                                                                              // 243
              //
              //
              if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {
                // 246
                self._connection.publish(null, function () {
                  // 247
                  return self.find(); // 248
                }, { // 249
                  is_auto: true // 249
                }); // 249
              } // 250
            }; ///                                                                                                          // 251
            /// Main collection API                                                                                         // 254
            ///                                                                                                             // 255
            //
            //
            _.extend(Mongo.Collection.prototype, { // 258
              _getFindSelector: function (args) {
                // 260
                if (args.length == 0) return {};else return args[0]; // 261
              }, // 265
              _getFindOptions: function (args) {
                // 267
                var self = this; // 268
                //
                if (args.length < 2) {
                  // 269
                  return { // 270
                    transform: self._transform // 270
                  }; // 270
                } else {
                  // 271
                  check(args[1], Match.Optional(Match.ObjectIncluding({ // 272
                    fields: Match.Optional(Match.OneOf(Object, undefined)), // 273
                    sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)), // 274
                    limit: Match.Optional(Match.OneOf(Number, undefined)), // 275
                    skip: Match.Optional(Match.OneOf(Number, undefined)) // 276
                  }))); // 272
                  return _.extend({ // 279
                    transform: self._transform // 280
                  }, args[1]); // 279
                } // 282
              }, // 283
              /**                                                                                                           // 285
               * @summary Find the documents in a collection that match the selector.                                       //
               * @locus Anywhere                                                                                            //
               * @method find                                                                                               //
               * @memberOf Mongo.Collection                                                                                 //
               * @instance                                                                                                  //
               * @param {MongoSelector} [selector] A query describing the documents to find                                 //
               * @param {Object} [options]                                                                                  //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
               * @param {Number} options.skip Number of results to skip at the beginning                                    //
               * @param {Number} options.limit Maximum number of results to return                                          //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
               * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity         //
               * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
               * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
               * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
               * @returns {Mongo.Cursor}                                                                                    //
               */find: function () /* selector, options */{
                //
                // Collection.find() (return all docs) behaves differently                                                  // 305
                // from Collection.find(undefined) (return 0 docs).  so be                                                  // 306
                // careful about the length of arguments.                                                                   // 307
                var self = this; // 308
                //
                var argArray = _.toArray(arguments); // 309
                //
                return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray)); // 310
              }, // 312
              /**                                                                                                           // 314
               * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
               * @locus Anywhere                                                                                            //
               * @method findOne                                                                                            //
               * @memberOf Mongo.Collection                                                                                 //
               * @instance                                                                                                  //
               * @param {MongoSelector} [selector] A query describing the documents to find                                 //
               * @param {Object} [options]                                                                                  //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
               * @param {Number} options.skip Number of results to skip at the beginning                                    //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
               * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity             //
               * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @returns {Object}                                                                                          //
               */findOne: function () /* selector, options */{
                //
                var self = this; // 330
                //
                var argArray = _.toArray(arguments); // 331
                //
                return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray)); // 332
              } // 334
            }); // 258
            //
            Mongo.Collection._publishCursor = function (cursor, sub, collection) {
              // 338
              var observeHandle = cursor.observeChanges({ // 339
                added: function (id, fields) {
                  // 340
                  sub.added(collection, id, fields); // 341
                }, // 342
                changed: function (id, fields) {
                  // 343
                  sub.changed(collection, id, fields); // 344
                }, // 345
                removed: function (id) {
                  // 346
                  sub.removed(collection, id); // 347
                } // 348
              }); // We don't call sub.ready() here: it gets called in livedata_server, after                               // 339
              // possibly calling _publishCursor on multiple returned cursors.                                              // 352
              // register stop callback (expects lambda w/ no args).                                                        // 354
              //
              sub.onStop(function () {
                // 355
                observeHandle.stop(); // 355
              }); // return the observeHandle in case it needs to be stopped early                                          // 355
              //
              return observeHandle; // 358
            }; // protect against dangerous selectors.  falsey and {_id: falsey} are both                                   // 359
            // likely programmer error, and not what you want, particularly for destructive                                 // 362
            // operations.  JS regexps don't serialize over DDP but can be trivially                                        // 363
            // replaced by $regex. If a falsey _id is sent in, a new string _id will be                                     // 364
            // generated and returned; if a fallbackId is provided, it will be returned                                     // 365
            // instead.                                                                                                     // 366
            //
            //
            Mongo.Collection._rewriteSelector = function (selector) {
              // 367
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                  // 367
              fallbackId = _ref.fallbackId; // 367
              //
              // shorthand -- scalars match _id                                                                             // 368
              if (LocalCollection._selectorIsId(selector)) selector = { // 369
                _id: selector // 370
              }; // 370
              //
              if (_.isArray(selector)) {
                // 372
                // This is consistent with the Mongo console itself; if we don't do this                                    // 373
                // check passing an empty array ends up selecting all items                                                 // 374
                throw new Error("Mongo selector can't be an array."); // 375
              } // 376
              //
              if (!selector || '_id' in selector && !selector._id) {
                // 378
                // can't match anything                                                                                     // 379
                return { // 380
                  _id: fallbackId || Random.id() // 380
                }; // 380
              } // 381
              //
              var ret = {}; // 383
              Object.keys(selector).forEach(function (key) {
                // 384
                var value = selector[key]; // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}               // 385
                //
                if (value instanceof RegExp) {
                  // 387
                  ret[key] = convertRegexpToMongoSelector(value); // 388
                } else if (value && value.$regex instanceof RegExp) {
                  // 389
                  ret[key] = convertRegexpToMongoSelector(value.$regex); // if value is {$regex: /foo/, $options: ...} then $options
                  // override the ones set on $regex.                                                                       // 392
                  //
                  if (value.$options !== undefined) ret[key].$options = value.$options; // 393
                } else if (_.contains(['$or', '$and', '$nor'], key)) {
                  // 395
                  // Translate lower levels of $and/$or/$nor                                                                // 396
                  ret[key] = _.map(value, function (v) {
                    // 397
                    return Mongo.Collection._rewriteSelector(v); // 398
                  }); // 399
                } else {
                  // 400
                  ret[key] = value; // 401
                } // 402
              }); // 403
              return ret; // 404
            }; // convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                        // 405
            // selector                                                                                                     // 408
            //
            //
            function convertRegexpToMongoSelector(regexp) {
              // 409
              check(regexp, RegExp); // safety belt                                                                         // 410
              //
              var selector = { // 412
                $regex: regexp.source // 412
              }; // 412
              var regexOptions = ''; // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                   // 413
              // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                            // 415
              //
              if (regexp.ignoreCase) regexOptions += 'i'; // 416
              if (regexp.multiline) regexOptions += 'm'; // 418
              if (regexOptions) selector.$options = regexOptions; // 420
              return selector; // 423
            } // 'insert' immediately returns the inserted document's new _id.                                              // 424
            // The others return values immediately if you are in a stub, an in-memory                                      // 427
            // unmanaged collection, or a mongo-backed collection and you don't pass a                                      // 428
            // callback. 'update' and 'remove' return the number of affected                                                // 429
            // documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                  // 430
            // insert happened, 'insertedId'.                                                                               // 431
            //                                                                                                              // 432
            // Otherwise, the semantics are exactly like other methods: they take                                           // 433
            // a callback as an optional last argument; if no callback is                                                   // 434
            // provided, they block until the operation is complete, and throw an                                           // 435
            // exception if it fails; if a callback is provided, then they don't                                            // 436
            // necessarily block, and they call the callback when they finish with error and                                // 437
            // result arguments.  (The insert method provides the document ID as its result;                                // 438
            // update and remove provide the number of affected docs as the result; upsert                                  // 439
            // provides an object with numberAffected and maybe insertedId.)                                                // 440
            //                                                                                                              // 441
            // On the client, blocking is impossible, so if a callback                                                      // 442
            // isn't provided, they just return immediately and any error                                                   // 443
            // information is lost.                                                                                         // 444
            //                                                                                                              // 445
            // There's one more tweak. On the client, if you don't provide a                                                // 446
            // callback, then if there is an error, a message will be logged with                                           // 447
            // Meteor._debug.                                                                                               // 448
            //                                                                                                              // 449
            // The intent (though this is actually determined by the underlying                                             // 450
            // drivers) is that the operations should be done synchronously, not                                            // 451
            // generating their result until the database has acknowledged                                                  // 452
            // them. In the future maybe we should provide a flag to turn this                                              // 453
            // off.                                                                                                         // 454
            /**                                                                                                             // 456
             * @summary Insert a document in the collection.  Returns its unique _id.                                       //
             * @locus Anywhere                                                                                              //
             * @method  insert                                                                                              //
             * @memberOf Mongo.Collection                                                                                   //
             * @instance                                                                                                    //
             * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
             * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
             */ //
            //
            Mongo.Collection.prototype.insert = function () {
              // 465
              function insert(doc, callback) {
                // 465
                // Make sure we were passed a document to insert                                                            // 466
                if (!doc) {
                  // 467
                  throw new Error("insert requires an argument"); // 468
                } // Shallow-copy the document and possibly generate an ID                                                  // 469
                //
                //
                doc = _.extend({}, doc); // 472
                //
                if ('_id' in doc) {
                  // 474
                  if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                    // 475
                    throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs"); // 476
                  } // 477
                } else {
                  // 478
                  var generateId = true; // Don't generate the id if we're the client and the 'outermost' call              // 479
                  // This optimization saves us passing both the randomSeed and the id                                      // 482
                  // Passing both is redundant.                                                                             // 483
                  //
                  if (this._isRemoteCollection()) {
                    // 484
                    var enclosing = DDP._CurrentInvocation.get(); // 485
                    //
                    if (!enclosing) {
                      // 486
                      generateId = false; // 487
                    } // 488
                  } // 489
                  //
                  if (generateId) {
                    // 491
                    doc._id = this._makeNewID(); // 492
                  } // 493
                } // On inserts, always return the id that we generated; on all other                                       // 494
                // operations, just return the result from the collection.                                                  // 497
                //
                //
                var chooseReturnValueFromCollectionResult = function (result) {
                  // 498
                  if (doc._id) {
                    // 499
                    return doc._id; // 500
                  } // XXX what is this for??                                                                               // 501
                  // It's some iteraction between the callback to _callMutatorMethod and                                    // 504
                  // the return value conversion                                                                            // 505
                  //
                  //
                  doc._id = result; // 506
                  return result; // 508
                }; // 509
                //
                var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult); // 511
                //
                if (this._isRemoteCollection()) {
                  // 513
                  var result = this._callMutatorMethod("insert", [doc], wrappedCallback); // 514
                  //
                  return chooseReturnValueFromCollectionResult(result); // 515
                } // it's my collection.  descend into the collection object                                                // 516
                // and propagate any exception.                                                                             // 519
                //
                //
                try {
                  // 520
                  // If the user provided a callback and the collection implements this                                     // 521
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 522
                  // result will be returned through the callback instead.                                                  // 523
                  var _result = this._collection.insert(doc, wrappedCallback); // 524
                  //
                  return chooseReturnValueFromCollectionResult(_result); // 525
                } catch (e) {
                  // 526
                  if (callback) {
                    // 527
                    callback(e); // 528
                    return null; // 529
                  } // 530
                  //
                  throw e; // 531
                } // 532
              } // 533
              //
              return insert; // 465
            }(); /**                                                                                                        // 465
                  * @summary Modify one or more documents in the collection. Returns the number of matched documents.       //
                  * @locus Anywhere                                                                                         //
                  * @method update                                                                                          //
                  * @memberOf Mongo.Collection                                                                              //
                  * @instance                                                                                               //
                  * @param {MongoSelector} selector Specifies which documents to modify                                     //
                  * @param {MongoModifier} modifier Specifies how to modify the documents                                   //
                  * @param {Object} [options]                                                                               //
                  * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                  * @param {Boolean} options.upsert True to insert a document if no matching documents are found.           //
                  * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                  */ //
            //
            Mongo.Collection.prototype.update = function () {
              // 548
              function update(selector, modifier) {
                // 548
                for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  optionsAndCallback[_key - 2] = arguments[_key]; // 548
                } // 548
                //
                var callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                // of one or zero items                                                                                     // 552
                //
                var options = _.clone(optionsAndCallback[0]) || {}; // 553
                var insertedId = void 0; // 554
                //
                if (options && options.upsert) {
                  // 555
                  // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                       // 556
                  if (options.insertedId) {
                    // 557
                    if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                    insertedId = options.insertedId; // 560
                  } else if (!selector || !selector._id) {
                    // 561
                    insertedId = this._makeNewID(); // 562
                    options.insertedId = insertedId; // 563
                  } // 564
                } // 565
                //
                selector = Mongo.Collection._rewriteSelector(selector, { // 567
                  fallbackId: insertedId // 568
                }); // 568
                var wrappedCallback = wrapCallback(callback); // 570
                //
                if (this._isRemoteCollection()) {
                  // 572
                  var args = [selector, modifier, options]; // 573
                  return this._callMutatorMethod("update", args, wrappedCallback); // 579
                } // it's my collection.  descend into the collection object                                                // 580
                // and propagate any exception.                                                                             // 583
                //
                //
                try {
                  // 584
                  // If the user provided a callback and the collection implements this                                     // 585
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 586
                  // result will be returned through the callback instead.                                                  // 587
                  return this._collection.update(selector, modifier, options, wrappedCallback); // 588
                } catch (e) {
                  // 590
                  if (callback) {
                    // 591
                    callback(e); // 592
                    return null; // 593
                  } // 594
                  //
                  throw e; // 595
                } // 596
              } // 597
              //
              return update; // 548
            }(); /**                                                                                                        // 548
                  * @summary Remove documents from the collection                                                           //
                  * @locus Anywhere                                                                                         //
                  * @method remove                                                                                          //
                  * @memberOf Mongo.Collection                                                                              //
                  * @instance                                                                                               //
                  * @param {MongoSelector} selector Specifies which documents to remove                                     //
                  * @param {Function} [callback] Optional.  If present, called with an error object as its argument.        //
                  */ //
            //
            Mongo.Collection.prototype.remove = function () {
              // 608
              function remove(selector, callback) {
                // 608
                selector = Mongo.Collection._rewriteSelector(selector); // 609
                var wrappedCallback = wrapCallback(callback); // 611
                //
                if (this._isRemoteCollection()) {
                  // 613
                  return this._callMutatorMethod("remove", [selector], wrappedCallback); // 614
                } // it's my collection.  descend into the collection object                                                // 615
                // and propagate any exception.                                                                             // 618
                //
                //
                try {
                  // 619
                  // If the user provided a callback and the collection implements this                                     // 620
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 621
                  // result will be returned through the callback instead.                                                  // 622
                  return this._collection.remove(selector, wrappedCallback); // 623
                } catch (e) {
                  // 624
                  if (callback) {
                    // 625
                    callback(e); // 626
                    return null; // 627
                  } // 628
                  //
                  throw e; // 629
                } // 630
              } // 631
              //
              return remove; // 608
            }(); // Determine if this collection is simply a minimongo representation of a real                             // 608
            // database on another server                                                                                   // 634
            //
            //
            Mongo.Collection.prototype._isRemoteCollection = function () {
              // 635
              function _isRemoteCollection() {
                // 635
                // XXX see #MeteorServerNull                                                                                // 636
                return this._connection && this._connection !== Meteor.server; // 637
              } // 638
              //
              return _isRemoteCollection; // 635
            }(); // Convert the callback to not return a result if there is an error                                        // 635
            //
            //
            function wrapCallback(callback, convertResult) {
              // 641
              if (!callback) {
                // 642
                return; // 643
              } // If no convert function was passed in, just use a "blank function"                                        // 644
              //
              //
              convertResult = convertResult || _.identity; // 647
              return function (error, result) {
                // 649
                callback(error, !error && convertResult(result)); // 650
              }; // 651
            } /**                                                                                                           // 652
               * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
               * @locus Anywhere                                                                                            //
               * @param {MongoSelector} selector Specifies which documents to modify                                        //
               * @param {MongoModifier} modifier Specifies how to modify the documents                                      //
               * @param {Object} [options]                                                                                  //
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */ //
            //
            Mongo.Collection.prototype.upsert = function () {
              // 663
              function upsert(selector, modifier, options, callback) {
                // 663
                if (!callback && typeof options === "function") {
                  // 665
                  callback = options; // 666
                  options = {}; // 667
                } // 668
                //
                var updateOptions = _.extend({}, options, { // 670
                  _returnObject: true, // 671
                  upsert: true // 672
                }); // 670
                //
                return this.update(selector, modifier, updateOptions, callback); // 675
              } // 676
              //
              return upsert; // 663
            }(); // We'll actually design an index API later. For now, we just pass through to                              // 663
            // Mongo's, but make it synchronous.                                                                            // 679
            //
            //
            Mongo.Collection.prototype._ensureIndex = function (index, options) {
              // 680
              var self = this; // 681
              if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections"); // 682
              //
              self._collection._ensureIndex(index, options); // 684
            }; // 685
            //
            Mongo.Collection.prototype._dropIndex = function (index) {
              // 686
              var self = this; // 687
              if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections"); // 688
              //
              self._collection._dropIndex(index); // 690
            }; // 691
            //
            Mongo.Collection.prototype._dropCollection = function () {
              // 692
              var self = this; // 693
              if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");
              //
              self._collection.dropCollection(); // 696
            }; // 697
            //
            Mongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {
              // 698
              var self = this; // 699
              if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");
              //
              self._collection._createCappedCollection(byteSize, maxDocuments); // 702
            }; /**                                                                                                          // 703
                * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                * @locus Server                                                                                             //
                */ //
            //
            Mongo.Collection.prototype.rawCollection = function () {
              // 709
              var self = this; // 710
              //
              if (!self._collection.rawCollection) {
                // 711
                throw new Error("Can only call rawCollection on server collections"); // 712
              } // 713
              //
              return self._collection.rawCollection(); // 714
            }; /**                                                                                                          // 715
                * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                * @locus Server                                                                                             //
                */ //
            //
            Mongo.Collection.prototype.rawDatabase = function () {
              // 721
              var self = this; // 722
              //
              if (!(self._driver.mongo && self._driver.mongo.db)) {
                // 723
                throw new Error("Can only call rawDatabase on server collections"); // 724
              } // 725
              //
              return self._driver.mongo.db; // 726
            }; /**                                                                                                          // 727
                * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
                * @locus Anywhere                                                                                           //
                * @class                                                                                                    //
                * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create    //
                */ //
            //
            Mongo.ObjectID = MongoID.ObjectID; /**                                                                          // 736
                                                * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
                                                * @class                                                                    //
                                                * @instanceName cursor                                                      //
                                                */ //
            Mongo.Cursor = LocalCollection.Cursor; /**                                                                      // 743
                                                    * @deprecated in 0.9.1                                                  //
                                                    */ //
            Mongo.Collection.Cursor = Mongo.Cursor; /**                                                                     // 748
                                                     * @deprecated in 0.9.1                                                 //
                                                     */ //
            Mongo.Collection.ObjectID = Mongo.ObjectID; /**                                                                 // 753
                                                         * @deprecated in 0.9.1                                             //
                                                         */ //
            Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package                      // 758
            //
            _.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype); // 761
            //
            function popCallbackFromArgs(args) {
              // 763
              // Pull off any callback (or perhaps a 'callback' variable that was passed                                    // 764
              // in undefined, like how 'upsert' does it).                                                                  // 765
              if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                // 766
                return args.pop(); // 769
              } // 770
            } // 771
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require("./node_modules/meteor/mongo/local_collection_driver.js");
  _require("./node_modules/meteor/mongo/collection.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.mongo = {}, {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['blaze-html-templates'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var ReactiveVar;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/reactive-var/reactive-var.js                                                                        //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /*                                                                                                              // 1
     * ## [new] ReactiveVar(initialValue, [equalsFunc])                                                             // 2
     *                                                                                                              // 3
     * A ReactiveVar holds a single value that can be get and set,                                                  // 4
     * such that calling `set` will invalidate any Computations that                                                // 5
     * called `get`, according to the usual contract for reactive                                                   // 6
     * data sources.                                                                                                // 7
     *                                                                                                              // 8
     * A ReactiveVar is much like a Session variable -- compare `foo.get()`                                         // 9
     * to `Session.get("foo")` -- but it doesn't have a global name and isn't                                       // 10
     * automatically migrated across hot code pushes.  Also, while Session                                          // 11
     * variables can only hold JSON or EJSON, ReactiveVars can hold any value.                                      // 12
     *                                                                                                              // 13
     * An important property of ReactiveVars, which is sometimes the reason                                         // 14
     * to use one, is that setting the value to the same value as before has                                        // 15
     * no effect, meaning ReactiveVars can be used to absorb extra                                                  // 16
     * invalidations that wouldn't serve a purpose.  However, by default,                                           // 17
     * ReactiveVars are extremely conservative about what changes they                                              // 18
     * absorb.  Calling `set` with an object argument will *always* trigger                                         // 19
     * invalidations, because even if the new value is `===` the old value,                                         // 20
     * the object may have been mutated.  You can change the default behavior                                       // 21
     * by passing a function of two arguments, `oldValue` and `newValue`,                                           // 22
     * to the constructor as `equalsFunc`.                                                                          // 23
     *                                                                                                              // 24
     * This class is extremely basic right now, but the idea is to evolve                                           // 25
     * it into the ReactiveVar of Geoff's Lickable Forms proposal.                                                  // 26
     */ // 27
    // 28
    /**                                                                                                             // 29
     * @class                                                                                                       // 30
     * @instanceName reactiveVar                                                                                    // 31
     * @summary Constructor for a ReactiveVar, which represents a single reactive variable.                         // 32
     * @locus Client                                                                                                // 33
     * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
     * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
     */ // 36
    ReactiveVar = function (initialValue, equalsFunc) {
      // 37
      if (!(this instanceof ReactiveVar)) // 38
        // called without `new`                                                                                     // 39
        return new ReactiveVar(initialValue, equalsFunc); // 40
      // 41
      this.curValue = initialValue; // 42
      this.equalsFunc = equalsFunc; // 43
      this.dep = new Tracker.Dependency(); // 44
    }; // 45
    // 46
    ReactiveVar._isEqual = function (oldValue, newValue) {
      // 47
      var a = oldValue,
          b = newValue; // 48
      // Two values are "equal" here if they are `===` and are                                                      // 49
      // number, boolean, string, undefined, or null.                                                               // 50
      if (a !== b) // 51
        return false; // 52
      else // 53
        return !a || typeof a === 'number' || typeof a === 'boolean' || // 54
        typeof a === 'string'; // 55
    }; // 56
    // 57
    /**                                                                                                             // 58
     * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.                   // 59
     * @locus Client                                                                                                // 60
     */ // 61
    ReactiveVar.prototype.get = function () {
      // 62
      if (Tracker.active) // 63
        this.dep.depend(); // 64
      // 65
      return this.curValue; // 66
    }; // 67
    // 68
    /**                                                                                                             // 69
     * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
     * @locus Client                                                                                                // 71
     * @param {Any} newValue                                                                                        // 72
     */ // 73
    ReactiveVar.prototype.set = function (newValue) {
      // 74
      var oldValue = this.curValue; // 75
      // 76
      if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue)) // 77
        // value is same as last time                                                                               // 78
        return; // 79
      // 80
      this.curValue = newValue; // 81
      this.dep.changed(); // 82
    }; // 83
    // 84
    ReactiveVar.prototype.toString = function () {
      // 85
      return 'ReactiveVar{' + this.get() + '}'; // 86
    }; // 87
    // 88
    ReactiveVar.prototype._numListeners = function () {
      // 89
      // Tests want to know.                                                                                        // 90
      // Accesses a private field of Tracker.Dependency.                                                            // 91
      var count = 0; // 92
      for (var id in this.dep._dependentsById) // 93
      count++; // 94
      return count; // 95
    }; // 96
    // 97
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['reactive-var'] = {}, {
    ReactiveVar: ReactiveVar
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['standard-minifier-css'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['standard-minifier-js'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['shell-server'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package.autopublish = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['barbatus:typescript-compiler'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['barbatus:typescript'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var WebApp;

  var _require = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function () {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/webapp/webapp_client.js                                  //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            WebApp = { // 1
              _isCssLoaded: function () {
                // 3
                if (document.styleSheets.length === 0) return true; // 4
                return _.find(document.styleSheets, function (sheet) {
                  // 7
                  if (sheet.cssText && !sheet.cssRules) // IE8                   // 8
                    return !sheet.cssText.match(/meteor-css-not-found-error/); // 9
                  return !_.find(sheet.cssRules, function (rule) {
                    // 10
                    return rule.selectorText === '.meteor-css-not-found-error'; // 11
                  }); // 12
                }); // 13
              } // 14
            }; // 1
            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require("./node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.webapp = {}, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Package-scope variables */
  var LivedataTest;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.livedata = {}, {
    DDP: DDP,
    LivedataTest: LivedataTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var process = Package.modules.process;
  var Promise = Package.promise.Promise;
  var DDP = Package['ddp-client'].DDP;
  var check = Package.check.check;
  var Match = Package.check.Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/client.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor; // 1
            var cache = _require("./cache.js"); // 2
            // 3
            // Call module.dynamicImport(id) to fetch a module and any/all of its          // 4
            // dependencies that have not already been fetched, and evaluate them as       // 5
            // soon as they arrive. This runtime API makes it very easy to implement       // 6
            // ECMAScript dynamic import(...) syntax.                                      // 7
            Module.prototype.dynamicImport = function (id) {
              // 8
              var module = this; // 9
              return module.prefetch(id).then(function () {
                // 10
                return getNamespace(module, id); // 11
              }); // 12
            }; // 13
            // 14
            // Called by Module.prototype.prefetch if there are any missing dynamic        // 15
            // modules that need to be fetched.                                            // 16
            meteorInstall.fetch = function (ids) {
              // 17
              var tree = Object.create(null); // 18
              var versions = Object.create(null); // 19
              var dynamicVersions = _require("./dynamic-versions.js"); // 20
              var missing; // 21
              // 22
              Object.keys(ids).forEach(function (id) {
                // 23
                var version = getFromTree(dynamicVersions, id); // 24
                if (version) {
                  // 25
                  versions[id] = version; // 26
                } else {
                  // 27
                  addToTree(missing = missing || Object.create(null), id, 1); // 28
                } // 29
              }); // 30
              // 31
              return cache.checkMany(versions).then(function (sources) {
                // 32
                Object.keys(sources).forEach(function (id) {
                  // 33
                  var source = sources[id]; // 34
                  if (source) {
                    // 35
                    var info = ids[id]; // 36
                    addToTree(tree, id, makeModuleFunction(id, source, info.options)); // 37
                  } else {
                    // 38
                    addToTree(missing = missing || Object.create(null), id, 1); // 39
                  } // 40
                }); // 41
                // 42
                return missing && fetchMissing(missing).then(function (results) {
                  // 43
                  var versionsAndSourcesById = Object.create(null); // 44
                  var flatResults = flattenModuleTree(results); // 45
                  // 46
                  Object.keys(flatResults).forEach(function (id) {
                    // 47
                    var source = flatResults[id]; // 48
                    var info = ids[id]; // 49
                    // 50
                    addToTree(tree, id, makeModuleFunction(id, source, info.options)); // 51
                    // 52
                    var version = getFromTree(dynamicVersions, id); // 53
                    if (version) {
                      // 54
                      versionsAndSourcesById[id] = { // 55
                        version: version, // 56
                        source: source // 57
                      }; // 58
                    } // 59
                  }); // 60
                  // 61
                  cache.setMany(versionsAndSourcesById); // 62
                }); // 63
                // 64
              }).then(function () {
                // 65
                return tree; // 66
              }); // 67
            }; // 68
            // 69
            function flattenModuleTree(tree) {
              // 70
              var parts = [""]; // 71
              var result = Object.create(null); // 72
              // 73
              function walk(t) {
                // 74
                if (t && typeof t === "object") {
                  // 75
                  Object.keys(t).forEach(function (key) {
                    // 76
                    parts.push(key); // 77
                    walk(t[key]); // 78
                    parts.pop(); // 79
                  }); // 80
                } else if (typeof t === "string") {
                  // 81
                  result[parts.join("/")] = t; // 82
                } // 83
              } // 84
              // 85
              walk(tree); // 86
              // 87
              return result; // 88
            } // 89
            // 90
            function makeModuleFunction(id, source, options) {
              // 91
              // By calling (options && options.eval || eval) in a wrapper function,       // 92
              // we delay the cost of parsing and evaluating the module code until the     // 93
              // module is first imported.                                                 // 94
              return function () {
                // 95
                // If an options.eval function was provided in the second argument to      // 96
                // meteorInstall when this bundle was first installed, use that            // 97
                // function to parse and evaluate the dynamic module code in the scope     // 98
                // of the package. Otherwise fall back to indirect (global) eval.          // 99
                return (options && options.eval || eval)( // 100
                // Wrap the function(require,exports,module){...} expression in          // 101
                // parentheses to force it to be parsed as an expression.                // 102
                "(" + source + ")\n//# sourceURL=" + id // 103
                ).apply(this, arguments); // 104
              }; // 105
            } // 106
            // 107
            function fetchMissing(missingTree) {
              // 108
              // Update lastFetchMissingPromise immediately, without waiting for           // 109
              // the results to be delivered.                                              // 110
              return new Promise(function (resolve, reject) {
                // 111
                Meteor.call( // 112
                "__dynamicImport", // 113
                missingTree, // 114
                function (error, resultsTree) {
                  // 115
                  error ? reject(error) : resolve(resultsTree); // 116
                } // 117
                ); // 118
              }); // 119
            } // 120
            // 121
            function getFromTree(tree, id) {
              // 122
              id.split("/").every(function (part) {
                // 123
                return !part || (tree = tree[part]); // 124
              }); // 125
              // 126
              return tree; // 127
            } // 128
            // 129
            function addToTree(tree, id, value) {
              // 130
              var parts = id.split("/"); // 131
              var lastIndex = parts.length - 1; // 132
              parts.forEach(function (part, i) {
                // 133
                if (part) {
                  // 134
                  tree = tree[part] = tree[part] || ( // 135
                  i < lastIndex ? Object.create(null) : value); // 136
                } // 137
              }); // 138
            } // 139
            // 140
            function getNamespace(_module2, id) {
              // 141
              var namespace; // 142
              // 143
              _module2.watch(_module2.require(id), { // 144
                "*": function (ns) {
                  // 145
                  namespace = ns; // 146
                } // 147
              }); // 148
              // 149
              // This helps with Babel interop, since we're not just returning the         // 150
              // module.exports object.                                                    // 151
              Object.defineProperty(namespace, "__esModule", { // 152
                value: true, // 153
                enumerable: false // 154
              }); // 155
              // 156
              return namespace; // 157
            } // 158
            // 159
            /////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function (_require3, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/cache.js                                            //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var hasOwn = Object.prototype.hasOwnProperty; // 1
            var dbPromise; // 2
            // 3
            var canUseCache = // 4
            // The server doesn't benefit from dynamic module fetching, and almost       // 5
            // certainly doesn't support IndexedDB.                                      // 6
            Meteor.isClient && // 7
            // Cordova bundles all modules into the monolithic initial bundle, so        // 8
            // the dynamic module cache won't be necessary.                              // 9
            !Meteor.isCordova && // 10
            // Caching can be confusing in development, and is designed to be a          // 11
            // transparent optimization for production performance.                      // 12
            Meteor.isProduction; // 13
            // 14
            function getIDB() {
              // 15
              if (typeof indexedDB !== "undefined") return indexedDB; // 16
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB; // 17
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB; // 18
              if (typeof OIndexedDB !== "undefined") return OIndexedDB; // 19
              if (typeof msIndexedDB !== "undefined") return msIndexedDB; // 20
            } // 21
            // 22
            function withDB(callback) {
              // 23
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                // 24
                var idb = getIDB(); // 25
                if (!idb) {
                  // 26
                  throw new Error("IndexedDB not available"); // 27
                } // 28
                // 29
                // Incrementing the version number causes all existing object stores       // 30
                // to be deleted and recreates those specified by objectStoreMap.          // 31
                var request = idb.open("MeteorDynamicImportCache", 2); // 32
                // 33
                request.onupgradeneeded = function (event) {
                  // 34
                  var db = event.target.result; // 35
                  // 36
                  // It's fine to delete existing object stores since onupgradeneeded      // 37
                  // is only called when we change the DB version number, and the data     // 38
                  // we're storing is disposable/reconstructible.                          // 39
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db); // 40
                  // 41
                  Object.keys(objectStoreMap).forEach(function (name) {
                    // 42
                    db.createObjectStore(name, objectStoreMap[name]); // 43
                  }); // 44
                }; // 45
                // 46
                request.onerror = makeOnError(reject, "indexedDB.open"); // 47
                request.onsuccess = function (event) {
                  // 48
                  resolve(event.target.result); // 49
                }; // 50
              }); // 51
              // 52
              return dbPromise.then(callback, function (error) {
                // 53
                return callback(null); // 54
              }); // 55
            } // 56
            // 57
            var objectStoreMap = { // 58
              sourcesByVersion: { keyPath: "version" // 59
              } }; // 60
            // 61
            function makeOnError(reject, source) {
              // 62
              return function (event) {
                // 63
                reject(new Error( // 64
                "IndexedDB failure in " + source + " " + // 65
                JSON.stringify(event.target) // 66
                )); // 67
                // 68
                // Returning true from an onerror callback function prevents an            // 69
                // InvalidStateError in Firefox during Private Browsing. Silencing         // 70
                // that error is safe because we handle the error more gracefully by       // 71
                // passing it to the Promise reject function above.                        // 72
                // https://github.com/meteor/meteor/issues/8697                            // 73
                return true; // 74
              }; // 75
            } // 76
            // 77
            var checkCount = 0; // 78
            // 79
            _exports3.checkMany = function (versions) {
              // 80
              var ids = Object.keys(versions); // 81
              var sourcesById = Object.create(null); // 82
              // 83
              // Initialize sourcesById with null values to indicate all sources are       // 84
              // missing (unless replaced with actual sources below).                      // 85
              ids.forEach(function (id) {
                // 86
                sourcesById[id] = null; // 87
              }); // 88
              // 89
              if (!canUseCache) {
                // 90
                return Promise.resolve(sourcesById); // 91
              } // 92
              // 93
              return withDB(function (db) {
                // 94
                if (!db) {
                  // 95
                  // We thought we could used IndexedDB, but something went wrong          // 96
                  // while opening the database, so err on the side of safety.             // 97
                  return sourcesById; // 98
                } // 99
                // 100
                var txn = db.transaction([// 101
                "sourcesByVersion" // 102
                ], "readonly"); // 103
                // 104
                var sourcesByVersion = txn.objectStore("sourcesByVersion"); // 105
                // 106
                ++checkCount; // 107
                // 108
                function finish() {
                  // 109
                  --checkCount; // 110
                  return sourcesById; // 111
                } // 112
                // 113
                return Promise.all(ids.map(function (id) {
                  // 114
                  return new Promise(function (resolve, reject) {
                    // 115
                    var version = versions[id]; // 116
                    if (version) {
                      // 117
                      var sourceRequest = sourcesByVersion.get(versions[id]); // 118
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        // 120
                        var result = event.target.result; // 121
                        if (result) {
                          // 122
                          sourcesById[id] = result.source; // 123
                        } // 124
                        resolve(); // 125
                      }; // 126
                    } else resolve(); // 127
                  }); // 128
                })).then(finish, finish); // 129
              }); // 130
            }; // 131
            // 132
            var pendingVersionsAndSourcesById = Object.create(null); // 133
            // 134
            _exports3.setMany = function (versionsAndSourcesById) {
              // 135
              if (canUseCache) {
                // 136
                Object.assign( // 137
                pendingVersionsAndSourcesById, // 138
                versionsAndSourcesById // 139
                ); // 140
                // 141
                // Delay the call to flushSetMany so that it doesn't contribute to the     // 142
                // amount of time it takes to call module.dynamicImport.                   // 143
                if (!flushSetMany.timer) {
                  // 144
                  flushSetMany.timer = setTimeout(flushSetMany, 100); // 145
                } // 146
              } // 147
            }; // 148
            // 149
            function flushSetMany() {
              // 150
              if (checkCount > 0) {
                // 151
                // If checkMany is currently underway, postpone the flush until later,     // 152
                // since updating the cache is less important than reading from it.        // 153
                return flushSetMany.timer = setTimeout(flushSetMany, 100); // 154
              } // 155
              // 156
              flushSetMany.timer = null; // 157
              // 158
              var versionsAndSourcesById = pendingVersionsAndSourcesById; // 159
              pendingVersionsAndSourcesById = Object.create(null); // 160
              // 161
              return withDB(function (db) {
                // 162
                if (!db) {
                  // 163
                  // We thought we could used IndexedDB, but something went wrong          // 164
                  // while opening the database, so err on the side of safety.             // 165
                  return; // 166
                } // 167
                // 168
                var setTxn = db.transaction([// 169
                "sourcesByVersion" // 170
                ], "readwrite"); // 171
                // 172
                var sourcesByVersion = setTxn.objectStore("sourcesByVersion"); // 173
                // 174
                return Promise.all( // 175
                Object.keys(versionsAndSourcesById).map(function (id) {
                  // 176
                  var info = versionsAndSourcesById[id]; // 177
                  return new Promise(function (resolve, reject) {
                    // 178
                    var request = sourcesByVersion.put({ // 179
                      version: info.version, // 180
                      source: info.source // 181
                    }); // 182
                    request.onerror = makeOnError(reject, "sourcesByVersion.put"); // 183
                    request.onsuccess = resolve; // 184
                  }); // 185
                }) // 186
                ); // 187
              }); // 188
            } // 189
            // 190
            /////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function (_require4, _exports4, _module4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/dynamic-versions.js                                 //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in                   // 1
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic              // 2
            // modules, for use in client.js and cache.js.                                 // 3
            _module4.exports = {}; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['dynamic-import'] = _exports2;
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['hot-code-push'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

	/* Imports */
	var Meteor = Package.meteor.Meteor;
	var global = Package.meteor.global;
	var meteorEnv = Package.meteor.meteorEnv;
	var meteorInstall = Package.modules.meteorInstall;
	var process = Package.modules.process;

	/* Package-scope variables */
	var $, jQuery;

	var _require2 = meteorInstall({ "node_modules": { "meteor": { "jquery": { "main.js": function (_require, _exports) {

						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//                                                                                                                   //
						// packages/jquery/main.js                                                                                           //
						//                                                                                                                   //
						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//
						var global = this; // 1
						// 2
						try {
							// 3
							var jQuery = _require("jquery"); // 4
						} catch (e) {
							// 5
							jQuery = _require("./jquery.js"); // 6
						} // 7
						// 8
						// Provide values for the exported variables of the jquery package.                                                  // 9
						_exports.$ = _exports.jQuery = jQuery; // 10
						// 11
						// There's no stopping legacy code from referring to window.$ or                                                     // 12
						// window.jQuery, so we have to keep defining those properties globally,                                             // 13
						// but at least the exports of this package will be reliable.                                                        // 14
						global.$ = global.$ || jQuery; // 15
						global.jQuery = global.jQuery || jQuery; // 16
						// 17
						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					}, "jquery.js": function (_require3, _exports3, _module) {

						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//                                                                                                                   //
						// packages/jquery/jquery.js                                                                                         //
						//                                                                                                                   //
						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//
						/*!                                                                                                                  // 1
       * jQuery JavaScript Library v1.11.2                                                                                 // 2
       * http://jquery.com/                                                                                                // 3
       *                                                                                                                   // 4
       * Includes Sizzle.js                                                                                                // 5
       * http://sizzlejs.com/                                                                                              // 6
       *                                                                                                                   // 7
       * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors                                               // 8
       * Released under the MIT license                                                                                    // 9
       * http://jquery.org/license                                                                                         // 10
       *                                                                                                                   // 11
       * Date: 2014-12-17T15:27Z                                                                                           // 12
       */ // 13
						// 14
						(function (global, factory) {
							// 15
							// 16
							if (typeof _module === "object" && typeof _module.exports === "object") {
								// 17
								// For CommonJS and CommonJS-like environments where a proper window is present,                                   // 18
								// execute the factory and get jQuery                                                                              // 19
								// For environments that do not inherently posses a window with a document                                         // 20
								// (such as Node.js), expose a jQuery-making factory as module.exports                                             // 21
								// This accentuates the need for the creation of a real window                                                     // 22
								// e.g. var jQuery = require("jquery")(window);                                                                    // 23
								// See ticket #14549 for more info                                                                                 // 24
								_module.exports = global.document ? // 25
								factory(global, true) : // 26
								function (w) {
									// 27
									if (!w.document) {
										// 28
										throw new Error("jQuery requires a window with a document"); // 29
									} // 30
									return factory(w); // 31
								}; // 32
							} else {
								// 33
								factory(global); // 34
							} // 35
							// 36
							// Pass this if window is not defined yet                                                                            // 37
						})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
							// 38
							// 39
							// Can't do this because several apps including ASP.NET trace                                                        // 40
							// the stack via arguments.caller.callee and Firefox dies if                                                         // 41
							// you try to trace through "use strict" call chains. (#13335)                                                       // 42
							// Support: Firefox 18+                                                                                              // 43
							//                                                                                                                   // 44
							// 45
							var deletedIds = []; // 46
							// 47
							var slice = deletedIds.slice; // 48
							// 49
							var concat = deletedIds.concat; // 50
							// 51
							var push = deletedIds.push; // 52
							// 53
							var indexOf = deletedIds.indexOf; // 54
							// 55
							var class2type = {}; // 56
							// 57
							var toString = class2type.toString; // 58
							// 59
							var hasOwn = class2type.hasOwnProperty; // 60
							// 61
							var support = {}; // 62
							// 63
							// 64
							// 65
							var // 66
							version = "1.11.2",
							    // 67
							// 68
							// Define a local copy of jQuery                                                                                    // 69
							jQuery = function (selector, context) {
								// 70
								// The jQuery object is actually just the init constructor 'enhanced'                                              // 71
								// Need init if jQuery is called (just allow error to be thrown if not included)                                   // 72
								return new jQuery.fn.init(selector, context); // 73
							},
							    // 74
							// 75
							// Support: Android<4.1, IE<9                                                                                       // 76
							// Make sure we trim BOM and NBSP                                                                                   // 77
							rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
							    // 78
							// 79
							// Matches dashed string for camelizing                                                                             // 80
							rmsPrefix = /^-ms-/,
							    // 81
							rdashAlpha = /-([\da-z])/gi,
							    // 82
							// 83
							// Used by jQuery.camelCase as callback to replace()                                                                // 84
							fcamelCase = function (all, letter) {
								// 85
								return letter.toUpperCase(); // 86
							}; // 87
							// 88
							jQuery.fn = jQuery.prototype = { // 89
								// The current version of jQuery being used                                                                         // 90
								jquery: version, // 91
								// 92
								constructor: jQuery, // 93
								// 94
								// Start with an empty selector                                                                                     // 95
								selector: "", // 96
								// 97
								// The default length of a jQuery object is 0                                                                       // 98
								length: 0, // 99
								// 100
								toArray: function () {
									// 101
									return slice.call(this); // 102
								}, // 103
								// 104
								// Get the Nth element in the matched element set OR                                                                // 105
								// Get the whole matched element set as a clean array                                                               // 106
								get: function (num) {
									// 107
									return num != null ? // 108
									// 109
									// Return just the one element from the set                                                                       // 110
									num < 0 ? this[num + this.length] : this[num] : // 111
									// 112
									// Return all the elements in a clean array                                                                       // 113
									slice.call(this); // 114
								}, // 115
								// 116
								// Take an array of elements and push it onto the stack                                                             // 117
								// (returning the new matched element set)                                                                          // 118
								pushStack: function (elems) {
									// 119
									// 120
									// Build a new jQuery matched element set                                                                          // 121
									var ret = jQuery.merge(this.constructor(), elems); // 122
									// 123
									// Add the old object onto the stack (as a reference)                                                              // 124
									ret.prevObject = this; // 125
									ret.context = this.context; // 126
									// 127
									// Return the newly-formed element set                                                                             // 128
									return ret; // 129
								}, // 130
								// 131
								// Execute a callback for every element in the matched set.                                                         // 132
								// (You can seed the arguments with an array of args, but this is                                                   // 133
								// only used internally.)                                                                                           // 134
								each: function (callback, args) {
									// 135
									return jQuery.each(this, callback, args); // 136
								}, // 137
								// 138
								map: function (callback) {
									// 139
									return this.pushStack(jQuery.map(this, function (elem, i) {
										// 140
										return callback.call(elem, i, elem); // 141
									})); // 142
								}, // 143
								// 144
								slice: function () {
									// 145
									return this.pushStack(slice.apply(this, arguments)); // 146
								}, // 147
								// 148
								first: function () {
									// 149
									return this.eq(0); // 150
								}, // 151
								// 152
								last: function () {
									// 153
									return this.eq(-1); // 154
								}, // 155
								// 156
								eq: function (i) {
									// 157
									var len = this.length,
									    // 158
									j = +i + (i < 0 ? len : 0); // 159
									return this.pushStack(j >= 0 && j < len ? [this[j]] : []); // 160
								}, // 161
								// 162
								end: function () {
									// 163
									return this.prevObject || this.constructor(null); // 164
								}, // 165
								// 166
								// For internal use only.                                                                                           // 167
								// Behaves like an Array's method, not like a jQuery method.                                                        // 168
								push: push, // 169
								sort: deletedIds.sort, // 170
								splice: deletedIds.splice // 171
							}; // 172
							// 173
							jQuery.extend = jQuery.fn.extend = function () {
								// 174
								var src,
								    copyIsArray,
								    copy,
								    name,
								    options,
								    clone,
								    // 175
								target = arguments[0] || {},
								    // 176
								i = 1,
								    // 177
								length = arguments.length,
								    // 178
								deep = false; // 179
								// 180
								// Handle a deep copy situation                                                                                     // 181
								if (typeof target === "boolean") {
									// 182
									deep = target; // 183
									// 184
									// skip the boolean and the target                                                                                 // 185
									target = arguments[i] || {}; // 186
									i++; // 187
								} // 188
								// 189
								// Handle case when target is a string or something (possible in deep copy)                                         // 190
								if (typeof target !== "object" && !jQuery.isFunction(target)) {
									// 191
									target = {}; // 192
								} // 193
								// 194
								// extend jQuery itself if only one argument is passed                                                              // 195
								if (i === length) {
									// 196
									target = this; // 197
									i--; // 198
								} // 199
								// 200
								for (; i < length; i++) {
									// 201
									// Only deal with non-null/undefined values                                                                        // 202
									if ((options = arguments[i]) != null) {
										// 203
										// Extend the base object                                                                                         // 204
										for (name in options) {
											// 205
											src = target[name]; // 206
											copy = options[name]; // 207
											// 208
											// Prevent never-ending loop                                                                                     // 209
											if (target === copy) {
												// 210
												continue; // 211
											} // 212
											// 213
											// Recurse if we're merging plain objects or arrays                                                              // 214
											if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
												// 215
												if (copyIsArray) {
													// 216
													copyIsArray = false; // 217
													clone = src && jQuery.isArray(src) ? src : []; // 218
													// 219
												} else {
													// 220
													clone = src && jQuery.isPlainObject(src) ? src : {}; // 221
												} // 222
												// 223
												// Never move original objects, clone them                                                                      // 224
												target[name] = jQuery.extend(deep, clone, copy); // 225
												// 226
												// Don't bring in undefined values                                                                               // 227
											} else if (copy !== undefined) {
												// 228
												target[name] = copy; // 229
											} // 230
										} // 231
									} // 232
								} // 233
								// 234
								// Return the modified object                                                                                       // 235
								return target; // 236
							}; // 237
							// 238
							jQuery.extend({ // 239
								// Unique for each copy of jQuery on the page                                                                       // 240
								expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""), // 241
								// 242
								// Assume jQuery is ready without the ready module                                                                  // 243
								isReady: true, // 244
								// 245
								error: function (msg) {
									// 246
									throw new Error(msg); // 247
								}, // 248
								// 249
								noop: function () {}, // 250
								// 251
								// See test/unit/core.js for details concerning isFunction.                                                         // 252
								// Since version 1.3, DOM methods and functions like alert                                                          // 253
								// aren't supported. They return false on IE (#2968).                                                               // 254
								isFunction: function (obj) {
									// 255
									return jQuery.type(obj) === "function"; // 256
								}, // 257
								// 258
								isArray: Array.isArray || function (obj) {
									// 259
									return jQuery.type(obj) === "array"; // 260
								}, // 261
								// 262
								isWindow: function (obj) {
									// 263
									/* jshint eqeqeq: false */ // 264
									return obj != null && obj == obj.window; // 265
								}, // 266
								// 267
								isNumeric: function (obj) {
									// 268
									// parseFloat NaNs numeric-cast false positives (null|true|false|"")                                               // 269
									// ...but misinterprets leading-number strings, particularly hex literals ("0x...")                                // 270
									// subtraction forces infinities to NaN                                                                            // 271
									// adding 1 corrects loss of precision from parseFloat (#15100)                                                    // 272
									return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0; // 273
								}, // 274
								// 275
								isEmptyObject: function (obj) {
									// 276
									var name; // 277
									for (name in obj) {
										// 278
										return false; // 279
									} // 280
									return true; // 281
								}, // 282
								// 283
								isPlainObject: function (obj) {
									// 284
									var key; // 285
									// 286
									// Must be an Object.                                                                                              // 287
									// Because of IE, we also have to check the presence of the constructor property.                                  // 288
									// Make sure that DOM nodes and window objects don't pass through, as well                                         // 289
									if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
										// 290
										return false; // 291
									} // 292
									// 293
									try {
										// 294
										// Not own constructor property must be Object                                                                    // 295
										if (obj.constructor && // 296
										!hasOwn.call(obj, "constructor") && // 297
										!hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
											// 298
											return false; // 299
										} // 300
									} catch (e) {
										// 301
										// IE8,9 Will throw exceptions on certain host objects #9897                                                      // 302
										return false; // 303
									} // 304
									// 305
									// Support: IE<9                                                                                                   // 306
									// Handle iteration over inherited properties before own properties.                                               // 307
									if (support.ownLast) {
										// 308
										for (key in obj) {
											// 309
											return hasOwn.call(obj, key); // 310
										} // 311
									} // 312
									// 313
									// Own properties are enumerated firstly, so to speed up,                                                          // 314
									// if last one is own, then all properties are own.                                                                // 315
									for (key in obj) {} // 316
									// 317
									return key === undefined || hasOwn.call(obj, key); // 318
								}, // 319
								// 320
								type: function (obj) {
									// 321
									if (obj == null) {
										// 322
										return obj + ""; // 323
									} // 324
									return typeof obj === "object" || typeof obj === "function" ? // 325
									class2type[toString.call(obj)] || "object" : // 326
									typeof obj; // 327
								}, // 328
								// 329
								// Evaluates a script in a global context                                                                           // 330
								// Workarounds based on findings by Jim Driscoll                                                                    // 331
								// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context                          // 332
								globalEval: function (data) {
									// 333
									if (data && jQuery.trim(data)) {
										// 334
										// We use execScript on Internet Explorer                                                                         // 335
										// We use an anonymous function so that context is window                                                         // 336
										// rather than jQuery in Firefox                                                                                  // 337
										(window.execScript || function (data) {
											// 338
											window["eval"].call(window, data); // 339
										})(data); // 340
									} // 341
								}, // 342
								// 343
								// Convert dashed to camelCase; used by the css and data modules                                                    // 344
								// Microsoft forgot to hump their vendor prefix (#9572)                                                             // 345
								camelCase: function (string) {
									// 346
									return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase); // 347
								}, // 348
								// 349
								nodeName: function (elem, name) {
									// 350
									return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase(); // 351
								}, // 352
								// 353
								// args is for internal usage only                                                                                  // 354
								each: function (obj, callback, args) {
									// 355
									var value,
									    // 356
									i = 0,
									    // 357
									length = obj.length,
									    // 358
									isArray = isArraylike(obj); // 359
									// 360
									if (args) {
										// 361
										if (isArray) {
											// 362
											for (; i < length; i++) {
												// 363
												value = callback.apply(obj[i], args); // 364
												// 365
												if (value === false) {
													// 366
													break; // 367
												} // 368
											} // 369
										} else {
											// 370
											for (i in obj) {
												// 371
												value = callback.apply(obj[i], args); // 372
												// 373
												if (value === false) {
													// 374
													break; // 375
												} // 376
											} // 377
										} // 378
										// 379
										// A special, fast, case for the most common use of each                                                           // 380
									} else {
										// 381
										if (isArray) {
											// 382
											for (; i < length; i++) {
												// 383
												value = callback.call(obj[i], i, obj[i]); // 384
												// 385
												if (value === false) {
													// 386
													break; // 387
												} // 388
											} // 389
										} else {
											// 390
											for (i in obj) {
												// 391
												value = callback.call(obj[i], i, obj[i]); // 392
												// 393
												if (value === false) {
													// 394
													break; // 395
												} // 396
											} // 397
										} // 398
									} // 399
									// 400
									return obj; // 401
								}, // 402
								// 403
								// Support: Android<4.1, IE<9                                                                                       // 404
								trim: function (text) {
									// 405
									return text == null ? // 406
									"" : // 407
									(text + "").replace(rtrim, ""); // 408
								}, // 409
								// 410
								// results is for internal usage only                                                                               // 411
								makeArray: function (arr, results) {
									// 412
									var ret = results || []; // 413
									// 414
									if (arr != null) {
										// 415
										if (isArraylike(Object(arr))) {
											// 416
											jQuery.merge(ret, // 417
											typeof arr === "string" ? // 418
											[arr] : arr // 419
											); // 420
										} else {
											// 421
											push.call(ret, arr); // 422
										} // 423
									} // 424
									// 425
									return ret; // 426
								}, // 427
								// 428
								inArray: function (elem, arr, i) {
									// 429
									var len; // 430
									// 431
									if (arr) {
										// 432
										if (indexOf) {
											// 433
											return indexOf.call(arr, elem, i); // 434
										} // 435
										// 436
										len = arr.length; // 437
										i = i ? i < 0 ? Math.max(0, len + i) : i : 0; // 438
										// 439
										for (; i < len; i++) {
											// 440
											// Skip accessing in sparse arrays                                                                               // 441
											if (i in arr && arr[i] === elem) {
												// 442
												return i; // 443
											} // 444
										} // 445
									} // 446
									// 447
									return -1; // 448
								}, // 449
								// 450
								merge: function (first, second) {
									// 451
									var len = +second.length,
									    // 452
									j = 0,
									    // 453
									i = first.length; // 454
									// 455
									while (j < len) {
										// 456
										first[i++] = second[j++]; // 457
									} // 458
									// 459
									// Support: IE<9                                                                                                   // 460
									// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)                           // 461
									if (len !== len) {
										// 462
										while (second[j] !== undefined) {
											// 463
											first[i++] = second[j++]; // 464
										} // 465
									} // 466
									// 467
									first.length = i; // 468
									// 469
									return first; // 470
								}, // 471
								// 472
								grep: function (elems, callback, invert) {
									// 473
									var callbackInverse,
									    // 474
									matches = [],
									    // 475
									i = 0,
									    // 476
									length = elems.length,
									    // 477
									callbackExpect = !invert; // 478
									// 479
									// Go through the array, only saving the items                                                                     // 480
									// that pass the validator function                                                                                // 481
									for (; i < length; i++) {
										// 482
										callbackInverse = !callback(elems[i], i); // 483
										if (callbackInverse !== callbackExpect) {
											// 484
											matches.push(elems[i]); // 485
										} // 486
									} // 487
									// 488
									return matches; // 489
								}, // 490
								// 491
								// arg is for internal usage only                                                                                   // 492
								map: function (elems, callback, arg) {
									// 493
									var value,
									    // 494
									i = 0,
									    // 495
									length = elems.length,
									    // 496
									isArray = isArraylike(elems),
									    // 497
									ret = []; // 498
									// 499
									// Go through the array, translating each of the items to their new values                                         // 500
									if (isArray) {
										// 501
										for (; i < length; i++) {
											// 502
											value = callback(elems[i], i, arg); // 503
											// 504
											if (value != null) {
												// 505
												ret.push(value); // 506
											} // 507
										} // 508
										// 509
										// Go through every key on the object,                                                                             // 510
									} else {
										// 511
										for (i in elems) {
											// 512
											value = callback(elems[i], i, arg); // 513
											// 514
											if (value != null) {
												// 515
												ret.push(value); // 516
											} // 517
										} // 518
									} // 519
									// 520
									// Flatten any nested arrays                                                                                       // 521
									return concat.apply([], ret); // 522
								}, // 523
								// 524
								// A global GUID counter for objects                                                                                // 525
								guid: 1, // 526
								// 527
								// Bind a function to a context, optionally partially applying any                                                  // 528
								// arguments.                                                                                                       // 529
								proxy: function (fn, context) {
									// 530
									var args, proxy, tmp; // 531
									// 532
									if (typeof context === "string") {
										// 533
										tmp = fn[context]; // 534
										context = fn; // 535
										fn = tmp; // 536
									} // 537
									// 538
									// Quick check to determine if target is callable, in the spec                                                     // 539
									// this throws a TypeError, but we will just return undefined.                                                     // 540
									if (!jQuery.isFunction(fn)) {
										// 541
										return undefined; // 542
									} // 543
									// 544
									// Simulated bind                                                                                                  // 545
									args = slice.call(arguments, 2); // 546
									proxy = function () {
										// 547
										return fn.apply(context || this, args.concat(slice.call(arguments))); // 548
									}; // 549
									// 550
									// Set the guid of unique handler to the same of original handler, so it can be removed                            // 551
									proxy.guid = fn.guid = fn.guid || jQuery.guid++; // 552
									// 553
									return proxy; // 554
								}, // 555
								// 556
								now: function () {
									// 557
									return +new Date(); // 558
								}, // 559
								// 560
								// jQuery.support is not used in Core but other projects attach their                                               // 561
								// properties to it so it needs to exist.                                                                           // 562
								support: support // 563
							}); // 564
							// 565
							// Populate the class2type map                                                                                       // 566
							jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
								// 567
								class2type["[object " + name + "]"] = name.toLowerCase(); // 568
							}); // 569
							// 570
							function isArraylike(obj) {
								// 571
								var length = obj.length,
								    // 572
								type = jQuery.type(obj); // 573
								// 574
								if (type === "function" || jQuery.isWindow(obj)) {
									// 575
									return false; // 576
								} // 577
								// 578
								if (obj.nodeType === 1 && length) {
									// 579
									return true; // 580
								} // 581
								// 582
								return type === "array" || length === 0 || // 583
								typeof length === "number" && length > 0 && length - 1 in obj; // 584
							} // 585
							var Sizzle = // 586
							/*!                                                                                                                  // 587
        * Sizzle CSS Selector Engine v2.2.0-pre                                                                             // 588
        * http://sizzlejs.com/                                                                                              // 589
        *                                                                                                                   // 590
        * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors                                               // 591
        * Released under the MIT license                                                                                    // 592
        * http://jquery.org/license                                                                                         // 593
        *                                                                                                                   // 594
        * Date: 2014-12-16                                                                                                  // 595
        */ // 596
							function (window) {
								// 597
								// 598
								var i,
								    // 599
								support,
								    // 600
								Expr,
								    // 601
								getText,
								    // 602
								isXML,
								    // 603
								tokenize,
								    // 604
								compile,
								    // 605
								select,
								    // 606
								outermostContext,
								    // 607
								sortInput,
								    // 608
								hasDuplicate,
								    // 609
								// 610
								// Local document vars                                                                                              // 611
								setDocument,
								    // 612
								document,
								    // 613
								docElem,
								    // 614
								documentIsHTML,
								    // 615
								rbuggyQSA,
								    // 616
								rbuggyMatches,
								    // 617
								matches,
								    // 618
								contains,
								    // 619
								// 620
								// Instance-specific data                                                                                           // 621
								expando = "sizzle" + 1 * new Date(),
								    // 622
								preferredDoc = window.document,
								    // 623
								dirruns = 0,
								    // 624
								done = 0,
								    // 625
								classCache = createCache(),
								    // 626
								tokenCache = createCache(),
								    // 627
								compilerCache = createCache(),
								    // 628
								sortOrder = function (a, b) {
									// 629
									if (a === b) {
										// 630
										hasDuplicate = true; // 631
									} // 632
									return 0; // 633
								},
								    // 634
								// 635
								// General-purpose constants                                                                                        // 636
								MAX_NEGATIVE = 1 << 31,
								    // 637
								// 638
								// Instance methods                                                                                                 // 639
								hasOwn = {}.hasOwnProperty,
								    // 640
								arr = [],
								    // 641
								pop = arr.pop,
								    // 642
								push_native = arr.push,
								    // 643
								push = arr.push,
								    // 644
								slice = arr.slice,
								    // 645
								// Use a stripped-down indexOf as it's faster than native                                                           // 646
								// http://jsperf.com/thor-indexof-vs-for/5                                                                          // 647
								indexOf = function (list, elem) {
									// 648
									var i = 0,
									    // 649
									len = list.length; // 650
									for (; i < len; i++) {
										// 651
										if (list[i] === elem) {
											// 652
											return i; // 653
										} // 654
									} // 655
									return -1; // 656
								},
								    // 657
								// 658
								booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

								// 660
								// Regular expressions                                                                                              // 661
								// 662
								// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace                                            // 663
								whitespace = "[\\x20\\t\\r\\n\\f]",
								    // 664
								// http://www.w3.org/TR/css3-syntax/#characters                                                                     // 665
								characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
								    // 666
								// 667
								// Loosely modeled on CSS identifier characters                                                                     // 668
								// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors            // 669
								// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                      // 670
								identifier = characterEncoding.replace("w", "w#"),
								    // 671
								// 672
								// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors                                         // 673
								attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + // 674
								// Operator (capture 2)                                                                                            // 675
								"*([*^$|!~]?=)" + whitespace + // 676
								// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"                      // 677
								"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + // 678
								"*\\]",
								    // 679
								// 680
								pseudos = ":(" + characterEncoding + ")(?:\\((" + // 681
								// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:                          // 682
								// 1. quoted (capture 3; capture 4 or capture 5)                                                                   // 683
								"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 684
								// 2. simple (capture 6)                                                                                           // 685
								"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 686
								// 3. anything else (capture 2)                                                                                    // 687
								".*" + // 688
								")\\)|)",
								    // 689
								// 690
								// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter       // 691
								rwhitespace = new RegExp(whitespace + "+", "g"),
								    // 692
								rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
								    // 693
								// 694
								rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
								    // 695
								rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
								    // 696
								// 697
								rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
								    // 698
								// 699
								rpseudo = new RegExp(pseudos),
								    // 700
								ridentifier = new RegExp("^" + identifier + "$"),
								    // 701
								// 702
								matchExpr = { // 703
									"ID": new RegExp("^#(" + characterEncoding + ")"), // 704
									"CLASS": new RegExp("^\\.(" + characterEncoding + ")"), // 705
									"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"), // 706
									"ATTR": new RegExp("^" + attributes), // 707
									"PSEUDO": new RegExp("^" + pseudos), // 708
									"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + // 709
									"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + // 710
									"*(\\d+)|))" + whitespace + "*\\)|)", "i"), // 711
									"bool": new RegExp("^(?:" + booleans + ")$", "i"), // 712
									// For use in libraries implementing .is()                                                                         // 713
									// We use this for POS matching in `select`                                                                        // 714
									"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + // 715
									whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i") // 716
								},
								    // 717
								// 718
								rinputs = /^(?:input|select|textarea|button)$/i,
								    // 719
								rheader = /^h\d$/i,
								    // 720
								// 721
								rnative = /^[^{]+\{\s*\[native \w/,
								    // 722
								// 723
								// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                        // 724
								rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
								    // 725
								// 726
								rsibling = /[+~]/,
								    // 727
								rescape = /'|\\/g,
								    // 728
								// 729
								// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                           // 730
								runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
								    // 731
								funescape = function (_, escaped, escapedWhitespace) {
									// 732
									var high = "0x" + escaped - 0x10000; // 733
									// NaN means non-codepoint                                                                                         // 734
									// Support: Firefox<24                                                                                             // 735
									// Workaround erroneous numeric interpretation of +"0x"                                                            // 736
									return high !== high || escapedWhitespace ? // 737
									escaped : // 738
									high < 0 ? // 739
									// BMP codepoint                                                                                                 // 740
									String.fromCharCode(high + 0x10000) : // 741
									// Supplemental Plane codepoint (surrogate pair)                                                                 // 742
									String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00); // 743
								},
								    // 744
								// 745
								// Used for iframes                                                                                                 // 746
								// See setDocument()                                                                                                // 747
								// Removing the function wrapper causes a "Permission Denied"                                                       // 748
								// error in IE                                                                                                      // 749
								unloadHandler = function () {
									// 750
									setDocument(); // 751
								}; // 752
								// 753
								// Optimize for push.apply( _, NodeList )                                                                            // 754
								try {
									// 755
									push.apply( // 756
									arr = slice.call(preferredDoc.childNodes), // 757
									preferredDoc.childNodes // 758
									); // 759
									// Support: Android<4.0                                                                                             // 760
									// Detect silently failing push.apply                                                                               // 761
									arr[preferredDoc.childNodes.length].nodeType; // 762
								} catch (e) {
									// 763
									push = { apply: arr.length ? // 764
										// 765
										// Leverage slice if possible                                                                                      // 766
										function (target, els) {
											// 767
											push_native.apply(target, slice.call(els)); // 768
										} : // 769
										// 770
										// Support: IE<9                                                                                                   // 771
										// Otherwise append directly                                                                                       // 772
										function (target, els) {
											// 773
											var j = target.length,
											    // 774
											i = 0; // 775
											// Can't trust NodeList.length                                                                                    // 776
											while (target[j++] = els[i++]) {} // 777
											target.length = j - 1; // 778
										} // 779
									}; // 780
								} // 781
								// 782
								function Sizzle(selector, context, results, seed) {
									// 783
									var match, elem, m, nodeType, // 784
									// QSA vars                                                                                                        // 785
									i, groups, old, nid, newContext, newSelector; // 786
									// 787
									if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
										// 788
										setDocument(context); // 789
									} // 790
									// 791
									context = context || document; // 792
									results = results || []; // 793
									nodeType = context.nodeType; // 794
									// 795
									if (typeof selector !== "string" || !selector || // 796
									nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
										// 797
										// 798
										return results; // 799
									} // 800
									// 801
									if (!seed && documentIsHTML) {
										// 802
										// 803
										// Try to shortcut find operations when possible (e.g., not under DocumentFragment)                                // 804
										if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
											// 805
											// Speed-up: Sizzle("#ID")                                                                                        // 806
											if (m = match[1]) {
												// 807
												if (nodeType === 9) {
													// 808
													elem = context.getElementById(m); // 809
													// Check parentNode to catch when Blackberry 4.6 returns                                                        // 810
													// nodes that are no longer in the document (jQuery #6963)                                                      // 811
													if (elem && elem.parentNode) {
														// 812
														// Handle the case where IE, Opera, and Webkit return items                                                    // 813
														// by name instead of ID                                                                                       // 814
														if (elem.id === m) {
															// 815
															results.push(elem); // 816
															return results; // 817
														} // 818
													} else {
														// 819
														return results; // 820
													} // 821
												} else {
													// 822
													// Context is not a document                                                                                    // 823
													if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && // 824
													contains(context, elem) && elem.id === m) {
														// 825
														results.push(elem); // 826
														return results; // 827
													} // 828
												} // 829
												// 830
												// Speed-up: Sizzle("TAG")                                                                                        // 831
											} else if (match[2]) {
												// 832
												push.apply(results, context.getElementsByTagName(selector)); // 833
												return results; // 834
												// 835
												// Speed-up: Sizzle(".CLASS")                                                                                     // 836
											} else if ((m = match[3]) && support.getElementsByClassName) {
												// 837
												push.apply(results, context.getElementsByClassName(m)); // 838
												return results; // 839
											} // 840
										} // 841
										// 842
										// QSA path                                                                                                        // 843
										if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
											// 844
											nid = old = expando; // 845
											newContext = context; // 846
											newSelector = nodeType !== 1 && selector; // 847
											// 848
											// qSA works strangely on Element-rooted queries                                                                  // 849
											// We can work around this by specifying an extra ID on the root                                                  // 850
											// and working up from there (Thanks to Andrew Dupont for the technique)                                          // 851
											// IE 8 doesn't work on object elements                                                                           // 852
											if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
												// 853
												groups = tokenize(selector); // 854
												// 855
												if (old = context.getAttribute("id")) {
													// 856
													nid = old.replace(rescape, "\\$&"); // 857
												} else {
													// 858
													context.setAttribute("id", nid); // 859
												} // 860
												nid = "[id='" + nid + "'] "; // 861
												// 862
												i = groups.length; // 863
												while (i--) {
													// 864
													groups[i] = nid + toSelector(groups[i]); // 865
												} // 866
												newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // 867
												newSelector = groups.join(","); // 868
											} // 869
											// 870
											if (newSelector) {
												// 871
												try {
													// 872
													push.apply(results, // 873
													newContext.querySelectorAll(newSelector) // 874
													); // 875
													return results; // 876
												} catch (qsaError) {// 877
												} finally {
													// 878
													if (!old) {
														// 879
														context.removeAttribute("id"); // 880
													} // 881
												} // 882
											} // 883
										} // 884
									} // 885
									// 886
									// All others                                                                                                       // 887
									return select(selector.replace(rtrim, "$1"), context, results, seed); // 888
								} // 889
								// 890
								/**                                                                                                                  // 891
         * Create key-value caches of limited size                                                                           // 892
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with                       // 893
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                      // 894
         *	deleting the oldest entry                                                                                         // 895
         */ // 896
								function createCache() {
									// 897
									var keys = []; // 898
									// 899
									function cache(key, value) {
										// 900
										// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)                            // 901
										if (keys.push(key + " ") > Expr.cacheLength) {
											// 902
											// Only keep the most recent entries                                                                              // 903
											delete cache[keys.shift()]; // 904
										} // 905
										return cache[key + " "] = value; // 906
									} // 907
									return cache; // 908
								} // 909
								// 910
								/**                                                                                                                  // 911
         * Mark a function for special use by Sizzle                                                                         // 912
         * @param {Function} fn The function to mark                                                                         // 913
         */ // 914
								function markFunction(fn) {
									// 915
									fn[expando] = true; // 916
									return fn; // 917
								} // 918
								// 919
								/**                                                                                                                  // 920
         * Support testing using an element                                                                                  // 921
         * @param {Function} fn Passed the created div and expects a boolean result                                          // 922
         */ // 923
								function assert(fn) {
									// 924
									var div = document.createElement("div"); // 925
									// 926
									try {
										// 927
										return !!fn(div); // 928
									} catch (e) {
										// 929
										return false; // 930
									} finally {
										// 931
										// Remove from its parent by default                                                                               // 932
										if (div.parentNode) {
											// 933
											div.parentNode.removeChild(div); // 934
										} // 935
										// release memory in IE                                                                                            // 936
										div = null; // 937
									} // 938
								} // 939
								// 940
								/**                                                                                                                  // 941
         * Adds the same handler for all of the specified attrs                                                              // 942
         * @param {String} attrs Pipe-separated list of attributes                                                           // 943
         * @param {Function} handler The method that will be applied                                                         // 944
         */ // 945
								function addHandle(attrs, handler) {
									// 946
									var arr = attrs.split("|"),
									    // 947
									i = attrs.length; // 948
									// 949
									while (i--) {
										// 950
										Expr.attrHandle[arr[i]] = handler; // 951
									} // 952
								} // 953
								// 954
								/**                                                                                                                  // 955
         * Checks document order of two siblings                                                                             // 956
         * @param {Element} a                                                                                                // 957
         * @param {Element} b                                                                                                // 958
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                              // 959
         */ // 960
								function siblingCheck(a, b) {
									// 961
									var cur = b && a,
									    // 962
									diff = cur && a.nodeType === 1 && b.nodeType === 1 && // 963
									(~b.sourceIndex || MAX_NEGATIVE) - ( // 964
									~a.sourceIndex || MAX_NEGATIVE); // 965
									// 966
									// Use IE sourceIndex if available on both nodes                                                                    // 967
									if (diff) {
										// 968
										return diff; // 969
									} // 970
									// 971
									// Check if b follows a                                                                                             // 972
									if (cur) {
										// 973
										while (cur = cur.nextSibling) {
											// 974
											if (cur === b) {
												// 975
												return -1; // 976
											} // 977
										} // 978
									} // 979
									// 980
									return a ? 1 : -1; // 981
								} // 982
								// 983
								/**                                                                                                                  // 984
         * Returns a function to use in pseudos for input types                                                              // 985
         * @param {String} type                                                                                              // 986
         */ // 987
								function createInputPseudo(type) {
									// 988
									return function (elem) {
										// 989
										var name = elem.nodeName.toLowerCase(); // 990
										return name === "input" && elem.type === type; // 991
									}; // 992
								} // 993
								// 994
								/**                                                                                                                  // 995
         * Returns a function to use in pseudos for buttons                                                                  // 996
         * @param {String} type                                                                                              // 997
         */ // 998
								function createButtonPseudo(type) {
									// 999
									return function (elem) {
										// 1000
										var name = elem.nodeName.toLowerCase(); // 1001
										return (name === "input" || name === "button") && elem.type === type; // 1002
									}; // 1003
								} // 1004
								// 1005
								/**                                                                                                                  // 1006
         * Returns a function to use in pseudos for positionals                                                              // 1007
         * @param {Function} fn                                                                                              // 1008
         */ // 1009
								function createPositionalPseudo(fn) {
									// 1010
									return markFunction(function (argument) {
										// 1011
										argument = +argument; // 1012
										return markFunction(function (seed, matches) {
											// 1013
											var j,
											    // 1014
											matchIndexes = fn([], seed.length, argument),
											    // 1015
											i = matchIndexes.length; // 1016
											// 1017
											// Match elements found at the specified indexes                                                                  // 1018
											while (i--) {
												// 1019
												if (seed[j = matchIndexes[i]]) {
													// 1020
													seed[j] = !(matches[j] = seed[j]); // 1021
												} // 1022
											} // 1023
										}); // 1024
									}); // 1025
								} // 1026
								// 1027
								/**                                                                                                                  // 1028
         * Checks a node for validity as a Sizzle context                                                                    // 1029
         * @param {Element|Object=} context                                                                                  // 1030
         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value                           // 1031
         */ // 1032
								function testContext(context) {
									// 1033
									return context && typeof context.getElementsByTagName !== "undefined" && context; // 1034
								} // 1035
								// 1036
								// Expose support vars for convenience                                                                               // 1037
								support = Sizzle.support = {}; // 1038
								// 1039
								/**                                                                                                                  // 1040
         * Detects XML nodes                                                                                                 // 1041
         * @param {Element|Object} elem An element or a document                                                             // 1042
         * @returns {Boolean} True iff elem is a non-HTML XML node                                                           // 1043
         */ // 1044
								isXML = Sizzle.isXML = function (elem) {
									// 1045
									// documentElement is verified for cases where it doesn't yet exist                                                 // 1046
									// (such as loading iframes in IE - #4833)                                                                          // 1047
									var documentElement = elem && (elem.ownerDocument || elem).documentElement; // 1048
									return documentElement ? documentElement.nodeName !== "HTML" : false; // 1049
								}; // 1050
								// 1051
								/**                                                                                                                  // 1052
         * Sets document-related variables once based on the current document                                                // 1053
         * @param {Element|Object} [doc] An element or document object to use to set the document                            // 1054
         * @returns {Object} Returns the current document                                                                    // 1055
         */ // 1056
								setDocument = Sizzle.setDocument = function (node) {
									// 1057
									var hasCompare,
									    parent,
									    // 1058
									doc = node ? node.ownerDocument || node : preferredDoc; // 1059
									// 1060
									// If no document and documentElement is available, return                                                          // 1061
									if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
										// 1062
										return document; // 1063
									} // 1064
									// 1065
									// Set our document                                                                                                 // 1066
									document = doc; // 1067
									docElem = doc.documentElement; // 1068
									parent = doc.defaultView; // 1069
									// 1070
									// Support: IE>8                                                                                                    // 1071
									// If iframe document is assigned to "document" variable and if iframe has been reloaded,                           // 1072
									// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936                    // 1073
									// IE6-8 do not support the defaultView property so parent will be undefined                                        // 1074
									if (parent && parent !== parent.top) {
										// 1075
										// IE11 does not have attachEvent, so all must suffer                                                              // 1076
										if (parent.addEventListener) {
											// 1077
											parent.addEventListener("unload", unloadHandler, false); // 1078
										} else if (parent.attachEvent) {
											// 1079
											parent.attachEvent("onunload", unloadHandler); // 1080
										} // 1081
									} // 1082
									// 1083
									/* Support tests                                                                                                    // 1084
         ---------------------------------------------------------------------- */ // 1085
									documentIsHTML = !isXML(doc); // 1086
									// 1087
									/* Attributes                                                                                                       // 1088
         ---------------------------------------------------------------------- */ // 1089
									// 1090
									// Support: IE<8                                                                                                    // 1091
									// Verify that getAttribute really returns attributes and not properties                                            // 1092
									// (excepting IE8 booleans)                                                                                         // 1093
									support.attributes = assert(function (div) {
										// 1094
										div.className = "i"; // 1095
										return !div.getAttribute("className"); // 1096
									}); // 1097
									// 1098
									/* getElement(s)By*                                                                                                 // 1099
         ---------------------------------------------------------------------- */ // 1100
									// 1101
									// Check if getElementsByTagName("*") returns only elements                                                         // 1102
									support.getElementsByTagName = assert(function (div) {
										// 1103
										div.appendChild(doc.createComment("")); // 1104
										return !div.getElementsByTagName("*").length; // 1105
									}); // 1106
									// 1107
									// Support: IE<9                                                                                                    // 1108
									support.getElementsByClassName = rnative.test(doc.getElementsByClassName); // 1109
									// 1110
									// Support: IE<10                                                                                                   // 1111
									// Check if getElementById returns elements by name                                                                 // 1112
									// The broken getElementById methods don't pick up programatically-set names,                                       // 1113
									// so use a roundabout getElementsByName test                                                                       // 1114
									support.getById = assert(function (div) {
										// 1115
										docElem.appendChild(div).id = expando; // 1116
										return !doc.getElementsByName || !doc.getElementsByName(expando).length; // 1117
									}); // 1118
									// 1119
									// ID find and filter                                                                                               // 1120
									if (support.getById) {
										// 1121
										Expr.find["ID"] = function (id, context) {
											// 1122
											if (typeof context.getElementById !== "undefined" && documentIsHTML) {
												// 1123
												var m = context.getElementById(id); // 1124
												// Check parentNode to catch when Blackberry 4.6 returns                                                         // 1125
												// nodes that are no longer in the document #6963                                                                // 1126
												return m && m.parentNode ? [m] : []; // 1127
											} // 1128
										}; // 1129
										Expr.filter["ID"] = function (id) {
											// 1130
											var attrId = id.replace(runescape, funescape); // 1131
											return function (elem) {
												// 1132
												return elem.getAttribute("id") === attrId; // 1133
											}; // 1134
										}; // 1135
									} else {
										// 1136
										// Support: IE6/7                                                                                                  // 1137
										// getElementById is not reliable as a find shortcut                                                               // 1138
										delete Expr.find["ID"]; // 1139
										// 1140
										Expr.filter["ID"] = function (id) {
											// 1141
											var attrId = id.replace(runescape, funescape); // 1142
											return function (elem) {
												// 1143
												var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id"); // 1144
												return node && node.value === attrId; // 1145
											}; // 1146
										}; // 1147
									} // 1148
									// 1149
									// Tag                                                                                                              // 1150
									Expr.find["TAG"] = support.getElementsByTagName ? // 1151
									function (tag, context) {
										// 1152
										if (typeof context.getElementsByTagName !== "undefined") {
											// 1153
											return context.getElementsByTagName(tag); // 1154
											// 1155
											// DocumentFragment nodes don't have gEBTN                                                                        // 1156
										} else if (support.qsa) {
											// 1157
											return context.querySelectorAll(tag); // 1158
										} // 1159
									} : // 1160
									// 1161
									function (tag, context) {
										// 1162
										var elem,
										    // 1163
										tmp = [],
										    // 1164
										i = 0,
										    // 1165
										// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too                                  // 1166
										results = context.getElementsByTagName(tag); // 1167
										// 1168
										// Filter out possible comments                                                                                   // 1169
										if (tag === "*") {
											// 1170
											while (elem = results[i++]) {
												// 1171
												if (elem.nodeType === 1) {
													// 1172
													tmp.push(elem); // 1173
												} // 1174
											} // 1175
											// 1176
											return tmp; // 1177
										} // 1178
										return results; // 1179
									}; // 1180
									// 1181
									// Class                                                                                                            // 1182
									Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
										// 1183
										if (documentIsHTML) {
											// 1184
											return context.getElementsByClassName(className); // 1185
										} // 1186
									}; // 1187
									// 1188
									/* QSA/matchesSelector                                                                                              // 1189
         ---------------------------------------------------------------------- */ // 1190
									// 1191
									// QSA and matchesSelector support                                                                                  // 1192
									// 1193
									// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                                // 1194
									rbuggyMatches = []; // 1195
									// 1196
									// qSa(:focus) reports false when true (Chrome 21)                                                                  // 1197
									// We allow this because of a bug in IE8/9 that throws an error                                                     // 1198
									// whenever `document.activeElement` is accessed on an iframe                                                       // 1199
									// So, we allow :focus to pass through QSA all the time to avoid the IE error                                       // 1200
									// See http://bugs.jquery.com/ticket/13378                                                                          // 1201
									rbuggyQSA = []; // 1202
									// 1203
									if (support.qsa = rnative.test(doc.querySelectorAll)) {
										// 1204
										// Build QSA regex                                                                                                 // 1205
										// Regex strategy adopted from Diego Perini                                                                        // 1206
										assert(function (div) {
											// 1207
											// Select is set to empty string on purpose                                                                       // 1208
											// This is to test IE's treatment of not explicitly                                                               // 1209
											// setting a boolean content attribute,                                                                           // 1210
											// since its presence should be enough                                                                            // 1211
											// http://bugs.jquery.com/ticket/12359                                                                            // 1212
											docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + // 1213
											"<select id='" + expando + "-\f]' msallowcapture=''>" + // 1214
											"<option selected=''></option></select>"; // 1215
											// 1216
											// Support: IE8, Opera 11-12.16                                                                                   // 1217
											// Nothing should be selected when empty strings follow ^= or $= or *=                                            // 1218
											// The test attribute must be unknown in Opera but "safe" for WinRT                                               // 1219
											// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section                                     // 1220
											if (div.querySelectorAll("[msallowcapture^='']").length) {
												// 1221
												rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")"); // 1222
											} // 1223
											// 1224
											// Support: IE8                                                                                                   // 1225
											// Boolean attributes and "value" are not treated correctly                                                       // 1226
											if (!div.querySelectorAll("[selected]").length) {
												// 1227
												rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")"); // 1228
											} // 1229
											// 1230
											// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+                                      // 1231
											if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
												// 1232
												rbuggyQSA.push("~="); // 1233
											} // 1234
											// 1235
											// Webkit/Opera - :checked should return selected option elements                                                 // 1236
											// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1237
											// IE8 throws error here and will not see later tests                                                             // 1238
											if (!div.querySelectorAll(":checked").length) {
												// 1239
												rbuggyQSA.push(":checked"); // 1240
											} // 1241
											// 1242
											// Support: Safari 8+, iOS 8+                                                                                     // 1243
											// https://bugs.webkit.org/show_bug.cgi?id=136851                                                                 // 1244
											// In-page `selector#id sibing-combinator selector` fails                                                         // 1245
											if (!div.querySelectorAll("a#" + expando + "+*").length) {
												// 1246
												rbuggyQSA.push(".#.+[+~]"); // 1247
											} // 1248
										}); // 1249
										// 1250
										assert(function (div) {
											// 1251
											// Support: Windows 8 Native Apps                                                                                 // 1252
											// The type and name attributes are restricted during .innerHTML assignment                                       // 1253
											var input = doc.createElement("input"); // 1254
											input.setAttribute("type", "hidden"); // 1255
											div.appendChild(input).setAttribute("name", "D"); // 1256
											// 1257
											// Support: IE8                                                                                                   // 1258
											// Enforce case-sensitivity of name attribute                                                                     // 1259
											if (div.querySelectorAll("[name=d]").length) {
												// 1260
												rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?="); // 1261
											} // 1262
											// 1263
											// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                            // 1264
											// IE8 throws error here and will not see later tests                                                             // 1265
											if (!div.querySelectorAll(":enabled").length) {
												// 1266
												rbuggyQSA.push(":enabled", ":disabled"); // 1267
											} // 1268
											// 1269
											// Opera 10-11 does not throw on post-comma invalid pseudos                                                       // 1270
											div.querySelectorAll("*,:x"); // 1271
											rbuggyQSA.push(",.*:"); // 1272
										}); // 1273
									} // 1274
									// 1275
									if (support.matchesSelector = rnative.test(matches = docElem.matches || // 1276
									docElem.webkitMatchesSelector || // 1277
									docElem.mozMatchesSelector || // 1278
									docElem.oMatchesSelector || // 1279
									docElem.msMatchesSelector)) {
										// 1280
										// 1281
										assert(function (div) {
											// 1282
											// Check to see if it's possible to do matchesSelector                                                            // 1283
											// on a disconnected node (IE 9)                                                                                  // 1284
											support.disconnectedMatch = matches.call(div, "div"); // 1285
											// 1286
											// This should fail with an exception                                                                             // 1287
											// Gecko does not error, returns false instead                                                                    // 1288
											matches.call(div, "[s!='']:x"); // 1289
											rbuggyMatches.push("!=", pseudos); // 1290
										}); // 1291
									} // 1292
									// 1293
									rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")); // 1294
									rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")); // 1295
									// 1296
									/* Contains                                                                                                         // 1297
         ---------------------------------------------------------------------- */ // 1298
									hasCompare = rnative.test(docElem.compareDocumentPosition); // 1299
									// 1300
									// Element contains another                                                                                         // 1301
									// Purposefully does not implement inclusive descendent                                                             // 1302
									// As in, an element does not contain itself                                                                        // 1303
									contains = hasCompare || rnative.test(docElem.contains) ? // 1304
									function (a, b) {
										// 1305
										var adown = a.nodeType === 9 ? a.documentElement : a,
										    // 1306
										bup = b && b.parentNode; // 1307
										return a === bup || !!(bup && bup.nodeType === 1 && ( // 1308
										adown.contains ? // 1309
										adown.contains(bup) : // 1310
										a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16 // 1311
										)); // 1312
									} : // 1313
									function (a, b) {
										// 1314
										if (b) {
											// 1315
											while (b = b.parentNode) {
												// 1316
												if (b === a) {
													// 1317
													return true; // 1318
												} // 1319
											} // 1320
										} // 1321
										return false; // 1322
									}; // 1323
									// 1324
									/* Sorting                                                                                                          // 1325
         ---------------------------------------------------------------------- */ // 1326
									// 1327
									// Document order sorting                                                                                           // 1328
									sortOrder = hasCompare ? // 1329
									function (a, b) {
										// 1330
										// 1331
										// Flag for duplicate removal                                                                                      // 1332
										if (a === b) {
											// 1333
											hasDuplicate = true; // 1334
											return 0; // 1335
										} // 1336
										// 1337
										// Sort on method existence if only one input has compareDocumentPosition                                          // 1338
										var compare = !a.compareDocumentPosition - !b.compareDocumentPosition; // 1339
										if (compare) {
											// 1340
											return compare; // 1341
										} // 1342
										// 1343
										// Calculate position if both inputs belong to the same document                                                   // 1344
										compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? // 1345
										a.compareDocumentPosition(b) : // 1346
										// 1347
										// Otherwise we know they are disconnected                                                                        // 1348
										1; // 1349
										// 1350
										// Disconnected nodes                                                                                              // 1351
										if (compare & 1 || // 1352
										!support.sortDetached && b.compareDocumentPosition(a) === compare) {
											// 1353
											// 1354
											// Choose the first element that is related to our preferred document                                             // 1355
											if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
												// 1356
												return -1; // 1357
											} // 1358
											if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
												// 1359
												return 1; // 1360
											} // 1361
											// 1362
											// Maintain original order                                                                                        // 1363
											return sortInput ? // 1364
											indexOf(sortInput, a) - indexOf(sortInput, b) : // 1365
											0; // 1366
										} // 1367
										// 1368
										return compare & 4 ? -1 : 1; // 1369
									} : // 1370
									function (a, b) {
										// 1371
										// Exit early if the nodes are identical                                                                           // 1372
										if (a === b) {
											// 1373
											hasDuplicate = true; // 1374
											return 0; // 1375
										} // 1376
										// 1377
										var cur,
										    // 1378
										i = 0,
										    // 1379
										aup = a.parentNode,
										    // 1380
										bup = b.parentNode,
										    // 1381
										ap = [a],
										    // 1382
										bp = [b]; // 1383
										// 1384
										// Parentless nodes are either documents or disconnected                                                           // 1385
										if (!aup || !bup) {
											// 1386
											return a === doc ? -1 : // 1387
											b === doc ? 1 : // 1388
											aup ? -1 : // 1389
											bup ? 1 : // 1390
											sortInput ? // 1391
											indexOf(sortInput, a) - indexOf(sortInput, b) : // 1392
											0; // 1393
											// 1394
											// If the nodes are siblings, we can do a quick check                                                              // 1395
										} else if (aup === bup) {
											// 1396
											return siblingCheck(a, b); // 1397
										} // 1398
										// 1399
										// Otherwise we need full lists of their ancestors for comparison                                                  // 1400
										cur = a; // 1401
										while (cur = cur.parentNode) {
											// 1402
											ap.unshift(cur); // 1403
										} // 1404
										cur = b; // 1405
										while (cur = cur.parentNode) {
											// 1406
											bp.unshift(cur); // 1407
										} // 1408
										// 1409
										// Walk down the tree looking for a discrepancy                                                                    // 1410
										while (ap[i] === bp[i]) {
											// 1411
											i++; // 1412
										} // 1413
										// 1414
										return i ? // 1415
										// Do a sibling check if the nodes have a common ancestor                                                         // 1416
										siblingCheck(ap[i], bp[i]) : // 1417
										// 1418
										// Otherwise nodes in our document sort first                                                                     // 1419
										ap[i] === preferredDoc ? -1 : // 1420
										bp[i] === preferredDoc ? 1 : // 1421
										0; // 1422
									}; // 1423
									// 1424
									return doc; // 1425
								}; // 1426
								// 1427
								Sizzle.matches = function (expr, elements) {
									// 1428
									return Sizzle(expr, null, null, elements); // 1429
								}; // 1430
								// 1431
								Sizzle.matchesSelector = function (elem, expr) {
									// 1432
									// Set document vars if needed                                                                                      // 1433
									if ((elem.ownerDocument || elem) !== document) {
										// 1434
										setDocument(elem); // 1435
									} // 1436
									// 1437
									// Make sure that attribute selectors are quoted                                                                    // 1438
									expr = expr.replace(rattributeQuotes, "='$1']"); // 1439
									// 1440
									if (support.matchesSelector && documentIsHTML && ( // 1441
									!rbuggyMatches || !rbuggyMatches.test(expr)) && ( // 1442
									!rbuggyQSA || !rbuggyQSA.test(expr))) {
										// 1443
										// 1444
										try {
											// 1445
											var ret = matches.call(elem, expr); // 1446
											// 1447
											// IE 9's matchesSelector returns false on disconnected nodes                                                     // 1448
											if (ret || support.disconnectedMatch || // 1449
											// As well, disconnected nodes are said to be in a document                                                     // 1450
											// fragment in IE 9                                                                                             // 1451
											elem.document && elem.document.nodeType !== 11) {
												// 1452
												return ret; // 1453
											} // 1454
										} catch (e) {} // 1455
									} // 1456
									// 1457
									return Sizzle(expr, document, null, [elem]).length > 0; // 1458
								}; // 1459
								// 1460
								Sizzle.contains = function (context, elem) {
									// 1461
									// Set document vars if needed                                                                                      // 1462
									if ((context.ownerDocument || context) !== document) {
										// 1463
										setDocument(context); // 1464
									} // 1465
									return contains(context, elem); // 1466
								}; // 1467
								// 1468
								Sizzle.attr = function (elem, name) {
									// 1469
									// Set document vars if needed                                                                                      // 1470
									if ((elem.ownerDocument || elem) !== document) {
										// 1471
										setDocument(elem); // 1472
									} // 1473
									// 1474
									var fn = Expr.attrHandle[name.toLowerCase()],
									    // 1475
									// Don't get fooled by Object.prototype properties (jQuery #13807)                                                 // 1476
									val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? // 1477
									fn(elem, name, !documentIsHTML) : // 1478
									undefined; // 1479
									// 1480
									return val !== undefined ? // 1481
									val : // 1482
									support.attributes || !documentIsHTML ? // 1483
									elem.getAttribute(name) : // 1484
									(val = elem.getAttributeNode(name)) && val.specified ? // 1485
									val.value : // 1486
									null; // 1487
								}; // 1488
								// 1489
								Sizzle.error = function (msg) {
									// 1490
									throw new Error("Syntax error, unrecognized expression: " + msg); // 1491
								}; // 1492
								// 1493
								/**                                                                                                                  // 1494
         * Document sorting and removing duplicates                                                                          // 1495
         * @param {ArrayLike} results                                                                                        // 1496
         */ // 1497
								Sizzle.uniqueSort = function (results) {
									// 1498
									var elem,
									    // 1499
									duplicates = [],
									    // 1500
									j = 0,
									    // 1501
									i = 0; // 1502
									// 1503
									// Unless we *know* we can detect duplicates, assume their presence                                                 // 1504
									hasDuplicate = !support.detectDuplicates; // 1505
									sortInput = !support.sortStable && results.slice(0); // 1506
									results.sort(sortOrder); // 1507
									// 1508
									if (hasDuplicate) {
										// 1509
										while (elem = results[i++]) {
											// 1510
											if (elem === results[i]) {
												// 1511
												j = duplicates.push(i); // 1512
											} // 1513
										} // 1514
										while (j--) {
											// 1515
											results.splice(duplicates[j], 1); // 1516
										} // 1517
									} // 1518
									// 1519
									// Clear input after sorting to release objects                                                                     // 1520
									// See https://github.com/jquery/sizzle/pull/225                                                                    // 1521
									sortInput = null; // 1522
									// 1523
									return results; // 1524
								}; // 1525
								// 1526
								/**                                                                                                                  // 1527
         * Utility function for retrieving the text value of an array of DOM nodes                                           // 1528
         * @param {Array|Element} elem                                                                                       // 1529
         */ // 1530
								getText = Sizzle.getText = function (elem) {
									// 1531
									var node,
									    // 1532
									ret = "",
									    // 1533
									i = 0,
									    // 1534
									nodeType = elem.nodeType; // 1535
									// 1536
									if (!nodeType) {
										// 1537
										// If no nodeType, this is expected to be an array                                                                 // 1538
										while (node = elem[i++]) {
											// 1539
											// Do not traverse comment nodes                                                                                  // 1540
											ret += getText(node); // 1541
										} // 1542
									} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
										// 1543
										// Use textContent for elements                                                                                    // 1544
										// innerText usage removed for consistency of new lines (jQuery #11153)                                            // 1545
										if (typeof elem.textContent === "string") {
											// 1546
											return elem.textContent; // 1547
										} else {
											// 1548
											// Traverse its children                                                                                          // 1549
											for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
												// 1550
												ret += getText(elem); // 1551
											} // 1552
										} // 1553
									} else if (nodeType === 3 || nodeType === 4) {
										// 1554
										return elem.nodeValue; // 1555
									} // 1556
									// Do not include comment or processing instruction nodes                                                           // 1557
									// 1558
									return ret; // 1559
								}; // 1560
								// 1561
								Expr = Sizzle.selectors = { // 1562
									// 1563
									// Can be adjusted by the user                                                                                      // 1564
									cacheLength: 50, // 1565
									// 1566
									createPseudo: markFunction, // 1567
									// 1568
									match: matchExpr, // 1569
									// 1570
									attrHandle: {}, // 1571
									// 1572
									find: {}, // 1573
									// 1574
									relative: { // 1575
										">": { dir: "parentNode", first: true }, // 1576
										" ": { dir: "parentNode" }, // 1577
										"+": { dir: "previousSibling", first: true }, // 1578
										"~": { dir: "previousSibling" // 1579
										} }, // 1580
									// 1581
									preFilter: { // 1582
										"ATTR": function (match) {
											// 1583
											match[1] = match[1].replace(runescape, funescape); // 1584
											// 1585
											// Move the given value to match[3] whether quoted or unquoted                                                    // 1586
											match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape); // 1587
											// 1588
											if (match[2] === "~=") {
												// 1589
												match[3] = " " + match[3] + " "; // 1590
											} // 1591
											// 1592
											return match.slice(0, 4); // 1593
										}, // 1594
										// 1595
										"CHILD": function (match) {
											// 1596
											/* matches from matchExpr["CHILD"]                                                                                // 1597
           	1 type (only|nth|...)                                                                                            // 1598
           	2 what (child|of-type)                                                                                           // 1599
           	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)                                                                     // 1600
           	4 xn-component of xn+y argument ([+-]?\d*n|)                                                                     // 1601
           	5 sign of xn-component                                                                                           // 1602
           	6 x of xn-component                                                                                              // 1603
           	7 sign of y-component                                                                                            // 1604
           	8 y of y-component                                                                                               // 1605
           */ // 1606
											match[1] = match[1].toLowerCase(); // 1607
											// 1608
											if (match[1].slice(0, 3) === "nth") {
												// 1609
												// nth-* requires argument                                                                                       // 1610
												if (!match[3]) {
													// 1611
													Sizzle.error(match[0]); // 1612
												} // 1613
												// 1614
												// numeric x and y parameters for Expr.filter.CHILD                                                              // 1615
												// remember that false/true cast respectively to 0/1                                                             // 1616
												match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd")); // 1617
												match[5] = +(match[7] + match[8] || match[3] === "odd"); // 1618
												// 1619
												// other types prohibit arguments                                                                                 // 1620
											} else if (match[3]) {
												// 1621
												Sizzle.error(match[0]); // 1622
											} // 1623
											// 1624
											return match; // 1625
										}, // 1626
										// 1627
										"PSEUDO": function (match) {
											// 1628
											var excess,
											    // 1629
											unquoted = !match[6] && match[2]; // 1630
											// 1631
											if (matchExpr["CHILD"].test(match[0])) {
												// 1632
												return null; // 1633
											} // 1634
											// 1635
											// Accept quoted arguments as-is                                                                                  // 1636
											if (match[3]) {
												// 1637
												match[2] = match[4] || match[5] || ""; // 1638
												// 1639
												// Strip excess characters from unquoted arguments                                                                // 1640
											} else if (unquoted && rpseudo.test(unquoted) && ( // 1641
											// Get excess from tokenize (recursively)                                                                        // 1642
											excess = tokenize(unquoted, true)) && ( // 1643
											// advance to the next closing parenthesis                                                                       // 1644
											excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
												// 1645
												// 1646
												// excess is a negative index                                                                                    // 1647
												match[0] = match[0].slice(0, excess); // 1648
												match[2] = unquoted.slice(0, excess); // 1649
											} // 1650
											// 1651
											// Return only captures needed by the pseudo filter method (type and argument)                                    // 1652
											return match.slice(0, 3); // 1653
										} // 1654
									}, // 1655
									// 1656
									filter: { // 1657
										// 1658
										"TAG": function (nodeNameSelector) {
											// 1659
											var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase(); // 1660
											return nodeNameSelector === "*" ? // 1661
											function () {
												return true;
											} : // 1662
											function (elem) {
												// 1663
												return elem.nodeName && elem.nodeName.toLowerCase() === nodeName; // 1664
											}; // 1665
										}, // 1666
										// 1667
										"CLASS": function (className) {
											// 1668
											var pattern = classCache[className + " "]; // 1669
											// 1670
											return pattern || // 1671
											(pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && // 1672
											classCache(className, function (elem) {
												// 1673
												return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
											}); // 1675
										}, // 1676
										// 1677
										"ATTR": function (name, operator, check) {
											// 1678
											return function (elem) {
												// 1679
												var result = Sizzle.attr(elem, name); // 1680
												// 1681
												if (result == null) {
													// 1682
													return operator === "!="; // 1683
												} // 1684
												if (!operator) {
													// 1685
													return true; // 1686
												} // 1687
												// 1688
												result += ""; // 1689
												// 1690
												return operator === "=" ? result === check : // 1691
												operator === "!=" ? result !== check : // 1692
												operator === "^=" ? check && result.indexOf(check) === 0 : // 1693
												operator === "*=" ? check && result.indexOf(check) > -1 : // 1694
												operator === "$=" ? check && result.slice(-check.length) === check : // 1695
												operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : // 1696
												operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : // 1697
												false; // 1698
											}; // 1699
										}, // 1700
										// 1701
										"CHILD": function (type, what, argument, first, last) {
											// 1702
											var simple = type.slice(0, 3) !== "nth",
											    // 1703
											forward = type.slice(-4) !== "last",
											    // 1704
											ofType = what === "of-type"; // 1705
											// 1706
											return first === 1 && last === 0 ? // 1707
											// 1708
											// Shortcut for :nth-*(n)                                                                                        // 1709
											function (elem) {
												// 1710
												return !!elem.parentNode; // 1711
											} : // 1712
											// 1713
											function (elem, context, xml) {
												// 1714
												var cache,
												    outerCache,
												    node,
												    diff,
												    nodeIndex,
												    start,
												    // 1715
												dir = simple !== forward ? "nextSibling" : "previousSibling",
												    // 1716
												parent = elem.parentNode,
												    // 1717
												name = ofType && elem.nodeName.toLowerCase(),
												    // 1718
												useCache = !xml && !ofType; // 1719
												// 1720
												if (parent) {
													// 1721
													// 1722
													// :(first|last|only)-(child|of-type)                                                                          // 1723
													if (simple) {
														// 1724
														while (dir) {
															// 1725
															node = elem; // 1726
															while (node = node[dir]) {
																// 1727
																if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
																	// 1728
																	return false; // 1729
																} // 1730
															} // 1731
															// Reverse direction for :only-* (if we haven't yet done so)                                                 // 1732
															start = dir = type === "only" && !start && "nextSibling"; // 1733
														} // 1734
														return true; // 1735
													} // 1736
													// 1737
													start = [forward ? parent.firstChild : parent.lastChild]; // 1738
													// 1739
													// non-xml :nth-child(...) stores cache data on `parent`                                                       // 1740
													if (forward && useCache) {
														// 1741
														// Seek `elem` from a previously-cached index                                                                 // 1742
														outerCache = parent[expando] || (parent[expando] = {}); // 1743
														cache = outerCache[type] || []; // 1744
														nodeIndex = cache[0] === dirruns && cache[1]; // 1745
														diff = cache[0] === dirruns && cache[2]; // 1746
														node = nodeIndex && parent.childNodes[nodeIndex]; // 1747
														// 1748
														while (node = ++nodeIndex && node && node[dir] || ( // 1749
														// 1750
														// Fallback to seeking `elem` from the start                                                                 // 1751
														diff = nodeIndex = 0) || start.pop()) {
															// 1752
															// 1753
															// When found, cache indexes on `parent` and break                                                           // 1754
															if (node.nodeType === 1 && ++diff && node === elem) {
																// 1755
																outerCache[type] = [dirruns, nodeIndex, diff]; // 1756
																break; // 1757
															} // 1758
														} // 1759
														// 1760
														// Use previously-cached element index if available                                                            // 1761
													} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
														diff = cache[1]; // 1763
														// 1764
														// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)                                    // 1765
													} else {
														// 1766
														// Use the same loop as above to seek `elem` from the start                                                   // 1767
														while (node = ++nodeIndex && node && node[dir] || ( // 1768
														diff = nodeIndex = 0) || start.pop()) {
															// 1769
															// 1770
															if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
																// 1771
																// Cache the index of each encountered element                                                              // 1772
																if (useCache) {
																	// 1773
																	(node[expando] || (node[expando] = {}))[type] = [dirruns, diff]; // 1774
																} // 1775
																// 1776
																if (node === elem) {
																	// 1777
																	break; // 1778
																} // 1779
															} // 1780
														} // 1781
													} // 1782
													// 1783
													// Incorporate the offset, then check against cycle size                                                       // 1784
													diff -= last; // 1785
													return diff === first || diff % first === 0 && diff / first >= 0; // 1786
												} // 1787
											}; // 1788
										}, // 1789
										// 1790
										"PSEUDO": function (pseudo, argument) {
											// 1791
											// pseudo-class names are case-insensitive                                                                        // 1792
											// http://www.w3.org/TR/selectors/#pseudo-classes                                                                 // 1793
											// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                         // 1794
											// Remember that setFilters inherits from pseudos                                                                 // 1795
											var args,
											    // 1796
											fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || // 1797
											Sizzle.error("unsupported pseudo: " + pseudo); // 1798
											// 1799
											// The user may use createPseudo to indicate that                                                                 // 1800
											// arguments are needed to create the filter function                                                             // 1801
											// just as Sizzle does                                                                                            // 1802
											if (fn[expando]) {
												// 1803
												return fn(argument); // 1804
											} // 1805
											// 1806
											// But maintain support for old signatures                                                                        // 1807
											if (fn.length > 1) {
												// 1808
												args = [pseudo, pseudo, "", argument]; // 1809
												return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? // 1810
												markFunction(function (seed, matches) {
													// 1811
													var idx,
													    // 1812
													matched = fn(seed, argument),
													    // 1813
													i = matched.length; // 1814
													while (i--) {
														// 1815
														idx = indexOf(seed, matched[i]); // 1816
														seed[idx] = !(matches[idx] = matched[i]); // 1817
													} // 1818
												}) : // 1819
												function (elem) {
													// 1820
													return fn(elem, 0, args); // 1821
												}; // 1822
											} // 1823
											// 1824
											return fn; // 1825
										} // 1826
									}, // 1827
									// 1828
									pseudos: { // 1829
										// Potentially complex pseudos                                                                                     // 1830
										"not": markFunction(function (selector) {
											// 1831
											// Trim the selector passed to compile                                                                            // 1832
											// to avoid treating leading and trailing                                                                         // 1833
											// spaces as combinators                                                                                          // 1834
											var input = [],
											    // 1835
											results = [],
											    // 1836
											matcher = compile(selector.replace(rtrim, "$1")); // 1837
											// 1838
											return matcher[expando] ? // 1839
											markFunction(function (seed, matches, context, xml) {
												// 1840
												var elem,
												    // 1841
												unmatched = matcher(seed, null, xml, []),
												    // 1842
												i = seed.length; // 1843
												// 1844
												// Match elements unmatched by `matcher`                                                                        // 1845
												while (i--) {
													// 1846
													if (elem = unmatched[i]) {
														// 1847
														seed[i] = !(matches[i] = elem); // 1848
													} // 1849
												} // 1850
											}) : // 1851
											function (elem, context, xml) {
												// 1852
												input[0] = elem; // 1853
												matcher(input, null, xml, results); // 1854
												// Don't keep the element (issue #299)                                                                          // 1855
												input[0] = null; // 1856
												return !results.pop(); // 1857
											}; // 1858
										}), // 1859
										// 1860
										"has": markFunction(function (selector) {
											// 1861
											return function (elem) {
												// 1862
												return Sizzle(selector, elem).length > 0; // 1863
											}; // 1864
										}), // 1865
										// 1866
										"contains": markFunction(function (text) {
											// 1867
											text = text.replace(runescape, funescape); // 1868
											return function (elem) {
												// 1869
												return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1; // 1870
											}; // 1871
										}), // 1872
										// 1873
										// "Whether an element is represented by a :lang() selector                                                        // 1874
										// is based solely on the element's language value                                                                 // 1875
										// being equal to the identifier C,                                                                                // 1876
										// or beginning with the identifier C immediately followed by "-".                                                 // 1877
										// The matching of C against the element's language value is performed case-insensitively.                         // 1878
										// The identifier C does not have to be a valid language name."                                                    // 1879
										// http://www.w3.org/TR/selectors/#lang-pseudo                                                                     // 1880
										"lang": markFunction(function (lang) {
											// 1881
											// lang value must be a valid identifier                                                                          // 1882
											if (!ridentifier.test(lang || "")) {
												// 1883
												Sizzle.error("unsupported lang: " + lang); // 1884
											} // 1885
											lang = lang.replace(runescape, funescape).toLowerCase(); // 1886
											return function (elem) {
												// 1887
												var elemLang; // 1888
												do {
													// 1889
													if (elemLang = documentIsHTML ? // 1890
													elem.lang : // 1891
													elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
														// 1892
														// 1893
														elemLang = elemLang.toLowerCase(); // 1894
														return elemLang === lang || elemLang.indexOf(lang + "-") === 0; // 1895
													} // 1896
												} while ((elem = elem.parentNode) && elem.nodeType === 1); // 1897
												return false; // 1898
											}; // 1899
										}), // 1900
										// 1901
										// Miscellaneous                                                                                                   // 1902
										"target": function (elem) {
											// 1903
											var hash = window.location && window.location.hash; // 1904
											return hash && hash.slice(1) === elem.id; // 1905
										}, // 1906
										// 1907
										"root": function (elem) {
											// 1908
											return elem === docElem; // 1909
										}, // 1910
										// 1911
										"focus": function (elem) {
											// 1912
											return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
										}, // 1914
										// 1915
										// Boolean properties                                                                                              // 1916
										"enabled": function (elem) {
											// 1917
											return elem.disabled === false; // 1918
										}, // 1919
										// 1920
										"disabled": function (elem) {
											// 1921
											return elem.disabled === true; // 1922
										}, // 1923
										// 1924
										"checked": function (elem) {
											// 1925
											// In CSS3, :checked should return both checked and selected elements                                             // 1926
											// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1927
											var nodeName = elem.nodeName.toLowerCase(); // 1928
											return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected; // 1929
										}, // 1930
										// 1931
										"selected": function (elem) {
											// 1932
											// Accessing this property makes selected-by-default                                                              // 1933
											// options in Safari work properly                                                                                // 1934
											if (elem.parentNode) {
												// 1935
												elem.parentNode.selectedIndex; // 1936
											} // 1937
											// 1938
											return elem.selected === true; // 1939
										}, // 1940
										// 1941
										// Contents                                                                                                        // 1942
										"empty": function (elem) {
											// 1943
											// http://www.w3.org/TR/selectors/#empty-pseudo                                                                   // 1944
											// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),                          // 1945
											//   but not by others (comment: 8; processing instruction: 7; etc.)                                              // 1946
											// nodeType < 6 works because attributes (2) do not appear as children                                            // 1947
											for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
												// 1948
												if (elem.nodeType < 6) {
													// 1949
													return false; // 1950
												} // 1951
											} // 1952
											return true; // 1953
										}, // 1954
										// 1955
										"parent": function (elem) {
											// 1956
											return !Expr.pseudos["empty"](elem); // 1957
										}, // 1958
										// 1959
										// Element/input types                                                                                             // 1960
										"header": function (elem) {
											// 1961
											return rheader.test(elem.nodeName); // 1962
										}, // 1963
										// 1964
										"input": function (elem) {
											// 1965
											return rinputs.test(elem.nodeName); // 1966
										}, // 1967
										// 1968
										"button": function (elem) {
											// 1969
											var name = elem.nodeName.toLowerCase(); // 1970
											return name === "input" && elem.type === "button" || name === "button"; // 1971
										}, // 1972
										// 1973
										"text": function (elem) {
											// 1974
											var attr; // 1975
											return elem.nodeName.toLowerCase() === "input" && // 1976
											elem.type === "text" && ( // 1977
											// 1978
											// Support: IE<8                                                                                                 // 1979
											// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"                                  // 1980
											(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text"); // 1981
										}, // 1982
										// 1983
										// Position-in-collection                                                                                          // 1984
										"first": createPositionalPseudo(function () {
											// 1985
											return [0]; // 1986
										}), // 1987
										// 1988
										"last": createPositionalPseudo(function (matchIndexes, length) {
											// 1989
											return [length - 1]; // 1990
										}), // 1991
										// 1992
										"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
											// 1993
											return [argument < 0 ? argument + length : argument]; // 1994
										}), // 1995
										// 1996
										"even": createPositionalPseudo(function (matchIndexes, length) {
											// 1997
											var i = 0; // 1998
											for (; i < length; i += 2) {
												// 1999
												matchIndexes.push(i); // 2000
											} // 2001
											return matchIndexes; // 2002
										}), // 2003
										// 2004
										"odd": createPositionalPseudo(function (matchIndexes, length) {
											// 2005
											var i = 1; // 2006
											for (; i < length; i += 2) {
												// 2007
												matchIndexes.push(i); // 2008
											} // 2009
											return matchIndexes; // 2010
										}), // 2011
										// 2012
										"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
											// 2013
											var i = argument < 0 ? argument + length : argument; // 2014
											for (; --i >= 0;) {
												// 2015
												matchIndexes.push(i); // 2016
											} // 2017
											return matchIndexes; // 2018
										}), // 2019
										// 2020
										"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
											// 2021
											var i = argument < 0 ? argument + length : argument; // 2022
											for (; ++i < length;) {
												// 2023
												matchIndexes.push(i); // 2024
											} // 2025
											return matchIndexes; // 2026
										}) // 2027
										// 2028
									} }; // 2029
								// 2030
								Expr.pseudos["nth"] = Expr.pseudos["eq"]; // 2031
								// 2032
								// Add button/input type pseudos                                                                                     // 2033
								for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
									// 2034
									Expr.pseudos[i] = createInputPseudo(i); // 2035
								} // 2036
								for (i in { submit: true, reset: true }) {
									// 2037
									Expr.pseudos[i] = createButtonPseudo(i); // 2038
								} // 2039
								// 2040
								// Easy API for creating new setFilters                                                                              // 2041
								function setFilters() {} // 2042
								setFilters.prototype = Expr.filters = Expr.pseudos; // 2043
								Expr.setFilters = new setFilters(); // 2044
								// 2045
								tokenize = Sizzle.tokenize = function (selector, parseOnly) {
									// 2046
									var matched,
									    match,
									    tokens,
									    type,
									    // 2047
									soFar,
									    groups,
									    preFilters,
									    // 2048
									cached = tokenCache[selector + " "]; // 2049
									// 2050
									if (cached) {
										// 2051
										return parseOnly ? 0 : cached.slice(0); // 2052
									} // 2053
									// 2054
									soFar = selector; // 2055
									groups = []; // 2056
									preFilters = Expr.preFilter; // 2057
									// 2058
									while (soFar) {
										// 2059
										// 2060
										// Comma and first run                                                                                             // 2061
										if (!matched || (match = rcomma.exec(soFar))) {
											// 2062
											if (match) {
												// 2063
												// Don't consume trailing commas as valid                                                                        // 2064
												soFar = soFar.slice(match[0].length) || soFar; // 2065
											} // 2066
											groups.push(tokens = []); // 2067
										} // 2068
										// 2069
										matched = false; // 2070
										// 2071
										// Combinators                                                                                                     // 2072
										if (match = rcombinators.exec(soFar)) {
											// 2073
											matched = match.shift(); // 2074
											tokens.push({ // 2075
												value: matched, // 2076
												// Cast descendant combinators to space                                                                          // 2077
												type: match[0].replace(rtrim, " ") // 2078
											}); // 2079
											soFar = soFar.slice(matched.length); // 2080
										} // 2081
										// 2082
										// Filters                                                                                                         // 2083
										for (type in Expr.filter) {
											// 2084
											if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || ( // 2085
											match = preFilters[type](match)))) {
												// 2086
												matched = match.shift(); // 2087
												tokens.push({ // 2088
													value: matched, // 2089
													type: type, // 2090
													matches: match // 2091
												}); // 2092
												soFar = soFar.slice(matched.length); // 2093
											} // 2094
										} // 2095
										// 2096
										if (!matched) {
											// 2097
											break; // 2098
										} // 2099
									} // 2100
									// 2101
									// Return the length of the invalid excess                                                                          // 2102
									// if we're just parsing                                                                                            // 2103
									// Otherwise, throw an error or return tokens                                                                       // 2104
									return parseOnly ? // 2105
									soFar.length : // 2106
									soFar ? // 2107
									Sizzle.error(selector) : // 2108
									// Cache the tokens                                                                                               // 2109
									tokenCache(selector, groups).slice(0); // 2110
								}; // 2111
								// 2112
								function toSelector(tokens) {
									// 2113
									var i = 0,
									    // 2114
									len = tokens.length,
									    // 2115
									selector = ""; // 2116
									for (; i < len; i++) {
										// 2117
										selector += tokens[i].value; // 2118
									} // 2119
									return selector; // 2120
								} // 2121
								// 2122
								function addCombinator(matcher, combinator, base) {
									// 2123
									var dir = combinator.dir,
									    // 2124
									checkNonElements = base && dir === "parentNode",
									    // 2125
									doneName = done++; // 2126
									// 2127
									return combinator.first ? // 2128
									// Check against closest ancestor/preceding element                                                                // 2129
									function (elem, context, xml) {
										// 2130
										while (elem = elem[dir]) {
											// 2131
											if (elem.nodeType === 1 || checkNonElements) {
												// 2132
												return matcher(elem, context, xml); // 2133
											} // 2134
										} // 2135
									} : // 2136
									// 2137
									// Check against all ancestor/preceding elements                                                                   // 2138
									function (elem, context, xml) {
										// 2139
										var oldCache,
										    outerCache,
										    // 2140
										newCache = [dirruns, doneName]; // 2141
										// 2142
										// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching                               // 2143
										if (xml) {
											// 2144
											while (elem = elem[dir]) {
												// 2145
												if (elem.nodeType === 1 || checkNonElements) {
													// 2146
													if (matcher(elem, context, xml)) {
														// 2147
														return true; // 2148
													} // 2149
												} // 2150
											} // 2151
										} else {
											// 2152
											while (elem = elem[dir]) {
												// 2153
												if (elem.nodeType === 1 || checkNonElements) {
													// 2154
													outerCache = elem[expando] || (elem[expando] = {}); // 2155
													if ((oldCache = outerCache[dir]) && // 2156
													oldCache[0] === dirruns && oldCache[1] === doneName) {
														// 2157
														// 2158
														// Assign to newCache so results back-propagate to previous elements                                          // 2159
														return newCache[2] = oldCache[2]; // 2160
													} else {
														// 2161
														// Reuse newcache so results back-propagate to previous elements                                              // 2162
														outerCache[dir] = newCache; // 2163
														// 2164
														// A match means we're done; a fail means we have to keep checking                                            // 2165
														if (newCache[2] = matcher(elem, context, xml)) {
															// 2166
															return true; // 2167
														} // 2168
													} // 2169
												} // 2170
											} // 2171
										} // 2172
									}; // 2173
								} // 2174
								// 2175
								function elementMatcher(matchers) {
									// 2176
									return matchers.length > 1 ? // 2177
									function (elem, context, xml) {
										// 2178
										var i = matchers.length; // 2179
										while (i--) {
											// 2180
											if (!matchers[i](elem, context, xml)) {
												// 2181
												return false; // 2182
											} // 2183
										} // 2184
										return true; // 2185
									} : // 2186
									matchers[0]; // 2187
								} // 2188
								// 2189
								function multipleContexts(selector, contexts, results) {
									// 2190
									var i = 0,
									    // 2191
									len = contexts.length; // 2192
									for (; i < len; i++) {
										// 2193
										Sizzle(selector, contexts[i], results); // 2194
									} // 2195
									return results; // 2196
								} // 2197
								// 2198
								function condense(unmatched, map, filter, context, xml) {
									// 2199
									var elem,
									    // 2200
									newUnmatched = [],
									    // 2201
									i = 0,
									    // 2202
									len = unmatched.length,
									    // 2203
									mapped = map != null; // 2204
									// 2205
									for (; i < len; i++) {
										// 2206
										if (elem = unmatched[i]) {
											// 2207
											if (!filter || filter(elem, context, xml)) {
												// 2208
												newUnmatched.push(elem); // 2209
												if (mapped) {
													// 2210
													map.push(i); // 2211
												} // 2212
											} // 2213
										} // 2214
									} // 2215
									// 2216
									return newUnmatched; // 2217
								} // 2218
								// 2219
								function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
									// 2220
									if (postFilter && !postFilter[expando]) {
										// 2221
										postFilter = setMatcher(postFilter); // 2222
									} // 2223
									if (postFinder && !postFinder[expando]) {
										// 2224
										postFinder = setMatcher(postFinder, postSelector); // 2225
									} // 2226
									return markFunction(function (seed, results, context, xml) {
										// 2227
										var temp,
										    i,
										    elem,
										    // 2228
										preMap = [],
										    // 2229
										postMap = [],
										    // 2230
										preexisting = results.length,
										    // 2231
										// 2232
										// Get initial elements from seed or context                                                                      // 2233
										elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
										    // 2234
										// 2235
										// Prefilter to get matcher input, preserving a map for seed-results synchronization                              // 2236
										matcherIn = preFilter && (seed || !selector) ? // 2237
										condense(elems, preMap, preFilter, context, xml) : // 2238
										elems,
										    // 2239
										// 2240
										matcherOut = matcher ? // 2241
										// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,                     // 2242
										postFinder || (seed ? preFilter : preexisting || postFilter) ? // 2243
										// 2244
										// ...intermediate processing is necessary                                                                      // 2245
										[] : // 2246
										// 2247
										// ...otherwise use results directly                                                                            // 2248
										results : // 2249
										matcherIn; // 2250
										// 2251
										// Find primary matches                                                                                            // 2252
										if (matcher) {
											// 2253
											matcher(matcherIn, matcherOut, context, xml); // 2254
										} // 2255
										// 2256
										// Apply postFilter                                                                                                // 2257
										if (postFilter) {
											// 2258
											temp = condense(matcherOut, postMap); // 2259
											postFilter(temp, [], context, xml); // 2260
											// 2261
											// Un-match failing elements by moving them back to matcherIn                                                     // 2262
											i = temp.length; // 2263
											while (i--) {
												// 2264
												if (elem = temp[i]) {
													// 2265
													matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem); // 2266
												} // 2267
											} // 2268
										} // 2269
										// 2270
										if (seed) {
											// 2271
											if (postFinder || preFilter) {
												// 2272
												if (postFinder) {
													// 2273
													// Get the final matcherOut by condensing this intermediate into postFinder contexts                            // 2274
													temp = []; // 2275
													i = matcherOut.length; // 2276
													while (i--) {
														// 2277
														if (elem = matcherOut[i]) {
															// 2278
															// Restore matcherIn since elem is not yet a final match                                                      // 2279
															temp.push(matcherIn[i] = elem); // 2280
														} // 2281
													} // 2282
													postFinder(null, matcherOut = [], temp, xml); // 2283
												} // 2284
												// 2285
												// Move matched elements from seed to results to keep them synchronized                                          // 2286
												i = matcherOut.length; // 2287
												while (i--) {
													// 2288
													if ((elem = matcherOut[i]) && // 2289
													(temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
														// 2290
														// 2291
														seed[temp] = !(results[temp] = elem); // 2292
													} // 2293
												} // 2294
											} // 2295
											// 2296
											// Add elements to results, through postFinder if defined                                                          // 2297
										} else {
											// 2298
											matcherOut = condense( // 2299
											matcherOut === results ? // 2300
											matcherOut.splice(preexisting, matcherOut.length) : // 2301
											matcherOut // 2302
											); // 2303
											if (postFinder) {
												// 2304
												postFinder(null, results, matcherOut, xml); // 2305
											} else {
												// 2306
												push.apply(results, matcherOut); // 2307
											} // 2308
										} // 2309
									}); // 2310
								} // 2311
								// 2312
								function matcherFromTokens(tokens) {
									// 2313
									var checkContext,
									    matcher,
									    j,
									    // 2314
									len = tokens.length,
									    // 2315
									leadingRelative = Expr.relative[tokens[0].type],
									    // 2316
									implicitRelative = leadingRelative || Expr.relative[" "],
									    // 2317
									i = leadingRelative ? 1 : 0,
									    // 2318
									// 2319
									// The foundational matcher ensures that elements are reachable from top-level context(s)                          // 2320
									matchContext = addCombinator(function (elem) {
										// 2321
										return elem === checkContext; // 2322
									}, implicitRelative, true),
									    // 2323
									matchAnyContext = addCombinator(function (elem) {
										// 2324
										return indexOf(checkContext, elem) > -1; // 2325
									}, implicitRelative, true),
									    // 2326
									matchers = [function (elem, context, xml) {
										// 2327
										var ret = !leadingRelative && (xml || context !== outermostContext) || ( // 2328
										(checkContext = context).nodeType ? // 2329
										matchContext(elem, context, xml) : // 2330
										matchAnyContext(elem, context, xml)); // 2331
										// Avoid hanging onto element (issue #299)                                                                        // 2332
										checkContext = null; // 2333
										return ret; // 2334
									}]; // 2335
									// 2336
									for (; i < len; i++) {
										// 2337
										if (matcher = Expr.relative[tokens[i].type]) {
											// 2338
											matchers = [addCombinator(elementMatcher(matchers), matcher)]; // 2339
										} else {
											// 2340
											matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // 2341
											// 2342
											// Return special upon seeing a positional matcher                                                                // 2343
											if (matcher[expando]) {
												// 2344
												// Find the next relative operator (if any) for proper handling                                                  // 2345
												j = ++i; // 2346
												for (; j < len; j++) {
													// 2347
													if (Expr.relative[tokens[j].type]) {
														// 2348
														break; // 2349
													} // 2350
												} // 2351
												return setMatcher( // 2352
												i > 1 && elementMatcher(matchers), // 2353
												i > 1 && toSelector( // 2354
												// If the preceding token was a descendant combinator, insert an implicit any-element `*`                      // 2355
												tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" }) // 2356
												).replace(rtrim, "$1"), // 2357
												matcher, // 2358
												i < j && matcherFromTokens(tokens.slice(i, j)), // 2359
												j < len && matcherFromTokens(tokens = tokens.slice(j)), // 2360
												j < len && toSelector(tokens) // 2361
												); // 2362
											} // 2363
											matchers.push(matcher); // 2364
										} // 2365
									} // 2366
									// 2367
									return elementMatcher(matchers); // 2368
								} // 2369
								// 2370
								function matcherFromGroupMatchers(elementMatchers, setMatchers) {
									// 2371
									var bySet = setMatchers.length > 0,
									    // 2372
									byElement = elementMatchers.length > 0,
									    // 2373
									superMatcher = function (seed, context, xml, results, outermost) {
										// 2374
										var elem,
										    j,
										    matcher,
										    // 2375
										matchedCount = 0,
										    // 2376
										i = "0",
										    // 2377
										unmatched = seed && [],
										    // 2378
										setMatched = [],
										    // 2379
										contextBackup = outermostContext,
										    // 2380
										// We must always have either seed elements or outermost context                                                 // 2381
										elems = seed || byElement && Expr.find["TAG"]("*", outermost),
										    // 2382
										// Use integer dirruns iff this is the outermost matcher                                                         // 2383
										dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
										    // 2384
										len = elems.length; // 2385
										// 2386
										if (outermost) {
											// 2387
											outermostContext = context !== document && context; // 2388
										} // 2389
										// 2390
										// Add elements passing elementMatchers directly to results                                                       // 2391
										// Keep `i` a string if there are no elements so `matchedCount` will be "00" below                                // 2392
										// Support: IE<9, Safari                                                                                          // 2393
										// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id                          // 2394
										for (; i !== len && (elem = elems[i]) != null; i++) {
											// 2395
											if (byElement && elem) {
												// 2396
												j = 0; // 2397
												while (matcher = elementMatchers[j++]) {
													// 2398
													if (matcher(elem, context, xml)) {
														// 2399
														results.push(elem); // 2400
														break; // 2401
													} // 2402
												} // 2403
												if (outermost) {
													// 2404
													dirruns = dirrunsUnique; // 2405
												} // 2406
											} // 2407
											// 2408
											// Track unmatched elements for set filters                                                                      // 2409
											if (bySet) {
												// 2410
												// They will have gone through all possible matchers                                                            // 2411
												if (elem = !matcher && elem) {
													// 2412
													matchedCount--; // 2413
												} // 2414
												// 2415
												// Lengthen the array for every element, matched or not                                                         // 2416
												if (seed) {
													// 2417
													unmatched.push(elem); // 2418
												} // 2419
											} // 2420
										} // 2421
										// 2422
										// Apply set filters to unmatched elements                                                                        // 2423
										matchedCount += i; // 2424
										if (bySet && i !== matchedCount) {
											// 2425
											j = 0; // 2426
											while (matcher = setMatchers[j++]) {
												// 2427
												matcher(unmatched, setMatched, context, xml); // 2428
											} // 2429
											// 2430
											if (seed) {
												// 2431
												// Reintegrate element matches to eliminate the need for sorting                                                // 2432
												if (matchedCount > 0) {
													// 2433
													while (i--) {
														// 2434
														if (!(unmatched[i] || setMatched[i])) {
															// 2435
															setMatched[i] = pop.call(results); // 2436
														} // 2437
													} // 2438
												} // 2439
												// 2440
												// Discard index placeholder values to get only actual matches                                                  // 2441
												setMatched = condense(setMatched); // 2442
											} // 2443
											// 2444
											// Add matches to results                                                                                        // 2445
											push.apply(results, setMatched); // 2446
											// 2447
											// Seedless set matches succeeding multiple successful matchers stipulate sorting                                // 2448
											if (outermost && !seed && setMatched.length > 0 && // 2449
											matchedCount + setMatchers.length > 1) {
												// 2450
												// 2451
												Sizzle.uniqueSort(results); // 2452
											} // 2453
										} // 2454
										// 2455
										// Override manipulation of globals by nested matchers                                                            // 2456
										if (outermost) {
											// 2457
											dirruns = dirrunsUnique; // 2458
											outermostContext = contextBackup; // 2459
										} // 2460
										// 2461
										return unmatched; // 2462
									}; // 2463
									// 2464
									return bySet ? // 2465
									markFunction(superMatcher) : // 2466
									superMatcher; // 2467
								} // 2468
								// 2469
								compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
									// 2470
									var i,
									    // 2471
									setMatchers = [],
									    // 2472
									elementMatchers = [],
									    // 2473
									cached = compilerCache[selector + " "]; // 2474
									// 2475
									if (!cached) {
										// 2476
										// Generate a function of recursive functions that can be used to check each element                               // 2477
										if (!match) {
											// 2478
											match = tokenize(selector); // 2479
										} // 2480
										i = match.length; // 2481
										while (i--) {
											// 2482
											cached = matcherFromTokens(match[i]); // 2483
											if (cached[expando]) {
												// 2484
												setMatchers.push(cached); // 2485
											} else {
												// 2486
												elementMatchers.push(cached); // 2487
											} // 2488
										} // 2489
										// 2490
										// Cache the compiled function                                                                                     // 2491
										cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // 2492
										// 2493
										// Save selector and tokenization                                                                                  // 2494
										cached.selector = selector; // 2495
									} // 2496
									return cached; // 2497
								}; // 2498
								// 2499
								/**                                                                                                                  // 2500
         * A low-level selection function that works with Sizzle's compiled                                                  // 2501
         *  selector functions                                                                                               // 2502
         * @param {String|Function} selector A selector or a pre-compiled                                                    // 2503
         *  selector function built with Sizzle.compile                                                                      // 2504
         * @param {Element} context                                                                                          // 2505
         * @param {Array} [results]                                                                                          // 2506
         * @param {Array} [seed] A set of elements to match against                                                          // 2507
         */ // 2508
								select = Sizzle.select = function (selector, context, results, seed) {
									// 2509
									var i,
									    tokens,
									    token,
									    type,
									    find,
									    // 2510
									compiled = typeof selector === "function" && selector,
									    // 2511
									match = !seed && tokenize(selector = compiled.selector || selector); // 2512
									// 2513
									results = results || []; // 2514
									// 2515
									// Try to minimize operations if there is no seed and only one group                                                // 2516
									if (match.length === 1) {
										// 2517
										// 2518
										// Take a shortcut and set the context if the root selector is an ID                                               // 2519
										tokens = match[0] = match[0].slice(0); // 2520
										if (tokens.length > 2 && (token = tokens[0]).type === "ID" && // 2521
										support.getById && context.nodeType === 9 && documentIsHTML && // 2522
										Expr.relative[tokens[1].type]) {
											// 2523
											// 2524
											context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0]; // 2525
											if (!context) {
												// 2526
												return results; // 2527
												// 2528
												// Precompiled matchers will still verify ancestry, so step up a level                                            // 2529
											} else if (compiled) {
												// 2530
												context = context.parentNode; // 2531
											} // 2532
											// 2533
											selector = selector.slice(tokens.shift().value.length); // 2534
										} // 2535
										// 2536
										// Fetch a seed set for right-to-left matching                                                                     // 2537
										i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length; // 2538
										while (i--) {
											// 2539
											token = tokens[i]; // 2540
											// 2541
											// Abort if we hit a combinator                                                                                   // 2542
											if (Expr.relative[type = token.type]) {
												// 2543
												break; // 2544
											} // 2545
											if (find = Expr.find[type]) {
												// 2546
												// Search, expanding context for leading sibling combinators                                                     // 2547
												if (seed = find( // 2548
												token.matches[0].replace(runescape, funescape), // 2549
												rsibling.test(tokens[0].type) && testContext(context.parentNode) || context // 2550
												)) {
													// 2551
													// 2552
													// If seed is empty or no tokens remain, we can return early                                                    // 2553
													tokens.splice(i, 1); // 2554
													selector = seed.length && toSelector(tokens); // 2555
													if (!selector) {
														// 2556
														push.apply(results, seed); // 2557
														return results; // 2558
													} // 2559
													// 2560
													break; // 2561
												} // 2562
											} // 2563
										} // 2564
									} // 2565
									// 2566
									// Compile and execute a filtering function if one is not provided                                                  // 2567
									// Provide `match` to avoid retokenization if we modified the selector above                                        // 2568
									(compiled || compile(selector, match))( // 2569
									seed, // 2570
									context, // 2571
									!documentIsHTML, // 2572
									results, // 2573
									rsibling.test(selector) && testContext(context.parentNode) || context // 2574
									); // 2575
									return results; // 2576
								}; // 2577
								// 2578
								// One-time assignments                                                                                              // 2579
								// 2580
								// Sort stability                                                                                                    // 2581
								support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // 2582
								// 2583
								// Support: Chrome 14-35+                                                                                            // 2584
								// Always assume duplicates if they aren't passed to the comparison function                                         // 2585
								support.detectDuplicates = !!hasDuplicate; // 2586
								// 2587
								// Initialize against the default document                                                                           // 2588
								setDocument(); // 2589
								// 2590
								// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                              // 2591
								// Detached nodes confoundingly follow *each other*                                                                  // 2592
								support.sortDetached = assert(function (div1) {
									// 2593
									// Should return 1, but returns 4 (following)                                                                       // 2594
									return div1.compareDocumentPosition(document.createElement("div")) & 1; // 2595
								}); // 2596
								// 2597
								// Support: IE<8                                                                                                     // 2598
								// Prevent attribute/property "interpolation"                                                                        // 2599
								// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 2600
								if (!assert(function (div) {
									// 2601
									div.innerHTML = "<a href='#'></a>"; // 2602
									return div.firstChild.getAttribute("href") === "#"; // 2603
								})) {
									// 2604
									addHandle("type|href|height|width", function (elem, name, isXML) {
										// 2605
										if (!isXML) {
											// 2606
											return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2); // 2607
										} // 2608
									}); // 2609
								} // 2610
								// 2611
								// Support: IE<9                                                                                                     // 2612
								// Use defaultValue in place of getAttribute("value")                                                                // 2613
								if (!support.attributes || !assert(function (div) {
									// 2614
									div.innerHTML = "<input/>"; // 2615
									div.firstChild.setAttribute("value", ""); // 2616
									return div.firstChild.getAttribute("value") === ""; // 2617
								})) {
									// 2618
									addHandle("value", function (elem, name, isXML) {
										// 2619
										if (!isXML && elem.nodeName.toLowerCase() === "input") {
											// 2620
											return elem.defaultValue; // 2621
										} // 2622
									}); // 2623
								} // 2624
								// 2625
								// Support: IE<9                                                                                                     // 2626
								// Use getAttributeNode to fetch booleans when getAttribute lies                                                     // 2627
								if (!assert(function (div) {
									// 2628
									return div.getAttribute("disabled") == null; // 2629
								})) {
									// 2630
									addHandle(booleans, function (elem, name, isXML) {
										// 2631
										var val; // 2632
										if (!isXML) {
											// 2633
											return elem[name] === true ? name.toLowerCase() : // 2634
											(val = elem.getAttributeNode(name)) && val.specified ? // 2635
											val.value : // 2636
											null; // 2637
										} // 2638
									}); // 2639
								} // 2640
								// 2641
								return Sizzle; // 2642
								// 2643
							}(window); // 2644
							// 2645
							// 2646
							// 2647
							jQuery.find = Sizzle; // 2648
							jQuery.expr = Sizzle.selectors; // 2649
							jQuery.expr[":"] = jQuery.expr.pseudos; // 2650
							jQuery.unique = Sizzle.uniqueSort; // 2651
							jQuery.text = Sizzle.getText; // 2652
							jQuery.isXMLDoc = Sizzle.isXML; // 2653
							jQuery.contains = Sizzle.contains; // 2654
							// 2655
							// 2656
							// 2657
							var rneedsContext = jQuery.expr.match.needsContext; // 2658
							// 2659
							var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/; // 2660
							// 2661
							// 2662
							// 2663
							var risSimple = /^.[^:#\[\.,]*$/; // 2664
							// 2665
							// Implement the identical functionality for filter and not                                                          // 2666
							function winnow(elements, qualifier, not) {
								// 2667
								if (jQuery.isFunction(qualifier)) {
									// 2668
									return jQuery.grep(elements, function (elem, i) {
										// 2669
										/* jshint -W018 */ // 2670
										return !!qualifier.call(elem, i, elem) !== not; // 2671
									}); // 2672
									// 2673
								} // 2674
								// 2675
								if (qualifier.nodeType) {
									// 2676
									return jQuery.grep(elements, function (elem) {
										// 2677
										return elem === qualifier !== not; // 2678
									}); // 2679
									// 2680
								} // 2681
								// 2682
								if (typeof qualifier === "string") {
									// 2683
									if (risSimple.test(qualifier)) {
										// 2684
										return jQuery.filter(qualifier, elements, not); // 2685
									} // 2686
									// 2687
									qualifier = jQuery.filter(qualifier, elements); // 2688
								} // 2689
								// 2690
								return jQuery.grep(elements, function (elem) {
									// 2691
									return jQuery.inArray(elem, qualifier) >= 0 !== not; // 2692
								}); // 2693
							} // 2694
							// 2695
							jQuery.filter = function (expr, elems, not) {
								// 2696
								var elem = elems[0]; // 2697
								// 2698
								if (not) {
									// 2699
									expr = ":not(" + expr + ")"; // 2700
								} // 2701
								// 2702
								return elems.length === 1 && elem.nodeType === 1 ? // 2703
								jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : // 2704
								jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
									// 2705
									return elem.nodeType === 1; // 2706
								})); // 2707
							}; // 2708
							// 2709
							jQuery.fn.extend({ // 2710
								find: function (selector) {
									// 2711
									var i,
									    // 2712
									ret = [],
									    // 2713
									self = this,
									    // 2714
									len = self.length; // 2715
									// 2716
									if (typeof selector !== "string") {
										// 2717
										return this.pushStack(jQuery(selector).filter(function () {
											// 2718
											for (i = 0; i < len; i++) {
												// 2719
												if (jQuery.contains(self[i], this)) {
													// 2720
													return true; // 2721
												} // 2722
											} // 2723
										})); // 2724
									} // 2725
									// 2726
									for (i = 0; i < len; i++) {
										// 2727
										jQuery.find(selector, self[i], ret); // 2728
									} // 2729
									// 2730
									// Needed because $( selector, context ) becomes $( context ).find( selector )                                     // 2731
									ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret); // 2732
									ret.selector = this.selector ? this.selector + " " + selector : selector; // 2733
									return ret; // 2734
								}, // 2735
								filter: function (selector) {
									// 2736
									return this.pushStack(winnow(this, selector || [], false)); // 2737
								}, // 2738
								not: function (selector) {
									// 2739
									return this.pushStack(winnow(this, selector || [], true)); // 2740
								}, // 2741
								is: function (selector) {
									// 2742
									return !!winnow( // 2743
									this, // 2744
									// 2745
									// If this is a positional/relative selector, check membership in the returned set                                // 2746
									// so $("p:first").is("p:last") won't return true for a doc with two "p".                                         // 2747
									typeof selector === "string" && rneedsContext.test(selector) ? // 2748
									jQuery(selector) : // 2749
									selector || [], // 2750
									false // 2751
									).length; // 2752
								} // 2753
							}); // 2754
							// 2755
							// 2756
							// Initialize a jQuery object                                                                                        // 2757
							// 2758
							// 2759
							// A central reference to the root jQuery(document)                                                                  // 2760
							var rootjQuery,
							    // 2761
							// 2762
							// Use the correct document accordingly with window argument (sandbox)                                              // 2763
							document = window.document,
							    // 2764
							// 2765
							// A simple way to check for HTML strings                                                                           // 2766
							// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                                 // 2767
							// Strict HTML recognition (#11290: must start with <)                                                              // 2768
							rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
							    // 2769
							// 2770
							init = jQuery.fn.init = function (selector, context) {
								// 2771
								var match, elem; // 2772
								// 2773
								// HANDLE: $(""), $(null), $(undefined), $(false)                                                                  // 2774
								if (!selector) {
									// 2775
									return this; // 2776
								} // 2777
								// 2778
								// Handle HTML strings                                                                                             // 2779
								if (typeof selector === "string") {
									// 2780
									if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
										// 2781
										// Assume that strings that start and end with <> are HTML and skip the regex check                              // 2782
										match = [null, selector, null]; // 2783
										// 2784
									} else {
										// 2785
										match = rquickExpr.exec(selector); // 2786
									} // 2787
									// 2788
									// Match html or make sure no context is specified for #id                                                        // 2789
									if (match && (match[1] || !context)) {
										// 2790
										// 2791
										// HANDLE: $(html) -> $(array)                                                                                   // 2792
										if (match[1]) {
											// 2793
											context = context instanceof jQuery ? context[0] : context; // 2794
											// 2795
											// scripts is true for back-compat                                                                              // 2796
											// Intentionally let the error be thrown if parseHTML is not present                                            // 2797
											jQuery.merge(this, jQuery.parseHTML( // 2798
											match[1], // 2799
											context && context.nodeType ? context.ownerDocument || context : document, // 2800
											true // 2801
											)); // 2802
											// 2803
											// HANDLE: $(html, props)                                                                                       // 2804
											if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
												// 2805
												for (match in context) {
													// 2806
													// Properties of context are called as methods if possible                                                    // 2807
													if (jQuery.isFunction(this[match])) {
														// 2808
														this[match](context[match]); // 2809
														// 2810
														// ...and otherwise set as attributes                                                                         // 2811
													} else {
														// 2812
														this.attr(match, context[match]); // 2813
													} // 2814
												} // 2815
											} // 2816
											// 2817
											return this; // 2818
											// 2819
											// HANDLE: $(#id)                                                                                                // 2820
										} else {
											// 2821
											elem = document.getElementById(match[2]); // 2822
											// 2823
											// Check parentNode to catch when Blackberry 4.6 returns                                                        // 2824
											// nodes that are no longer in the document #6963                                                               // 2825
											if (elem && elem.parentNode) {
												// 2826
												// Handle the case where IE and Opera return items                                                             // 2827
												// by name instead of ID                                                                                       // 2828
												if (elem.id !== match[2]) {
													// 2829
													return rootjQuery.find(selector); // 2830
												} // 2831
												// 2832
												// Otherwise, we inject the element directly into the jQuery object                                            // 2833
												this.length = 1; // 2834
												this[0] = elem; // 2835
											} // 2836
											// 2837
											this.context = document; // 2838
											this.selector = selector; // 2839
											return this; // 2840
										} // 2841
										// 2842
										// HANDLE: $(expr, $(...))                                                                                        // 2843
									} else if (!context || context.jquery) {
										// 2844
										return (context || rootjQuery).find(selector); // 2845
										// 2846
										// HANDLE: $(expr, context)                                                                                       // 2847
										// (which is just equivalent to: $(context).find(expr)                                                            // 2848
									} else {
										// 2849
										return this.constructor(context).find(selector); // 2850
									} // 2851
									// 2852
									// HANDLE: $(DOMElement)                                                                                           // 2853
								} else if (selector.nodeType) {
									// 2854
									this.context = this[0] = selector; // 2855
									this.length = 1; // 2856
									return this; // 2857
									// 2858
									// HANDLE: $(function)                                                                                             // 2859
									// Shortcut for document ready                                                                                     // 2860
								} else if (jQuery.isFunction(selector)) {
									// 2861
									return typeof rootjQuery.ready !== "undefined" ? // 2862
									rootjQuery.ready(selector) : // 2863
									// Execute immediately if ready is not present                                                                   // 2864
									selector(jQuery); // 2865
								} // 2866
								// 2867
								if (selector.selector !== undefined) {
									// 2868
									this.selector = selector.selector; // 2869
									this.context = selector.context; // 2870
								} // 2871
								// 2872
								return jQuery.makeArray(selector, this); // 2873
							}; // 2874
							// 2875
							// Give the init function the jQuery prototype for later instantiation                                               // 2876
							init.prototype = jQuery.fn; // 2877
							// 2878
							// Initialize central reference                                                                                      // 2879
							rootjQuery = jQuery(document); // 2880
							// 2881
							// 2882
							var rparentsprev = /^(?:parents|prev(?:Until|All))/,
							    // 2883
							// methods guaranteed to produce a unique set when starting from a unique set                                       // 2884
							guaranteedUnique = { // 2885
								children: true, // 2886
								contents: true, // 2887
								next: true, // 2888
								prev: true // 2889
							}; // 2890
							// 2891
							jQuery.extend({ // 2892
								dir: function (elem, dir, until) {
									// 2893
									var matched = [],
									    // 2894
									cur = elem[dir]; // 2895
									// 2896
									while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
										if (cur.nodeType === 1) {
											// 2898
											matched.push(cur); // 2899
										} // 2900
										cur = cur[dir]; // 2901
									} // 2902
									return matched; // 2903
								}, // 2904
								// 2905
								sibling: function (n, elem) {
									// 2906
									var r = []; // 2907
									// 2908
									for (; n; n = n.nextSibling) {
										// 2909
										if (n.nodeType === 1 && n !== elem) {
											// 2910
											r.push(n); // 2911
										} // 2912
									} // 2913
									// 2914
									return r; // 2915
								} // 2916
							}); // 2917
							// 2918
							jQuery.fn.extend({ // 2919
								has: function (target) {
									// 2920
									var i,
									    // 2921
									targets = jQuery(target, this),
									    // 2922
									len = targets.length; // 2923
									// 2924
									return this.filter(function () {
										// 2925
										for (i = 0; i < len; i++) {
											// 2926
											if (jQuery.contains(this, targets[i])) {
												// 2927
												return true; // 2928
											} // 2929
										} // 2930
									}); // 2931
								}, // 2932
								// 2933
								closest: function (selectors, context) {
									// 2934
									var cur,
									    // 2935
									i = 0,
									    // 2936
									l = this.length,
									    // 2937
									matched = [],
									    // 2938
									pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? // 2939
									jQuery(selectors, context || this.context) : // 2940
									0; // 2941
									// 2942
									for (; i < l; i++) {
										// 2943
										for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
											// 2944
											// Always skip document fragments                                                                                // 2945
											if (cur.nodeType < 11 && (pos ? // 2946
											pos.index(cur) > -1 : // 2947
											// 2948
											// Don't pass non-elements to Sizzle                                                                            // 2949
											cur.nodeType === 1 && // 2950
											jQuery.find.matchesSelector(cur, selectors))) {
												// 2951
												// 2952
												matched.push(cur); // 2953
												break; // 2954
											} // 2955
										} // 2956
									} // 2957
									// 2958
									return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched); // 2959
								}, // 2960
								// 2961
								// Determine the position of an element within                                                                      // 2962
								// the matched set of elements                                                                                      // 2963
								index: function (elem) {
									// 2964
									// 2965
									// No argument, return index in parent                                                                             // 2966
									if (!elem) {
										// 2967
										return this[0] && this[0].parentNode ? this.first().prevAll().length : -1; // 2968
									} // 2969
									// 2970
									// index in selector                                                                                               // 2971
									if (typeof elem === "string") {
										// 2972
										return jQuery.inArray(this[0], jQuery(elem)); // 2973
									} // 2974
									// 2975
									// Locate the position of the desired element                                                                      // 2976
									return jQuery.inArray( // 2977
									// If it receives a jQuery object, the first element is used                                                      // 2978
									elem.jquery ? elem[0] : elem, this); // 2979
								}, // 2980
								// 2981
								add: function (selector, context) {
									// 2982
									return this.pushStack( // 2983
									jQuery.unique( // 2984
									jQuery.merge(this.get(), jQuery(selector, context)) // 2985
									) // 2986
									); // 2987
								}, // 2988
								// 2989
								addBack: function (selector) {
									// 2990
									return this.add(selector == null ? // 2991
									this.prevObject : this.prevObject.filter(selector) // 2992
									); // 2993
								} // 2994
							}); // 2995
							// 2996
							function sibling(cur, dir) {
								// 2997
								do {
									// 2998
									cur = cur[dir]; // 2999
								} while (cur && cur.nodeType !== 1); // 3000
								// 3001
								return cur; // 3002
							} // 3003
							// 3004
							jQuery.each({ // 3005
								parent: function (elem) {
									// 3006
									var parent = elem.parentNode; // 3007
									return parent && parent.nodeType !== 11 ? parent : null; // 3008
								}, // 3009
								parents: function (elem) {
									// 3010
									return jQuery.dir(elem, "parentNode"); // 3011
								}, // 3012
								parentsUntil: function (elem, i, until) {
									// 3013
									return jQuery.dir(elem, "parentNode", until); // 3014
								}, // 3015
								next: function (elem) {
									// 3016
									return sibling(elem, "nextSibling"); // 3017
								}, // 3018
								prev: function (elem) {
									// 3019
									return sibling(elem, "previousSibling"); // 3020
								}, // 3021
								nextAll: function (elem) {
									// 3022
									return jQuery.dir(elem, "nextSibling"); // 3023
								}, // 3024
								prevAll: function (elem) {
									// 3025
									return jQuery.dir(elem, "previousSibling"); // 3026
								}, // 3027
								nextUntil: function (elem, i, until) {
									// 3028
									return jQuery.dir(elem, "nextSibling", until); // 3029
								}, // 3030
								prevUntil: function (elem, i, until) {
									// 3031
									return jQuery.dir(elem, "previousSibling", until); // 3032
								}, // 3033
								siblings: function (elem) {
									// 3034
									return jQuery.sibling((elem.parentNode || {}).firstChild, elem); // 3035
								}, // 3036
								children: function (elem) {
									// 3037
									return jQuery.sibling(elem.firstChild); // 3038
								}, // 3039
								contents: function (elem) {
									// 3040
									return jQuery.nodeName(elem, "iframe") ? // 3041
									elem.contentDocument || elem.contentWindow.document : // 3042
									jQuery.merge([], elem.childNodes); // 3043
								} // 3044
							}, function (name, fn) {
								// 3045
								jQuery.fn[name] = function (until, selector) {
									// 3046
									var ret = jQuery.map(this, fn, until); // 3047
									// 3048
									if (name.slice(-5) !== "Until") {
										// 3049
										selector = until; // 3050
									} // 3051
									// 3052
									if (selector && typeof selector === "string") {
										// 3053
										ret = jQuery.filter(selector, ret); // 3054
									} // 3055
									// 3056
									if (this.length > 1) {
										// 3057
										// Remove duplicates                                                                                              // 3058
										if (!guaranteedUnique[name]) {
											// 3059
											ret = jQuery.unique(ret); // 3060
										} // 3061
										// 3062
										// Reverse order for parents* and prev-derivatives                                                                // 3063
										if (rparentsprev.test(name)) {
											// 3064
											ret = ret.reverse(); // 3065
										} // 3066
									} // 3067
									// 3068
									return this.pushStack(ret); // 3069
								}; // 3070
							}); // 3071
							var rnotwhite = /\S+/g; // 3072
							// 3073
							// 3074
							// 3075
							// String to Object options format cache                                                                             // 3076
							var optionsCache = {}; // 3077
							// 3078
							// Convert String-formatted options into Object-formatted ones and store in cache                                    // 3079
							function createOptions(options) {
								// 3080
								var object = optionsCache[options] = {}; // 3081
								jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
									// 3082
									object[flag] = true; // 3083
								}); // 3084
								return object; // 3085
							} // 3086
							// 3087
							/*                                                                                                                   // 3088
        * Create a callback list using the following parameters:                                                            // 3089
        *                                                                                                                   // 3090
        *	options: an optional list of space-separated options that will change how                                         // 3091
        *			the callback list behaves or a more traditional option object                                                   // 3092
        *                                                                                                                   // 3093
        * By default a callback list will act like an event callback list and can be                                        // 3094
        * "fired" multiple times.                                                                                           // 3095
        *                                                                                                                   // 3096
        * Possible options:                                                                                                 // 3097
        *                                                                                                                   // 3098
        *	once:			will ensure the callback list can only be fired once (like a Deferred)                                    // 3099
        *                                                                                                                   // 3100
        *	memory:			will keep track of previous values and will call any callback added                                     // 3101
        *					after the list has been fired right away with the latest "memorized"                                          // 3102
        *					values (like a Deferred)                                                                                      // 3103
        *                                                                                                                   // 3104
        *	unique:			will ensure a callback can only be added once (no duplicate in the list)                                // 3105
        *                                                                                                                   // 3106
        *	stopOnFalse:	interrupt callings when a callback returns false                                                     // 3107
        *                                                                                                                   // 3108
        */ // 3109
							jQuery.Callbacks = function (options) {
								// 3110
								// 3111
								// Convert options from String-formatted to Object-formatted if needed                                              // 3112
								// (we check in cache first)                                                                                        // 3113
								options = typeof options === "string" ? // 3114
								optionsCache[options] || createOptions(options) : // 3115
								jQuery.extend({}, options); // 3116
								// 3117
								var // Flag to know if list is currently firing                                                                     // 3118
								firing,
								    // 3119
								// Last fire value (for non-forgettable lists)                                                                     // 3120
								memory,
								    // 3121
								// Flag to know if list was already fired                                                                          // 3122
								fired,
								    // 3123
								// End of the loop when firing                                                                                     // 3124
								firingLength,
								    // 3125
								// Index of currently firing callback (modified by remove if needed)                                               // 3126
								firingIndex,
								    // 3127
								// First callback to fire (used internally by add and fireWith)                                                    // 3128
								firingStart,
								    // 3129
								// Actual callback list                                                                                            // 3130
								list = [],
								    // 3131
								// Stack of fire calls for repeatable lists                                                                        // 3132
								stack = !options.once && [],
								    // 3133
								// Fire callbacks                                                                                                  // 3134
								fire = function (data) {
									// 3135
									memory = options.memory && data; // 3136
									fired = true; // 3137
									firingIndex = firingStart || 0; // 3138
									firingStart = 0; // 3139
									firingLength = list.length; // 3140
									firing = true; // 3141
									for (; list && firingIndex < firingLength; firingIndex++) {
										// 3142
										if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
											// 3143
											memory = false; // To prevent further calls using add                                                           // 3144
											break; // 3145
										} // 3146
									} // 3147
									firing = false; // 3148
									if (list) {
										// 3149
										if (stack) {
											// 3150
											if (stack.length) {
												// 3151
												fire(stack.shift()); // 3152
											} // 3153
										} else if (memory) {
											// 3154
											list = []; // 3155
										} else {
											// 3156
											self.disable(); // 3157
										} // 3158
									} // 3159
								},
								    // 3160
								// Actual Callbacks object                                                                                         // 3161
								self = { // 3162
									// Add a callback or a collection of callbacks to the list                                                        // 3163
									add: function () {
										// 3164
										if (list) {
											// 3165
											// First, we save the current length                                                                            // 3166
											var start = list.length; // 3167
											(function add(args) {
												// 3168
												jQuery.each(args, function (_, arg) {
													// 3169
													var type = jQuery.type(arg); // 3170
													if (type === "function") {
														// 3171
														if (!options.unique || !self.has(arg)) {
															// 3172
															list.push(arg); // 3173
														} // 3174
													} else if (arg && arg.length && type !== "string") {
														// 3175
														// Inspect recursively                                                                                       // 3176
														add(arg); // 3177
													} // 3178
												}); // 3179
											})(arguments); // 3180
											// Do we need to add the callbacks to the                                                                       // 3181
											// current firing batch?                                                                                        // 3182
											if (firing) {
												// 3183
												firingLength = list.length; // 3184
												// With memory, if we're not firing then                                                                        // 3185
												// we should call right away                                                                                    // 3186
											} else if (memory) {
												// 3187
												firingStart = start; // 3188
												fire(memory); // 3189
											} // 3190
										} // 3191
										return this; // 3192
									}, // 3193
									// Remove a callback from the list                                                                                // 3194
									remove: function () {
										// 3195
										if (list) {
											// 3196
											jQuery.each(arguments, function (_, arg) {
												// 3197
												var index; // 3198
												while ((index = jQuery.inArray(arg, list, index)) > -1) {
													// 3199
													list.splice(index, 1); // 3200
													// Handle firing indexes                                                                                      // 3201
													if (firing) {
														// 3202
														if (index <= firingLength) {
															// 3203
															firingLength--; // 3204
														} // 3205
														if (index <= firingIndex) {
															// 3206
															firingIndex--; // 3207
														} // 3208
													} // 3209
												} // 3210
											}); // 3211
										} // 3212
										return this; // 3213
									}, // 3214
									// Check if a given callback is in the list.                                                                      // 3215
									// If no argument is given, return whether or not list has callbacks attached.                                    // 3216
									has: function (fn) {
										// 3217
										return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length); // 3218
									}, // 3219
									// Remove all callbacks from the list                                                                             // 3220
									empty: function () {
										// 3221
										list = []; // 3222
										firingLength = 0; // 3223
										return this; // 3224
									}, // 3225
									// Have the list do nothing anymore                                                                               // 3226
									disable: function () {
										// 3227
										list = stack = memory = undefined; // 3228
										return this; // 3229
									}, // 3230
									// Is it disabled?                                                                                                // 3231
									disabled: function () {
										// 3232
										return !list; // 3233
									}, // 3234
									// Lock the list in its current state                                                                             // 3235
									lock: function () {
										// 3236
										stack = undefined; // 3237
										if (!memory) {
											// 3238
											self.disable(); // 3239
										} // 3240
										return this; // 3241
									}, // 3242
									// Is it locked?                                                                                                  // 3243
									locked: function () {
										// 3244
										return !stack; // 3245
									}, // 3246
									// Call all callbacks with the given context and arguments                                                        // 3247
									fireWith: function (context, args) {
										// 3248
										if (list && (!fired || stack)) {
											// 3249
											args = args || []; // 3250
											args = [context, args.slice ? args.slice() : args]; // 3251
											if (firing) {
												// 3252
												stack.push(args); // 3253
											} else {
												// 3254
												fire(args); // 3255
											} // 3256
										} // 3257
										return this; // 3258
									}, // 3259
									// Call all the callbacks with the given arguments                                                                // 3260
									fire: function () {
										// 3261
										self.fireWith(this, arguments); // 3262
										return this; // 3263
									}, // 3264
									// To know if the callbacks have already been called at least once                                                // 3265
									fired: function () {
										// 3266
										return !!fired; // 3267
									} // 3268
								}; // 3269
								// 3270
								return self; // 3271
							}; // 3272
							// 3273
							// 3274
							jQuery.extend({ // 3275
								// 3276
								Deferred: function (func) {
									// 3277
									var tuples = [// 3278
									// action, add listener, listener list, final state                                                              // 3279
									["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], // 3280
									["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], // 3281
									["notify", "progress", jQuery.Callbacks("memory")] // 3282
									],
									    // 3283
									state = "pending",
									    // 3284
									promise = { // 3285
										state: function () {
											// 3286
											return state; // 3287
										}, // 3288
										always: function () {
											// 3289
											deferred.done(arguments).fail(arguments); // 3290
											return this; // 3291
										}, // 3292
										then: function () /* fnDone, fnFail, fnProgress */{
											// 3293
											var fns = arguments; // 3294
											return jQuery.Deferred(function (newDefer) {
												// 3295
												jQuery.each(tuples, function (i, tuple) {
													// 3296
													var fn = jQuery.isFunction(fns[i]) && fns[i]; // 3297
													// deferred[ done | fail | progress ] for forwarding actions to newDefer                                      // 3298
													deferred[tuple[1]](function () {
														// 3299
														var returned = fn && fn.apply(this, arguments); // 3300
														if (returned && jQuery.isFunction(returned.promise)) {
															// 3301
															returned.promise() // 3302
															.done(newDefer.resolve) // 3303
															.fail(newDefer.reject) // 3304
															.progress(newDefer.notify); // 3305
														} else {
															// 3306
															newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
														} // 3308
													}); // 3309
												}); // 3310
												fns = null; // 3311
											}).promise(); // 3312
										}, // 3313
										// Get a promise for this deferred                                                                               // 3314
										// If obj is provided, the promise aspect is added to the object                                                 // 3315
										promise: function (obj) {
											// 3316
											return obj != null ? jQuery.extend(obj, promise) : promise; // 3317
										} // 3318
									},
									    // 3319
									deferred = {}; // 3320
									// 3321
									// Keep pipe for back-compat                                                                                       // 3322
									promise.pipe = promise.then; // 3323
									// 3324
									// Add list-specific methods                                                                                       // 3325
									jQuery.each(tuples, function (i, tuple) {
										// 3326
										var list = tuple[2],
										    // 3327
										stateString = tuple[3]; // 3328
										// 3329
										// promise[ done | fail | progress ] = list.add                                                                   // 3330
										promise[tuple[1]] = list.add; // 3331
										// 3332
										// Handle state                                                                                                   // 3333
										if (stateString) {
											// 3334
											list.add(function () {
												// 3335
												// state = [ resolved | rejected ]                                                                              // 3336
												state = stateString; // 3337
												// 3338
												// [ reject_list | resolve_list ].disable; progress_list.lock                                                    // 3339
											}, tuples[i ^ 1][2].disable, tuples[2][2].lock); // 3340
										} // 3341
										// 3342
										// deferred[ resolve | reject | notify ]                                                                          // 3343
										deferred[tuple[0]] = function () {
											// 3344
											deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments); // 3345
											return this; // 3346
										}; // 3347
										deferred[tuple[0] + "With"] = list.fireWith; // 3348
									}); // 3349
									// 3350
									// Make the deferred a promise                                                                                     // 3351
									promise.promise(deferred); // 3352
									// 3353
									// Call given func if any                                                                                          // 3354
									if (func) {
										// 3355
										func.call(deferred, deferred); // 3356
									} // 3357
									// 3358
									// All done!                                                                                                       // 3359
									return deferred; // 3360
								}, // 3361
								// 3362
								// Deferred helper                                                                                                  // 3363
								when: function (subordinate /* , ..., subordinateN */) {
									// 3364
									var i = 0,
									    // 3365
									resolveValues = slice.call(arguments),
									    // 3366
									length = resolveValues.length,
									    // 3367
									// 3368
									// the count of uncompleted subordinates                                                                          // 3369
									remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
									    // 3370
									// 3371
									// the master Deferred. If resolveValues consist of only a single Deferred, just use that.                        // 3372
									deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
									    // 3373
									// 3374
									// Update function for both resolve and progress values                                                           // 3375
									updateFunc = function (i, contexts, values) {
										// 3376
										return function (value) {
											// 3377
											contexts[i] = this; // 3378
											values[i] = arguments.length > 1 ? slice.call(arguments) : value; // 3379
											if (values === progressValues) {
												// 3380
												deferred.notifyWith(contexts, values); // 3381
												// 3382
											} else if (! --remaining) {
												// 3383
												deferred.resolveWith(contexts, values); // 3384
											} // 3385
										}; // 3386
									},
									    // 3387
									// 3388
									progressValues,
									    progressContexts,
									    resolveContexts; // 3389
									// 3390
									// add listeners to Deferred subordinates; treat others as resolved                                                // 3391
									if (length > 1) {
										// 3392
										progressValues = new Array(length); // 3393
										progressContexts = new Array(length); // 3394
										resolveContexts = new Array(length); // 3395
										for (; i < length; i++) {
											// 3396
											if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
												// 3397
												resolveValues[i].promise() // 3398
												.done(updateFunc(i, resolveContexts, resolveValues)) // 3399
												.fail(deferred.reject) // 3400
												.progress(updateFunc(i, progressContexts, progressValues)); // 3401
											} else {
												// 3402
												--remaining; // 3403
											} // 3404
										} // 3405
									} // 3406
									// 3407
									// if we're not waiting on anything, resolve the master                                                            // 3408
									if (!remaining) {
										// 3409
										deferred.resolveWith(resolveContexts, resolveValues); // 3410
									} // 3411
									// 3412
									return deferred.promise(); // 3413
								} // 3414
							}); // 3415
							// 3416
							// 3417
							// The deferred used on DOM ready                                                                                    // 3418
							var readyList; // 3419
							// 3420
							jQuery.fn.ready = function (fn) {
								// 3421
								// Add the callback                                                                                                 // 3422
								jQuery.ready.promise().done(fn); // 3423
								// 3424
								return this; // 3425
							}; // 3426
							// 3427
							jQuery.extend({ // 3428
								// Is the DOM ready to be used? Set to true once it occurs.                                                         // 3429
								isReady: false, // 3430
								// 3431
								// A counter to track how many items to wait for before                                                             // 3432
								// the ready event fires. See #6781                                                                                 // 3433
								readyWait: 1, // 3434
								// 3435
								// Hold (or release) the ready event                                                                                // 3436
								holdReady: function (hold) {
									// 3437
									if (hold) {
										// 3438
										jQuery.readyWait++; // 3439
									} else {
										// 3440
										jQuery.ready(true); // 3441
									} // 3442
								}, // 3443
								// 3444
								// Handle when the DOM is ready                                                                                     // 3445
								ready: function (wait) {
									// 3446
									// 3447
									// Abort if there are pending holds or we're already ready                                                         // 3448
									if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
										// 3449
										return; // 3450
									} // 3451
									// 3452
									// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).                           // 3453
									if (!document.body) {
										// 3454
										return setTimeout(jQuery.ready); // 3455
									} // 3456
									// 3457
									// Remember that the DOM is ready                                                                                  // 3458
									jQuery.isReady = true; // 3459
									// 3460
									// If a normal DOM Ready event fired, decrement, and wait if need be                                               // 3461
									if (wait !== true && --jQuery.readyWait > 0) {
										// 3462
										return; // 3463
									} // 3464
									// 3465
									// If there are functions bound, to execute                                                                        // 3466
									readyList.resolveWith(document, [jQuery]); // 3467
									// 3468
									// Trigger any bound ready events                                                                                  // 3469
									if (jQuery.fn.triggerHandler) {
										// 3470
										jQuery(document).triggerHandler("ready"); // 3471
										jQuery(document).off("ready"); // 3472
									} // 3473
								} // 3474
							}); // 3475
							// 3476
							/**                                                                                                                  // 3477
        * Clean-up method for dom ready events                                                                              // 3478
        */ // 3479
							function detach() {
								// 3480
								if (document.addEventListener) {
									// 3481
									document.removeEventListener("DOMContentLoaded", completed, false); // 3482
									window.removeEventListener("load", completed, false); // 3483
									// 3484
								} else {
									// 3485
									document.detachEvent("onreadystatechange", completed); // 3486
									window.detachEvent("onload", completed); // 3487
								} // 3488
							} // 3489
							// 3490
							/**                                                                                                                  // 3491
        * The ready event handler and self cleanup method                                                                   // 3492
        */ // 3493
							function completed() {
								// 3494
								// readyState === "complete" is good enough for us to call the dom ready in oldIE                                   // 3495
								if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
									// 3496
									detach(); // 3497
									jQuery.ready(); // 3498
								} // 3499
							} // 3500
							// 3501
							jQuery.ready.promise = function (obj) {
								// 3502
								if (!readyList) {
									// 3503
									// 3504
									readyList = jQuery.Deferred(); // 3505
									// 3506
									// Catch cases where $(document).ready() is called after the browser event has already occurred.                   // 3507
									// we once tried to use readyState "interactive" here, but it caused issues like the one                           // 3508
									// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15                                       // 3509
									if (document.readyState === "complete") {
										// 3510
										// Handle it asynchronously to allow scripts the opportunity to delay ready                                       // 3511
										setTimeout(jQuery.ready); // 3512
										// 3513
										// Standards-based browsers support DOMContentLoaded                                                               // 3514
									} else if (document.addEventListener) {
										// 3515
										// Use the handy event callback                                                                                   // 3516
										document.addEventListener("DOMContentLoaded", completed, false); // 3517
										// 3518
										// A fallback to window.onload, that will always work                                                             // 3519
										window.addEventListener("load", completed, false); // 3520
										// 3521
										// If IE event model is used                                                                                       // 3522
									} else {
										// 3523
										// Ensure firing before onload, maybe late but safe also for iframes                                              // 3524
										document.attachEvent("onreadystatechange", completed); // 3525
										// 3526
										// A fallback to window.onload, that will always work                                                             // 3527
										window.attachEvent("onload", completed); // 3528
										// 3529
										// If IE and not a frame                                                                                          // 3530
										// continually check to see if the document is ready                                                              // 3531
										var top = false; // 3532
										// 3533
										try {
											// 3534
											top = window.frameElement == null && document.documentElement; // 3535
										} catch (e) {} // 3536
										// 3537
										if (top && top.doScroll) {
											// 3538
											(function doScrollCheck() {
												// 3539
												if (!jQuery.isReady) {
													// 3540
													// 3541
													try {
														// 3542
														// Use the trick by Diego Perini                                                                              // 3543
														// http://javascript.nwbox.com/IEContentLoaded/                                                               // 3544
														top.doScroll("left"); // 3545
													} catch (e) {
														// 3546
														return setTimeout(doScrollCheck, 50); // 3547
													} // 3548
													// 3549
													// detach all dom ready events                                                                                 // 3550
													detach(); // 3551
													// 3552
													// and execute any waiting functions                                                                           // 3553
													jQuery.ready(); // 3554
												} // 3555
											})(); // 3556
										} // 3557
									} // 3558
								} // 3559
								return readyList.promise(obj); // 3560
							}; // 3561
							// 3562
							// 3563
							var strundefined = typeof undefined; // 3564
							// 3565
							// 3566
							// 3567
							// Support: IE<9                                                                                                     // 3568
							// Iteration over object's inherited properties before its own                                                       // 3569
							var i; // 3570
							for (i in jQuery(support)) {
								// 3571
								break; // 3572
							} // 3573
							support.ownLast = i !== "0"; // 3574
							// 3575
							// Note: most support tests are defined in their respective modules.                                                 // 3576
							// false until the test is run                                                                                       // 3577
							support.inlineBlockNeedsLayout = false; // 3578
							// 3579
							// Execute ASAP in case we need to set body.style.zoom                                                               // 3580
							jQuery(function () {
								// 3581
								// Minified: var a,b,c,d                                                                                            // 3582
								var val, div, body, container; // 3583
								// 3584
								body = document.getElementsByTagName("body")[0]; // 3585
								if (!body || !body.style) {
									// 3586
									// Return for frameset docs that don't have a body                                                                 // 3587
									return; // 3588
								} // 3589
								// 3590
								// Setup                                                                                                            // 3591
								div = document.createElement("div"); // 3592
								container = document.createElement("div"); // 3593
								container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"; // 3594
								body.appendChild(container).appendChild(div); // 3595
								// 3596
								if (typeof div.style.zoom !== strundefined) {
									// 3597
									// Support: IE<8                                                                                                   // 3598
									// Check if natively block-level elements act like inline-block                                                    // 3599
									// elements when setting their display to 'inline' and giving                                                      // 3600
									// them layout                                                                                                     // 3601
									div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"; // 3602
									// 3603
									support.inlineBlockNeedsLayout = val = div.offsetWidth === 3; // 3604
									if (val) {
										// 3605
										// Prevent IE 6 from affecting layout for positioned elements #11048                                              // 3606
										// Prevent IE from shrinking the body in IE 7 mode #12869                                                         // 3607
										// Support: IE<8                                                                                                  // 3608
										body.style.zoom = 1; // 3609
									} // 3610
								} // 3611
								// 3612
								body.removeChild(container); // 3613
							}); // 3614
							// 3615
							// 3616
							// 3617
							// 3618
							(function () {
								// 3619
								var div = document.createElement("div"); // 3620
								// 3621
								// Execute the test only if not already executed in another module.                                                 // 3622
								if (support.deleteExpando == null) {
									// 3623
									// Support: IE<9                                                                                                   // 3624
									support.deleteExpando = true; // 3625
									try {
										// 3626
										delete div.test; // 3627
									} catch (e) {
										// 3628
										support.deleteExpando = false; // 3629
									} // 3630
								} // 3631
								// 3632
								// Null elements to avoid leaks in IE.                                                                              // 3633
								div = null; // 3634
							})(); // 3635
							// 3636
							// 3637
							/**                                                                                                                  // 3638
        * Determines whether an object can have data                                                                        // 3639
        */ // 3640
							jQuery.acceptData = function (elem) {
								// 3641
								var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
								    // 3642
								nodeType = +elem.nodeType || 1; // 3643
								// 3644
								// Do not set data on non-element DOM nodes because it will not be cleared (#8335).                                 // 3645
								return nodeType !== 1 && nodeType !== 9 ? // 3646
								false : // 3647
								// 3648
								// Nodes accept data unless otherwise specified; rejection can be conditional                                      // 3649
								!noData || noData !== true && elem.getAttribute("classid") === noData; // 3650
							}; // 3651
							// 3652
							// 3653
							var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
							    // 3654
							rmultiDash = /([A-Z])/g; // 3655
							// 3656
							function dataAttr(elem, key, data) {
								// 3657
								// If nothing was found internally, try to fetch any                                                                // 3658
								// data from the HTML5 data-* attribute                                                                             // 3659
								if (data === undefined && elem.nodeType === 1) {
									// 3660
									// 3661
									var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase(); // 3662
									// 3663
									data = elem.getAttribute(name); // 3664
									// 3665
									if (typeof data === "string") {
										// 3666
										try {
											// 3667
											data = data === "true" ? true : // 3668
											data === "false" ? false : // 3669
											data === "null" ? null : // 3670
											// Only convert to a number if it doesn't change the string                                                     // 3671
											+data + "" === data ? +data : // 3672
											rbrace.test(data) ? jQuery.parseJSON(data) : // 3673
											data; // 3674
										} catch (e) {} // 3675
										// 3676
										// Make sure we set the data so it isn't changed later                                                            // 3677
										jQuery.data(elem, key, data); // 3678
										// 3679
									} else {
										// 3680
										data = undefined; // 3681
									} // 3682
								} // 3683
								// 3684
								return data; // 3685
							} // 3686
							// 3687
							// checks a cache object for emptiness                                                                               // 3688
							function isEmptyDataObject(obj) {
								// 3689
								var name; // 3690
								for (name in obj) {
									// 3691
									// 3692
									// if the public data object is empty, the private is still empty                                                  // 3693
									if (name === "data" && jQuery.isEmptyObject(obj[name])) {
										// 3694
										continue; // 3695
									} // 3696
									if (name !== "toJSON") {
										// 3697
										return false; // 3698
									} // 3699
								} // 3700
								// 3701
								return true; // 3702
							} // 3703
							// 3704
							function internalData(elem, name, data, pvt /* Internal Use Only */) {
								// 3705
								if (!jQuery.acceptData(elem)) {
									// 3706
									return; // 3707
								} // 3708
								// 3709
								var ret,
								    thisCache,
								    // 3710
								internalKey = jQuery.expando,
								    // 3711
								// 3712
								// We have to handle DOM nodes and JS objects differently because IE6-7                                            // 3713
								// can't GC object references properly across the DOM-JS boundary                                                  // 3714
								isNode = elem.nodeType,
								    // 3715
								// 3716
								// Only DOM nodes need the global jQuery cache; JS object data is                                                  // 3717
								// attached directly to the object so GC can occur automatically                                                   // 3718
								cache = isNode ? jQuery.cache : elem,
								    // 3719
								// 3720
								// Only defining an ID for JS objects if its cache already exists allows                                           // 3721
								// the code to shortcut on the same path as a DOM node with no cache                                               // 3722
								id = isNode ? elem[internalKey] : elem[internalKey] && internalKey; // 3723
								// 3724
								// Avoid doing any more work than we need to when trying to get data on an                                          // 3725
								// object that has no data at all                                                                                   // 3726
								if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
									// 3727
									return; // 3728
								} // 3729
								// 3730
								if (!id) {
									// 3731
									// Only DOM nodes need a new unique ID for each element since their data                                           // 3732
									// ends up in the global cache                                                                                     // 3733
									if (isNode) {
										// 3734
										id = elem[internalKey] = deletedIds.pop() || jQuery.guid++; // 3735
									} else {
										// 3736
										id = internalKey; // 3737
									} // 3738
								} // 3739
								// 3740
								if (!cache[id]) {
									// 3741
									// Avoid exposing jQuery metadata on plain JS objects when the object                                              // 3742
									// is serialized using JSON.stringify                                                                              // 3743
									cache[id] = isNode ? {} : { toJSON: jQuery.noop }; // 3744
								} // 3745
								// 3746
								// An object can be passed to jQuery.data instead of a key/value pair; this gets                                    // 3747
								// shallow copied over onto the existing cache                                                                      // 3748
								if (typeof name === "object" || typeof name === "function") {
									// 3749
									if (pvt) {
										// 3750
										cache[id] = jQuery.extend(cache[id], name); // 3751
									} else {
										// 3752
										cache[id].data = jQuery.extend(cache[id].data, name); // 3753
									} // 3754
								} // 3755
								// 3756
								thisCache = cache[id]; // 3757
								// 3758
								// jQuery data() is stored in a separate object inside the object's internal data                                   // 3759
								// cache in order to avoid key collisions between internal data and user-defined                                    // 3760
								// data.                                                                                                            // 3761
								if (!pvt) {
									// 3762
									if (!thisCache.data) {
										// 3763
										thisCache.data = {}; // 3764
									} // 3765
									// 3766
									thisCache = thisCache.data; // 3767
								} // 3768
								// 3769
								if (data !== undefined) {
									// 3770
									thisCache[jQuery.camelCase(name)] = data; // 3771
								} // 3772
								// 3773
								// Check for both converted-to-camel and non-converted data property names                                          // 3774
								// If a data property was specified                                                                                 // 3775
								if (typeof name === "string") {
									// 3776
									// 3777
									// First Try to find as-is property data                                                                           // 3778
									ret = thisCache[name]; // 3779
									// 3780
									// Test for null|undefined property data                                                                           // 3781
									if (ret == null) {
										// 3782
										// 3783
										// Try to find the camelCased property                                                                            // 3784
										ret = thisCache[jQuery.camelCase(name)]; // 3785
									} // 3786
								} else {
									// 3787
									ret = thisCache; // 3788
								} // 3789
								// 3790
								return ret; // 3791
							} // 3792
							// 3793
							function internalRemoveData(elem, name, pvt) {
								// 3794
								if (!jQuery.acceptData(elem)) {
									// 3795
									return; // 3796
								} // 3797
								// 3798
								var thisCache,
								    i,
								    // 3799
								isNode = elem.nodeType,
								    // 3800
								// 3801
								// See jQuery.data for more information                                                                            // 3802
								cache = isNode ? jQuery.cache : elem,
								    // 3803
								id = isNode ? elem[jQuery.expando] : jQuery.expando; // 3804
								// 3805
								// If there is already no cache entry for this object, there is no                                                  // 3806
								// purpose in continuing                                                                                            // 3807
								if (!cache[id]) {
									// 3808
									return; // 3809
								} // 3810
								// 3811
								if (name) {
									// 3812
									// 3813
									thisCache = pvt ? cache[id] : cache[id].data; // 3814
									// 3815
									if (thisCache) {
										// 3816
										// 3817
										// Support array or space separated string names for data keys                                                    // 3818
										if (!jQuery.isArray(name)) {
											// 3819
											// 3820
											// try the string as a key before any manipulation                                                               // 3821
											if (name in thisCache) {
												// 3822
												name = [name]; // 3823
											} else {
												// 3824
												// 3825
												// split the camel cased version by spaces unless a key with the spaces exists                                  // 3826
												name = jQuery.camelCase(name); // 3827
												if (name in thisCache) {
													// 3828
													name = [name]; // 3829
												} else {
													// 3830
													name = name.split(" "); // 3831
												} // 3832
											} // 3833
										} else {
											// 3834
											// If "name" is an array of keys...                                                                              // 3835
											// When data is initially created, via ("key", "val") signature,                                                 // 3836
											// keys will be converted to camelCase.                                                                          // 3837
											// Since there is no way to tell _how_ a key was added, remove                                                   // 3838
											// both plain key and camelCase key. #12786                                                                      // 3839
											// This will only penalize the array argument path.                                                              // 3840
											name = name.concat(jQuery.map(name, jQuery.camelCase)); // 3841
										} // 3842
										// 3843
										i = name.length; // 3844
										while (i--) {
											// 3845
											delete thisCache[name[i]]; // 3846
										} // 3847
										// 3848
										// If there is no data left in the cache, we want to continue                                                     // 3849
										// and let the cache object itself get destroyed                                                                  // 3850
										if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
											// 3851
											return; // 3852
										} // 3853
									} // 3854
								} // 3855
								// 3856
								// See jQuery.data for more information                                                                             // 3857
								if (!pvt) {
									// 3858
									delete cache[id].data; // 3859
									// 3860
									// Don't destroy the parent cache unless the internal data object                                                  // 3861
									// had been the only thing left in it                                                                              // 3862
									if (!isEmptyDataObject(cache[id])) {
										// 3863
										return; // 3864
									} // 3865
								} // 3866
								// 3867
								// Destroy the cache                                                                                                // 3868
								if (isNode) {
									// 3869
									jQuery.cleanData([elem], true); // 3870
									// 3871
									// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)                          // 3872
									/* jshint eqeqeq: false */ // 3873
								} else if (support.deleteExpando || cache != cache.window) {
									// 3874
									/* jshint eqeqeq: true */ // 3875
									delete cache[id]; // 3876
									// 3877
									// When all else fails, null                                                                                        // 3878
								} else {
									// 3879
									cache[id] = null; // 3880
								} // 3881
							} // 3882
							// 3883
							jQuery.extend({ // 3884
								cache: {}, // 3885
								// 3886
								// The following elements (space-suffixed to avoid Object.prototype collisions)                                     // 3887
								// throw uncatchable exceptions if you attempt to set expando properties                                            // 3888
								noData: { // 3889
									"applet ": true, // 3890
									"embed ": true, // 3891
									// ...but Flash objects (which have this classid) *can* handle expandos                                            // 3892
									"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" // 3893
								}, // 3894
								// 3895
								hasData: function (elem) {
									// 3896
									elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando]; // 3897
									return !!elem && !isEmptyDataObject(elem); // 3898
								}, // 3899
								// 3900
								data: function (elem, name, data) {
									// 3901
									return internalData(elem, name, data); // 3902
								}, // 3903
								// 3904
								removeData: function (elem, name) {
									// 3905
									return internalRemoveData(elem, name); // 3906
								}, // 3907
								// 3908
								// For internal use only.                                                                                           // 3909
								_data: function (elem, name, data) {
									// 3910
									return internalData(elem, name, data, true); // 3911
								}, // 3912
								// 3913
								_removeData: function (elem, name) {
									// 3914
									return internalRemoveData(elem, name, true); // 3915
								} // 3916
							}); // 3917
							// 3918
							jQuery.fn.extend({ // 3919
								data: function (key, value) {
									// 3920
									var i,
									    name,
									    data,
									    // 3921
									elem = this[0],
									    // 3922
									attrs = elem && elem.attributes; // 3923
									// 3924
									// Special expections of .data basically thwart jQuery.access,                                                     // 3925
									// so implement the relevant behavior ourselves                                                                    // 3926
									// 3927
									// Gets all values                                                                                                 // 3928
									if (key === undefined) {
										// 3929
										if (this.length) {
											// 3930
											data = jQuery.data(elem); // 3931
											// 3932
											if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
												// 3933
												i = attrs.length; // 3934
												while (i--) {
													// 3935
													// 3936
													// Support: IE11+                                                                                              // 3937
													// The attrs elements can be null (#14894)                                                                     // 3938
													if (attrs[i]) {
														// 3939
														name = attrs[i].name; // 3940
														if (name.indexOf("data-") === 0) {
															// 3941
															name = jQuery.camelCase(name.slice(5)); // 3942
															dataAttr(elem, name, data[name]); // 3943
														} // 3944
													} // 3945
												} // 3946
												jQuery._data(elem, "parsedAttrs", true); // 3947
											} // 3948
										} // 3949
										// 3950
										return data; // 3951
									} // 3952
									// 3953
									// Sets multiple values                                                                                            // 3954
									if (typeof key === "object") {
										// 3955
										return this.each(function () {
											// 3956
											jQuery.data(this, key); // 3957
										}); // 3958
									} // 3959
									// 3960
									return arguments.length > 1 ? // 3961
									// 3962
									// Sets one value                                                                                                 // 3963
									this.each(function () {
										// 3964
										jQuery.data(this, key, value); // 3965
									}) : // 3966
									// 3967
									// Gets one value                                                                                                 // 3968
									// Try to fetch any internally stored data first                                                                  // 3969
									elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined; // 3970
								}, // 3971
								// 3972
								removeData: function (key) {
									// 3973
									return this.each(function () {
										// 3974
										jQuery.removeData(this, key); // 3975
									}); // 3976
								} // 3977
							}); // 3978
							// 3979
							// 3980
							jQuery.extend({ // 3981
								queue: function (elem, type, data) {
									// 3982
									var queue; // 3983
									// 3984
									if (elem) {
										// 3985
										type = (type || "fx") + "queue"; // 3986
										queue = jQuery._data(elem, type); // 3987
										// 3988
										// Speed up dequeue by getting out quickly if this is just a lookup                                               // 3989
										if (data) {
											// 3990
											if (!queue || jQuery.isArray(data)) {
												// 3991
												queue = jQuery._data(elem, type, jQuery.makeArray(data)); // 3992
											} else {
												// 3993
												queue.push(data); // 3994
											} // 3995
										} // 3996
										return queue || []; // 3997
									} // 3998
								}, // 3999
								// 4000
								dequeue: function (elem, type) {
									// 4001
									type = type || "fx"; // 4002
									// 4003
									var queue = jQuery.queue(elem, type),
									    // 4004
									startLength = queue.length,
									    // 4005
									fn = queue.shift(),
									    // 4006
									hooks = jQuery._queueHooks(elem, type),
									    // 4007
									next = function () {
										// 4008
										jQuery.dequeue(elem, type); // 4009
									}; // 4010
									// 4011
									// If the fx queue is dequeued, always remove the progress sentinel                                                // 4012
									if (fn === "inprogress") {
										// 4013
										fn = queue.shift(); // 4014
										startLength--; // 4015
									} // 4016
									// 4017
									if (fn) {
										// 4018
										// 4019
										// Add a progress sentinel to prevent the fx queue from being                                                     // 4020
										// automatically dequeued                                                                                         // 4021
										if (type === "fx") {
											// 4022
											queue.unshift("inprogress"); // 4023
										} // 4024
										// 4025
										// clear up the last queue stop function                                                                          // 4026
										delete hooks.stop; // 4027
										fn.call(elem, next, hooks); // 4028
									} // 4029
									// 4030
									if (!startLength && hooks) {
										// 4031
										hooks.empty.fire(); // 4032
									} // 4033
								}, // 4034
								// 4035
								// not intended for public consumption - generates a queueHooks object, or returns the current one                  // 4036
								_queueHooks: function (elem, type) {
									// 4037
									var key = type + "queueHooks"; // 4038
									return jQuery._data(elem, key) || jQuery._data(elem, key, { // 4039
										empty: jQuery.Callbacks("once memory").add(function () {
											// 4040
											jQuery._removeData(elem, type + "queue"); // 4041
											jQuery._removeData(elem, key); // 4042
										}) // 4043
									}); // 4044
								} // 4045
							}); // 4046
							// 4047
							jQuery.fn.extend({ // 4048
								queue: function (type, data) {
									// 4049
									var setter = 2; // 4050
									// 4051
									if (typeof type !== "string") {
										// 4052
										data = type; // 4053
										type = "fx"; // 4054
										setter--; // 4055
									} // 4056
									// 4057
									if (arguments.length < setter) {
										// 4058
										return jQuery.queue(this[0], type); // 4059
									} // 4060
									// 4061
									return data === undefined ? // 4062
									this : // 4063
									this.each(function () {
										// 4064
										var queue = jQuery.queue(this, type, data); // 4065
										// 4066
										// ensure a hooks for this queue                                                                                 // 4067
										jQuery._queueHooks(this, type); // 4068
										// 4069
										if (type === "fx" && queue[0] !== "inprogress") {
											// 4070
											jQuery.dequeue(this, type); // 4071
										} // 4072
									}); // 4073
								}, // 4074
								dequeue: function (type) {
									// 4075
									return this.each(function () {
										// 4076
										jQuery.dequeue(this, type); // 4077
									}); // 4078
								}, // 4079
								clearQueue: function (type) {
									// 4080
									return this.queue(type || "fx", []); // 4081
								}, // 4082
								// Get a promise resolved when queues of a certain type                                                             // 4083
								// are emptied (fx is the type by default)                                                                          // 4084
								promise: function (type, obj) {
									// 4085
									var tmp,
									    // 4086
									count = 1,
									    // 4087
									defer = jQuery.Deferred(),
									    // 4088
									elements = this,
									    // 4089
									i = this.length,
									    // 4090
									resolve = function () {
										// 4091
										if (! --count) {
											// 4092
											defer.resolveWith(elements, [elements]); // 4093
										} // 4094
									}; // 4095
									// 4096
									if (typeof type !== "string") {
										// 4097
										obj = type; // 4098
										type = undefined; // 4099
									} // 4100
									type = type || "fx"; // 4101
									// 4102
									while (i--) {
										// 4103
										tmp = jQuery._data(elements[i], type + "queueHooks"); // 4104
										if (tmp && tmp.empty) {
											// 4105
											count++; // 4106
											tmp.empty.add(resolve); // 4107
										} // 4108
									} // 4109
									resolve(); // 4110
									return defer.promise(obj); // 4111
								} // 4112
							}); // 4113
							var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source; // 4114
							// 4115
							var cssExpand = ["Top", "Right", "Bottom", "Left"]; // 4116
							// 4117
							var isHidden = function (elem, el) {
								// 4118
								// isHidden might be called from jQuery#filter function;                                                           // 4119
								// in that case, element will be second argument                                                                   // 4120
								elem = el || elem; // 4121
								return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem); // 4122
							}; // 4123
							// 4124
							// 4125
							// 4126
							// Multifunctional method to get and set values of a collection                                                      // 4127
							// The value/s can optionally be executed if it's a function                                                         // 4128
							var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
								// 4129
								var i = 0,
								    // 4130
								length = elems.length,
								    // 4131
								bulk = key == null; // 4132
								// 4133
								// Sets many values                                                                                                 // 4134
								if (jQuery.type(key) === "object") {
									// 4135
									chainable = true; // 4136
									for (i in key) {
										// 4137
										jQuery.access(elems, fn, i, key[i], true, emptyGet, raw); // 4138
									} // 4139
									// 4140
									// Sets one value                                                                                                   // 4141
								} else if (value !== undefined) {
									// 4142
									chainable = true; // 4143
									// 4144
									if (!jQuery.isFunction(value)) {
										// 4145
										raw = true; // 4146
									} // 4147
									// 4148
									if (bulk) {
										// 4149
										// Bulk operations run against the entire set                                                                     // 4150
										if (raw) {
											// 4151
											fn.call(elems, value); // 4152
											fn = null; // 4153
											// 4154
											// ...except when executing function values                                                                       // 4155
										} else {
											// 4156
											bulk = fn; // 4157
											fn = function (elem, key, value) {
												// 4158
												return bulk.call(jQuery(elem), value); // 4159
											}; // 4160
										} // 4161
									} // 4162
									// 4163
									if (fn) {
										// 4164
										for (; i < length; i++) {
											// 4165
											fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key))); // 4166
										} // 4167
									} // 4168
								} // 4169
								// 4170
								return chainable ? // 4171
								elems : // 4172
								// 4173
								// Gets                                                                                                            // 4174
								bulk ? // 4175
								fn.call(elems) : // 4176
								length ? fn(elems[0], key) : emptyGet; // 4177
							}; // 4178
							var rcheckableType = /^(?:checkbox|radio)$/i; // 4179
							// 4180
							// 4181
							// 4182
							(function () {
								// 4183
								// Minified: var a,b,c                                                                                              // 4184
								var input = document.createElement("input"),
								    // 4185
								div = document.createElement("div"),
								    // 4186
								fragment = document.createDocumentFragment(); // 4187
								// 4188
								// Setup                                                                                                            // 4189
								div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; // 4190
								// 4191
								// IE strips leading whitespace when .innerHTML is used                                                             // 4192
								support.leadingWhitespace = div.firstChild.nodeType === 3; // 4193
								// 4194
								// Make sure that tbody elements aren't automatically inserted                                                      // 4195
								// IE will insert them into empty tables                                                                            // 4196
								support.tbody = !div.getElementsByTagName("tbody").length; // 4197
								// 4198
								// Make sure that link elements get serialized correctly by innerHTML                                               // 4199
								// This requires a wrapper element in IE                                                                            // 4200
								support.htmlSerialize = !!div.getElementsByTagName("link").length; // 4201
								// 4202
								// Makes sure cloning an html5 element does not cause problems                                                      // 4203
								// Where outerHTML is undefined, this still works                                                                   // 4204
								support.html5Clone = // 4205
								document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>"; // 4206
								// 4207
								// Check if a disconnected checkbox will retain its checked                                                         // 4208
								// value of true after appended to the DOM (IE6/7)                                                                  // 4209
								input.type = "checkbox"; // 4210
								input.checked = true; // 4211
								fragment.appendChild(input); // 4212
								support.appendChecked = input.checked; // 4213
								// 4214
								// Make sure textarea (and checkbox) defaultValue is properly cloned                                                // 4215
								// Support: IE6-IE11+                                                                                               // 4216
								div.innerHTML = "<textarea>x</textarea>"; // 4217
								support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // 4218
								// 4219
								// #11217 - WebKit loses check when the name is after the checked attribute                                         // 4220
								fragment.appendChild(div); // 4221
								div.innerHTML = "<input type='radio' checked='checked' name='t'/>"; // 4222
								// 4223
								// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3                                                           // 4224
								// old WebKit doesn't clone checked state correctly in fragments                                                    // 4225
								support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // 4226
								// 4227
								// Support: IE<9                                                                                                    // 4228
								// Opera does not clone events (and typeof div.attachEvent === undefined).                                          // 4229
								// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()                                 // 4230
								support.noCloneEvent = true; // 4231
								if (div.attachEvent) {
									// 4232
									div.attachEvent("onclick", function () {
										// 4233
										support.noCloneEvent = false; // 4234
									}); // 4235
									// 4236
									div.cloneNode(true).click(); // 4237
								} // 4238
								// 4239
								// Execute the test only if not already executed in another module.                                                 // 4240
								if (support.deleteExpando == null) {
									// 4241
									// Support: IE<9                                                                                                   // 4242
									support.deleteExpando = true; // 4243
									try {
										// 4244
										delete div.test; // 4245
									} catch (e) {
										// 4246
										support.deleteExpando = false; // 4247
									} // 4248
								} // 4249
							})(); // 4250
							// 4251
							// 4252
							(function () {
								// 4253
								var i,
								    eventName,
								    // 4254
								div = document.createElement("div"); // 4255
								// 4256
								// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)                                      // 4257
								for (i in { submit: true, change: true, focusin: true }) {
									// 4258
									eventName = "on" + i; // 4259
									// 4260
									if (!(support[i + "Bubbles"] = eventName in window)) {
										// 4261
										// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)                                     // 4262
										div.setAttribute(eventName, "t"); // 4263
										support[i + "Bubbles"] = div.attributes[eventName].expando === false; // 4264
									} // 4265
								} // 4266
								// 4267
								// Null elements to avoid leaks in IE.                                                                              // 4268
								div = null; // 4269
							})(); // 4270
							// 4271
							// 4272
							var rformElems = /^(?:input|select|textarea)$/i,
							    // 4273
							rkeyEvent = /^key/,
							    // 4274
							rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
							    // 4275
							rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
							    // 4276
							rtypenamespace = /^([^.]*)(?:\.(.+)|)$/; // 4277
							// 4278
							function returnTrue() {
								// 4279
								return true; // 4280
							} // 4281
							// 4282
							function returnFalse() {
								// 4283
								return false; // 4284
							} // 4285
							// 4286
							function safeActiveElement() {
								// 4287
								try {
									// 4288
									return document.activeElement; // 4289
								} catch (err) {} // 4290
							} // 4291
							// 4292
							/*                                                                                                                   // 4293
        * Helper functions for managing events -- not part of the public interface.                                         // 4294
        * Props to Dean Edwards' addEvent library for many of the ideas.                                                    // 4295
        */ // 4296
							jQuery.event = { // 4297
								// 4298
								global: {}, // 4299
								// 4300
								add: function (elem, types, handler, data, selector) {
									// 4301
									var tmp,
									    events,
									    t,
									    handleObjIn,
									    // 4302
									special,
									    eventHandle,
									    handleObj,
									    // 4303
									handlers,
									    type,
									    namespaces,
									    origType,
									    // 4304
									elemData = jQuery._data(elem); // 4305
									// 4306
									// Don't attach events to noData or text/comment nodes (but allow plain objects)                                   // 4307
									if (!elemData) {
										// 4308
										return; // 4309
									} // 4310
									// 4311
									// Caller can pass in an object of custom data in lieu of the handler                                              // 4312
									if (handler.handler) {
										// 4313
										handleObjIn = handler; // 4314
										handler = handleObjIn.handler; // 4315
										selector = handleObjIn.selector; // 4316
									} // 4317
									// 4318
									// Make sure that the handler has a unique ID, used to find/remove it later                                        // 4319
									if (!handler.guid) {
										// 4320
										handler.guid = jQuery.guid++; // 4321
									} // 4322
									// 4323
									// Init the element's event structure and main handler, if this is the first                                       // 4324
									if (!(events = elemData.events)) {
										// 4325
										events = elemData.events = {}; // 4326
									} // 4327
									if (!(eventHandle = elemData.handle)) {
										// 4328
										eventHandle = elemData.handle = function (e) {
											// 4329
											// Discard the second event of a jQuery.event.trigger() and                                                      // 4330
											// when an event is called after a page has unloaded                                                             // 4331
											return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? // 4332
											jQuery.event.dispatch.apply(eventHandle.elem, arguments) : // 4333
											undefined; // 4334
										}; // 4335
										// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events                     // 4336
										eventHandle.elem = elem; // 4337
									} // 4338
									// 4339
									// Handle multiple events separated by a space                                                                     // 4340
									types = (types || "").match(rnotwhite) || [""]; // 4341
									t = types.length; // 4342
									while (t--) {
										// 4343
										tmp = rtypenamespace.exec(types[t]) || []; // 4344
										type = origType = tmp[1]; // 4345
										namespaces = (tmp[2] || "").split(".").sort(); // 4346
										// 4347
										// There *must* be a type, no attaching namespace-only handlers                                                   // 4348
										if (!type) {
											// 4349
											continue; // 4350
										} // 4351
										// 4352
										// If event changes its type, use the special event handlers for the changed type                                 // 4353
										special = jQuery.event.special[type] || {}; // 4354
										// 4355
										// If selector defined, determine special event api type, otherwise given type                                    // 4356
										type = (selector ? special.delegateType : special.bindType) || type; // 4357
										// 4358
										// Update special based on newly reset type                                                                       // 4359
										special = jQuery.event.special[type] || {}; // 4360
										// 4361
										// handleObj is passed to all event handlers                                                                      // 4362
										handleObj = jQuery.extend({ // 4363
											type: type, // 4364
											origType: origType, // 4365
											data: data, // 4366
											handler: handler, // 4367
											guid: handler.guid, // 4368
											selector: selector, // 4369
											needsContext: selector && jQuery.expr.match.needsContext.test(selector), // 4370
											namespace: namespaces.join(".") // 4371
										}, handleObjIn); // 4372
										// 4373
										// Init the event handler queue if we're the first                                                                // 4374
										if (!(handlers = events[type])) {
											// 4375
											handlers = events[type] = []; // 4376
											handlers.delegateCount = 0; // 4377
											// 4378
											// Only use addEventListener/attachEvent if the special events handler returns false                             // 4379
											if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
												// 4380
												// Bind the global event handler to the element                                                                 // 4381
												if (elem.addEventListener) {
													// 4382
													elem.addEventListener(type, eventHandle, false); // 4383
													// 4384
												} else if (elem.attachEvent) {
													// 4385
													elem.attachEvent("on" + type, eventHandle); // 4386
												} // 4387
											} // 4388
										} // 4389
										// 4390
										if (special.add) {
											// 4391
											special.add.call(elem, handleObj); // 4392
											// 4393
											if (!handleObj.handler.guid) {
												// 4394
												handleObj.handler.guid = handler.guid; // 4395
											} // 4396
										} // 4397
										// 4398
										// Add to the element's handler list, delegates in front                                                          // 4399
										if (selector) {
											// 4400
											handlers.splice(handlers.delegateCount++, 0, handleObj); // 4401
										} else {
											// 4402
											handlers.push(handleObj); // 4403
										} // 4404
										// 4405
										// Keep track of which events have ever been used, for event optimization                                         // 4406
										jQuery.event.global[type] = true; // 4407
									} // 4408
									// 4409
									// Nullify elem to prevent memory leaks in IE                                                                      // 4410
									elem = null; // 4411
								}, // 4412
								// 4413
								// Detach an event or set of events from an element                                                                 // 4414
								remove: function (elem, types, handler, selector, mappedTypes) {
									// 4415
									var j,
									    handleObj,
									    tmp,
									    // 4416
									origCount,
									    t,
									    events,
									    // 4417
									special,
									    handlers,
									    type,
									    // 4418
									namespaces,
									    origType,
									    // 4419
									elemData = jQuery.hasData(elem) && jQuery._data(elem); // 4420
									// 4421
									if (!elemData || !(events = elemData.events)) {
										// 4422
										return; // 4423
									} // 4424
									// 4425
									// Once for each type.namespace in types; type may be omitted                                                      // 4426
									types = (types || "").match(rnotwhite) || [""]; // 4427
									t = types.length; // 4428
									while (t--) {
										// 4429
										tmp = rtypenamespace.exec(types[t]) || []; // 4430
										type = origType = tmp[1]; // 4431
										namespaces = (tmp[2] || "").split(".").sort(); // 4432
										// 4433
										// Unbind all events (on this namespace, if provided) for the element                                             // 4434
										if (!type) {
											// 4435
											for (type in events) {
												// 4436
												jQuery.event.remove(elem, type + types[t], handler, selector, true); // 4437
											} // 4438
											continue; // 4439
										} // 4440
										// 4441
										special = jQuery.event.special[type] || {}; // 4442
										type = (selector ? special.delegateType : special.bindType) || type; // 4443
										handlers = events[type] || []; // 4444
										tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // 4445
										// 4446
										// Remove matching events                                                                                         // 4447
										origCount = j = handlers.length; // 4448
										while (j--) {
											// 4449
											handleObj = handlers[j]; // 4450
											// 4451
											if ((mappedTypes || origType === handleObj.origType) && ( // 4452
											!handler || handler.guid === handleObj.guid) && ( // 4453
											!tmp || tmp.test(handleObj.namespace)) && ( // 4454
											!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
												// 4455
												handlers.splice(j, 1); // 4456
												// 4457
												if (handleObj.selector) {
													// 4458
													handlers.delegateCount--; // 4459
												} // 4460
												if (special.remove) {
													// 4461
													special.remove.call(elem, handleObj); // 4462
												} // 4463
											} // 4464
										} // 4465
										// 4466
										// Remove generic event handler if we removed something and no more handlers exist                                // 4467
										// (avoids potential for endless recursion during removal of special event handlers)                              // 4468
										if (origCount && !handlers.length) {
											// 4469
											if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
												// 4470
												jQuery.removeEvent(elem, type, elemData.handle); // 4471
											} // 4472
											// 4473
											delete events[type]; // 4474
										} // 4475
									} // 4476
									// 4477
									// Remove the expando if it's no longer used                                                                       // 4478
									if (jQuery.isEmptyObject(events)) {
										// 4479
										delete elemData.handle; // 4480
										// 4481
										// removeData also checks for emptiness and clears the expando if empty                                           // 4482
										// so use it instead of delete                                                                                    // 4483
										jQuery._removeData(elem, "events"); // 4484
									} // 4485
								}, // 4486
								// 4487
								trigger: function (event, data, elem, onlyHandlers) {
									// 4488
									var handle,
									    ontype,
									    cur,
									    // 4489
									bubbleType,
									    special,
									    tmp,
									    i,
									    // 4490
									eventPath = [elem || document],
									    // 4491
									type = hasOwn.call(event, "type") ? event.type : event,
									    // 4492
									namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : []; // 4493
									// 4494
									cur = tmp = elem = elem || document; // 4495
									// 4496
									// Don't do events on text and comment nodes                                                                       // 4497
									if (elem.nodeType === 3 || elem.nodeType === 8) {
										// 4498
										return; // 4499
									} // 4500
									// 4501
									// focus/blur morphs to focusin/out; ensure we're not firing them right now                                        // 4502
									if (rfocusMorph.test(type + jQuery.event.triggered)) {
										// 4503
										return; // 4504
									} // 4505
									// 4506
									if (type.indexOf(".") >= 0) {
										// 4507
										// Namespaced trigger; create a regexp to match event type in handle()                                            // 4508
										namespaces = type.split("."); // 4509
										type = namespaces.shift(); // 4510
										namespaces.sort(); // 4511
									} // 4512
									ontype = type.indexOf(":") < 0 && "on" + type; // 4513
									// 4514
									// Caller can pass in a jQuery.Event object, Object, or just an event type string                                  // 4515
									event = event[jQuery.expando] ? // 4516
									event : // 4517
									new jQuery.Event(type, typeof event === "object" && event); // 4518
									// 4519
									// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                          // 4520
									event.isTrigger = onlyHandlers ? 2 : 3; // 4521
									event.namespace = namespaces.join("."); // 4522
									event.namespace_re = event.namespace ? // 4523
									new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : // 4524
									null; // 4525
									// 4526
									// Clean up the event in case it is being reused                                                                   // 4527
									event.result = undefined; // 4528
									if (!event.target) {
										// 4529
										event.target = elem; // 4530
									} // 4531
									// 4532
									// Clone any incoming data and prepend the event, creating the handler arg list                                    // 4533
									data = data == null ? // 4534
									[event] : // 4535
									jQuery.makeArray(data, [event]); // 4536
									// 4537
									// Allow special events to draw outside the lines                                                                  // 4538
									special = jQuery.event.special[type] || {}; // 4539
									if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
										// 4540
										return; // 4541
									} // 4542
									// 4543
									// Determine event propagation path in advance, per W3C events spec (#9951)                                        // 4544
									// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                             // 4545
									if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
										// 4546
										// 4547
										bubbleType = special.delegateType || type; // 4548
										if (!rfocusMorph.test(bubbleType + type)) {
											// 4549
											cur = cur.parentNode; // 4550
										} // 4551
										for (; cur; cur = cur.parentNode) {
											// 4552
											eventPath.push(cur); // 4553
											tmp = cur; // 4554
										} // 4555
										// 4556
										// Only add window if we got to document (e.g., not plain obj or detached DOM)                                    // 4557
										if (tmp === (elem.ownerDocument || document)) {
											// 4558
											eventPath.push(tmp.defaultView || tmp.parentWindow || window); // 4559
										} // 4560
									} // 4561
									// 4562
									// Fire handlers on the event path                                                                                 // 4563
									i = 0; // 4564
									while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
										// 4565
										// 4566
										event.type = i > 1 ? // 4567
										bubbleType : // 4568
										special.bindType || type; // 4569
										// 4570
										// jQuery handler                                                                                                 // 4571
										handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle"); // 4572
										if (handle) {
											// 4573
											handle.apply(cur, data); // 4574
										} // 4575
										// 4576
										// Native handler                                                                                                 // 4577
										handle = ontype && cur[ontype]; // 4578
										if (handle && handle.apply && jQuery.acceptData(cur)) {
											// 4579
											event.result = handle.apply(cur, data); // 4580
											if (event.result === false) {
												// 4581
												event.preventDefault(); // 4582
											} // 4583
										} // 4584
									} // 4585
									event.type = type; // 4586
									// 4587
									// If nobody prevented the default action, do it now                                                               // 4588
									if (!onlyHandlers && !event.isDefaultPrevented()) {
										// 4589
										// 4590
										if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && // 4591
										jQuery.acceptData(elem)) {
											// 4592
											// 4593
											// Call a native DOM method on the target with the same name name as the event.                                  // 4594
											// Can't use an .isFunction() check here because IE6/7 fails that test.                                          // 4595
											// Don't do default actions on window, that's where global variables be (#6170)                                  // 4596
											if (ontype && elem[type] && !jQuery.isWindow(elem)) {
												// 4597
												// 4598
												// Don't re-trigger an onFOO event when we call its FOO() method                                                // 4599
												tmp = elem[ontype]; // 4600
												// 4601
												if (tmp) {
													// 4602
													elem[ontype] = null; // 4603
												} // 4604
												// 4605
												// Prevent re-triggering of the same event, since we already bubbled it above                                   // 4606
												jQuery.event.triggered = type; // 4607
												try {
													// 4608
													elem[type](); // 4609
												} catch (e) {} // 4610
												// IE<9 dies on focus/blur to hidden element (#1486,#12518)                                                    // 4611
												// only reproducible on winXP IE8 native, not IE9 in IE8 mode                                                  // 4612
												// 4613
												jQuery.event.triggered = undefined; // 4614
												// 4615
												if (tmp) {
													// 4616
													elem[ontype] = tmp; // 4617
												} // 4618
											} // 4619
										} // 4620
									} // 4621
									// 4622
									return event.result; // 4623
								}, // 4624
								// 4625
								dispatch: function (event) {
									// 4626
									// 4627
									// Make a writable jQuery.Event from the native event object                                                       // 4628
									event = jQuery.event.fix(event); // 4629
									// 4630
									var i,
									    ret,
									    handleObj,
									    matched,
									    j,
									    // 4631
									handlerQueue = [],
									    // 4632
									args = slice.call(arguments),
									    // 4633
									handlers = (jQuery._data(this, "events") || {})[event.type] || [],
									    // 4634
									special = jQuery.event.special[event.type] || {}; // 4635
									// 4636
									// Use the fix-ed jQuery.Event rather than the (read-only) native event                                            // 4637
									args[0] = event; // 4638
									event.delegateTarget = this; // 4639
									// 4640
									// Call the preDispatch hook for the mapped type, and let it bail if desired                                       // 4641
									if (special.preDispatch && special.preDispatch.call(this, event) === false) {
										// 4642
										return; // 4643
									} // 4644
									// 4645
									// Determine handlers                                                                                              // 4646
									handlerQueue = jQuery.event.handlers.call(this, event, handlers); // 4647
									// 4648
									// Run delegates first; they may want to stop propagation beneath us                                               // 4649
									i = 0; // 4650
									while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
										// 4651
										event.currentTarget = matched.elem; // 4652
										// 4653
										j = 0; // 4654
										while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
											// 4655
											// 4656
											// Triggered event must either 1) have no namespace, or                                                          // 4657
											// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).              // 4658
											if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
												// 4659
												// 4660
												event.handleObj = handleObj; // 4661
												event.data = handleObj.data; // 4662
												// 4663
												ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler). // 4664
												apply(matched.elem, args); // 4665
												// 4666
												if (ret !== undefined) {
													// 4667
													if ((event.result = ret) === false) {
														// 4668
														event.preventDefault(); // 4669
														event.stopPropagation(); // 4670
													} // 4671
												} // 4672
											} // 4673
										} // 4674
									} // 4675
									// 4676
									// Call the postDispatch hook for the mapped type                                                                  // 4677
									if (special.postDispatch) {
										// 4678
										special.postDispatch.call(this, event); // 4679
									} // 4680
									// 4681
									return event.result; // 4682
								}, // 4683
								// 4684
								handlers: function (event, handlers) {
									// 4685
									var sel,
									    handleObj,
									    matches,
									    i,
									    // 4686
									handlerQueue = [],
									    // 4687
									delegateCount = handlers.delegateCount,
									    // 4688
									cur = event.target; // 4689
									// 4690
									// Find delegate handlers                                                                                          // 4691
									// Black-hole SVG <use> instance trees (#13180)                                                                    // 4692
									// Avoid non-left-click bubbling in Firefox (#3861)                                                                // 4693
									if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
										// 4694
										// 4695
										/* jshint eqeqeq: false */ // 4696
										for (; cur != this; cur = cur.parentNode || this) {
											// 4697
											/* jshint eqeqeq: true */ // 4698
											// 4699
											// Don't check non-elements (#13208)                                                                             // 4700
											// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                      // 4701
											if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
												// 4702
												matches = []; // 4703
												for (i = 0; i < delegateCount; i++) {
													// 4704
													handleObj = handlers[i]; // 4705
													// 4706
													// Don't conflict with Object.prototype properties (#13203)                                                    // 4707
													sel = handleObj.selector + " "; // 4708
													// 4709
													if (matches[sel] === undefined) {
														// 4710
														matches[sel] = handleObj.needsContext ? // 4711
														jQuery(sel, this).index(cur) >= 0 : // 4712
														jQuery.find(sel, this, null, [cur]).length; // 4713
													} // 4714
													if (matches[sel]) {
														// 4715
														matches.push(handleObj); // 4716
													} // 4717
												} // 4718
												if (matches.length) {
													// 4719
													handlerQueue.push({ elem: cur, handlers: matches }); // 4720
												} // 4721
											} // 4722
										} // 4723
									} // 4724
									// 4725
									// Add the remaining (directly-bound) handlers                                                                     // 4726
									if (delegateCount < handlers.length) {
										// 4727
										handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) }); // 4728
									} // 4729
									// 4730
									return handlerQueue; // 4731
								}, // 4732
								// 4733
								fix: function (event) {
									// 4734
									if (event[jQuery.expando]) {
										// 4735
										return event; // 4736
									} // 4737
									// 4738
									// Create a writable copy of the event object and normalize some properties                                        // 4739
									var i,
									    prop,
									    copy,
									    // 4740
									type = event.type,
									    // 4741
									originalEvent = event,
									    // 4742
									fixHook = this.fixHooks[type]; // 4743
									// 4744
									if (!fixHook) {
										// 4745
										this.fixHooks[type] = fixHook = // 4746
										rmouseEvent.test(type) ? this.mouseHooks : // 4747
										rkeyEvent.test(type) ? this.keyHooks : // 4748
										{}; // 4749
									} // 4750
									copy = fixHook.props ? this.props.concat(fixHook.props) : this.props; // 4751
									// 4752
									event = new jQuery.Event(originalEvent); // 4753
									// 4754
									i = copy.length; // 4755
									while (i--) {
										// 4756
										prop = copy[i]; // 4757
										event[prop] = originalEvent[prop]; // 4758
									} // 4759
									// 4760
									// Support: IE<9                                                                                                   // 4761
									// Fix target property (#1925)                                                                                     // 4762
									if (!event.target) {
										// 4763
										event.target = originalEvent.srcElement || document; // 4764
									} // 4765
									// 4766
									// Support: Chrome 23+, Safari?                                                                                    // 4767
									// Target should not be a text node (#504, #13143)                                                                 // 4768
									if (event.target.nodeType === 3) {
										// 4769
										event.target = event.target.parentNode; // 4770
									} // 4771
									// 4772
									// Support: IE<9                                                                                                   // 4773
									// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)                                          // 4774
									event.metaKey = !!event.metaKey; // 4775
									// 4776
									return fixHook.filter ? fixHook.filter(event, originalEvent) : event; // 4777
								}, // 4778
								// 4779
								// Includes some event props shared by KeyEvent and MouseEvent                                                      // 4780
								props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
								// 4782
								fixHooks: {}, // 4783
								// 4784
								keyHooks: { // 4785
									props: "char charCode key keyCode".split(" "), // 4786
									filter: function (event, original) {
										// 4787
										// 4788
										// Add which for key events                                                                                       // 4789
										if (event.which == null) {
											// 4790
											event.which = original.charCode != null ? original.charCode : original.keyCode; // 4791
										} // 4792
										// 4793
										return event; // 4794
									} // 4795
								}, // 4796
								// 4797
								mouseHooks: { // 4798
									props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
									filter: function (event, original) {
										// 4800
										var body,
										    eventDoc,
										    doc,
										    // 4801
										button = original.button,
										    // 4802
										fromElement = original.fromElement; // 4803
										// 4804
										// Calculate pageX/Y if missing and clientX/Y available                                                           // 4805
										if (event.pageX == null && original.clientX != null) {
											// 4806
											eventDoc = event.target.ownerDocument || document; // 4807
											doc = eventDoc.documentElement; // 4808
											body = eventDoc.body; // 4809
											// 4810
											event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
											event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
										} // 4813
										// 4814
										// Add relatedTarget, if necessary                                                                                // 4815
										if (!event.relatedTarget && fromElement) {
											// 4816
											event.relatedTarget = fromElement === event.target ? original.toElement : fromElement; // 4817
										} // 4818
										// 4819
										// Add which for click: 1 === left; 2 === middle; 3 === right                                                     // 4820
										// Note: button is not normalized, so don't use it                                                                // 4821
										if (!event.which && button !== undefined) {
											// 4822
											event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0; // 4823
										} // 4824
										// 4825
										return event; // 4826
									} // 4827
								}, // 4828
								// 4829
								special: { // 4830
									load: { // 4831
										// Prevent triggered image.load events from bubbling to window.load                                               // 4832
										noBubble: true // 4833
									}, // 4834
									focus: { // 4835
										// Fire native event if possible so blur/focus sequence is correct                                                // 4836
										trigger: function () {
											// 4837
											if (this !== safeActiveElement() && this.focus) {
												// 4838
												try {
													// 4839
													this.focus(); // 4840
													return false; // 4841
												} catch (e) {} // 4842
												// Support: IE<9                                                                                               // 4843
												// If we error on focus to hidden element (#1486, #12518),                                                     // 4844
												// let .trigger() run the handlers                                                                             // 4845
												// 4846
											} // 4847
										}, // 4848
										delegateType: "focusin" // 4849
									}, // 4850
									blur: { // 4851
										trigger: function () {
											// 4852
											if (this === safeActiveElement() && this.blur) {
												// 4853
												this.blur(); // 4854
												return false; // 4855
											} // 4856
										}, // 4857
										delegateType: "focusout" // 4858
									}, // 4859
									click: { // 4860
										// For checkbox, fire native event so checked state will be right                                                 // 4861
										trigger: function () {
											// 4862
											if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
												// 4863
												this.click(); // 4864
												return false; // 4865
											} // 4866
										}, // 4867
										// 4868
										// For cross-browser consistency, don't fire native .click() on links                                             // 4869
										_default: function (event) {
											// 4870
											return jQuery.nodeName(event.target, "a"); // 4871
										} // 4872
									}, // 4873
									// 4874
									beforeunload: { // 4875
										postDispatch: function (event) {
											// 4876
											// 4877
											// Support: Firefox 20+                                                                                          // 4878
											// Firefox doesn't alert if the returnValue field is not set.                                                    // 4879
											if (event.result !== undefined && event.originalEvent) {
												// 4880
												event.originalEvent.returnValue = event.result; // 4881
											} // 4882
										} // 4883
										// 4884
									} }, // 4885
								// 4886
								simulate: function (type, elem, event, bubble) {
									// 4887
									// Piggyback on a donor event to simulate a different one.                                                         // 4888
									// Fake originalEvent to avoid donor's stopPropagation, but if the                                                 // 4889
									// simulated event prevents default then we do the same on the donor.                                              // 4890
									var e = jQuery.extend( // 4891
									new jQuery.Event(), // 4892
									event, // 4893
									{ // 4894
										type: type, // 4895
										isSimulated: true, // 4896
										originalEvent: {} // 4897
										// 4898
									}); // 4899
									if (bubble) {
										// 4900
										jQuery.event.trigger(e, null, elem); // 4901
									} else {
										// 4902
										jQuery.event.dispatch.call(elem, e); // 4903
									} // 4904
									if (e.isDefaultPrevented()) {
										// 4905
										event.preventDefault(); // 4906
									} // 4907
								} // 4908
							}; // 4909
							// 4910
							jQuery.removeEvent = document.removeEventListener ? // 4911
							function (elem, type, handle) {
								// 4912
								if (elem.removeEventListener) {
									// 4913
									elem.removeEventListener(type, handle, false); // 4914
								} // 4915
							} : // 4916
							function (elem, type, handle) {
								// 4917
								var name = "on" + type; // 4918
								// 4919
								if (elem.detachEvent) {
									// 4920
									// 4921
									// #8545, #7054, preventing memory leaks for custom events in IE6-8                                               // 4922
									// detachEvent needed property on element, by name of that event, to properly expose it to GC                     // 4923
									if (typeof elem[name] === strundefined) {
										// 4924
										elem[name] = null; // 4925
									} // 4926
									// 4927
									elem.detachEvent(name, handle); // 4928
								} // 4929
							}; // 4930
							// 4931
							jQuery.Event = function (src, props) {
								// 4932
								// Allow instantiation without the 'new' keyword                                                                    // 4933
								if (!(this instanceof jQuery.Event)) {
									// 4934
									return new jQuery.Event(src, props); // 4935
								} // 4936
								// 4937
								// Event object                                                                                                     // 4938
								if (src && src.type) {
									// 4939
									this.originalEvent = src; // 4940
									this.type = src.type; // 4941
									// 4942
									// Events bubbling up the document may have been marked as prevented                                               // 4943
									// by a handler lower down the tree; reflect the correct value.                                                    // 4944
									this.isDefaultPrevented = src.defaultPrevented || // 4945
									src.defaultPrevented === undefined && // 4946
									// Support: IE < 9, Android < 4.0                                                                                // 4947
									src.returnValue === false ? // 4948
									returnTrue : // 4949
									returnFalse; // 4950
									// 4951
									// Event type                                                                                                       // 4952
								} else {
									// 4953
									this.type = src; // 4954
								} // 4955
								// 4956
								// Put explicitly provided properties onto the event object                                                         // 4957
								if (props) {
									// 4958
									jQuery.extend(this, props); // 4959
								} // 4960
								// 4961
								// Create a timestamp if incoming event doesn't have one                                                            // 4962
								this.timeStamp = src && src.timeStamp || jQuery.now(); // 4963
								// 4964
								// Mark it as fixed                                                                                                 // 4965
								this[jQuery.expando] = true; // 4966
							}; // 4967
							// 4968
							// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                              // 4969
							// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                                 // 4970
							jQuery.Event.prototype = { // 4971
								isDefaultPrevented: returnFalse, // 4972
								isPropagationStopped: returnFalse, // 4973
								isImmediatePropagationStopped: returnFalse, // 4974
								// 4975
								preventDefault: function () {
									// 4976
									var e = this.originalEvent; // 4977
									// 4978
									this.isDefaultPrevented = returnTrue; // 4979
									if (!e) {
										// 4980
										return; // 4981
									} // 4982
									// 4983
									// If preventDefault exists, run it on the original event                                                          // 4984
									if (e.preventDefault) {
										// 4985
										e.preventDefault(); // 4986
										// 4987
										// Support: IE                                                                                                     // 4988
										// Otherwise set the returnValue property of the original event to false                                           // 4989
									} else {
										// 4990
										e.returnValue = false; // 4991
									} // 4992
								}, // 4993
								stopPropagation: function () {
									// 4994
									var e = this.originalEvent; // 4995
									// 4996
									this.isPropagationStopped = returnTrue; // 4997
									if (!e) {
										// 4998
										return; // 4999
									} // 5000
									// If stopPropagation exists, run it on the original event                                                         // 5001
									if (e.stopPropagation) {
										// 5002
										e.stopPropagation(); // 5003
									} // 5004
									// 5005
									// Support: IE                                                                                                     // 5006
									// Set the cancelBubble property of the original event to true                                                     // 5007
									e.cancelBubble = true; // 5008
								}, // 5009
								stopImmediatePropagation: function () {
									// 5010
									var e = this.originalEvent; // 5011
									// 5012
									this.isImmediatePropagationStopped = returnTrue; // 5013
									// 5014
									if (e && e.stopImmediatePropagation) {
										// 5015
										e.stopImmediatePropagation(); // 5016
									} // 5017
									// 5018
									this.stopPropagation(); // 5019
								} // 5020
							}; // 5021
							// 5022
							// Create mouseenter/leave events using mouseover/out and event-time checks                                          // 5023
							jQuery.each({ // 5024
								mouseenter: "mouseover", // 5025
								mouseleave: "mouseout", // 5026
								pointerenter: "pointerover", // 5027
								pointerleave: "pointerout" // 5028
							}, function (orig, fix) {
								// 5029
								jQuery.event.special[orig] = { // 5030
									delegateType: fix, // 5031
									bindType: fix, // 5032
									// 5033
									handle: function (event) {
										// 5034
										var ret,
										    // 5035
										target = this,
										    // 5036
										related = event.relatedTarget,
										    // 5037
										handleObj = event.handleObj; // 5038
										// 5039
										// For mousenter/leave call the handler if related is outside the target.                                         // 5040
										// NB: No relatedTarget if the mouse left/entered the browser window                                              // 5041
										if (!related || related !== target && !jQuery.contains(target, related)) {
											// 5042
											event.type = handleObj.origType; // 5043
											ret = handleObj.handler.apply(this, arguments); // 5044
											event.type = fix; // 5045
										} // 5046
										return ret; // 5047
									} // 5048
								}; // 5049
							}); // 5050
							// 5051
							// IE submit delegation                                                                                              // 5052
							if (!support.submitBubbles) {
								// 5053
								// 5054
								jQuery.event.special.submit = { // 5055
									setup: function () {
										// 5056
										// Only need this for delegated form submit events                                                                // 5057
										if (jQuery.nodeName(this, "form")) {
											// 5058
											return false; // 5059
										} // 5060
										// 5061
										// Lazy-add a submit handler when a descendant form may potentially be submitted                                  // 5062
										jQuery.event.add(this, "click._submit keypress._submit", function (e) {
											// 5063
											// Node name check avoids a VML-related crash in IE (#9807)                                                      // 5064
											var elem = e.target,
											    // 5065
											form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined; // 5066
											if (form && !jQuery._data(form, "submitBubbles")) {
												// 5067
												jQuery.event.add(form, "submit._submit", function (event) {
													// 5068
													event._submit_bubble = true; // 5069
												}); // 5070
												jQuery._data(form, "submitBubbles", true); // 5071
											} // 5072
										}); // 5073
										// return undefined since we don't need an event listener                                                         // 5074
									}, // 5075
									// 5076
									postDispatch: function (event) {
										// 5077
										// If form was submitted by the user, bubble the event up the tree                                                // 5078
										if (event._submit_bubble) {
											// 5079
											delete event._submit_bubble; // 5080
											if (this.parentNode && !event.isTrigger) {
												// 5081
												jQuery.event.simulate("submit", this.parentNode, event, true); // 5082
											} // 5083
										} // 5084
									}, // 5085
									// 5086
									teardown: function () {
										// 5087
										// Only need this for delegated form submit events                                                                // 5088
										if (jQuery.nodeName(this, "form")) {
											// 5089
											return false; // 5090
										} // 5091
										// 5092
										// Remove delegated handlers; cleanData eventually reaps submit handlers attached above                           // 5093
										jQuery.event.remove(this, "._submit"); // 5094
									} // 5095
								}; // 5096
							} // 5097
							// 5098
							// IE change delegation and checkbox/radio fix                                                                       // 5099
							if (!support.changeBubbles) {
								// 5100
								// 5101
								jQuery.event.special.change = { // 5102
									// 5103
									setup: function () {
										// 5104
										// 5105
										if (rformElems.test(this.nodeName)) {
											// 5106
											// IE doesn't fire change on a check/radio until blur; trigger it on click                                       // 5107
											// after a propertychange. Eat the blur-change in special.change.handle.                                         // 5108
											// This still fires onchange a second time for check/radio after blur.                                           // 5109
											if (this.type === "checkbox" || this.type === "radio") {
												// 5110
												jQuery.event.add(this, "propertychange._change", function (event) {
													// 5111
													if (event.originalEvent.propertyName === "checked") {
														// 5112
														this._just_changed = true; // 5113
													} // 5114
												}); // 5115
												jQuery.event.add(this, "click._change", function (event) {
													// 5116
													if (this._just_changed && !event.isTrigger) {
														// 5117
														this._just_changed = false; // 5118
													} // 5119
													// Allow triggered, simulated change events (#11500)                                                           // 5120
													jQuery.event.simulate("change", this, event, true); // 5121
												}); // 5122
											} // 5123
											return false; // 5124
										} // 5125
										// Delegated event; lazy-add a change handler on descendant inputs                                                // 5126
										jQuery.event.add(this, "beforeactivate._change", function (e) {
											// 5127
											var elem = e.target; // 5128
											// 5129
											if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
												// 5130
												jQuery.event.add(elem, "change._change", function (event) {
													// 5131
													if (this.parentNode && !event.isSimulated && !event.isTrigger) {
														// 5132
														jQuery.event.simulate("change", this.parentNode, event, true); // 5133
													} // 5134
												}); // 5135
												jQuery._data(elem, "changeBubbles", true); // 5136
											} // 5137
										}); // 5138
									}, // 5139
									// 5140
									handle: function (event) {
										// 5141
										var elem = event.target; // 5142
										// 5143
										// Swallow native change events from checkbox/radio, we already triggered them above                              // 5144
										if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
											return event.handleObj.handler.apply(this, arguments); // 5146
										} // 5147
									}, // 5148
									// 5149
									teardown: function () {
										// 5150
										jQuery.event.remove(this, "._change"); // 5151
										// 5152
										return !rformElems.test(this.nodeName); // 5153
									} // 5154
								}; // 5155
							} // 5156
							// 5157
							// Create "bubbling" focus and blur events                                                                           // 5158
							if (!support.focusinBubbles) {
								// 5159
								jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
									// 5160
									// 5161
									// Attach a single capturing handler on the document while someone wants focusin/focusout                          // 5162
									var handler = function (event) {
										// 5163
										jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true); // 5164
									}; // 5165
									// 5166
									jQuery.event.special[fix] = { // 5167
										setup: function () {
											// 5168
											var doc = this.ownerDocument || this,
											    // 5169
											attaches = jQuery._data(doc, fix); // 5170
											// 5171
											if (!attaches) {
												// 5172
												doc.addEventListener(orig, handler, true); // 5173
											} // 5174
											jQuery._data(doc, fix, (attaches || 0) + 1); // 5175
										}, // 5176
										teardown: function () {
											// 5177
											var doc = this.ownerDocument || this,
											    // 5178
											attaches = jQuery._data(doc, fix) - 1; // 5179
											// 5180
											if (!attaches) {
												// 5181
												doc.removeEventListener(orig, handler, true); // 5182
												jQuery._removeData(doc, fix); // 5183
											} else {
												// 5184
												jQuery._data(doc, fix, attaches); // 5185
											} // 5186
										} // 5187
									}; // 5188
								}); // 5189
							} // 5190
							// 5191
							jQuery.fn.extend({ // 5192
								// 5193
								on: function (types, selector, data, fn, /*INTERNAL*/one) {
									// 5194
									var type, origFn; // 5195
									// 5196
									// Types can be a map of types/handlers                                                                            // 5197
									if (typeof types === "object") {
										// 5198
										// ( types-Object, selector, data )                                                                               // 5199
										if (typeof selector !== "string") {
											// 5200
											// ( types-Object, data )                                                                                        // 5201
											data = data || selector; // 5202
											selector = undefined; // 5203
										} // 5204
										for (type in types) {
											// 5205
											this.on(type, selector, data, types[type], one); // 5206
										} // 5207
										return this; // 5208
									} // 5209
									// 5210
									if (data == null && fn == null) {
										// 5211
										// ( types, fn )                                                                                                  // 5212
										fn = selector; // 5213
										data = selector = undefined; // 5214
									} else if (fn == null) {
										// 5215
										if (typeof selector === "string") {
											// 5216
											// ( types, selector, fn )                                                                                       // 5217
											fn = data; // 5218
											data = undefined; // 5219
										} else {
											// 5220
											// ( types, data, fn )                                                                                           // 5221
											fn = data; // 5222
											data = selector; // 5223
											selector = undefined; // 5224
										} // 5225
									} // 5226
									if (fn === false) {
										// 5227
										fn = returnFalse; // 5228
									} else if (!fn) {
										// 5229
										return this; // 5230
									} // 5231
									// 5232
									if (one === 1) {
										// 5233
										origFn = fn; // 5234
										fn = function (event) {
											// 5235
											// Can use an empty set, since event contains the info                                                           // 5236
											jQuery().off(event); // 5237
											return origFn.apply(this, arguments); // 5238
										}; // 5239
										// Use same guid so caller can remove using origFn                                                                // 5240
										fn.guid = origFn.guid || (origFn.guid = jQuery.guid++); // 5241
									} // 5242
									return this.each(function () {
										// 5243
										jQuery.event.add(this, types, fn, data, selector); // 5244
									}); // 5245
								}, // 5246
								one: function (types, selector, data, fn) {
									// 5247
									return this.on(types, selector, data, fn, 1); // 5248
								}, // 5249
								off: function (types, selector, fn) {
									// 5250
									var handleObj, type; // 5251
									if (types && types.preventDefault && types.handleObj) {
										// 5252
										// ( event )  dispatched jQuery.Event                                                                             // 5253
										handleObj = types.handleObj; // 5254
										jQuery(types.delegateTarget).off( // 5255
										handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, // 5256
										handleObj.selector, // 5257
										handleObj.handler // 5258
										); // 5259
										return this; // 5260
									} // 5261
									if (typeof types === "object") {
										// 5262
										// ( types-object [, selector] )                                                                                  // 5263
										for (type in types) {
											// 5264
											this.off(type, selector, types[type]); // 5265
										} // 5266
										return this; // 5267
									} // 5268
									if (selector === false || typeof selector === "function") {
										// 5269
										// ( types [, fn] )                                                                                               // 5270
										fn = selector; // 5271
										selector = undefined; // 5272
									} // 5273
									if (fn === false) {
										// 5274
										fn = returnFalse; // 5275
									} // 5276
									return this.each(function () {
										// 5277
										jQuery.event.remove(this, types, fn, selector); // 5278
									}); // 5279
								}, // 5280
								// 5281
								trigger: function (type, data) {
									// 5282
									return this.each(function () {
										// 5283
										jQuery.event.trigger(type, data, this); // 5284
									}); // 5285
								}, // 5286
								triggerHandler: function (type, data) {
									// 5287
									var elem = this[0]; // 5288
									if (elem) {
										// 5289
										return jQuery.event.trigger(type, data, elem, true); // 5290
									} // 5291
								} // 5292
							}); // 5293
							// 5294
							// 5295
							function createSafeFragment(document) {
								// 5296
								var list = nodeNames.split("|"),
								    // 5297
								safeFrag = document.createDocumentFragment(); // 5298
								// 5299
								if (safeFrag.createElement) {
									// 5300
									while (list.length) {
										// 5301
										safeFrag.createElement( // 5302
										list.pop() // 5303
										); // 5304
									} // 5305
								} // 5306
								return safeFrag; // 5307
							} // 5308
							// 5309
							var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + // 5310
							"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
							    // 5311
							rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
							    // 5312
							rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
							    // 5313
							rleadingWhitespace = /^\s+/,
							    // 5314
							rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
							    // 5315
							rtagName = /<([\w:]+)/,
							    // 5316
							rtbody = /<tbody/i,
							    // 5317
							rhtml = /<|&#?\w+;/,
							    // 5318
							rnoInnerhtml = /<(?:script|style|link)/i,
							    // 5319
							// checked="checked" or checked                                                                                     // 5320
							rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
							    // 5321
							rscriptType = /^$|\/(?:java|ecma)script/i,
							    // 5322
							rscriptTypeMasked = /^true\/(.*)/,
							    // 5323
							rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
							    // 5324
							// 5325
							// We have to close these tags to support XHTML (#13200)                                                            // 5326
							wrapMap = { // 5327
								option: [1, "<select multiple='multiple'>", "</select>"], // 5328
								legend: [1, "<fieldset>", "</fieldset>"], // 5329
								area: [1, "<map>", "</map>"], // 5330
								param: [1, "<object>", "</object>"], // 5331
								thead: [1, "<table>", "</table>"], // 5332
								tr: [2, "<table><tbody>", "</tbody></table>"], // 5333
								col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], // 5334
								td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], // 5335
								// 5336
								// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,                                         // 5337
								// unless wrapped in a div with non-breaking characters in front of it.                                            // 5338
								_default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] // 5339
							},
							    // 5340
							safeFragment = createSafeFragment(document),
							    // 5341
							fragmentDiv = safeFragment.appendChild(document.createElement("div")); // 5342
							// 5343
							wrapMap.optgroup = wrapMap.option; // 5344
							wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead; // 5345
							wrapMap.th = wrapMap.td; // 5346
							// 5347
							function getAll(context, tag) {
								// 5348
								var elems,
								    elem,
								    // 5349
								i = 0,
								    // 5350
								found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : // 5351
								typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : // 5352
								undefined; // 5353
								// 5354
								if (!found) {
									// 5355
									for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
										// 5356
										if (!tag || jQuery.nodeName(elem, tag)) {
											// 5357
											found.push(elem); // 5358
										} else {
											// 5359
											jQuery.merge(found, getAll(elem, tag)); // 5360
										} // 5361
									} // 5362
								} // 5363
								// 5364
								return tag === undefined || tag && jQuery.nodeName(context, tag) ? // 5365
								jQuery.merge([context], found) : // 5366
								found; // 5367
							} // 5368
							// 5369
							// Used in buildFragment, fixes the defaultChecked property                                                          // 5370
							function fixDefaultChecked(elem) {
								// 5371
								if (rcheckableType.test(elem.type)) {
									// 5372
									elem.defaultChecked = elem.checked; // 5373
								} // 5374
							} // 5375
							// 5376
							// Support: IE<8                                                                                                     // 5377
							// Manipulating tables requires a tbody                                                                              // 5378
							function manipulationTarget(elem, content) {
								// 5379
								return jQuery.nodeName(elem, "table") && // 5380
								jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? // 5381
								// 5382
								elem.getElementsByTagName("tbody")[0] || // 5383
								elem.appendChild(elem.ownerDocument.createElement("tbody")) : // 5384
								elem; // 5385
							} // 5386
							// 5387
							// Replace/restore the type attribute of script elements for safe DOM manipulation                                   // 5388
							function disableScript(elem) {
								// 5389
								elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type; // 5390
								return elem; // 5391
							} // 5392
							function restoreScript(elem) {
								// 5393
								var match = rscriptTypeMasked.exec(elem.type); // 5394
								if (match) {
									// 5395
									elem.type = match[1]; // 5396
								} else {
									// 5397
									elem.removeAttribute("type"); // 5398
								} // 5399
								return elem; // 5400
							} // 5401
							// 5402
							// Mark scripts as having already been evaluated                                                                     // 5403
							function setGlobalEval(elems, refElements) {
								// 5404
								var elem,
								    // 5405
								i = 0; // 5406
								for (; (elem = elems[i]) != null; i++) {
									// 5407
									jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval")); // 5408
								} // 5409
							} // 5410
							// 5411
							function cloneCopyEvent(src, dest) {
								// 5412
								// 5413
								if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
									// 5414
									return; // 5415
								} // 5416
								// 5417
								var type,
								    i,
								    l,
								    // 5418
								oldData = jQuery._data(src),
								    // 5419
								curData = jQuery._data(dest, oldData),
								    // 5420
								events = oldData.events; // 5421
								// 5422
								if (events) {
									// 5423
									delete curData.handle; // 5424
									curData.events = {}; // 5425
									// 5426
									for (type in events) {
										// 5427
										for (i = 0, l = events[type].length; i < l; i++) {
											// 5428
											jQuery.event.add(dest, type, events[type][i]); // 5429
										} // 5430
									} // 5431
								} // 5432
								// 5433
								// make the cloned public data object a copy from the original                                                      // 5434
								if (curData.data) {
									// 5435
									curData.data = jQuery.extend({}, curData.data); // 5436
								} // 5437
							} // 5438
							// 5439
							function fixCloneNodeIssues(src, dest) {
								// 5440
								var nodeName, e, data; // 5441
								// 5442
								// We do not need to do anything for non-Elements                                                                   // 5443
								if (dest.nodeType !== 1) {
									// 5444
									return; // 5445
								} // 5446
								// 5447
								nodeName = dest.nodeName.toLowerCase(); // 5448
								// 5449
								// IE6-8 copies events bound via attachEvent when using cloneNode.                                                  // 5450
								if (!support.noCloneEvent && dest[jQuery.expando]) {
									// 5451
									data = jQuery._data(dest); // 5452
									// 5453
									for (e in data.events) {
										// 5454
										jQuery.removeEvent(dest, e, data.handle); // 5455
									} // 5456
									// 5457
									// Event data gets referenced instead of copied if the expando gets copied too                                     // 5458
									dest.removeAttribute(jQuery.expando); // 5459
								} // 5460
								// 5461
								// IE blanks contents when cloning scripts, and tries to evaluate newly-set text                                    // 5462
								if (nodeName === "script" && dest.text !== src.text) {
									// 5463
									disableScript(dest).text = src.text; // 5464
									restoreScript(dest); // 5465
									// 5466
									// IE6-10 improperly clones children of object elements using classid.                                              // 5467
									// IE10 throws NoModificationAllowedError if parent is null, #12132.                                                // 5468
								} else if (nodeName === "object") {
									// 5469
									if (dest.parentNode) {
										// 5470
										dest.outerHTML = src.outerHTML; // 5471
									} // 5472
									// 5473
									// This path appears unavoidable for IE9. When cloning an object                                                   // 5474
									// element in IE9, the outerHTML strategy above is not sufficient.                                                 // 5475
									// If the src has innerHTML and the destination does not,                                                          // 5476
									// copy the src.innerHTML into the dest.innerHTML. #10324                                                          // 5477
									if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
										// 5478
										dest.innerHTML = src.innerHTML; // 5479
									} // 5480
									// 5481
								} else if (nodeName === "input" && rcheckableType.test(src.type)) {
									// 5482
									// IE6-8 fails to persist the checked state of a cloned checkbox                                                   // 5483
									// or radio button. Worse, IE6-7 fail to give the cloned element                                                   // 5484
									// a checked appearance if the defaultChecked value isn't also set                                                 // 5485
									// 5486
									dest.defaultChecked = dest.checked = src.checked; // 5487
									// 5488
									// IE6-7 get confused and end up setting the value of a cloned                                                     // 5489
									// checkbox/radio button to an empty string instead of "on"                                                        // 5490
									if (dest.value !== src.value) {
										// 5491
										dest.value = src.value; // 5492
									} // 5493
									// 5494
									// IE6-8 fails to return the selected option to the default selected                                                // 5495
									// state when cloning options                                                                                       // 5496
								} else if (nodeName === "option") {
									// 5497
									dest.defaultSelected = dest.selected = src.defaultSelected; // 5498
									// 5499
									// IE6-8 fails to set the defaultValue to the correct value when                                                    // 5500
									// cloning other types of input fields                                                                              // 5501
								} else if (nodeName === "input" || nodeName === "textarea") {
									// 5502
									dest.defaultValue = src.defaultValue; // 5503
								} // 5504
							} // 5505
							// 5506
							jQuery.extend({ // 5507
								clone: function (elem, dataAndEvents, deepDataAndEvents) {
									// 5508
									var destElements,
									    node,
									    clone,
									    i,
									    srcElements,
									    // 5509
									inPage = jQuery.contains(elem.ownerDocument, elem); // 5510
									// 5511
									if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
										// 5512
										clone = elem.cloneNode(true); // 5513
										// 5514
										// IE<=8 does not properly clone detached, unknown element nodes                                                   // 5515
									} else {
										// 5516
										fragmentDiv.innerHTML = elem.outerHTML; // 5517
										fragmentDiv.removeChild(clone = fragmentDiv.firstChild); // 5518
									} // 5519
									// 5520
									if ((!support.noCloneEvent || !support.noCloneChecked) && ( // 5521
									elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
										// 5522
										// 5523
										// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                            // 5524
										destElements = getAll(clone); // 5525
										srcElements = getAll(elem); // 5526
										// 5527
										// Fix all IE cloning issues                                                                                      // 5528
										for (i = 0; (node = srcElements[i]) != null; ++i) {
											// 5529
											// Ensure that the destination node is not null; Fixes #9587                                                     // 5530
											if (destElements[i]) {
												// 5531
												fixCloneNodeIssues(node, destElements[i]); // 5532
											} // 5533
										} // 5534
									} // 5535
									// 5536
									// Copy the events from the original to the clone                                                                  // 5537
									if (dataAndEvents) {
										// 5538
										if (deepDataAndEvents) {
											// 5539
											srcElements = srcElements || getAll(elem); // 5540
											destElements = destElements || getAll(clone); // 5541
											// 5542
											for (i = 0; (node = srcElements[i]) != null; i++) {
												// 5543
												cloneCopyEvent(node, destElements[i]); // 5544
											} // 5545
										} else {
											// 5546
											cloneCopyEvent(elem, clone); // 5547
										} // 5548
									} // 5549
									// 5550
									// Preserve script evaluation history                                                                              // 5551
									destElements = getAll(clone, "script"); // 5552
									if (destElements.length > 0) {
										// 5553
										setGlobalEval(destElements, !inPage && getAll(elem, "script")); // 5554
									} // 5555
									// 5556
									destElements = srcElements = node = null; // 5557
									// 5558
									// Return the cloned set                                                                                           // 5559
									return clone; // 5560
								}, // 5561
								// 5562
								buildFragment: function (elems, context, scripts, selection) {
									// 5563
									var j,
									    elem,
									    contains,
									    // 5564
									tmp,
									    tag,
									    tbody,
									    wrap,
									    // 5565
									l = elems.length,
									    // 5566
									// 5567
									// Ensure a safe fragment                                                                                         // 5568
									safe = createSafeFragment(context),
									    // 5569
									// 5570
									nodes = [],
									    // 5571
									i = 0; // 5572
									// 5573
									for (; i < l; i++) {
										// 5574
										elem = elems[i]; // 5575
										// 5576
										if (elem || elem === 0) {
											// 5577
											// 5578
											// Add nodes directly                                                                                            // 5579
											if (jQuery.type(elem) === "object") {
												// 5580
												jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // 5581
												// 5582
												// Convert non-html into a text node                                                                             // 5583
											} else if (!rhtml.test(elem)) {
												// 5584
												nodes.push(context.createTextNode(elem)); // 5585
												// 5586
												// Convert html into DOM nodes                                                                                   // 5587
											} else {
												// 5588
												tmp = tmp || safe.appendChild(context.createElement("div")); // 5589
												// 5590
												// Deserialize a standard representation                                                                        // 5591
												tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(); // 5592
												wrap = wrapMap[tag] || wrapMap._default; // 5593
												// 5594
												tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2]; // 5595
												// 5596
												// Descend through wrappers to the right content                                                                // 5597
												j = wrap[0]; // 5598
												while (j--) {
													// 5599
													tmp = tmp.lastChild; // 5600
												} // 5601
												// 5602
												// Manually add leading whitespace removed by IE                                                                // 5603
												if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
													// 5604
													nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0])); // 5605
												} // 5606
												// 5607
												// Remove IE's autoinserted <tbody> from table fragments                                                        // 5608
												if (!support.tbody) {
													// 5609
													// 5610
													// String was a <table>, *may* have spurious <tbody>                                                           // 5611
													elem = tag === "table" && !rtbody.test(elem) ? // 5612
													tmp.firstChild : // 5613
													// 5614
													// String was a bare <thead> or <tfoot>                                                                       // 5615
													wrap[1] === "<table>" && !rtbody.test(elem) ? // 5616
													tmp : // 5617
													0; // 5618
													// 5619
													j = elem && elem.childNodes.length; // 5620
													while (j--) {
														// 5621
														if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
															// 5622
															elem.removeChild(tbody); // 5623
														} // 5624
													} // 5625
												} // 5626
												// 5627
												jQuery.merge(nodes, tmp.childNodes); // 5628
												// 5629
												// Fix #12392 for WebKit and IE > 9                                                                             // 5630
												tmp.textContent = ""; // 5631
												// 5632
												// Fix #12392 for oldIE                                                                                         // 5633
												while (tmp.firstChild) {
													// 5634
													tmp.removeChild(tmp.firstChild); // 5635
												} // 5636
												// 5637
												// Remember the top-level container for proper cleanup                                                          // 5638
												tmp = safe.lastChild; // 5639
											} // 5640
										} // 5641
									} // 5642
									// 5643
									// Fix #11356: Clear elements from fragment                                                                        // 5644
									if (tmp) {
										// 5645
										safe.removeChild(tmp); // 5646
									} // 5647
									// 5648
									// Reset defaultChecked for any radios and checkboxes                                                              // 5649
									// about to be appended to the DOM in IE 6/7 (#8060)                                                               // 5650
									if (!support.appendChecked) {
										// 5651
										jQuery.grep(getAll(nodes, "input"), fixDefaultChecked); // 5652
									} // 5653
									// 5654
									i = 0; // 5655
									while (elem = nodes[i++]) {
										// 5656
										// 5657
										// #4087 - If origin and destination elements are the same, and this is                                           // 5658
										// that element, do not do anything                                                                               // 5659
										if (selection && jQuery.inArray(elem, selection) !== -1) {
											// 5660
											continue; // 5661
										} // 5662
										// 5663
										contains = jQuery.contains(elem.ownerDocument, elem); // 5664
										// 5665
										// Append to fragment                                                                                             // 5666
										tmp = getAll(safe.appendChild(elem), "script"); // 5667
										// 5668
										// Preserve script evaluation history                                                                             // 5669
										if (contains) {
											// 5670
											setGlobalEval(tmp); // 5671
										} // 5672
										// 5673
										// Capture executables                                                                                            // 5674
										if (scripts) {
											// 5675
											j = 0; // 5676
											while (elem = tmp[j++]) {
												// 5677
												if (rscriptType.test(elem.type || "")) {
													// 5678
													scripts.push(elem); // 5679
												} // 5680
											} // 5681
										} // 5682
									} // 5683
									// 5684
									tmp = null; // 5685
									// 5686
									return safe; // 5687
								}, // 5688
								// 5689
								cleanData: function (elems, /* internal */acceptData) {
									// 5690
									var elem,
									    type,
									    id,
									    data,
									    // 5691
									i = 0,
									    // 5692
									internalKey = jQuery.expando,
									    // 5693
									cache = jQuery.cache,
									    // 5694
									deleteExpando = support.deleteExpando,
									    // 5695
									special = jQuery.event.special; // 5696
									// 5697
									for (; (elem = elems[i]) != null; i++) {
										// 5698
										if (acceptData || jQuery.acceptData(elem)) {
											// 5699
											// 5700
											id = elem[internalKey]; // 5701
											data = id && cache[id]; // 5702
											// 5703
											if (data) {
												// 5704
												if (data.events) {
													// 5705
													for (type in data.events) {
														// 5706
														if (special[type]) {
															// 5707
															jQuery.event.remove(elem, type); // 5708
															// 5709
															// This is a shortcut to avoid jQuery.event.remove's overhead                                                 // 5710
														} else {
															// 5711
															jQuery.removeEvent(elem, type, data.handle); // 5712
														} // 5713
													} // 5714
												} // 5715
												// 5716
												// Remove cache only if it was not already removed by jQuery.event.remove                                       // 5717
												if (cache[id]) {
													// 5718
													// 5719
													delete cache[id]; // 5720
													// 5721
													// IE does not allow us to delete expando properties from nodes,                                               // 5722
													// nor does it have a removeAttribute function on Document nodes;                                              // 5723
													// we must handle all of these cases                                                                           // 5724
													if (deleteExpando) {
														// 5725
														delete elem[internalKey]; // 5726
														// 5727
													} else if (typeof elem.removeAttribute !== strundefined) {
														// 5728
														elem.removeAttribute(internalKey); // 5729
														// 5730
													} else {
														// 5731
														elem[internalKey] = null; // 5732
													} // 5733
													// 5734
													deletedIds.push(id); // 5735
												} // 5736
											} // 5737
										} // 5738
									} // 5739
								} // 5740
							}); // 5741
							// 5742
							jQuery.fn.extend({ // 5743
								text: function (value) {
									// 5744
									return access(this, function (value) {
										// 5745
										return value === undefined ? // 5746
										jQuery.text(this) : // 5747
										this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value)); // 5748
									}, null, value, arguments.length); // 5749
								}, // 5750
								// 5751
								append: function () {
									// 5752
									return this.domManip(arguments, function (elem) {
										// 5753
										if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
											// 5754
											var target = manipulationTarget(this, elem); // 5755
											target.appendChild(elem); // 5756
										} // 5757
									}); // 5758
								}, // 5759
								// 5760
								prepend: function () {
									// 5761
									return this.domManip(arguments, function (elem) {
										// 5762
										if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
											// 5763
											var target = manipulationTarget(this, elem); // 5764
											target.insertBefore(elem, target.firstChild); // 5765
										} // 5766
									}); // 5767
								}, // 5768
								// 5769
								before: function () {
									// 5770
									return this.domManip(arguments, function (elem) {
										// 5771
										if (this.parentNode) {
											// 5772
											this.parentNode.insertBefore(elem, this); // 5773
										} // 5774
									}); // 5775
								}, // 5776
								// 5777
								after: function () {
									// 5778
									return this.domManip(arguments, function (elem) {
										// 5779
										if (this.parentNode) {
											// 5780
											this.parentNode.insertBefore(elem, this.nextSibling); // 5781
										} // 5782
									}); // 5783
								}, // 5784
								// 5785
								remove: function (selector, keepData /* Internal Use Only */) {
									// 5786
									var elem,
									    // 5787
									elems = selector ? jQuery.filter(selector, this) : this,
									    // 5788
									i = 0; // 5789
									// 5790
									for (; (elem = elems[i]) != null; i++) {
										// 5791
										// 5792
										if (!keepData && elem.nodeType === 1) {
											// 5793
											jQuery.cleanData(getAll(elem)); // 5794
										} // 5795
										// 5796
										if (elem.parentNode) {
											// 5797
											if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
												// 5798
												setGlobalEval(getAll(elem, "script")); // 5799
											} // 5800
											elem.parentNode.removeChild(elem); // 5801
										} // 5802
									} // 5803
									// 5804
									return this; // 5805
								}, // 5806
								// 5807
								empty: function () {
									// 5808
									var elem,
									    // 5809
									i = 0; // 5810
									// 5811
									for (; (elem = this[i]) != null; i++) {
										// 5812
										// Remove element nodes and prevent memory leaks                                                                  // 5813
										if (elem.nodeType === 1) {
											// 5814
											jQuery.cleanData(getAll(elem, false)); // 5815
										} // 5816
										// 5817
										// Remove any remaining nodes                                                                                     // 5818
										while (elem.firstChild) {
											// 5819
											elem.removeChild(elem.firstChild); // 5820
										} // 5821
										// 5822
										// If this is a select, ensure that it displays empty (#12336)                                                    // 5823
										// Support: IE<9                                                                                                  // 5824
										if (elem.options && jQuery.nodeName(elem, "select")) {
											// 5825
											elem.options.length = 0; // 5826
										} // 5827
									} // 5828
									// 5829
									return this; // 5830
								}, // 5831
								// 5832
								clone: function (dataAndEvents, deepDataAndEvents) {
									// 5833
									dataAndEvents = dataAndEvents == null ? false : dataAndEvents; // 5834
									deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents; // 5835
									// 5836
									return this.map(function () {
										// 5837
										return jQuery.clone(this, dataAndEvents, deepDataAndEvents); // 5838
									}); // 5839
								}, // 5840
								// 5841
								html: function (value) {
									// 5842
									return access(this, function (value) {
										// 5843
										var elem = this[0] || {},
										    // 5844
										i = 0,
										    // 5845
										l = this.length; // 5846
										// 5847
										if (value === undefined) {
											// 5848
											return elem.nodeType === 1 ? // 5849
											elem.innerHTML.replace(rinlinejQuery, "") : // 5850
											undefined; // 5851
										} // 5852
										// 5853
										// See if we can take a shortcut and just use innerHTML                                                           // 5854
										if (typeof value === "string" && !rnoInnerhtml.test(value) && ( // 5855
										support.htmlSerialize || !rnoshimcache.test(value)) && ( // 5856
										support.leadingWhitespace || !rleadingWhitespace.test(value)) && // 5857
										!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
											// 5858
											// 5859
											value = value.replace(rxhtmlTag, "<$1></$2>"); // 5860
											// 5861
											try {
												// 5862
												for (; i < l; i++) {
													// 5863
													// Remove element nodes and prevent memory leaks                                                               // 5864
													elem = this[i] || {}; // 5865
													if (elem.nodeType === 1) {
														// 5866
														jQuery.cleanData(getAll(elem, false)); // 5867
														elem.innerHTML = value; // 5868
													} // 5869
												} // 5870
												// 5871
												elem = 0; // 5872
												// 5873
												// If using innerHTML throws an exception, use the fallback method                                               // 5874
											} catch (e) {} // 5875
										} // 5876
										// 5877
										if (elem) {
											// 5878
											this.empty().append(value); // 5879
										} // 5880
									}, null, value, arguments.length); // 5881
								}, // 5882
								// 5883
								replaceWith: function () {
									// 5884
									var arg = arguments[0]; // 5885
									// 5886
									// Make the changes, replacing each context element with the new content                                           // 5887
									this.domManip(arguments, function (elem) {
										// 5888
										arg = this.parentNode; // 5889
										// 5890
										jQuery.cleanData(getAll(this)); // 5891
										// 5892
										if (arg) {
											// 5893
											arg.replaceChild(elem, this); // 5894
										} // 5895
									}); // 5896
									// 5897
									// Force removal if there was no new content (e.g., from empty arguments)                                          // 5898
									return arg && (arg.length || arg.nodeType) ? this : this.remove(); // 5899
								}, // 5900
								// 5901
								detach: function (selector) {
									// 5902
									return this.remove(selector, true); // 5903
								}, // 5904
								// 5905
								domManip: function (args, callback) {
									// 5906
									// 5907
									// Flatten any nested arrays                                                                                       // 5908
									args = concat.apply([], args); // 5909
									// 5910
									var first,
									    node,
									    hasScripts,
									    // 5911
									scripts,
									    doc,
									    fragment,
									    // 5912
									i = 0,
									    // 5913
									l = this.length,
									    // 5914
									set = this,
									    // 5915
									iNoClone = l - 1,
									    // 5916
									value = args[0],
									    // 5917
									isFunction = jQuery.isFunction(value); // 5918
									// 5919
									// We can't cloneNode fragments that contain checked, in WebKit                                                    // 5920
									if (isFunction || // 5921
									l > 1 && typeof value === "string" && // 5922
									!support.checkClone && rchecked.test(value)) {
										// 5923
										return this.each(function (index) {
											// 5924
											var self = set.eq(index); // 5925
											if (isFunction) {
												// 5926
												args[0] = value.call(this, index, self.html()); // 5927
											} // 5928
											self.domManip(args, callback); // 5929
										}); // 5930
									} // 5931
									// 5932
									if (l) {
										// 5933
										fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this); // 5934
										first = fragment.firstChild; // 5935
										// 5936
										if (fragment.childNodes.length === 1) {
											// 5937
											fragment = first; // 5938
										} // 5939
										// 5940
										if (first) {
											// 5941
											scripts = jQuery.map(getAll(fragment, "script"), disableScript); // 5942
											hasScripts = scripts.length; // 5943
											// 5944
											// Use the original fragment for the last item instead of the first because it can end up                        // 5945
											// being emptied incorrectly in certain situations (#8070).                                                      // 5946
											for (; i < l; i++) {
												// 5947
												node = fragment; // 5948
												// 5949
												if (i !== iNoClone) {
													// 5950
													node = jQuery.clone(node, true, true); // 5951
													// 5952
													// Keep references to cloned scripts for later restoration                                                     // 5953
													if (hasScripts) {
														// 5954
														jQuery.merge(scripts, getAll(node, "script")); // 5955
													} // 5956
												} // 5957
												// 5958
												callback.call(this[i], node, i); // 5959
											} // 5960
											// 5961
											if (hasScripts) {
												// 5962
												doc = scripts[scripts.length - 1].ownerDocument; // 5963
												// 5964
												// Reenable scripts                                                                                             // 5965
												jQuery.map(scripts, restoreScript); // 5966
												// 5967
												// Evaluate executable scripts on first document insertion                                                      // 5968
												for (i = 0; i < hasScripts; i++) {
													// 5969
													node = scripts[i]; // 5970
													if (rscriptType.test(node.type || "") && // 5971
													!jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
														// 5972
														// 5973
														if (node.src) {
															// 5974
															// Optional AJAX dependency, but won't run scripts if not present                                            // 5975
															if (jQuery._evalUrl) {
																// 5976
																jQuery._evalUrl(node.src); // 5977
															} // 5978
														} else {
															// 5979
															jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, "")); // 5980
														} // 5981
													} // 5982
												} // 5983
											} // 5984
											// 5985
											// Fix #11809: Avoid leaking memory                                                                              // 5986
											fragment = first = null; // 5987
										} // 5988
									} // 5989
									// 5990
									return this; // 5991
								} // 5992
							}); // 5993
							// 5994
							jQuery.each({ // 5995
								appendTo: "append", // 5996
								prependTo: "prepend", // 5997
								insertBefore: "before", // 5998
								insertAfter: "after", // 5999
								replaceAll: "replaceWith" // 6000
							}, function (name, original) {
								// 6001
								jQuery.fn[name] = function (selector) {
									// 6002
									var elems,
									    // 6003
									i = 0,
									    // 6004
									ret = [],
									    // 6005
									insert = jQuery(selector),
									    // 6006
									last = insert.length - 1; // 6007
									// 6008
									for (; i <= last; i++) {
										// 6009
										elems = i === last ? this : this.clone(true); // 6010
										jQuery(insert[i])[original](elems); // 6011
										// 6012
										// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()                               // 6013
										push.apply(ret, elems.get()); // 6014
									} // 6015
									// 6016
									return this.pushStack(ret); // 6017
								}; // 6018
							}); // 6019
							// 6020
							// 6021
							var iframe,
							    // 6022
							elemdisplay = {}; // 6023
							// 6024
							/**                                                                                                                  // 6025
        * Retrieve the actual display of a element                                                                          // 6026
        * @param {String} name nodeName of the element                                                                      // 6027
        * @param {Object} doc Document object                                                                               // 6028
        */ // 6029
							// Called only from within defaultDisplay                                                                            // 6030
							function actualDisplay(name, doc) {
								// 6031
								var style,
								    // 6032
								elem = jQuery(doc.createElement(name)).appendTo(doc.body),
								    // 6033
								// 6034
								// getDefaultComputedStyle might be reliably used only on attached element                                         // 6035
								display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? // 6036
								// 6037
								// Use of this method is a temporary fix (more like optmization) until something better comes along,              // 6038
								// since it was removed from specification and supported only in FF                                               // 6039
								style.display : jQuery.css(elem[0], "display"); // 6040
								// 6041
								// We don't have any data stored on the element,                                                                    // 6042
								// so use "detach" method as fast way to get rid of the element                                                     // 6043
								elem.detach(); // 6044
								// 6045
								return display; // 6046
							} // 6047
							// 6048
							/**                                                                                                                  // 6049
        * Try to determine the default display value of an element                                                          // 6050
        * @param {String} nodeName                                                                                          // 6051
        */ // 6052
							function defaultDisplay(nodeName) {
								// 6053
								var doc = document,
								    // 6054
								display = elemdisplay[nodeName]; // 6055
								// 6056
								if (!display) {
									// 6057
									display = actualDisplay(nodeName, doc); // 6058
									// 6059
									// If the simple way fails, read from inside an iframe                                                             // 6060
									if (display === "none" || !display) {
										// 6061
										// 6062
										// Use the already-created iframe if possible                                                                     // 6063
										iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement); // 6064
										// 6065
										// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                                    // 6066
										doc = (iframe[0].contentWindow || iframe[0].contentDocument).document; // 6067
										// 6068
										// Support: IE                                                                                                    // 6069
										doc.write(); // 6070
										doc.close(); // 6071
										// 6072
										display = actualDisplay(nodeName, doc); // 6073
										iframe.detach(); // 6074
									} // 6075
									// 6076
									// Store the correct default display                                                                               // 6077
									elemdisplay[nodeName] = display; // 6078
								} // 6079
								// 6080
								return display; // 6081
							} // 6082
							// 6083
							// 6084
							(function () {
								// 6085
								var shrinkWrapBlocksVal; // 6086
								// 6087
								support.shrinkWrapBlocks = function () {
									// 6088
									if (shrinkWrapBlocksVal != null) {
										// 6089
										return shrinkWrapBlocksVal; // 6090
									} // 6091
									// 6092
									// Will be changed later if needed.                                                                                // 6093
									shrinkWrapBlocksVal = false; // 6094
									// 6095
									// Minified: var b,c,d                                                                                             // 6096
									var div, body, container; // 6097
									// 6098
									body = document.getElementsByTagName("body")[0]; // 6099
									if (!body || !body.style) {
										// 6100
										// Test fired too early or in an unsupported environment, exit.                                                   // 6101
										return; // 6102
									} // 6103
									// 6104
									// Setup                                                                                                           // 6105
									div = document.createElement("div"); // 6106
									container = document.createElement("div"); // 6107
									container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"; // 6108
									body.appendChild(container).appendChild(div); // 6109
									// 6110
									// Support: IE6                                                                                                    // 6111
									// Check if elements with layout shrink-wrap their children                                                        // 6112
									if (typeof div.style.zoom !== strundefined) {
										// 6113
										// Reset CSS: box-sizing; display; margin; border                                                                 // 6114
										div.style.cssText = // 6115
										// Support: Firefox<29, Android 2.3                                                                              // 6116
										// Vendor-prefix box-sizing                                                                                      // 6117
										"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + // 6118
										"box-sizing:content-box;display:block;margin:0;border:0;" + // 6119
										"padding:1px;width:1px;zoom:1"; // 6120
										div.appendChild(document.createElement("div")).style.width = "5px"; // 6121
										shrinkWrapBlocksVal = div.offsetWidth !== 3; // 6122
									} // 6123
									// 6124
									body.removeChild(container); // 6125
									// 6126
									return shrinkWrapBlocksVal; // 6127
								}; // 6128
								// 6129
							})(); // 6130
							var rmargin = /^margin/; // 6131
							// 6132
							var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i"); // 6133
							// 6134
							// 6135
							// 6136
							var getStyles,
							    curCSS,
							    // 6137
							rposition = /^(top|right|bottom|left)$/; // 6138
							// 6139
							if (window.getComputedStyle) {
								// 6140
								getStyles = function (elem) {
									// 6141
									// Support: IE<=11+, Firefox<=30+ (#15098, #14150)                                                                 // 6142
									// IE throws on elements created in popups                                                                         // 6143
									// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"                                    // 6144
									if (elem.ownerDocument.defaultView.opener) {
										// 6145
										return elem.ownerDocument.defaultView.getComputedStyle(elem, null); // 6146
									} // 6147
									// 6148
									return window.getComputedStyle(elem, null); // 6149
								}; // 6150
								// 6151
								curCSS = function (elem, name, computed) {
									// 6152
									var width,
									    minWidth,
									    maxWidth,
									    ret,
									    // 6153
									style = elem.style; // 6154
									// 6155
									computed = computed || getStyles(elem); // 6156
									// 6157
									// getPropertyValue is only needed for .css('filter') in IE9, see #12537                                           // 6158
									ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined; // 6159
									// 6160
									if (computed) {
										// 6161
										// 6162
										if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
											// 6163
											ret = jQuery.style(elem, name); // 6164
										} // 6165
										// 6166
										// A tribute to the "awesome hack by Dean Edwards"                                                                // 6167
										// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right                      // 6168
										// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels   // 6169
										// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values                           // 6170
										if (rnumnonpx.test(ret) && rmargin.test(name)) {
											// 6171
											// 6172
											// Remember the original values                                                                                  // 6173
											width = style.width; // 6174
											minWidth = style.minWidth; // 6175
											maxWidth = style.maxWidth; // 6176
											// 6177
											// Put in the new values to get a computed value out                                                             // 6178
											style.minWidth = style.maxWidth = style.width = ret; // 6179
											ret = computed.width; // 6180
											// 6181
											// Revert the changed values                                                                                     // 6182
											style.width = width; // 6183
											style.minWidth = minWidth; // 6184
											style.maxWidth = maxWidth; // 6185
										} // 6186
									} // 6187
									// 6188
									// Support: IE                                                                                                     // 6189
									// IE returns zIndex value as an integer.                                                                          // 6190
									return ret === undefined ? // 6191
									ret : // 6192
									ret + ""; // 6193
								}; // 6194
							} else if (document.documentElement.currentStyle) {
								// 6195
								getStyles = function (elem) {
									// 6196
									return elem.currentStyle; // 6197
								}; // 6198
								// 6199
								curCSS = function (elem, name, computed) {
									// 6200
									var left,
									    rs,
									    rsLeft,
									    ret,
									    // 6201
									style = elem.style; // 6202
									// 6203
									computed = computed || getStyles(elem); // 6204
									ret = computed ? computed[name] : undefined; // 6205
									// 6206
									// Avoid setting ret to empty string here                                                                          // 6207
									// so we don't default to auto                                                                                     // 6208
									if (ret == null && style && style[name]) {
										// 6209
										ret = style[name]; // 6210
									} // 6211
									// 6212
									// From the awesome hack by Dean Edwards                                                                           // 6213
									// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291                                                // 6214
									// 6215
									// If we're not dealing with a regular pixel number                                                                // 6216
									// but a number that has a weird ending, we need to convert it to pixels                                           // 6217
									// but not position css attributes, as those are proportional to the parent element instead                        // 6218
									// and we can't measure the parent instead because it might trigger a "stacking dolls" problem                     // 6219
									if (rnumnonpx.test(ret) && !rposition.test(name)) {
										// 6220
										// 6221
										// Remember the original values                                                                                   // 6222
										left = style.left; // 6223
										rs = elem.runtimeStyle; // 6224
										rsLeft = rs && rs.left; // 6225
										// 6226
										// Put in the new values to get a computed value out                                                              // 6227
										if (rsLeft) {
											// 6228
											rs.left = elem.currentStyle.left; // 6229
										} // 6230
										style.left = name === "fontSize" ? "1em" : ret; // 6231
										ret = style.pixelLeft + "px"; // 6232
										// 6233
										// Revert the changed values                                                                                      // 6234
										style.left = left; // 6235
										if (rsLeft) {
											// 6236
											rs.left = rsLeft; // 6237
										} // 6238
									} // 6239
									// 6240
									// Support: IE                                                                                                     // 6241
									// IE returns zIndex value as an integer.                                                                          // 6242
									return ret === undefined ? // 6243
									ret : // 6244
									ret + "" || "auto"; // 6245
								}; // 6246
							} // 6247
							// 6248
							// 6249
							// 6250
							// 6251
							function addGetHookIf(conditionFn, hookFn) {
								// 6252
								// Define the hook, we'll check on the first run if it's really needed.                                             // 6253
								return { // 6254
									get: function () {
										// 6255
										var condition = conditionFn(); // 6256
										// 6257
										if (condition == null) {
											// 6258
											// The test was not ready at this point; screw the hook this time                                                // 6259
											// but check again when needed next time.                                                                        // 6260
											return; // 6261
										} // 6262
										// 6263
										if (condition) {
											// 6264
											// Hook not needed (or it's not possible to use it due to missing dependency),                                   // 6265
											// remove it.                                                                                                    // 6266
											// Since there are no other hooks for marginRight, remove the whole object.                                      // 6267
											delete this.get; // 6268
											return; // 6269
										} // 6270
										// 6271
										// Hook needed; redefine it so that the support test is not executed again.                                       // 6272
										// 6273
										return (this.get = hookFn).apply(this, arguments); // 6274
									} // 6275
								}; // 6276
							} // 6277
							// 6278
							// 6279
							(function () {
								// 6280
								// Minified: var b,c,d,e,f,g, h,i                                                                                   // 6281
								var div, style, a, pixelPositionVal, boxSizingReliableVal, // 6282
								reliableHiddenOffsetsVal, reliableMarginRightVal; // 6283
								// 6284
								// Setup                                                                                                            // 6285
								div = document.createElement("div"); // 6286
								div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; // 6287
								a = div.getElementsByTagName("a")[0]; // 6288
								style = a && a.style; // 6289
								// 6290
								// Finish early in limited (non-browser) environments                                                               // 6291
								if (!style) {
									// 6292
									return; // 6293
								} // 6294
								// 6295
								style.cssText = "float:left;opacity:.5"; // 6296
								// 6297
								// Support: IE<9                                                                                                    // 6298
								// Make sure that element opacity exists (as opposed to filter)                                                     // 6299
								support.opacity = style.opacity === "0.5"; // 6300
								// 6301
								// Verify style float existence                                                                                     // 6302
								// (IE uses styleFloat instead of cssFloat)                                                                         // 6303
								support.cssFloat = !!style.cssFloat; // 6304
								// 6305
								div.style.backgroundClip = "content-box"; // 6306
								div.cloneNode(true).style.backgroundClip = ""; // 6307
								support.clearCloneStyle = div.style.backgroundClip === "content-box"; // 6308
								// 6309
								// Support: Firefox<29, Android 2.3                                                                                 // 6310
								// Vendor-prefix box-sizing                                                                                         // 6311
								support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || // 6312
								style.WebkitBoxSizing === ""; // 6313
								// 6314
								jQuery.extend(support, { // 6315
									reliableHiddenOffsets: function () {
										// 6316
										if (reliableHiddenOffsetsVal == null) {
											// 6317
											computeStyleTests(); // 6318
										} // 6319
										return reliableHiddenOffsetsVal; // 6320
									}, // 6321
									// 6322
									boxSizingReliable: function () {
										// 6323
										if (boxSizingReliableVal == null) {
											// 6324
											computeStyleTests(); // 6325
										} // 6326
										return boxSizingReliableVal; // 6327
									}, // 6328
									// 6329
									pixelPosition: function () {
										// 6330
										if (pixelPositionVal == null) {
											// 6331
											computeStyleTests(); // 6332
										} // 6333
										return pixelPositionVal; // 6334
									}, // 6335
									// 6336
									// Support: Android 2.3                                                                                            // 6337
									reliableMarginRight: function () {
										// 6338
										if (reliableMarginRightVal == null) {
											// 6339
											computeStyleTests(); // 6340
										} // 6341
										return reliableMarginRightVal; // 6342
									} // 6343
								}); // 6344
								// 6345
								function computeStyleTests() {
									// 6346
									// Minified: var b,c,d,j                                                                                           // 6347
									var div, body, container, contents; // 6348
									// 6349
									body = document.getElementsByTagName("body")[0]; // 6350
									if (!body || !body.style) {
										// 6351
										// Test fired too early or in an unsupported environment, exit.                                                   // 6352
										return; // 6353
									} // 6354
									// 6355
									// Setup                                                                                                           // 6356
									div = document.createElement("div"); // 6357
									container = document.createElement("div"); // 6358
									container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"; // 6359
									body.appendChild(container).appendChild(div); // 6360
									// 6361
									div.style.cssText = // 6362
									// Support: Firefox<29, Android 2.3                                                                               // 6363
									// Vendor-prefix box-sizing                                                                                       // 6364
									"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + // 6365
									"box-sizing:border-box;display:block;margin-top:1%;top:1%;" + // 6366
									"border:1px;padding:1px;width:4px;position:absolute"; // 6367
									// 6368
									// Support: IE<9                                                                                                   // 6369
									// Assume reasonable values in the absence of getComputedStyle                                                     // 6370
									pixelPositionVal = boxSizingReliableVal = false; // 6371
									reliableMarginRightVal = true; // 6372
									// 6373
									// Check for getComputedStyle so that this code is not run in IE<9.                                                // 6374
									if (window.getComputedStyle) {
										// 6375
										pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%"; // 6376
										boxSizingReliableVal = // 6377
										(window.getComputedStyle(div, null) || { width: "4px" }).width === "4px"; // 6378
										// 6379
										// Support: Android 2.3                                                                                           // 6380
										// Div with explicit width and no margin-right incorrectly                                                        // 6381
										// gets computed margin-right based on width of container (#3333)                                                 // 6382
										// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6383
										contents = div.appendChild(document.createElement("div")); // 6384
										// 6385
										// Reset CSS: box-sizing; display; margin; border; padding                                                        // 6386
										contents.style.cssText = div.style.cssText = // 6387
										// Support: Firefox<29, Android 2.3                                                                              // 6388
										// Vendor-prefix box-sizing                                                                                      // 6389
										"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + // 6390
										"box-sizing:content-box;display:block;margin:0;border:0;padding:0"; // 6391
										contents.style.marginRight = contents.style.width = "0"; // 6392
										div.style.width = "1px"; // 6393
										// 6394
										reliableMarginRightVal = // 6395
										!parseFloat((window.getComputedStyle(contents, null) || {}).marginRight); // 6396
										// 6397
										div.removeChild(contents); // 6398
									} // 6399
									// 6400
									// Support: IE8                                                                                                    // 6401
									// Check if table cells still have offsetWidth/Height when they are set                                            // 6402
									// to display:none and there are still other visible table cells in a                                              // 6403
									// table row; if so, offsetWidth/Height are not reliable for use when                                              // 6404
									// determining if an element has been hidden directly using                                                        // 6405
									// display:none (it is still safe to use offsets if a parent element is                                            // 6406
									// hidden; don safety goggles and see bug #4512 for more information).                                             // 6407
									div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"; // 6408
									contents = div.getElementsByTagName("td"); // 6409
									contents[0].style.cssText = "margin:0;border:0;padding:0;display:none"; // 6410
									reliableHiddenOffsetsVal = contents[0].offsetHeight === 0; // 6411
									if (reliableHiddenOffsetsVal) {
										// 6412
										contents[0].style.display = ""; // 6413
										contents[1].style.display = "none"; // 6414
										reliableHiddenOffsetsVal = contents[0].offsetHeight === 0; // 6415
									} // 6416
									// 6417
									body.removeChild(container); // 6418
								} // 6419
								// 6420
							})(); // 6421
							// 6422
							// 6423
							// A method for quickly swapping in/out CSS properties to get correct calculations.                                  // 6424
							jQuery.swap = function (elem, options, callback, args) {
								// 6425
								var ret,
								    name,
								    // 6426
								old = {}; // 6427
								// 6428
								// Remember the old values, and insert the new ones                                                                 // 6429
								for (name in options) {
									// 6430
									old[name] = elem.style[name]; // 6431
									elem.style[name] = options[name]; // 6432
								} // 6433
								// 6434
								ret = callback.apply(elem, args || []); // 6435
								// 6436
								// Revert the old values                                                                                            // 6437
								for (name in options) {
									// 6438
									elem.style[name] = old[name]; // 6439
								} // 6440
								// 6441
								return ret; // 6442
							}; // 6443
							// 6444
							// 6445
							var // 6446
							ralpha = /alpha\([^)]*\)/i,
							    // 6447
							ropacity = /opacity\s*=\s*([^)]*)/,
							    // 6448
							// 6449
							// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"               // 6450
							// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                                // 6451
							rdisplayswap = /^(none|table(?!-c[ea]).+)/,
							    // 6452
							rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
							    // 6453
							rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
							    // 6454
							// 6455
							cssShow = { position: "absolute", visibility: "hidden", display: "block" },
							    // 6456
							cssNormalTransform = { // 6457
								letterSpacing: "0", // 6458
								fontWeight: "400" // 6459
							},
							    // 6460
							// 6461
							cssPrefixes = ["Webkit", "O", "Moz", "ms"]; // 6462
							// 6463
							// 6464
							// return a css property mapped to a potentially vendor prefixed property                                            // 6465
							function vendorPropName(style, name) {
								// 6466
								// 6467
								// shortcut for names that are not vendor prefixed                                                                  // 6468
								if (name in style) {
									// 6469
									return name; // 6470
								} // 6471
								// 6472
								// check for vendor prefixed names                                                                                  // 6473
								var capName = name.charAt(0).toUpperCase() + name.slice(1),
								    // 6474
								origName = name,
								    // 6475
								i = cssPrefixes.length; // 6476
								// 6477
								while (i--) {
									// 6478
									name = cssPrefixes[i] + capName; // 6479
									if (name in style) {
										// 6480
										return name; // 6481
									} // 6482
								} // 6483
								// 6484
								return origName; // 6485
							} // 6486
							// 6487
							function showHide(elements, show) {
								// 6488
								var display,
								    elem,
								    hidden,
								    // 6489
								values = [],
								    // 6490
								index = 0,
								    // 6491
								length = elements.length; // 6492
								// 6493
								for (; index < length; index++) {
									// 6494
									elem = elements[index]; // 6495
									if (!elem.style) {
										// 6496
										continue; // 6497
									} // 6498
									// 6499
									values[index] = jQuery._data(elem, "olddisplay"); // 6500
									display = elem.style.display; // 6501
									if (show) {
										// 6502
										// Reset the inline display of this element to learn if it is                                                     // 6503
										// being hidden by cascaded rules or not                                                                          // 6504
										if (!values[index] && display === "none") {
											// 6505
											elem.style.display = ""; // 6506
										} // 6507
										// 6508
										// Set elements which have been overridden with display: none                                                     // 6509
										// in a stylesheet to whatever the default browser style is                                                       // 6510
										// for such an element                                                                                            // 6511
										if (elem.style.display === "" && isHidden(elem)) {
											// 6512
											values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName)); // 6513
										} // 6514
									} else {
										// 6515
										hidden = isHidden(elem); // 6516
										// 6517
										if (display && display !== "none" || !hidden) {
											// 6518
											jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display")); // 6519
										} // 6520
									} // 6521
								} // 6522
								// 6523
								// Set the display of most of the elements in a second loop                                                         // 6524
								// to avoid the constant reflow                                                                                     // 6525
								for (index = 0; index < length; index++) {
									// 6526
									elem = elements[index]; // 6527
									if (!elem.style) {
										// 6528
										continue; // 6529
									} // 6530
									if (!show || elem.style.display === "none" || elem.style.display === "") {
										// 6531
										elem.style.display = show ? values[index] || "" : "none"; // 6532
									} // 6533
								} // 6534
								// 6535
								return elements; // 6536
							} // 6537
							// 6538
							function setPositiveNumber(elem, value, subtract) {
								// 6539
								var matches = rnumsplit.exec(value); // 6540
								return matches ? // 6541
								// Guard against undefined "subtract", e.g., when used as in cssHooks                                              // 6542
								Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : // 6543
								value; // 6544
							} // 6545
							// 6546
							function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
								// 6547
								var i = extra === (isBorderBox ? "border" : "content") ? // 6548
								// If we already have the right measurement, avoid augmentation                                                    // 6549
								4 : // 6550
								// Otherwise initialize for horizontal or vertical properties                                                      // 6551
								name === "width" ? 1 : 0,
								    // 6552
								// 6553
								val = 0; // 6554
								// 6555
								for (; i < 4; i += 2) {
									// 6556
									// both box models exclude margin, so add it if we want it                                                         // 6557
									if (extra === "margin") {
										// 6558
										val += jQuery.css(elem, extra + cssExpand[i], true, styles); // 6559
									} // 6560
									// 6561
									if (isBorderBox) {
										// 6562
										// border-box includes padding, so remove it if we want content                                                   // 6563
										if (extra === "content") {
											// 6564
											val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles); // 6565
										} // 6566
										// 6567
										// at this point, extra isn't border nor margin, so remove border                                                 // 6568
										if (extra !== "margin") {
											// 6569
											val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // 6570
										} // 6571
									} else {
										// 6572
										// at this point, extra isn't content, so add padding                                                             // 6573
										val += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // 6574
										// 6575
										// at this point, extra isn't content nor padding, so add border                                                  // 6576
										if (extra !== "padding") {
											// 6577
											val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // 6578
										} // 6579
									} // 6580
								} // 6581
								// 6582
								return val; // 6583
							} // 6584
							// 6585
							function getWidthOrHeight(elem, name, extra) {
								// 6586
								// 6587
								// Start with offset property, which is equivalent to the border-box value                                          // 6588
								var valueIsBorderBox = true,
								    // 6589
								val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
								    // 6590
								styles = getStyles(elem),
								    // 6591
								isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // 6592
								// 6593
								// some non-html elements return undefined for offsetWidth, so check for null/undefined                             // 6594
								// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                        // 6595
								// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                                     // 6596
								if (val <= 0 || val == null) {
									// 6597
									// Fall back to computed then uncomputed css if necessary                                                          // 6598
									val = curCSS(elem, name, styles); // 6599
									if (val < 0 || val == null) {
										// 6600
										val = elem.style[name]; // 6601
									} // 6602
									// 6603
									// Computed unit is not pixels. Stop here and return.                                                              // 6604
									if (rnumnonpx.test(val)) {
										// 6605
										return val; // 6606
									} // 6607
									// 6608
									// we need the check for style in case a browser which returns unreliable values                                   // 6609
									// for getComputedStyle silently falls back to the reliable elem.style                                             // 6610
									valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // 6611
									// 6612
									// Normalize "", auto, and prepare for extra                                                                       // 6613
									val = parseFloat(val) || 0; // 6614
								} // 6615
								// 6616
								// use the active box-sizing model to add/subtract irrelevant styles                                                // 6617
								return val + // 6618
								augmentWidthOrHeight( // 6619
								elem, // 6620
								name, // 6621
								extra || (isBorderBox ? "border" : "content"), // 6622
								valueIsBorderBox, // 6623
								styles // 6624
								) // 6625
								+ "px"; // 6626
							} // 6627
							// 6628
							jQuery.extend({ // 6629
								// Add in style property hooks for overriding the default                                                           // 6630
								// behavior of getting and setting a style property                                                                 // 6631
								cssHooks: { // 6632
									opacity: { // 6633
										get: function (elem, computed) {
											// 6634
											if (computed) {
												// 6635
												// We should always get a number back from opacity                                                              // 6636
												var ret = curCSS(elem, "opacity"); // 6637
												return ret === "" ? "1" : ret; // 6638
											} // 6639
										} // 6640
										// 6641
									} }, // 6642
								// 6643
								// Don't automatically add "px" to these possibly-unitless properties                                               // 6644
								cssNumber: { // 6645
									"columnCount": true, // 6646
									"fillOpacity": true, // 6647
									"flexGrow": true, // 6648
									"flexShrink": true, // 6649
									"fontWeight": true, // 6650
									"lineHeight": true, // 6651
									"opacity": true, // 6652
									"order": true, // 6653
									"orphans": true, // 6654
									"widows": true, // 6655
									"zIndex": true, // 6656
									"zoom": true // 6657
								}, // 6658
								// 6659
								// Add in properties whose names you wish to fix before                                                             // 6660
								// setting or getting the value                                                                                     // 6661
								cssProps: { // 6662
									// normalize float css property                                                                                    // 6663
									"float": support.cssFloat ? "cssFloat" : "styleFloat" // 6664
								}, // 6665
								// 6666
								// Get and set the style property on a DOM Node                                                                     // 6667
								style: function (elem, name, value, extra) {
									// 6668
									// Don't set styles on text and comment nodes                                                                      // 6669
									if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
										// 6670
										return; // 6671
									} // 6672
									// 6673
									// Make sure that we're working with the right name                                                                // 6674
									var ret,
									    type,
									    hooks,
									    // 6675
									origName = jQuery.camelCase(name),
									    // 6676
									style = elem.style; // 6677
									// 6678
									name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)); // 6679
									// 6680
									// gets hook for the prefixed version                                                                              // 6681
									// followed by the unprefixed version                                                                              // 6682
									hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // 6683
									// 6684
									// Check if we're setting a value                                                                                  // 6685
									if (value !== undefined) {
										// 6686
										type = typeof value; // 6687
										// 6688
										// convert relative number strings (+= or -=) to relative numbers. #7345                                          // 6689
										if (type === "string" && (ret = rrelNum.exec(value))) {
											// 6690
											value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)); // 6691
											// Fixes bug #9237                                                                                               // 6692
											type = "number"; // 6693
										} // 6694
										// 6695
										// Make sure that null and NaN values aren't set. See: #7116                                                      // 6696
										if (value == null || value !== value) {
											// 6697
											return; // 6698
										} // 6699
										// 6700
										// If a number was passed in, add 'px' to the (except for certain CSS properties)                                 // 6701
										if (type === "number" && !jQuery.cssNumber[origName]) {
											// 6702
											value += "px"; // 6703
										} // 6704
										// 6705
										// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,                                   // 6706
										// but it would mean to define eight (for every problematic property) identical functions                         // 6707
										if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
											// 6708
											style[name] = "inherit"; // 6709
										} // 6710
										// 6711
										// If a hook was provided, use that value, otherwise just set the specified value                                 // 6712
										if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
											// 6713
											// 6714
											// Support: IE                                                                                                   // 6715
											// Swallow errors from 'invalid' CSS values (#5509)                                                              // 6716
											try {
												// 6717
												style[name] = value; // 6718
											} catch (e) {} // 6719
										} // 6720
										// 6721
									} else {
										// 6722
										// If a hook was provided get the non-computed value from there                                                   // 6723
										if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
											// 6724
											return ret; // 6725
										} // 6726
										// 6727
										// Otherwise just get the value from the style object                                                             // 6728
										return style[name]; // 6729
									} // 6730
								}, // 6731
								// 6732
								css: function (elem, name, extra, styles) {
									// 6733
									var num,
									    val,
									    hooks,
									    // 6734
									origName = jQuery.camelCase(name); // 6735
									// 6736
									// Make sure that we're working with the right name                                                                // 6737
									name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName)); // 6738
									// 6739
									// gets hook for the prefixed version                                                                              // 6740
									// followed by the unprefixed version                                                                              // 6741
									hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // 6742
									// 6743
									// If a hook was provided get the computed value from there                                                        // 6744
									if (hooks && "get" in hooks) {
										// 6745
										val = hooks.get(elem, true, extra); // 6746
									} // 6747
									// 6748
									// Otherwise, if a way to get the computed value exists, use that                                                  // 6749
									if (val === undefined) {
										// 6750
										val = curCSS(elem, name, styles); // 6751
									} // 6752
									// 6753
									//convert "normal" to computed value                                                                               // 6754
									if (val === "normal" && name in cssNormalTransform) {
										// 6755
										val = cssNormalTransform[name]; // 6756
									} // 6757
									// 6758
									// Return, converting to number if forced or a qualifier was provided and val looks numeric                        // 6759
									if (extra === "" || extra) {
										// 6760
										num = parseFloat(val); // 6761
										return extra === true || jQuery.isNumeric(num) ? num || 0 : val; // 6762
									} // 6763
									return val; // 6764
								} // 6765
							}); // 6766
							// 6767
							jQuery.each(["height", "width"], function (i, name) {
								// 6768
								jQuery.cssHooks[name] = { // 6769
									get: function (elem, computed, extra) {
										// 6770
										if (computed) {
											// 6771
											// certain elements can have dimension info if we invisibly show them                                            // 6772
											// however, it must have a current display style that would benefit from this                                    // 6773
											return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? // 6774
											jQuery.swap(elem, cssShow, function () {
												// 6775
												return getWidthOrHeight(elem, name, extra); // 6776
											}) : // 6777
											getWidthOrHeight(elem, name, extra); // 6778
										} // 6779
									}, // 6780
									// 6781
									set: function (elem, value, extra) {
										// 6782
										var styles = extra && getStyles(elem); // 6783
										return setPositiveNumber(elem, value, extra ? // 6784
										augmentWidthOrHeight( // 6785
										elem, // 6786
										name, // 6787
										extra, // 6788
										support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", // 6789
										styles // 6790
										) : 0 // 6791
										); // 6792
									} // 6793
								}; // 6794
							}); // 6795
							// 6796
							if (!support.opacity) {
								// 6797
								jQuery.cssHooks.opacity = { // 6798
									get: function (elem, computed) {
										// 6799
										// IE uses filters for opacity                                                                                    // 6800
										return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? // 6801
										0.01 * parseFloat(RegExp.$1) + "" : // 6802
										computed ? "1" : ""; // 6803
									}, // 6804
									// 6805
									set: function (elem, value) {
										// 6806
										var style = elem.style,
										    // 6807
										currentStyle = elem.currentStyle,
										    // 6808
										opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
										    // 6809
										filter = currentStyle && currentStyle.filter || style.filter || ""; // 6810
										// 6811
										// IE has trouble with opacity if it does not have layout                                                         // 6812
										// Force it by setting the zoom level                                                                             // 6813
										style.zoom = 1; // 6814
										// 6815
										// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652                 // 6816
										// if value === "", then remove inline opacity #12685                                                             // 6817
										if ((value >= 1 || value === "") && // 6818
										jQuery.trim(filter.replace(ralpha, "")) === "" && // 6819
										style.removeAttribute) {
											// 6820
											// 6821
											// Setting style.filter to null, "" & " " still leave "filter:" in the cssText                                   // 6822
											// if "filter:" is present at all, clearType is disabled, we want to avoid this                                  // 6823
											// style.removeAttribute is IE Only, but so apparently is this code path...                                      // 6824
											style.removeAttribute("filter"); // 6825
											// 6826
											// if there is no filter style applied in a css rule or unset inline opacity, we are done                        // 6827
											if (value === "" || currentStyle && !currentStyle.filter) {
												// 6828
												return; // 6829
											} // 6830
										} // 6831
										// 6832
										// otherwise, set new filter values                                                                               // 6833
										style.filter = ralpha.test(filter) ? // 6834
										filter.replace(ralpha, opacity) : // 6835
										filter + " " + opacity; // 6836
									} // 6837
								}; // 6838
							} // 6839
							// 6840
							jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, // 6841
							function (elem, computed) {
								// 6842
								if (computed) {
									// 6843
									// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6844
									// Work around by temporarily setting element display to inline-block                                             // 6845
									return jQuery.swap(elem, { "display": "inline-block" }, // 6846
									curCSS, [elem, "marginRight"]); // 6847
								} // 6848
							} // 6849
							); // 6850
							// 6851
							// These hooks are used by animate to expand properties                                                              // 6852
							jQuery.each({ // 6853
								margin: "", // 6854
								padding: "", // 6855
								border: "Width" // 6856
							}, function (prefix, suffix) {
								// 6857
								jQuery.cssHooks[prefix + suffix] = { // 6858
									expand: function (value) {
										// 6859
										var i = 0,
										    // 6860
										expanded = {},
										    // 6861
										// 6862
										// assumes a single number if not a string                                                                       // 6863
										parts = typeof value === "string" ? value.split(" ") : [value]; // 6864
										// 6865
										for (; i < 4; i++) {
											// 6866
											expanded[prefix + cssExpand[i] + suffix] = // 6867
											parts[i] || parts[i - 2] || parts[0]; // 6868
										} // 6869
										// 6870
										return expanded; // 6871
									} // 6872
								}; // 6873
								// 6874
								if (!rmargin.test(prefix)) {
									// 6875
									jQuery.cssHooks[prefix + suffix].set = setPositiveNumber; // 6876
								} // 6877
							}); // 6878
							// 6879
							jQuery.fn.extend({ // 6880
								css: function (name, value) {
									// 6881
									return access(this, function (elem, name, value) {
										// 6882
										var styles,
										    len,
										    // 6883
										map = {},
										    // 6884
										i = 0; // 6885
										// 6886
										if (jQuery.isArray(name)) {
											// 6887
											styles = getStyles(elem); // 6888
											len = name.length; // 6889
											// 6890
											for (; i < len; i++) {
												// 6891
												map[name[i]] = jQuery.css(elem, name[i], false, styles); // 6892
											} // 6893
											// 6894
											return map; // 6895
										} // 6896
										// 6897
										return value !== undefined ? // 6898
										jQuery.style(elem, name, value) : // 6899
										jQuery.css(elem, name); // 6900
									}, name, value, arguments.length > 1); // 6901
								}, // 6902
								show: function () {
									// 6903
									return showHide(this, true); // 6904
								}, // 6905
								hide: function () {
									// 6906
									return showHide(this); // 6907
								}, // 6908
								toggle: function (state) {
									// 6909
									if (typeof state === "boolean") {
										// 6910
										return state ? this.show() : this.hide(); // 6911
									} // 6912
									// 6913
									return this.each(function () {
										// 6914
										if (isHidden(this)) {
											// 6915
											jQuery(this).show(); // 6916
										} else {
											// 6917
											jQuery(this).hide(); // 6918
										} // 6919
									}); // 6920
								} // 6921
							}); // 6922
							// 6923
							// 6924
							function Tween(elem, options, prop, end, easing) {
								// 6925
								return new Tween.prototype.init(elem, options, prop, end, easing); // 6926
							} // 6927
							jQuery.Tween = Tween; // 6928
							// 6929
							Tween.prototype = { // 6930
								constructor: Tween, // 6931
								init: function (elem, options, prop, end, easing, unit) {
									// 6932
									this.elem = elem; // 6933
									this.prop = prop; // 6934
									this.easing = easing || "swing"; // 6935
									this.options = options; // 6936
									this.start = this.now = this.cur(); // 6937
									this.end = end; // 6938
									this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px"); // 6939
								}, // 6940
								cur: function () {
									// 6941
									var hooks = Tween.propHooks[this.prop]; // 6942
									// 6943
									return hooks && hooks.get ? // 6944
									hooks.get(this) : // 6945
									Tween.propHooks._default.get(this); // 6946
								}, // 6947
								run: function (percent) {
									// 6948
									var eased,
									    // 6949
									hooks = Tween.propHooks[this.prop]; // 6950
									// 6951
									if (this.options.duration) {
										// 6952
										this.pos = eased = jQuery.easing[this.easing]( // 6953
										percent, this.options.duration * percent, 0, 1, this.options.duration // 6954
										); // 6955
									} else {
										// 6956
										this.pos = eased = percent; // 6957
									} // 6958
									this.now = (this.end - this.start) * eased + this.start; // 6959
									// 6960
									if (this.options.step) {
										// 6961
										this.options.step.call(this.elem, this.now, this); // 6962
									} // 6963
									// 6964
									if (hooks && hooks.set) {
										// 6965
										hooks.set(this); // 6966
									} else {
										// 6967
										Tween.propHooks._default.set(this); // 6968
									} // 6969
									return this; // 6970
								} // 6971
							}; // 6972
							// 6973
							Tween.prototype.init.prototype = Tween.prototype; // 6974
							// 6975
							Tween.propHooks = { // 6976
								_default: { // 6977
									get: function (tween) {
										// 6978
										var result; // 6979
										// 6980
										if (tween.elem[tween.prop] != null && ( // 6981
										!tween.elem.style || tween.elem.style[tween.prop] == null)) {
											// 6982
											return tween.elem[tween.prop]; // 6983
										} // 6984
										// 6985
										// passing an empty string as a 3rd parameter to .css will automatically                                          // 6986
										// attempt a parseFloat and fallback to a string if the parse fails                                               // 6987
										// so, simple values such as "10px" are parsed to Float.                                                          // 6988
										// complex values such as "rotate(1rad)" are returned as is.                                                      // 6989
										result = jQuery.css(tween.elem, tween.prop, ""); // 6990
										// Empty strings, null, undefined and "auto" are converted to 0.                                                  // 6991
										return !result || result === "auto" ? 0 : result; // 6992
									}, // 6993
									set: function (tween) {
										// 6994
										// use step hook for back compat - use cssHook if its there - use .style if its                                   // 6995
										// available and use plain properties where available                                                             // 6996
										if (jQuery.fx.step[tween.prop]) {
											// 6997
											jQuery.fx.step[tween.prop](tween); // 6998
										} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
											jQuery.style(tween.elem, tween.prop, tween.now + tween.unit); // 7000
										} else {
											// 7001
											tween.elem[tween.prop] = tween.now; // 7002
										} // 7003
									} // 7004
									// 7005
								} }; // 7006
							// 7007
							// Support: IE <=9                                                                                                   // 7008
							// Panic based approach to setting things on disconnected nodes                                                      // 7009
							// 7010
							Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = { // 7011
								set: function (tween) {
									// 7012
									if (tween.elem.nodeType && tween.elem.parentNode) {
										// 7013
										tween.elem[tween.prop] = tween.now; // 7014
									} // 7015
								} // 7016
							}; // 7017
							// 7018
							jQuery.easing = { // 7019
								linear: function (p) {
									// 7020
									return p; // 7021
								}, // 7022
								swing: function (p) {
									// 7023
									return 0.5 - Math.cos(p * Math.PI) / 2; // 7024
								} // 7025
							}; // 7026
							// 7027
							jQuery.fx = Tween.prototype.init; // 7028
							// 7029
							// Back Compat <1.8 extension point                                                                                  // 7030
							jQuery.fx.step = {}; // 7031
							// 7032
							// 7033
							// 7034
							// 7035
							var // 7036
							fxNow,
							    timerId,
							    // 7037
							rfxtypes = /^(?:toggle|show|hide)$/,
							    // 7038
							rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
							    // 7039
							rrun = /queueHooks$/,
							    // 7040
							animationPrefilters = [defaultPrefilter],
							    // 7041
							tweeners = { // 7042
								"*": [function (prop, value) {
									// 7043
									var tween = this.createTween(prop, value),
									    // 7044
									target = tween.cur(),
									    // 7045
									parts = rfxnum.exec(value),
									    // 7046
									unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
									    // 7047
									// 7048
									// Starting value computation is required for potential unit mismatches                                          // 7049
									start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && // 7050
									rfxnum.exec(jQuery.css(tween.elem, prop)),
									    // 7051
									scale = 1,
									    // 7052
									maxIterations = 20; // 7053
									// 7054
									if (start && start[3] !== unit) {
										// 7055
										// Trust units reported by jQuery.css                                                                            // 7056
										unit = unit || start[3]; // 7057
										// 7058
										// Make sure we update the tween properties later on                                                             // 7059
										parts = parts || []; // 7060
										// 7061
										// Iteratively approximate from a nonzero starting point                                                         // 7062
										start = +target || 1; // 7063
										// 7064
										do {
											// 7065
											// If previous iteration zeroed out, double until we get *something*                                            // 7066
											// Use a string for doubling factor so we don't accidentally see scale as unchanged below                       // 7067
											scale = scale || ".5"; // 7068
											// 7069
											// Adjust and apply                                                                                             // 7070
											start = start / scale; // 7071
											jQuery.style(tween.elem, prop, start + unit); // 7072
											// 7073
											// Update scale, tolerating zero or NaN from tween.cur()                                                         // 7074
											// And breaking the loop if scale is unchanged or perfect, or if we've just had enough                           // 7075
										} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations); // 7076
									} // 7077
									// 7078
									// Update tween properties                                                                                        // 7079
									if (parts) {
										// 7080
										start = tween.start = +start || +target || 0; // 7081
										tween.unit = unit; // 7082
										// If a +=/-= token was provided, we're doing a relative animation                                               // 7083
										tween.end = parts[1] ? // 7084
										start + (parts[1] + 1) * parts[2] : // 7085
										+parts[2]; // 7086
									} // 7087
									// 7088
									return tween; // 7089
								}] // 7090
							}; // 7091
							// 7092
							// Animations created synchronously will run synchronously                                                           // 7093
							function createFxNow() {
								// 7094
								setTimeout(function () {
									// 7095
									fxNow = undefined; // 7096
								}); // 7097
								return fxNow = jQuery.now(); // 7098
							} // 7099
							// 7100
							// Generate parameters to create a standard animation                                                                // 7101
							function genFx(type, includeWidth) {
								// 7102
								var which,
								    // 7103
								attrs = { height: type },
								    // 7104
								i = 0; // 7105
								// 7106
								// if we include width, step value is 1 to do all cssExpand values,                                                 // 7107
								// if we don't include width, step value is 2 to skip over Left and Right                                           // 7108
								includeWidth = includeWidth ? 1 : 0; // 7109
								for (; i < 4; i += 2 - includeWidth) {
									// 7110
									which = cssExpand[i]; // 7111
									attrs["margin" + which] = attrs["padding" + which] = type; // 7112
								} // 7113
								// 7114
								if (includeWidth) {
									// 7115
									attrs.opacity = attrs.width = type; // 7116
								} // 7117
								// 7118
								return attrs; // 7119
							} // 7120
							// 7121
							function createTween(value, prop, animation) {
								// 7122
								var tween,
								    // 7123
								collection = (tweeners[prop] || []).concat(tweeners["*"]),
								    // 7124
								index = 0,
								    // 7125
								length = collection.length; // 7126
								for (; index < length; index++) {
									// 7127
									if (tween = collection[index].call(animation, prop, value)) {
										// 7128
										// 7129
										// we're done with this property                                                                                  // 7130
										return tween; // 7131
									} // 7132
								} // 7133
							} // 7134
							// 7135
							function defaultPrefilter(elem, props, opts) {
								// 7136
								/* jshint validthis: true */ // 7137
								var prop,
								    value,
								    toggle,
								    tween,
								    hooks,
								    oldfire,
								    display,
								    checkDisplay,
								    // 7138
								anim = this,
								    // 7139
								orig = {},
								    // 7140
								style = elem.style,
								    // 7141
								hidden = elem.nodeType && isHidden(elem),
								    // 7142
								dataShow = jQuery._data(elem, "fxshow"); // 7143
								// 7144
								// handle queue: false promises                                                                                     // 7145
								if (!opts.queue) {
									// 7146
									hooks = jQuery._queueHooks(elem, "fx"); // 7147
									if (hooks.unqueued == null) {
										// 7148
										hooks.unqueued = 0; // 7149
										oldfire = hooks.empty.fire; // 7150
										hooks.empty.fire = function () {
											// 7151
											if (!hooks.unqueued) {
												// 7152
												oldfire(); // 7153
											} // 7154
										}; // 7155
									} // 7156
									hooks.unqueued++; // 7157
									// 7158
									anim.always(function () {
										// 7159
										// doing this makes sure that the complete handler will be called                                                 // 7160
										// before this completes                                                                                          // 7161
										anim.always(function () {
											// 7162
											hooks.unqueued--; // 7163
											if (!jQuery.queue(elem, "fx").length) {
												// 7164
												hooks.empty.fire(); // 7165
											} // 7166
										}); // 7167
									}); // 7168
								} // 7169
								// 7170
								// height/width overflow pass                                                                                       // 7171
								if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
									// 7172
									// Make sure that nothing sneaks out                                                                               // 7173
									// Record all 3 overflow attributes because IE does not                                                            // 7174
									// change the overflow attribute when overflowX and                                                                // 7175
									// overflowY are set to the same value                                                                             // 7176
									opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // 7177
									// 7178
									// Set display property to inline-block for height/width                                                           // 7179
									// animations on inline elements that are having width/height animated                                             // 7180
									display = jQuery.css(elem, "display"); // 7181
									// 7182
									// Test default display if display is currently "none"                                                             // 7183
									checkDisplay = display === "none" ? // 7184
									jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display; // 7185
									// 7186
									if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
										// 7187
										// 7188
										// inline-level elements accept inline-block;                                                                     // 7189
										// block-level elements need to be inline with layout                                                             // 7190
										if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
											// 7191
											style.display = "inline-block"; // 7192
										} else {
											// 7193
											style.zoom = 1; // 7194
										} // 7195
									} // 7196
								} // 7197
								// 7198
								if (opts.overflow) {
									// 7199
									style.overflow = "hidden"; // 7200
									if (!support.shrinkWrapBlocks()) {
										// 7201
										anim.always(function () {
											// 7202
											style.overflow = opts.overflow[0]; // 7203
											style.overflowX = opts.overflow[1]; // 7204
											style.overflowY = opts.overflow[2]; // 7205
										}); // 7206
									} // 7207
								} // 7208
								// 7209
								// show/hide pass                                                                                                   // 7210
								for (prop in props) {
									// 7211
									value = props[prop]; // 7212
									if (rfxtypes.exec(value)) {
										// 7213
										delete props[prop]; // 7214
										toggle = toggle || value === "toggle"; // 7215
										if (value === (hidden ? "hide" : "show")) {
											// 7216
											// 7217
											// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
											if (value === "show" && dataShow && dataShow[prop] !== undefined) {
												// 7219
												hidden = true; // 7220
											} else {
													// 7221
													continue; // 7222
												} // 7223
										} // 7224
										orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop); // 7225
										// 7226
										// Any non-fx value stops us from restoring the original display value                                             // 7227
									} else {
										// 7228
										display = undefined; // 7229
									} // 7230
								} // 7231
								// 7232
								if (!jQuery.isEmptyObject(orig)) {
									// 7233
									if (dataShow) {
										// 7234
										if ("hidden" in dataShow) {
											// 7235
											hidden = dataShow.hidden; // 7236
										} // 7237
									} else {
										// 7238
										dataShow = jQuery._data(elem, "fxshow", {}); // 7239
									} // 7240
									// 7241
									// store state if its toggle - enables .stop().toggle() to "reverse"                                               // 7242
									if (toggle) {
										// 7243
										dataShow.hidden = !hidden; // 7244
									} // 7245
									if (hidden) {
										// 7246
										jQuery(elem).show(); // 7247
									} else {
										// 7248
										anim.done(function () {
											// 7249
											jQuery(elem).hide(); // 7250
										}); // 7251
									} // 7252
									anim.done(function () {
										// 7253
										var prop; // 7254
										jQuery._removeData(elem, "fxshow"); // 7255
										for (prop in orig) {
											// 7256
											jQuery.style(elem, prop, orig[prop]); // 7257
										} // 7258
									}); // 7259
									for (prop in orig) {
										// 7260
										tween = createTween(hidden ? dataShow[prop] : 0, prop, anim); // 7261
										// 7262
										if (!(prop in dataShow)) {
											// 7263
											dataShow[prop] = tween.start; // 7264
											if (hidden) {
												// 7265
												tween.end = tween.start; // 7266
												tween.start = prop === "width" || prop === "height" ? 1 : 0; // 7267
											} // 7268
										} // 7269
									} // 7270
									// 7271
									// If this is a noop like .hide().hide(), restore an overwritten display value                                      // 7272
								} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
									// 7273
									style.display = display; // 7274
								} // 7275
							} // 7276
							// 7277
							function propFilter(props, specialEasing) {
								// 7278
								var index, name, easing, value, hooks; // 7279
								// 7280
								// camelCase, specialEasing and expand cssHook pass                                                                 // 7281
								for (index in props) {
									// 7282
									name = jQuery.camelCase(index); // 7283
									easing = specialEasing[name]; // 7284
									value = props[index]; // 7285
									if (jQuery.isArray(value)) {
										// 7286
										easing = value[1]; // 7287
										value = props[index] = value[0]; // 7288
									} // 7289
									// 7290
									if (index !== name) {
										// 7291
										props[name] = value; // 7292
										delete props[index]; // 7293
									} // 7294
									// 7295
									hooks = jQuery.cssHooks[name]; // 7296
									if (hooks && "expand" in hooks) {
										// 7297
										value = hooks.expand(value); // 7298
										delete props[name]; // 7299
										// 7300
										// not quite $.extend, this wont overwrite keys already present.                                                  // 7301
										// also - reusing 'index' from above because we have the correct "name"                                           // 7302
										for (index in value) {
											// 7303
											if (!(index in props)) {
												// 7304
												props[index] = value[index]; // 7305
												specialEasing[index] = easing; // 7306
											} // 7307
										} // 7308
									} else {
										// 7309
										specialEasing[name] = easing; // 7310
									} // 7311
								} // 7312
							} // 7313
							// 7314
							function Animation(elem, properties, options) {
								// 7315
								var result,
								    // 7316
								stopped,
								    // 7317
								index = 0,
								    // 7318
								length = animationPrefilters.length,
								    // 7319
								deferred = jQuery.Deferred().always(function () {
									// 7320
									// don't match elem in the :animated selector                                                                     // 7321
									delete tick.elem; // 7322
								}),
								    // 7323
								tick = function () {
									// 7324
									if (stopped) {
										// 7325
										return false; // 7326
									} // 7327
									var currentTime = fxNow || createFxNow(),
									    // 7328
									remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
									    // 7329
									// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)                                             // 7330
									temp = remaining / animation.duration || 0,
									    // 7331
									percent = 1 - temp,
									    // 7332
									index = 0,
									    // 7333
									length = animation.tweens.length; // 7334
									// 7335
									for (; index < length; index++) {
										// 7336
										animation.tweens[index].run(percent); // 7337
									} // 7338
									// 7339
									deferred.notifyWith(elem, [animation, percent, remaining]); // 7340
									// 7341
									if (percent < 1 && length) {
										// 7342
										return remaining; // 7343
									} else {
										// 7344
										deferred.resolveWith(elem, [animation]); // 7345
										return false; // 7346
									} // 7347
								},
								    // 7348
								animation = deferred.promise({ // 7349
									elem: elem, // 7350
									props: jQuery.extend({}, properties), // 7351
									opts: jQuery.extend(true, { specialEasing: {} }, options), // 7352
									originalProperties: properties, // 7353
									originalOptions: options, // 7354
									startTime: fxNow || createFxNow(), // 7355
									duration: options.duration, // 7356
									tweens: [], // 7357
									createTween: function (prop, end) {
										// 7358
										var tween = jQuery.Tween(elem, animation.opts, prop, end, // 7359
										animation.opts.specialEasing[prop] || animation.opts.easing); // 7360
										animation.tweens.push(tween); // 7361
										return tween; // 7362
									}, // 7363
									stop: function (gotoEnd) {
										// 7364
										var index = 0,
										    // 7365
										// if we are going to the end, we want to run all the tweens                                                    // 7366
										// otherwise we skip this part                                                                                  // 7367
										length = gotoEnd ? animation.tweens.length : 0; // 7368
										if (stopped) {
											// 7369
											return this; // 7370
										} // 7371
										stopped = true; // 7372
										for (; index < length; index++) {
											// 7373
											animation.tweens[index].run(1); // 7374
										} // 7375
										// 7376
										// resolve when we played the last frame                                                                         // 7377
										// otherwise, reject                                                                                             // 7378
										if (gotoEnd) {
											// 7379
											deferred.resolveWith(elem, [animation, gotoEnd]); // 7380
										} else {
											// 7381
											deferred.rejectWith(elem, [animation, gotoEnd]); // 7382
										} // 7383
										return this; // 7384
									} // 7385
								}),
								    // 7386
								props = animation.props; // 7387
								// 7388
								propFilter(props, animation.opts.specialEasing); // 7389
								// 7390
								for (; index < length; index++) {
									// 7391
									result = animationPrefilters[index].call(animation, elem, props, animation.opts); // 7392
									if (result) {
										// 7393
										return result; // 7394
									} // 7395
								} // 7396
								// 7397
								jQuery.map(props, createTween, animation); // 7398
								// 7399
								if (jQuery.isFunction(animation.opts.start)) {
									// 7400
									animation.opts.start.call(elem, animation); // 7401
								} // 7402
								// 7403
								jQuery.fx.timer( // 7404
								jQuery.extend(tick, { // 7405
									elem: elem, // 7406
									anim: animation, // 7407
									queue: animation.opts.queue // 7408
								}) // 7409
								); // 7410
								// 7411
								// attach callbacks from options                                                                                    // 7412
								return animation.progress(animation.opts.progress) // 7413
								.done(animation.opts.done, animation.opts.complete) // 7414
								.fail(animation.opts.fail) // 7415
								.always(animation.opts.always); // 7416
							} // 7417
							// 7418
							jQuery.Animation = jQuery.extend(Animation, { // 7419
								tweener: function (props, callback) {
									// 7420
									if (jQuery.isFunction(props)) {
										// 7421
										callback = props; // 7422
										props = ["*"]; // 7423
									} else {
										// 7424
										props = props.split(" "); // 7425
									} // 7426
									// 7427
									var prop,
									    // 7428
									index = 0,
									    // 7429
									length = props.length; // 7430
									// 7431
									for (; index < length; index++) {
										// 7432
										prop = props[index]; // 7433
										tweeners[prop] = tweeners[prop] || []; // 7434
										tweeners[prop].unshift(callback); // 7435
									} // 7436
								}, // 7437
								// 7438
								prefilter: function (callback, prepend) {
									// 7439
									if (prepend) {
										// 7440
										animationPrefilters.unshift(callback); // 7441
									} else {
										// 7442
										animationPrefilters.push(callback); // 7443
									} // 7444
								} // 7445
							}); // 7446
							// 7447
							jQuery.speed = function (speed, easing, fn) {
								// 7448
								var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : { // 7449
									complete: fn || !fn && easing || // 7450
									jQuery.isFunction(speed) && speed, // 7451
									duration: speed, // 7452
									easing: fn && easing || easing && !jQuery.isFunction(easing) && easing // 7453
								}; // 7454
								// 7455
								opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : // 7456
								opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default; // 7457
								// 7458
								// normalize opt.queue - true/undefined/null -> "fx"                                                                // 7459
								if (opt.queue == null || opt.queue === true) {
									// 7460
									opt.queue = "fx"; // 7461
								} // 7462
								// 7463
								// Queueing                                                                                                         // 7464
								opt.old = opt.complete; // 7465
								// 7466
								opt.complete = function () {
									// 7467
									if (jQuery.isFunction(opt.old)) {
										// 7468
										opt.old.call(this); // 7469
									} // 7470
									// 7471
									if (opt.queue) {
										// 7472
										jQuery.dequeue(this, opt.queue); // 7473
									} // 7474
								}; // 7475
								// 7476
								return opt; // 7477
							}; // 7478
							// 7479
							jQuery.fn.extend({ // 7480
								fadeTo: function (speed, to, easing, callback) {
									// 7481
									// 7482
									// show any hidden elements after setting opacity to 0                                                             // 7483
									return this.filter(isHidden).css("opacity", 0).show() // 7484
									// 7485
									// animate to the value specified                                                                                 // 7486
									.end().animate({ opacity: to }, speed, easing, callback); // 7487
								}, // 7488
								animate: function (prop, speed, easing, callback) {
									// 7489
									var empty = jQuery.isEmptyObject(prop),
									    // 7490
									optall = jQuery.speed(speed, easing, callback),
									    // 7491
									doAnimation = function () {
										// 7492
										// Operate on a copy of prop so per-property easing won't be lost                                                // 7493
										var anim = Animation(this, jQuery.extend({}, prop), optall); // 7494
										// 7495
										// Empty animations, or finishing resolves immediately                                                           // 7496
										if (empty || jQuery._data(this, "finish")) {
											// 7497
											anim.stop(true); // 7498
										} // 7499
									}; // 7500
									doAnimation.finish = doAnimation; // 7501
									// 7502
									return empty || optall.queue === false ? // 7503
									this.each(doAnimation) : // 7504
									this.queue(optall.queue, doAnimation); // 7505
								}, // 7506
								stop: function (type, clearQueue, gotoEnd) {
									// 7507
									var stopQueue = function (hooks) {
										// 7508
										var stop = hooks.stop; // 7509
										delete hooks.stop; // 7510
										stop(gotoEnd); // 7511
									}; // 7512
									// 7513
									if (typeof type !== "string") {
										// 7514
										gotoEnd = clearQueue; // 7515
										clearQueue = type; // 7516
										type = undefined; // 7517
									} // 7518
									if (clearQueue && type !== false) {
										// 7519
										this.queue(type || "fx", []); // 7520
									} // 7521
									// 7522
									return this.each(function () {
										// 7523
										var dequeue = true,
										    // 7524
										index = type != null && type + "queueHooks",
										    // 7525
										timers = jQuery.timers,
										    // 7526
										data = jQuery._data(this); // 7527
										// 7528
										if (index) {
											// 7529
											if (data[index] && data[index].stop) {
												// 7530
												stopQueue(data[index]); // 7531
											} // 7532
										} else {
											// 7533
											for (index in data) {
												// 7534
												if (data[index] && data[index].stop && rrun.test(index)) {
													// 7535
													stopQueue(data[index]); // 7536
												} // 7537
											} // 7538
										} // 7539
										// 7540
										for (index = timers.length; index--;) {
											// 7541
											if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
												// 7542
												timers[index].anim.stop(gotoEnd); // 7543
												dequeue = false; // 7544
												timers.splice(index, 1); // 7545
											} // 7546
										} // 7547
										// 7548
										// start the next in the queue if the last step wasn't forced                                                     // 7549
										// timers currently will call their complete callbacks, which will dequeue                                        // 7550
										// but only if they were gotoEnd                                                                                  // 7551
										if (dequeue || !gotoEnd) {
											// 7552
											jQuery.dequeue(this, type); // 7553
										} // 7554
									}); // 7555
								}, // 7556
								finish: function (type) {
									// 7557
									if (type !== false) {
										// 7558
										type = type || "fx"; // 7559
									} // 7560
									return this.each(function () {
										// 7561
										var index,
										    // 7562
										data = jQuery._data(this),
										    // 7563
										queue = data[type + "queue"],
										    // 7564
										hooks = data[type + "queueHooks"],
										    // 7565
										timers = jQuery.timers,
										    // 7566
										length = queue ? queue.length : 0; // 7567
										// 7568
										// enable finishing flag on private data                                                                          // 7569
										data.finish = true; // 7570
										// 7571
										// empty the queue first                                                                                          // 7572
										jQuery.queue(this, type, []); // 7573
										// 7574
										if (hooks && hooks.stop) {
											// 7575
											hooks.stop.call(this, true); // 7576
										} // 7577
										// 7578
										// look for any active animations, and finish them                                                                // 7579
										for (index = timers.length; index--;) {
											// 7580
											if (timers[index].elem === this && timers[index].queue === type) {
												// 7581
												timers[index].anim.stop(true); // 7582
												timers.splice(index, 1); // 7583
											} // 7584
										} // 7585
										// 7586
										// look for any animations in the old queue and finish them                                                       // 7587
										for (index = 0; index < length; index++) {
											// 7588
											if (queue[index] && queue[index].finish) {
												// 7589
												queue[index].finish.call(this); // 7590
											} // 7591
										} // 7592
										// 7593
										// turn off finishing flag                                                                                        // 7594
										delete data.finish; // 7595
									}); // 7596
								} // 7597
							}); // 7598
							// 7599
							jQuery.each(["toggle", "show", "hide"], function (i, name) {
								// 7600
								var cssFn = jQuery.fn[name]; // 7601
								jQuery.fn[name] = function (speed, easing, callback) {
									// 7602
									return speed == null || typeof speed === "boolean" ? // 7603
									cssFn.apply(this, arguments) : // 7604
									this.animate(genFx(name, true), speed, easing, callback); // 7605
								}; // 7606
							}); // 7607
							// 7608
							// Generate shortcuts for custom animations                                                                          // 7609
							jQuery.each({ // 7610
								slideDown: genFx("show"), // 7611
								slideUp: genFx("hide"), // 7612
								slideToggle: genFx("toggle"), // 7613
								fadeIn: { opacity: "show" }, // 7614
								fadeOut: { opacity: "hide" }, // 7615
								fadeToggle: { opacity: "toggle" // 7616
								} }, function (name, props) {
								// 7617
								jQuery.fn[name] = function (speed, easing, callback) {
									// 7618
									return this.animate(props, speed, easing, callback); // 7619
								}; // 7620
							}); // 7621
							// 7622
							jQuery.timers = []; // 7623
							jQuery.fx.tick = function () {
								// 7624
								var timer,
								    // 7625
								timers = jQuery.timers,
								    // 7626
								i = 0; // 7627
								// 7628
								fxNow = jQuery.now(); // 7629
								// 7630
								for (; i < timers.length; i++) {
									// 7631
									timer = timers[i]; // 7632
									// Checks the timer has not already been removed                                                                   // 7633
									if (!timer() && timers[i] === timer) {
										// 7634
										timers.splice(i--, 1); // 7635
									} // 7636
								} // 7637
								// 7638
								if (!timers.length) {
									// 7639
									jQuery.fx.stop(); // 7640
								} // 7641
								fxNow = undefined; // 7642
							}; // 7643
							// 7644
							jQuery.fx.timer = function (timer) {
								// 7645
								jQuery.timers.push(timer); // 7646
								if (timer()) {
									// 7647
									jQuery.fx.start(); // 7648
								} else {
									// 7649
									jQuery.timers.pop(); // 7650
								} // 7651
							}; // 7652
							// 7653
							jQuery.fx.interval = 13; // 7654
							// 7655
							jQuery.fx.start = function () {
								// 7656
								if (!timerId) {
									// 7657
									timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval); // 7658
								} // 7659
							}; // 7660
							// 7661
							jQuery.fx.stop = function () {
								// 7662
								clearInterval(timerId); // 7663
								timerId = null; // 7664
							}; // 7665
							// 7666
							jQuery.fx.speeds = { // 7667
								slow: 600, // 7668
								fast: 200, // 7669
								// Default speed                                                                                                    // 7670
								_default: 400 // 7671
							}; // 7672
							// 7673
							// 7674
							// Based off of the plugin by Clint Helfers, with permission.                                                        // 7675
							// http://blindsignals.com/index.php/2009/07/jquery-delay/                                                           // 7676
							jQuery.fn.delay = function (time, type) {
								// 7677
								time = jQuery.fx ? jQuery.fx.speeds[time] || time : time; // 7678
								type = type || "fx"; // 7679
								// 7680
								return this.queue(type, function (next, hooks) {
									// 7681
									var timeout = setTimeout(next, time); // 7682
									hooks.stop = function () {
										// 7683
										clearTimeout(timeout); // 7684
									}; // 7685
								}); // 7686
							}; // 7687
							// 7688
							// 7689
							(function () {
								// 7690
								// Minified: var a,b,c,d,e                                                                                          // 7691
								var input, div, select, a, opt; // 7692
								// 7693
								// Setup                                                                                                            // 7694
								div = document.createElement("div"); // 7695
								div.setAttribute("className", "t"); // 7696
								div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; // 7697
								a = div.getElementsByTagName("a")[0]; // 7698
								// 7699
								// First batch of tests.                                                                                            // 7700
								select = document.createElement("select"); // 7701
								opt = select.appendChild(document.createElement("option")); // 7702
								input = div.getElementsByTagName("input")[0]; // 7703
								// 7704
								a.style.cssText = "top:1px"; // 7705
								// 7706
								// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)         // 7707
								support.getSetAttribute = div.className !== "t"; // 7708
								// 7709
								// Get the style information from getAttribute                                                                      // 7710
								// (IE uses .cssText instead)                                                                                       // 7711
								support.style = /top/.test(a.getAttribute("style")); // 7712
								// 7713
								// Make sure that URLs aren't manipulated                                                                           // 7714
								// (IE normalizes it by default)                                                                                    // 7715
								support.hrefNormalized = a.getAttribute("href") === "/a"; // 7716
								// 7717
								// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)                                            // 7718
								support.checkOn = !!input.value; // 7719
								// 7720
								// Make sure that a selected-by-default option has a working selected property.                                     // 7721
								// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)                                       // 7722
								support.optSelected = opt.selected; // 7723
								// 7724
								// Tests for enctype support on a form (#6743)                                                                      // 7725
								support.enctype = !!document.createElement("form").enctype; // 7726
								// 7727
								// Make sure that the options inside disabled selects aren't marked as disabled                                     // 7728
								// (WebKit marks them as disabled)                                                                                  // 7729
								select.disabled = true; // 7730
								support.optDisabled = !opt.disabled; // 7731
								// 7732
								// Support: IE8 only                                                                                                // 7733
								// Check if we can trust getAttribute("value")                                                                      // 7734
								input = document.createElement("input"); // 7735
								input.setAttribute("value", ""); // 7736
								support.input = input.getAttribute("value") === ""; // 7737
								// 7738
								// Check if an input maintains its value after becoming a radio                                                     // 7739
								input.value = "t"; // 7740
								input.setAttribute("type", "radio"); // 7741
								support.radioValue = input.value === "t"; // 7742
							})(); // 7743
							// 7744
							// 7745
							var rreturn = /\r/g; // 7746
							// 7747
							jQuery.fn.extend({ // 7748
								val: function (value) {
									// 7749
									var hooks,
									    ret,
									    isFunction,
									    // 7750
									elem = this[0]; // 7751
									// 7752
									if (!arguments.length) {
										// 7753
										if (elem) {
											// 7754
											hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()]; // 7755
											// 7756
											if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
												// 7757
												return ret; // 7758
											} // 7759
											// 7760
											ret = elem.value; // 7761
											// 7762
											return typeof ret === "string" ? // 7763
											// handle most common string cases                                                                              // 7764
											ret.replace(rreturn, "") : // 7765
											// handle cases where value is null/undef or number                                                             // 7766
											ret == null ? "" : ret; // 7767
										} // 7768
										// 7769
										return; // 7770
									} // 7771
									// 7772
									isFunction = jQuery.isFunction(value); // 7773
									// 7774
									return this.each(function (i) {
										// 7775
										var val; // 7776
										// 7777
										if (this.nodeType !== 1) {
											// 7778
											return; // 7779
										} // 7780
										// 7781
										if (isFunction) {
											// 7782
											val = value.call(this, i, jQuery(this).val()); // 7783
										} else {
											// 7784
											val = value; // 7785
										} // 7786
										// 7787
										// Treat null/undefined as ""; convert numbers to string                                                          // 7788
										if (val == null) {
											// 7789
											val = ""; // 7790
										} else if (typeof val === "number") {
											// 7791
											val += ""; // 7792
										} else if (jQuery.isArray(val)) {
											// 7793
											val = jQuery.map(val, function (value) {
												// 7794
												return value == null ? "" : value + ""; // 7795
											}); // 7796
										} // 7797
										// 7798
										hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // 7799
										// 7800
										// If set returns undefined, fall back to normal setting                                                          // 7801
										if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
											// 7802
											this.value = val; // 7803
										} // 7804
									}); // 7805
								} // 7806
							}); // 7807
							// 7808
							jQuery.extend({ // 7809
								valHooks: { // 7810
									option: { // 7811
										get: function (elem) {
											// 7812
											var val = jQuery.find.attr(elem, "value"); // 7813
											return val != null ? // 7814
											val : // 7815
											// Support: IE10-11+                                                                                            // 7816
											// option.text throws exceptions (#14686, #14858)                                                               // 7817
											jQuery.trim(jQuery.text(elem)); // 7818
										} // 7819
									}, // 7820
									select: { // 7821
										get: function (elem) {
											// 7822
											var value,
											    option,
											    // 7823
											options = elem.options,
											    // 7824
											index = elem.selectedIndex,
											    // 7825
											one = elem.type === "select-one" || index < 0,
											    // 7826
											values = one ? null : [],
											    // 7827
											max = one ? index + 1 : options.length,
											    // 7828
											i = index < 0 ? // 7829
											max : // 7830
											one ? index : 0; // 7831
											// 7832
											// Loop through all the selected options                                                                         // 7833
											for (; i < max; i++) {
												// 7834
												option = options[i]; // 7835
												// 7836
												// oldIE doesn't update selected after form reset (#2551)                                                       // 7837
												if ((option.selected || i === index) && ( // 7838
												// Don't return options that are disabled or in a disabled optgroup                                           // 7839
												support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && ( // 7840
												!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
													// 7841
													// 7842
													// Get the specific value for the option                                                                       // 7843
													value = jQuery(option).val(); // 7844
													// 7845
													// We don't need an array for one selects                                                                      // 7846
													if (one) {
														// 7847
														return value; // 7848
													} // 7849
													// 7850
													// Multi-Selects return an array                                                                               // 7851
													values.push(value); // 7852
												} // 7853
											} // 7854
											// 7855
											return values; // 7856
										}, // 7857
										// 7858
										set: function (elem, value) {
											// 7859
											var optionSet,
											    option,
											    // 7860
											options = elem.options,
											    // 7861
											values = jQuery.makeArray(value),
											    // 7862
											i = options.length; // 7863
											// 7864
											while (i--) {
												// 7865
												option = options[i]; // 7866
												// 7867
												if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {
													// 7868
													// 7869
													// Support: IE6                                                                                                // 7870
													// When new option element is added to select box we need to                                                   // 7871
													// force reflow of newly added node in order to workaround delay                                               // 7872
													// of initialization properties                                                                                // 7873
													try {
														// 7874
														option.selected = optionSet = true; // 7875
														// 7876
													} catch (_) {
														// 7877
														// 7878
														// Will be executed only in IE6                                                                               // 7879
														option.scrollHeight; // 7880
													} // 7881
													// 7882
												} else {
													// 7883
													option.selected = false; // 7884
												} // 7885
											} // 7886
											// 7887
											// Force browsers to behave consistently when non-matching value is set                                          // 7888
											if (!optionSet) {
												// 7889
												elem.selectedIndex = -1; // 7890
											} // 7891
											// 7892
											return options; // 7893
										} // 7894
										// 7895
									} // 7896
								} }); // 7897
							// 7898
							// Radios and checkboxes getter/setter                                                                               // 7899
							jQuery.each(["radio", "checkbox"], function () {
								// 7900
								jQuery.valHooks[this] = { // 7901
									set: function (elem, value) {
										// 7902
										if (jQuery.isArray(value)) {
											// 7903
											return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0; // 7904
										} // 7905
									} // 7906
								}; // 7907
								if (!support.checkOn) {
									// 7908
									jQuery.valHooks[this].get = function (elem) {
										// 7909
										// Support: Webkit                                                                                                // 7910
										// "" is returned instead of "on" if a value isn't specified                                                      // 7911
										return elem.getAttribute("value") === null ? "on" : elem.value; // 7912
									}; // 7913
								} // 7914
							}); // 7915
							// 7916
							// 7917
							// 7918
							// 7919
							var nodeHook,
							    boolHook,
							    // 7920
							attrHandle = jQuery.expr.attrHandle,
							    // 7921
							ruseDefault = /^(?:checked|selected)$/i,
							    // 7922
							getSetAttribute = support.getSetAttribute,
							    // 7923
							getSetInput = support.input; // 7924
							// 7925
							jQuery.fn.extend({ // 7926
								attr: function (name, value) {
									// 7927
									return access(this, jQuery.attr, name, value, arguments.length > 1); // 7928
								}, // 7929
								// 7930
								removeAttr: function (name) {
									// 7931
									return this.each(function () {
										// 7932
										jQuery.removeAttr(this, name); // 7933
									}); // 7934
								} // 7935
							}); // 7936
							// 7937
							jQuery.extend({ // 7938
								attr: function (elem, name, value) {
									// 7939
									var hooks,
									    ret,
									    // 7940
									nType = elem.nodeType; // 7941
									// 7942
									// don't get/set attributes on text, comment and attribute nodes                                                   // 7943
									if (!elem || nType === 3 || nType === 8 || nType === 2) {
										// 7944
										return; // 7945
									} // 7946
									// 7947
									// Fallback to prop when attributes are not supported                                                              // 7948
									if (typeof elem.getAttribute === strundefined) {
										// 7949
										return jQuery.prop(elem, name, value); // 7950
									} // 7951
									// 7952
									// All attributes are lowercase                                                                                    // 7953
									// Grab necessary hook if one is defined                                                                           // 7954
									if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
										// 7955
										name = name.toLowerCase(); // 7956
										hooks = jQuery.attrHooks[name] || ( // 7957
										jQuery.expr.match.bool.test(name) ? boolHook : nodeHook); // 7958
									} // 7959
									// 7960
									if (value !== undefined) {
										// 7961
										// 7962
										if (value === null) {
											// 7963
											jQuery.removeAttr(elem, name); // 7964
											// 7965
										} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
											// 7966
											return ret; // 7967
											// 7968
										} else {
											// 7969
											elem.setAttribute(name, value + ""); // 7970
											return value; // 7971
										} // 7972
										// 7973
									} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
										// 7974
										return ret; // 7975
										// 7976
									} else {
										// 7977
										ret = jQuery.find.attr(elem, name); // 7978
										// 7979
										// Non-existent attributes return null, we normalize to undefined                                                 // 7980
										return ret == null ? // 7981
										undefined : // 7982
										ret; // 7983
									} // 7984
								}, // 7985
								// 7986
								removeAttr: function (elem, value) {
									// 7987
									var name,
									    propName,
									    // 7988
									i = 0,
									    // 7989
									attrNames = value && value.match(rnotwhite); // 7990
									// 7991
									if (attrNames && elem.nodeType === 1) {
										// 7992
										while (name = attrNames[i++]) {
											// 7993
											propName = jQuery.propFix[name] || name; // 7994
											// 7995
											// Boolean attributes get special treatment (#10870)                                                             // 7996
											if (jQuery.expr.match.bool.test(name)) {
												// 7997
												// Set corresponding property to false                                                                          // 7998
												if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
													// 7999
													elem[propName] = false; // 8000
													// Support: IE<9                                                                                                // 8001
													// Also clear defaultChecked/defaultSelected (if appropriate)                                                   // 8002
												} else {
													// 8003
													elem[jQuery.camelCase("default-" + name)] = // 8004
													elem[propName] = false; // 8005
												} // 8006
												// 8007
												// See #9699 for explanation of this approach (setting first, then removal)                                      // 8008
											} else {
												// 8009
												jQuery.attr(elem, name, ""); // 8010
											} // 8011
											// 8012
											elem.removeAttribute(getSetAttribute ? name : propName); // 8013
										} // 8014
									} // 8015
								}, // 8016
								// 8017
								attrHooks: { // 8018
									type: { // 8019
										set: function (elem, value) {
											// 8020
											if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
												// 8021
												// Setting the type on a radio button after the value resets the value in IE6-9                                 // 8022
												// Reset value to default in case type is set after value during creation                                       // 8023
												var val = elem.value; // 8024
												elem.setAttribute("type", value); // 8025
												if (val) {
													// 8026
													elem.value = val; // 8027
												} // 8028
												return value; // 8029
											} // 8030
										} // 8031
										// 8032
									} // 8033
								} }); // 8034
							// 8035
							// Hook for boolean attributes                                                                                       // 8036
							boolHook = { // 8037
								set: function (elem, value, name) {
									// 8038
									if (value === false) {
										// 8039
										// Remove boolean attributes when set to false                                                                    // 8040
										jQuery.removeAttr(elem, name); // 8041
									} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
										// 8042
										// IE<8 needs the *property* name                                                                                 // 8043
										elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name); // 8044
										// 8045
										// Use defaultChecked and defaultSelected for oldIE                                                                // 8046
									} else {
										// 8047
										elem[jQuery.camelCase("default-" + name)] = elem[name] = true; // 8048
									} // 8049
									// 8050
									return name; // 8051
								} // 8052
							}; // 8053
							// 8054
							// Retrieve booleans specially                                                                                       // 8055
							jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
								// 8056
								// 8057
								var getter = attrHandle[name] || jQuery.find.attr; // 8058
								// 8059
								attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? // 8060
								function (elem, name, isXML) {
									// 8061
									var ret, handle; // 8062
									if (!isXML) {
										// 8063
										// Avoid an infinite loop by temporarily removing this function from the getter                                  // 8064
										handle = attrHandle[name]; // 8065
										attrHandle[name] = ret; // 8066
										ret = getter(elem, name, isXML) != null ? // 8067
										name.toLowerCase() : // 8068
										null; // 8069
										attrHandle[name] = handle; // 8070
									} // 8071
									return ret; // 8072
								} : // 8073
								function (elem, name, isXML) {
									// 8074
									if (!isXML) {
										// 8075
										return elem[jQuery.camelCase("default-" + name)] ? // 8076
										name.toLowerCase() : // 8077
										null; // 8078
									} // 8079
								}; // 8080
							}); // 8081
							// 8082
							// fix oldIE attroperties                                                                                            // 8083
							if (!getSetInput || !getSetAttribute) {
								// 8084
								jQuery.attrHooks.value = { // 8085
									set: function (elem, value, name) {
										// 8086
										if (jQuery.nodeName(elem, "input")) {
											// 8087
											// Does not return so that setAttribute is also used                                                             // 8088
											elem.defaultValue = value; // 8089
										} else {
											// 8090
											// Use nodeHook if defined (#1954); otherwise setAttribute is fine                                               // 8091
											return nodeHook && nodeHook.set(elem, value, name); // 8092
										} // 8093
									} // 8094
								}; // 8095
							} // 8096
							// 8097
							// IE6/7 do not support getting/setting some attributes with get/setAttribute                                        // 8098
							if (!getSetAttribute) {
								// 8099
								// 8100
								// Use this for any attribute in IE6/7                                                                              // 8101
								// This fixes almost every IE6/7 issue                                                                              // 8102
								nodeHook = { // 8103
									set: function (elem, value, name) {
										// 8104
										// Set the existing or create a new attribute node                                                                // 8105
										var ret = elem.getAttributeNode(name); // 8106
										if (!ret) {
											// 8107
											elem.setAttributeNode( // 8108
											ret = elem.ownerDocument.createAttribute(name) // 8109
											); // 8110
										} // 8111
										// 8112
										ret.value = value += ""; // 8113
										// 8114
										// Break association with cloned elements by also using setAttribute (#9646)                                      // 8115
										if (name === "value" || value === elem.getAttribute(name)) {
											// 8116
											return value; // 8117
										} // 8118
									} // 8119
								}; // 8120
								// 8121
								// Some attributes are constructed with empty-string values when not defined                                        // 8122
								attrHandle.id = attrHandle.name = attrHandle.coords = // 8123
								function (elem, name, isXML) {
									// 8124
									var ret; // 8125
									if (!isXML) {
										// 8126
										return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? // 8127
										ret.value : // 8128
										null; // 8129
									} // 8130
								}; // 8131
								// 8132
								// Fixing value retrieval on a button requires this module                                                          // 8133
								jQuery.valHooks.button = { // 8134
									get: function (elem, name) {
										// 8135
										var ret = elem.getAttributeNode(name); // 8136
										if (ret && ret.specified) {
											// 8137
											return ret.value; // 8138
										} // 8139
									}, // 8140
									set: nodeHook.set // 8141
								}; // 8142
								// 8143
								// Set contenteditable to false on removals(#10429)                                                                 // 8144
								// Setting to empty string throws an error as an invalid value                                                      // 8145
								jQuery.attrHooks.contenteditable = { // 8146
									set: function (elem, value, name) {
										// 8147
										nodeHook.set(elem, value === "" ? false : value, name); // 8148
									} // 8149
								}; // 8150
								// 8151
								// Set width and height to auto instead of 0 on empty string( Bug #8150 )                                           // 8152
								// This is for removals                                                                                             // 8153
								jQuery.each(["width", "height"], function (i, name) {
									// 8154
									jQuery.attrHooks[name] = { // 8155
										set: function (elem, value) {
											// 8156
											if (value === "") {
												// 8157
												elem.setAttribute(name, "auto"); // 8158
												return value; // 8159
											} // 8160
										} // 8161
									}; // 8162
								}); // 8163
							} // 8164
							// 8165
							if (!support.style) {
								// 8166
								jQuery.attrHooks.style = { // 8167
									get: function (elem) {
										// 8168
										// Return undefined in the case of empty string                                                                   // 8169
										// Note: IE uppercases css property names, but if we were to .toLowerCase()                                       // 8170
										// .cssText, that would destroy case senstitivity in URL's, like in "background"                                  // 8171
										return elem.style.cssText || undefined; // 8172
									}, // 8173
									set: function (elem, value) {
										// 8174
										return elem.style.cssText = value + ""; // 8175
									} // 8176
								}; // 8177
							} // 8178
							// 8179
							// 8180
							// 8181
							// 8182
							var rfocusable = /^(?:input|select|textarea|button|object)$/i,
							    // 8183
							rclickable = /^(?:a|area)$/i; // 8184
							// 8185
							jQuery.fn.extend({ // 8186
								prop: function (name, value) {
									// 8187
									return access(this, jQuery.prop, name, value, arguments.length > 1); // 8188
								}, // 8189
								// 8190
								removeProp: function (name) {
									// 8191
									name = jQuery.propFix[name] || name; // 8192
									return this.each(function () {
										// 8193
										// try/catch handles cases where IE balks (such as removing a property on window)                                 // 8194
										try {
											// 8195
											this[name] = undefined; // 8196
											delete this[name]; // 8197
										} catch (e) {} // 8198
									}); // 8199
								} // 8200
							}); // 8201
							// 8202
							jQuery.extend({ // 8203
								propFix: { // 8204
									"for": "htmlFor", // 8205
									"class": "className" // 8206
								}, // 8207
								// 8208
								prop: function (elem, name, value) {
									// 8209
									var ret,
									    hooks,
									    notxml,
									    // 8210
									nType = elem.nodeType; // 8211
									// 8212
									// don't get/set properties on text, comment and attribute nodes                                                   // 8213
									if (!elem || nType === 3 || nType === 8 || nType === 2) {
										// 8214
										return; // 8215
									} // 8216
									// 8217
									notxml = nType !== 1 || !jQuery.isXMLDoc(elem); // 8218
									// 8219
									if (notxml) {
										// 8220
										// Fix name and attach hooks                                                                                      // 8221
										name = jQuery.propFix[name] || name; // 8222
										hooks = jQuery.propHooks[name]; // 8223
									} // 8224
									// 8225
									if (value !== undefined) {
										// 8226
										return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? // 8227
										ret : // 8228
										elem[name] = value; // 8229
										// 8230
									} else {
										// 8231
										return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? // 8232
										ret : // 8233
										elem[name]; // 8234
									} // 8235
								}, // 8236
								// 8237
								propHooks: { // 8238
									tabIndex: { // 8239
										get: function (elem) {
											// 8240
											// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set                      // 8241
											// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/         // 8242
											// Use proper attribute retrieval(#12072)                                                                        // 8243
											var tabindex = jQuery.find.attr(elem, "tabindex"); // 8244
											// 8245
											return tabindex ? // 8246
											parseInt(tabindex, 10) : // 8247
											rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? // 8248
											0 : // 8249
											-1; // 8250
										} // 8251
										// 8252
									} // 8253
								} }); // 8254
							// 8255
							// Some attributes require a special call on IE                                                                      // 8256
							// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 8257
							if (!support.hrefNormalized) {
								// 8258
								// href/src property should get the full normalized URL (#10299/#12915)                                             // 8259
								jQuery.each(["href", "src"], function (i, name) {
									// 8260
									jQuery.propHooks[name] = { // 8261
										get: function (elem) {
											// 8262
											return elem.getAttribute(name, 4); // 8263
										} // 8264
									}; // 8265
								}); // 8266
							} // 8267
							// 8268
							// Support: Safari, IE9+                                                                                             // 8269
							// mis-reports the default selected property of an option                                                            // 8270
							// Accessing the parent's selectedIndex property fixes it                                                            // 8271
							if (!support.optSelected) {
								// 8272
								jQuery.propHooks.selected = { // 8273
									get: function (elem) {
										// 8274
										var parent = elem.parentNode; // 8275
										// 8276
										if (parent) {
											// 8277
											parent.selectedIndex; // 8278
											// 8279
											// Make sure that it also works with optgroups, see #5701                                                        // 8280
											if (parent.parentNode) {
												// 8281
												parent.parentNode.selectedIndex; // 8282
											} // 8283
										} // 8284
										return null; // 8285
									} // 8286
								}; // 8287
							} // 8288
							// 8289
							jQuery.each([// 8290
							"tabIndex", // 8291
							"readOnly", // 8292
							"maxLength", // 8293
							"cellSpacing", // 8294
							"cellPadding", // 8295
							"rowSpan", // 8296
							"colSpan", // 8297
							"useMap", // 8298
							"frameBorder", // 8299
							"contentEditable" // 8300
							], function () {
								// 8301
								jQuery.propFix[this.toLowerCase()] = this; // 8302
							}); // 8303
							// 8304
							// IE6/7 call enctype encoding                                                                                       // 8305
							if (!support.enctype) {
								// 8306
								jQuery.propFix.enctype = "encoding"; // 8307
							} // 8308
							// 8309
							// 8310
							// 8311
							// 8312
							var rclass = /[\t\r\n\f]/g; // 8313
							// 8314
							jQuery.fn.extend({ // 8315
								addClass: function (value) {
									// 8316
									var classes,
									    elem,
									    cur,
									    clazz,
									    j,
									    finalValue,
									    // 8317
									i = 0,
									    // 8318
									len = this.length,
									    // 8319
									proceed = typeof value === "string" && value; // 8320
									// 8321
									if (jQuery.isFunction(value)) {
										// 8322
										return this.each(function (j) {
											// 8323
											jQuery(this).addClass(value.call(this, j, this.className)); // 8324
										}); // 8325
									} // 8326
									// 8327
									if (proceed) {
										// 8328
										// The disjunction here is for better compressibility (see removeClass)                                           // 8329
										classes = (value || "").match(rnotwhite) || []; // 8330
										// 8331
										for (; i < len; i++) {
											// 8332
											elem = this[i]; // 8333
											cur = elem.nodeType === 1 && (elem.className ? // 8334
											(" " + elem.className + " ").replace(rclass, " ") : // 8335
											" " // 8336
											); // 8337
											// 8338
											if (cur) {
												// 8339
												j = 0; // 8340
												while (clazz = classes[j++]) {
													// 8341
													if (cur.indexOf(" " + clazz + " ") < 0) {
														// 8342
														cur += clazz + " "; // 8343
													} // 8344
												} // 8345
												// 8346
												// only assign if different to avoid unneeded rendering.                                                        // 8347
												finalValue = jQuery.trim(cur); // 8348
												if (elem.className !== finalValue) {
													// 8349
													elem.className = finalValue; // 8350
												} // 8351
											} // 8352
										} // 8353
									} // 8354
									// 8355
									return this; // 8356
								}, // 8357
								// 8358
								removeClass: function (value) {
									// 8359
									var classes,
									    elem,
									    cur,
									    clazz,
									    j,
									    finalValue,
									    // 8360
									i = 0,
									    // 8361
									len = this.length,
									    // 8362
									proceed = arguments.length === 0 || typeof value === "string" && value; // 8363
									// 8364
									if (jQuery.isFunction(value)) {
										// 8365
										return this.each(function (j) {
											// 8366
											jQuery(this).removeClass(value.call(this, j, this.className)); // 8367
										}); // 8368
									} // 8369
									if (proceed) {
										// 8370
										classes = (value || "").match(rnotwhite) || []; // 8371
										// 8372
										for (; i < len; i++) {
											// 8373
											elem = this[i]; // 8374
											// This expression is here for better compressibility (see addClass)                                             // 8375
											cur = elem.nodeType === 1 && (elem.className ? // 8376
											(" " + elem.className + " ").replace(rclass, " ") : // 8377
											"" // 8378
											); // 8379
											// 8380
											if (cur) {
												// 8381
												j = 0; // 8382
												while (clazz = classes[j++]) {
													// 8383
													// Remove *all* instances                                                                                      // 8384
													while (cur.indexOf(" " + clazz + " ") >= 0) {
														// 8385
														cur = cur.replace(" " + clazz + " ", " "); // 8386
													} // 8387
												} // 8388
												// 8389
												// only assign if different to avoid unneeded rendering.                                                        // 8390
												finalValue = value ? jQuery.trim(cur) : ""; // 8391
												if (elem.className !== finalValue) {
													// 8392
													elem.className = finalValue; // 8393
												} // 8394
											} // 8395
										} // 8396
									} // 8397
									// 8398
									return this; // 8399
								}, // 8400
								// 8401
								toggleClass: function (value, stateVal) {
									// 8402
									var type = typeof value; // 8403
									// 8404
									if (typeof stateVal === "boolean" && type === "string") {
										// 8405
										return stateVal ? this.addClass(value) : this.removeClass(value); // 8406
									} // 8407
									// 8408
									if (jQuery.isFunction(value)) {
										// 8409
										return this.each(function (i) {
											// 8410
											jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal); // 8411
										}); // 8412
									} // 8413
									// 8414
									return this.each(function () {
										// 8415
										if (type === "string") {
											// 8416
											// toggle individual class names                                                                                 // 8417
											var className,
											    // 8418
											i = 0,
											    // 8419
											self = jQuery(this),
											    // 8420
											classNames = value.match(rnotwhite) || []; // 8421
											// 8422
											while (className = classNames[i++]) {
												// 8423
												// check each className given, space separated list                                                             // 8424
												if (self.hasClass(className)) {
													// 8425
													self.removeClass(className); // 8426
												} else {
													// 8427
													self.addClass(className); // 8428
												} // 8429
											} // 8430
											// 8431
											// Toggle whole class name                                                                                        // 8432
										} else if (type === strundefined || type === "boolean") {
											// 8433
											if (this.className) {
												// 8434
												// store className if set                                                                                       // 8435
												jQuery._data(this, "__className__", this.className); // 8436
											} // 8437
											// 8438
											// If the element has a class name or if we're passed "false",                                                   // 8439
											// then remove the whole classname (if there was one, the above saved it).                                       // 8440
											// Otherwise bring back whatever was previously saved (if anything),                                             // 8441
											// falling back to the empty string if nothing was stored.                                                       // 8442
											this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || ""; // 8443
										} // 8444
									}); // 8445
								}, // 8446
								// 8447
								hasClass: function (selector) {
									// 8448
									var className = " " + selector + " ",
									    // 8449
									i = 0,
									    // 8450
									l = this.length; // 8451
									for (; i < l; i++) {
										// 8452
										if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
											return true; // 8454
										} // 8455
									} // 8456
									// 8457
									return false; // 8458
								} // 8459
							}); // 8460
							// 8461
							// 8462
							// 8463
							// 8464
							// Return jQuery for attributes-only inclusion                                                                       // 8465
							// 8466
							// 8467
							jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + // 8468
							"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + // 8469
							"change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
								// 8470
								// 8471
								// Handle event binding                                                                                             // 8472
								jQuery.fn[name] = function (data, fn) {
									// 8473
									return arguments.length > 0 ? // 8474
									this.on(name, null, data, fn) : // 8475
									this.trigger(name); // 8476
								}; // 8477
							}); // 8478
							// 8479
							jQuery.fn.extend({ // 8480
								hover: function (fnOver, fnOut) {
									// 8481
									return this.mouseenter(fnOver).mouseleave(fnOut || fnOver); // 8482
								}, // 8483
								// 8484
								bind: function (types, data, fn) {
									// 8485
									return this.on(types, null, data, fn); // 8486
								}, // 8487
								unbind: function (types, fn) {
									// 8488
									return this.off(types, null, fn); // 8489
								}, // 8490
								// 8491
								delegate: function (selector, types, data, fn) {
									// 8492
									return this.on(types, selector, data, fn); // 8493
								}, // 8494
								undelegate: function (selector, types, fn) {
									// 8495
									// ( namespace ) or ( selector, types [, fn] )                                                                     // 8496
									return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn); // 8497
								} // 8498
							}); // 8499
							// 8500
							// 8501
							var nonce = jQuery.now(); // 8502
							// 8503
							var rquery = /\?/; // 8504
							// 8505
							// 8506
							// 8507
							var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
							// 8509
							jQuery.parseJSON = function (data) {
								// 8510
								// Attempt to parse using the native JSON parser first                                                              // 8511
								if (window.JSON && window.JSON.parse) {
									// 8512
									// Support: Android 2.3                                                                                            // 8513
									// Workaround failure to string-cast null input                                                                    // 8514
									return window.JSON.parse(data + ""); // 8515
								} // 8516
								// 8517
								var requireNonComma,
								    // 8518
								depth = null,
								    // 8519
								str = jQuery.trim(data + ""); // 8520
								// 8521
								// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains                            // 8522
								// after removing valid tokens                                                                                      // 8523
								return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {
									// 8524
									// 8525
									// Force termination if we see a misplaced comma                                                                   // 8526
									if (requireNonComma && comma) {
										// 8527
										depth = 0; // 8528
									} // 8529
									// 8530
									// Perform no more replacements after returning to outermost depth                                                 // 8531
									if (depth === 0) {
										// 8532
										return token; // 8533
									} // 8534
									// 8535
									// Commas must not follow "[", "{", or ","                                                                         // 8536
									requireNonComma = open || comma; // 8537
									// 8538
									// Determine new depth                                                                                             // 8539
									// array/object open ("[" or "{"): depth += true - false (increment)                                               // 8540
									// array/object close ("]" or "}"): depth += false - true (decrement)                                              // 8541
									// other cases ("," or primitive): depth += true - true (numeric cast)                                             // 8542
									depth += !close - !open; // 8543
									// 8544
									// Remove this token                                                                                               // 8545
									return ""; // 8546
								})) ? // 8547
								Function("return " + str)() : // 8548
								jQuery.error("Invalid JSON: " + data); // 8549
							}; // 8550
							// 8551
							// 8552
							// Cross-browser xml parsing                                                                                         // 8553
							jQuery.parseXML = function (data) {
								// 8554
								var xml, tmp; // 8555
								if (!data || typeof data !== "string") {
									// 8556
									return null; // 8557
								} // 8558
								try {
									// 8559
									if (window.DOMParser) {
										// Standard                                                                              // 8560
										tmp = new DOMParser(); // 8561
										xml = tmp.parseFromString(data, "text/xml"); // 8562
									} else {
										// IE                                                                                                     // 8563
										xml = new ActiveXObject("Microsoft.XMLDOM"); // 8564
										xml.async = "false"; // 8565
										xml.loadXML(data); // 8566
									} // 8567
								} catch (e) {
									// 8568
									xml = undefined; // 8569
								} // 8570
								if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
									// 8571
									jQuery.error("Invalid XML: " + data); // 8572
								} // 8573
								return xml; // 8574
							}; // 8575
							// 8576
							// 8577
							var // 8578
							// Document location                                                                                                // 8579
							ajaxLocParts,
							    // 8580
							ajaxLocation,
							    // 8581
							// 8582
							rhash = /#.*$/,
							    // 8583
							rts = /([?&])_=[^&]*/,
							    // 8584
							rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
							    // IE leaves an \r character at EOL                                     // 8585
							// #7653, #8125, #8152: local protocol detection                                                                    // 8586
							rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
							    // 8587
							rnoContent = /^(?:GET|HEAD)$/,
							    // 8588
							rprotocol = /^\/\//,
							    // 8589
							rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
							    // 8590
							// 8591
							/* Prefilters                                                                                                       // 8592
        * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                              // 8593
        * 2) These are called:                                                                                             // 8594
        *    - BEFORE asking for a transport                                                                               // 8595
        *    - AFTER param serialization (s.data is a string if s.processData is true)                                     // 8596
        * 3) key is the dataType                                                                                           // 8597
        * 4) the catchall symbol "*" can be used                                                                           // 8598
        * 5) execution will start with transport dataType and THEN continue down to "*" if needed                          // 8599
        */ // 8600
							prefilters = {},
							    // 8601
							// 8602
							/* Transports bindings                                                                                              // 8603
        * 1) key is the dataType                                                                                           // 8604
        * 2) the catchall symbol "*" can be used                                                                           // 8605
        * 3) selection will start with transport dataType and THEN go to "*" if needed                                     // 8606
        */ // 8607
							transports = {},
							    // 8608
							// 8609
							// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                             // 8610
							allTypes = "*/".concat("*"); // 8611
							// 8612
							// #8138, IE may throw an exception when accessing                                                                   // 8613
							// a field from window.location if document.domain has been set                                                      // 8614
							try {
								// 8615
								ajaxLocation = location.href; // 8616
							} catch (e) {
								// 8617
								// Use the href attribute of an A element                                                                           // 8618
								// since IE will modify it given document.location                                                                  // 8619
								ajaxLocation = document.createElement("a"); // 8620
								ajaxLocation.href = ""; // 8621
								ajaxLocation = ajaxLocation.href; // 8622
							} // 8623
							// 8624
							// Segment location into parts                                                                                       // 8625
							ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // 8626
							// 8627
							// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                              // 8628
							function addToPrefiltersOrTransports(structure) {
								// 8629
								// 8630
								// dataTypeExpression is optional and defaults to "*"                                                               // 8631
								return function (dataTypeExpression, func) {
									// 8632
									// 8633
									if (typeof dataTypeExpression !== "string") {
										// 8634
										func = dataTypeExpression; // 8635
										dataTypeExpression = "*"; // 8636
									} // 8637
									// 8638
									var dataType,
									    // 8639
									i = 0,
									    // 8640
									dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || []; // 8641
									// 8642
									if (jQuery.isFunction(func)) {
										// 8643
										// For each dataType in the dataTypeExpression                                                                    // 8644
										while (dataType = dataTypes[i++]) {
											// 8645
											// Prepend if requested                                                                                          // 8646
											if (dataType.charAt(0) === "+") {
												// 8647
												dataType = dataType.slice(1) || "*"; // 8648
												(structure[dataType] = structure[dataType] || []).unshift(func); // 8649
												// 8650
												// Otherwise append                                                                                              // 8651
											} else {
												// 8652
												(structure[dataType] = structure[dataType] || []).push(func); // 8653
											} // 8654
										} // 8655
									} // 8656
								}; // 8657
							} // 8658
							// 8659
							// Base inspection function for prefilters and transports                                                            // 8660
							function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
								// 8661
								// 8662
								var inspected = {},
								    // 8663
								seekingTransport = structure === transports; // 8664
								// 8665
								function inspect(dataType) {
									// 8666
									var selected; // 8667
									inspected[dataType] = true; // 8668
									jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
										// 8669
										var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR); // 8670
										if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
											// 8671
											options.dataTypes.unshift(dataTypeOrTransport); // 8672
											inspect(dataTypeOrTransport); // 8673
											return false; // 8674
										} else if (seekingTransport) {
											// 8675
											return !(selected = dataTypeOrTransport); // 8676
										} // 8677
									}); // 8678
									return selected; // 8679
								} // 8680
								// 8681
								return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*"); // 8682
							} // 8683
							// 8684
							// A special extend for ajax options                                                                                 // 8685
							// that takes "flat" options (not to be deep extended)                                                               // 8686
							// Fixes #9887                                                                                                       // 8687
							function ajaxExtend(target, src) {
								// 8688
								var deep,
								    key,
								    // 8689
								flatOptions = jQuery.ajaxSettings.flatOptions || {}; // 8690
								// 8691
								for (key in src) {
									// 8692
									if (src[key] !== undefined) {
										// 8693
										(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]; // 8694
									} // 8695
								} // 8696
								if (deep) {
									// 8697
									jQuery.extend(true, target, deep); // 8698
								} // 8699
								// 8700
								return target; // 8701
							} // 8702
							// 8703
							/* Handles responses to an ajax request:                                                                             // 8704
        * - finds the right dataType (mediates between content-type and expected dataType)                                  // 8705
        * - returns the corresponding response                                                                              // 8706
        */ // 8707
							function ajaxHandleResponses(s, jqXHR, responses) {
								// 8708
								var firstDataType,
								    ct,
								    finalDataType,
								    type,
								    // 8709
								contents = s.contents,
								    // 8710
								dataTypes = s.dataTypes; // 8711
								// 8712
								// Remove auto dataType and get content-type in the process                                                         // 8713
								while (dataTypes[0] === "*") {
									// 8714
									dataTypes.shift(); // 8715
									if (ct === undefined) {
										// 8716
										ct = s.mimeType || jqXHR.getResponseHeader("Content-Type"); // 8717
									} // 8718
								} // 8719
								// 8720
								// Check if we're dealing with a known content-type                                                                 // 8721
								if (ct) {
									// 8722
									for (type in contents) {
										// 8723
										if (contents[type] && contents[type].test(ct)) {
											// 8724
											dataTypes.unshift(type); // 8725
											break; // 8726
										} // 8727
									} // 8728
								} // 8729
								// 8730
								// Check to see if we have a response for the expected dataType                                                     // 8731
								if (dataTypes[0] in responses) {
									// 8732
									finalDataType = dataTypes[0]; // 8733
								} else {
									// 8734
									// Try convertible dataTypes                                                                                       // 8735
									for (type in responses) {
										// 8736
										if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
											// 8737
											finalDataType = type; // 8738
											break; // 8739
										} // 8740
										if (!firstDataType) {
											// 8741
											firstDataType = type; // 8742
										} // 8743
									} // 8744
									// Or just use first one                                                                                           // 8745
									finalDataType = finalDataType || firstDataType; // 8746
								} // 8747
								// 8748
								// If we found a dataType                                                                                           // 8749
								// We add the dataType to the list if needed                                                                        // 8750
								// and return the corresponding response                                                                            // 8751
								if (finalDataType) {
									// 8752
									if (finalDataType !== dataTypes[0]) {
										// 8753
										dataTypes.unshift(finalDataType); // 8754
									} // 8755
									return responses[finalDataType]; // 8756
								} // 8757
							} // 8758
							// 8759
							/* Chain conversions given the request and the original response                                                     // 8760
        * Also sets the responseXXX fields on the jqXHR instance                                                            // 8761
        */ // 8762
							function ajaxConvert(s, response, jqXHR, isSuccess) {
								// 8763
								var conv2,
								    current,
								    conv,
								    tmp,
								    prev,
								    // 8764
								converters = {},
								    // 8765
								// Work with a copy of dataTypes in case we need to modify it for conversion                                       // 8766
								dataTypes = s.dataTypes.slice(); // 8767
								// 8768
								// Create converters map with lowercased keys                                                                       // 8769
								if (dataTypes[1]) {
									// 8770
									for (conv in s.converters) {
										// 8771
										converters[conv.toLowerCase()] = s.converters[conv]; // 8772
									} // 8773
								} // 8774
								// 8775
								current = dataTypes.shift(); // 8776
								// 8777
								// Convert to each sequential dataType                                                                              // 8778
								while (current) {
									// 8779
									// 8780
									if (s.responseFields[current]) {
										// 8781
										jqXHR[s.responseFields[current]] = response; // 8782
									} // 8783
									// 8784
									// Apply the dataFilter if provided                                                                                // 8785
									if (!prev && isSuccess && s.dataFilter) {
										// 8786
										response = s.dataFilter(response, s.dataType); // 8787
									} // 8788
									// 8789
									prev = current; // 8790
									current = dataTypes.shift(); // 8791
									// 8792
									if (current) {
										// 8793
										// 8794
										// There's only work to do if current dataType is non-auto                                                        // 8795
										if (current === "*") {
											// 8796
											// 8797
											current = prev; // 8798
											// 8799
											// Convert response if prev dataType is non-auto and differs from current                                         // 8800
										} else if (prev !== "*" && prev !== current) {
											// 8801
											// 8802
											// Seek a direct converter                                                                                       // 8803
											conv = converters[prev + " " + current] || converters["* " + current]; // 8804
											// 8805
											// If none found, seek a pair                                                                                    // 8806
											if (!conv) {
												// 8807
												for (conv2 in converters) {
													// 8808
													// 8809
													// If conv2 outputs current                                                                                    // 8810
													tmp = conv2.split(" "); // 8811
													if (tmp[1] === current) {
														// 8812
														// 8813
														// If prev can be converted to accepted input                                                                 // 8814
														conv = converters[prev + " " + tmp[0]] || // 8815
														converters["* " + tmp[0]]; // 8816
														if (conv) {
															// 8817
															// Condense equivalence converters                                                                           // 8818
															if (conv === true) {
																// 8819
																conv = converters[conv2]; // 8820
																// 8821
																// Otherwise, insert the intermediate dataType                                                               // 8822
															} else if (converters[conv2] !== true) {
																// 8823
																current = tmp[0]; // 8824
																dataTypes.unshift(tmp[1]); // 8825
															} // 8826
															break; // 8827
														} // 8828
													} // 8829
												} // 8830
											} // 8831
											// 8832
											// Apply converter (if not an equivalence)                                                                       // 8833
											if (conv !== true) {
												// 8834
												// 8835
												// Unless errors are allowed to bubble, catch and return them                                                   // 8836
												if (conv && s["throws"]) {
													// 8837
													response = conv(response); // 8838
												} else {
													// 8839
													try {
														// 8840
														response = conv(response); // 8841
													} catch (e) {
														// 8842
														return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current }; // 8843
													} // 8844
												} // 8845
											} // 8846
										} // 8847
									} // 8848
								} // 8849
								// 8850
								return { state: "success", data: response }; // 8851
							} // 8852
							// 8853
							jQuery.extend({ // 8854
								// 8855
								// Counter for holding the number of active queries                                                                 // 8856
								active: 0, // 8857
								// 8858
								// Last-Modified header cache for next request                                                                      // 8859
								lastModified: {}, // 8860
								etag: {}, // 8861
								// 8862
								ajaxSettings: { // 8863
									url: ajaxLocation, // 8864
									type: "GET", // 8865
									isLocal: rlocalProtocol.test(ajaxLocParts[1]), // 8866
									global: true, // 8867
									processData: true, // 8868
									async: true, // 8869
									contentType: "application/x-www-form-urlencoded; charset=UTF-8", // 8870
									/*                                                                                                                 // 8871
         timeout: 0,                                                                                                        // 8872
         data: null,                                                                                                        // 8873
         dataType: null,                                                                                                    // 8874
         username: null,                                                                                                    // 8875
         password: null,                                                                                                    // 8876
         cache: null,                                                                                                       // 8877
         throws: false,                                                                                                     // 8878
         traditional: false,                                                                                                // 8879
         headers: {},                                                                                                       // 8880
         */ // 8881
									// 8882
									accepts: { // 8883
										"*": allTypes, // 8884
										text: "text/plain", // 8885
										html: "text/html", // 8886
										xml: "application/xml, text/xml", // 8887
										json: "application/json, text/javascript" // 8888
									}, // 8889
									// 8890
									contents: { // 8891
										xml: /xml/, // 8892
										html: /html/, // 8893
										json: /json/ // 8894
									}, // 8895
									// 8896
									responseFields: { // 8897
										xml: "responseXML", // 8898
										text: "responseText", // 8899
										json: "responseJSON" // 8900
									}, // 8901
									// 8902
									// Data converters                                                                                                 // 8903
									// Keys separate source (or catchall "*") and destination types with a single space                                // 8904
									converters: { // 8905
										// 8906
										// Convert anything to text                                                                                       // 8907
										"* text": String, // 8908
										// 8909
										// Text to html (true = no transformation)                                                                        // 8910
										"text html": true, // 8911
										// 8912
										// Evaluate text as a json expression                                                                             // 8913
										"text json": jQuery.parseJSON, // 8914
										// 8915
										// Parse text as xml                                                                                              // 8916
										"text xml": jQuery.parseXML // 8917
									}, // 8918
									// 8919
									// For options that shouldn't be deep extended:                                                                    // 8920
									// you can add your own custom options here if                                                                     // 8921
									// and when you create one that shouldn't be                                                                       // 8922
									// deep extended (see ajaxExtend)                                                                                  // 8923
									flatOptions: { // 8924
										url: true, // 8925
										context: true // 8926
										// 8927
									} }, // 8928
								// 8929
								// Creates a full fledged settings object into target                                                               // 8930
								// with both ajaxSettings and settings fields.                                                                      // 8931
								// If target is omitted, writes into ajaxSettings.                                                                  // 8932
								ajaxSetup: function (target, settings) {
									// 8933
									return settings ? // 8934
									// 8935
									// Building a settings object                                                                                     // 8936
									ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // 8937
									// 8938
									// Extending ajaxSettings                                                                                         // 8939
									ajaxExtend(jQuery.ajaxSettings, target); // 8940
								}, // 8941
								// 8942
								ajaxPrefilter: addToPrefiltersOrTransports(prefilters), // 8943
								ajaxTransport: addToPrefiltersOrTransports(transports), // 8944
								// 8945
								// Main method                                                                                                      // 8946
								ajax: function (url, options) {
									// 8947
									// 8948
									// If url is an object, simulate pre-1.5 signature                                                                 // 8949
									if (typeof url === "object") {
										// 8950
										options = url; // 8951
										url = undefined; // 8952
									} // 8953
									// 8954
									// Force options to be an object                                                                                   // 8955
									options = options || {}; // 8956
									// 8957
									var // Cross-domain detection vars                                                                                 // 8958
									parts,
									    // 8959
									// Loop variable                                                                                                  // 8960
									i,
									    // 8961
									// URL without anti-cache param                                                                                   // 8962
									cacheURL,
									    // 8963
									// Response headers as string                                                                                     // 8964
									responseHeadersString,
									    // 8965
									// timeout handle                                                                                                 // 8966
									timeoutTimer,
									    // 8967
									// 8968
									// To know if global events are to be dispatched                                                                  // 8969
									fireGlobals,
									    // 8970
									// 8971
									transport,
									    // 8972
									// Response headers                                                                                               // 8973
									responseHeaders,
									    // 8974
									// Create the final options object                                                                                // 8975
									s = jQuery.ajaxSetup({}, options),
									    // 8976
									// Callbacks context                                                                                              // 8977
									callbackContext = s.context || s,
									    // 8978
									// Context for global events is callbackContext if it is a DOM node or jQuery collection                          // 8979
									globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? // 8980
									jQuery(callbackContext) : // 8981
									jQuery.event,
									    // 8982
									// Deferreds                                                                                                      // 8983
									deferred = jQuery.Deferred(),
									    // 8984
									completeDeferred = jQuery.Callbacks("once memory"),
									    // 8985
									// Status-dependent callbacks                                                                                     // 8986
									statusCode = s.statusCode || {},
									    // 8987
									// Headers (they are sent all at once)                                                                            // 8988
									requestHeaders = {},
									    // 8989
									requestHeadersNames = {},
									    // 8990
									// The jqXHR state                                                                                                // 8991
									state = 0,
									    // 8992
									// Default abort message                                                                                          // 8993
									strAbort = "canceled",
									    // 8994
									// Fake xhr                                                                                                       // 8995
									jqXHR = { // 8996
										readyState: 0, // 8997
										// 8998
										// Builds headers hashtable if needed                                                                            // 8999
										getResponseHeader: function (key) {
											// 9000
											var match; // 9001
											if (state === 2) {
												// 9002
												if (!responseHeaders) {
													// 9003
													responseHeaders = {}; // 9004
													while (match = rheaders.exec(responseHeadersString)) {
														// 9005
														responseHeaders[match[1].toLowerCase()] = match[2]; // 9006
													} // 9007
												} // 9008
												match = responseHeaders[key.toLowerCase()]; // 9009
											} // 9010
											return match == null ? null : match; // 9011
										}, // 9012
										// 9013
										// Raw string                                                                                                    // 9014
										getAllResponseHeaders: function () {
											// 9015
											return state === 2 ? responseHeadersString : null; // 9016
										}, // 9017
										// 9018
										// Caches the header                                                                                             // 9019
										setRequestHeader: function (name, value) {
											// 9020
											var lname = name.toLowerCase(); // 9021
											if (!state) {
												// 9022
												name = requestHeadersNames[lname] = requestHeadersNames[lname] || name; // 9023
												requestHeaders[name] = value; // 9024
											} // 9025
											return this; // 9026
										}, // 9027
										// 9028
										// Overrides response content-type header                                                                        // 9029
										overrideMimeType: function (type) {
											// 9030
											if (!state) {
												// 9031
												s.mimeType = type; // 9032
											} // 9033
											return this; // 9034
										}, // 9035
										// 9036
										// Status-dependent callbacks                                                                                    // 9037
										statusCode: function (map) {
											// 9038
											var code; // 9039
											if (map) {
												// 9040
												if (state < 2) {
													// 9041
													for (code in map) {
														// 9042
														// Lazy-add the new callback in a way that preserves old ones                                                // 9043
														statusCode[code] = [statusCode[code], map[code]]; // 9044
													} // 9045
												} else {
													// 9046
													// Execute the appropriate callbacks                                                                          // 9047
													jqXHR.always(map[jqXHR.status]); // 9048
												} // 9049
											} // 9050
											return this; // 9051
										}, // 9052
										// 9053
										// Cancel the request                                                                                            // 9054
										abort: function (statusText) {
											// 9055
											var finalText = statusText || strAbort; // 9056
											if (transport) {
												// 9057
												transport.abort(finalText); // 9058
											} // 9059
											done(0, finalText); // 9060
											return this; // 9061
										} // 9062
									}; // 9063
									// 9064
									// Attach deferreds                                                                                                // 9065
									deferred.promise(jqXHR).complete = completeDeferred.add; // 9066
									jqXHR.success = jqXHR.done; // 9067
									jqXHR.error = jqXHR.fail; // 9068
									// 9069
									// Remove hash character (#7531: and string promotion)                                                             // 9070
									// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)                                         // 9071
									// Handle falsy url in the settings object (#10093: consistency with old signature)                                // 9072
									// We also use the url parameter if available                                                                      // 9073
									s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
									// 9075
									// Alias method option to type as per ticket #12004                                                                // 9076
									s.type = options.method || options.type || s.method || s.type; // 9077
									// 9078
									// Extract dataTypes list                                                                                          // 9079
									s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""]; // 9080
									// 9081
									// A cross-domain request is in order when we have a protocol:host:port mismatch                                   // 9082
									if (s.crossDomain == null) {
										// 9083
										parts = rurl.exec(s.url.toLowerCase()); // 9084
										s.crossDomain = !!(parts && ( // 9085
										parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || // 9086
										(parts[3] || (parts[1] === "http:" ? "80" : "443")) !== ( // 9087
										ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))) // 9088
										); // 9089
									} // 9090
									// 9091
									// Convert data if not already a string                                                                            // 9092
									if (s.data && s.processData && typeof s.data !== "string") {
										// 9093
										s.data = jQuery.param(s.data, s.traditional); // 9094
									} // 9095
									// 9096
									// Apply prefilters                                                                                                // 9097
									inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // 9098
									// 9099
									// If request was aborted inside a prefilter, stop there                                                           // 9100
									if (state === 2) {
										// 9101
										return jqXHR; // 9102
									} // 9103
									// 9104
									// We can fire global events as of now if asked to                                                                 // 9105
									// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)                                // 9106
									fireGlobals = jQuery.event && s.global; // 9107
									// 9108
									// Watch for a new set of requests                                                                                 // 9109
									if (fireGlobals && jQuery.active++ === 0) {
										// 9110
										jQuery.event.trigger("ajaxStart"); // 9111
									} // 9112
									// 9113
									// Uppercase the type                                                                                              // 9114
									s.type = s.type.toUpperCase(); // 9115
									// 9116
									// Determine if request has content                                                                                // 9117
									s.hasContent = !rnoContent.test(s.type); // 9118
									// 9119
									// Save the URL in case we're toying with the If-Modified-Since                                                    // 9120
									// and/or If-None-Match header later on                                                                            // 9121
									cacheURL = s.url; // 9122
									// 9123
									// More options handling for requests with no content                                                              // 9124
									if (!s.hasContent) {
										// 9125
										// 9126
										// If data is available, append data to url                                                                       // 9127
										if (s.data) {
											// 9128
											cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data; // 9129
											// #9682: remove data so that it's not used in an eventual retry                                                 // 9130
											delete s.data; // 9131
										} // 9132
										// 9133
										// Add anti-cache in url if needed                                                                                // 9134
										if (s.cache === false) {
											// 9135
											s.url = rts.test(cacheURL) ? // 9136
											// 9137
											// If there is already a '_' parameter, set its value                                                           // 9138
											cacheURL.replace(rts, "$1_=" + nonce++) : // 9139
											// 9140
											// Otherwise add one to the end                                                                                 // 9141
											cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++; // 9142
										} // 9143
									} // 9144
									// 9145
									// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                   // 9146
									if (s.ifModified) {
										// 9147
										if (jQuery.lastModified[cacheURL]) {
											// 9148
											jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]); // 9149
										} // 9150
										if (jQuery.etag[cacheURL]) {
											// 9151
											jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]); // 9152
										} // 9153
									} // 9154
									// 9155
									// Set the correct header, if data is being sent                                                                   // 9156
									if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
										// 9157
										jqXHR.setRequestHeader("Content-Type", s.contentType); // 9158
									} // 9159
									// 9160
									// Set the Accepts header for the server, depending on the dataType                                                // 9161
									jqXHR.setRequestHeader( // 9162
									"Accept", // 9163
									s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? // 9164
									s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : // 9165
									s.accepts["*"] // 9166
									); // 9167
									// 9168
									// Check for headers option                                                                                        // 9169
									for (i in s.headers) {
										// 9170
										jqXHR.setRequestHeader(i, s.headers[i]); // 9171
									} // 9172
									// 9173
									// Allow custom headers/mimetypes and early abort                                                                  // 9174
									if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
										// 9175
										// Abort if not done already and return                                                                           // 9176
										return jqXHR.abort(); // 9177
									} // 9178
									// 9179
									// aborting is no longer a cancellation                                                                            // 9180
									strAbort = "abort"; // 9181
									// 9182
									// Install callbacks on deferreds                                                                                  // 9183
									for (i in { success: 1, error: 1, complete: 1 }) {
										// 9184
										jqXHR[i](s[i]); // 9185
									} // 9186
									// 9187
									// Get transport                                                                                                   // 9188
									transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // 9189
									// 9190
									// If no transport, we auto-abort                                                                                  // 9191
									if (!transport) {
										// 9192
										done(-1, "No Transport"); // 9193
									} else {
										// 9194
										jqXHR.readyState = 1; // 9195
										// 9196
										// Send global event                                                                                              // 9197
										if (fireGlobals) {
											// 9198
											globalEventContext.trigger("ajaxSend", [jqXHR, s]); // 9199
										} // 9200
										// Timeout                                                                                                        // 9201
										if (s.async && s.timeout > 0) {
											// 9202
											timeoutTimer = setTimeout(function () {
												// 9203
												jqXHR.abort("timeout"); // 9204
											}, s.timeout); // 9205
										} // 9206
										// 9207
										try {
											// 9208
											state = 1; // 9209
											transport.send(requestHeaders, done); // 9210
										} catch (e) {
											// 9211
											// Propagate exception as error if not done                                                                      // 9212
											if (state < 2) {
												// 9213
												done(-1, e); // 9214
												// Simply rethrow otherwise                                                                                      // 9215
											} else {
												// 9216
												throw e; // 9217
											} // 9218
										} // 9219
									} // 9220
									// 9221
									// Callback for when everything is done                                                                            // 9222
									function done(status, nativeStatusText, responses, headers) {
										// 9223
										var isSuccess,
										    success,
										    error,
										    response,
										    modified,
										    // 9224
										statusText = nativeStatusText; // 9225
										// 9226
										// Called once                                                                                                    // 9227
										if (state === 2) {
											// 9228
											return; // 9229
										} // 9230
										// 9231
										// State is "done" now                                                                                            // 9232
										state = 2; // 9233
										// 9234
										// Clear timeout if it exists                                                                                     // 9235
										if (timeoutTimer) {
											// 9236
											clearTimeout(timeoutTimer); // 9237
										} // 9238
										// 9239
										// Dereference transport for early garbage collection                                                             // 9240
										// (no matter how long the jqXHR object will be used)                                                             // 9241
										transport = undefined; // 9242
										// 9243
										// Cache response headers                                                                                         // 9244
										responseHeadersString = headers || ""; // 9245
										// 9246
										// Set readyState                                                                                                 // 9247
										jqXHR.readyState = status > 0 ? 4 : 0; // 9248
										// 9249
										// Determine if successful                                                                                        // 9250
										isSuccess = status >= 200 && status < 300 || status === 304; // 9251
										// 9252
										// Get response data                                                                                              // 9253
										if (responses) {
											// 9254
											response = ajaxHandleResponses(s, jqXHR, responses); // 9255
										} // 9256
										// 9257
										// Convert no matter what (that way responseXXX fields are always set)                                            // 9258
										response = ajaxConvert(s, response, jqXHR, isSuccess); // 9259
										// 9260
										// If successful, handle type chaining                                                                            // 9261
										if (isSuccess) {
											// 9262
											// 9263
											// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                 // 9264
											if (s.ifModified) {
												// 9265
												modified = jqXHR.getResponseHeader("Last-Modified"); // 9266
												if (modified) {
													// 9267
													jQuery.lastModified[cacheURL] = modified; // 9268
												} // 9269
												modified = jqXHR.getResponseHeader("etag"); // 9270
												if (modified) {
													// 9271
													jQuery.etag[cacheURL] = modified; // 9272
												} // 9273
											} // 9274
											// 9275
											// if no content                                                                                                 // 9276
											if (status === 204 || s.type === "HEAD") {
												// 9277
												statusText = "nocontent"; // 9278
												// 9279
												// if not modified                                                                                               // 9280
											} else if (status === 304) {
												// 9281
												statusText = "notmodified"; // 9282
												// 9283
												// If we have data, let's convert it                                                                             // 9284
											} else {
												// 9285
												statusText = response.state; // 9286
												success = response.data; // 9287
												error = response.error; // 9288
												isSuccess = !error; // 9289
											} // 9290
										} else {
											// 9291
											// We extract error from statusText                                                                              // 9292
											// then normalize statusText and status for non-aborts                                                           // 9293
											error = statusText; // 9294
											if (status || !statusText) {
												// 9295
												statusText = "error"; // 9296
												if (status < 0) {
													// 9297
													status = 0; // 9298
												} // 9299
											} // 9300
										} // 9301
										// 9302
										// Set data for the fake xhr object                                                                               // 9303
										jqXHR.status = status; // 9304
										jqXHR.statusText = (nativeStatusText || statusText) + ""; // 9305
										// 9306
										// Success/Error                                                                                                  // 9307
										if (isSuccess) {
											// 9308
											deferred.resolveWith(callbackContext, [success, statusText, jqXHR]); // 9309
										} else {
											// 9310
											deferred.rejectWith(callbackContext, [jqXHR, statusText, error]); // 9311
										} // 9312
										// 9313
										// Status-dependent callbacks                                                                                     // 9314
										jqXHR.statusCode(statusCode); // 9315
										statusCode = undefined; // 9316
										// 9317
										if (fireGlobals) {
											// 9318
											globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", // 9319
											[jqXHR, s, isSuccess ? success : error]); // 9320
										} // 9321
										// 9322
										// Complete                                                                                                       // 9323
										completeDeferred.fireWith(callbackContext, [jqXHR, statusText]); // 9324
										// 9325
										if (fireGlobals) {
											// 9326
											globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // 9327
											// Handle the global AJAX counter                                                                                // 9328
											if (! --jQuery.active) {
												// 9329
												jQuery.event.trigger("ajaxStop"); // 9330
											} // 9331
										} // 9332
									} // 9333
									// 9334
									return jqXHR; // 9335
								}, // 9336
								// 9337
								getJSON: function (url, data, callback) {
									// 9338
									return jQuery.get(url, data, callback, "json"); // 9339
								}, // 9340
								// 9341
								getScript: function (url, callback) {
									// 9342
									return jQuery.get(url, undefined, callback, "script"); // 9343
								} // 9344
							}); // 9345
							// 9346
							jQuery.each(["get", "post"], function (i, method) {
								// 9347
								jQuery[method] = function (url, data, callback, type) {
									// 9348
									// shift arguments if data argument was omitted                                                                    // 9349
									if (jQuery.isFunction(data)) {
										// 9350
										type = type || callback; // 9351
										callback = data; // 9352
										data = undefined; // 9353
									} // 9354
									// 9355
									return jQuery.ajax({ // 9356
										url: url, // 9357
										type: method, // 9358
										dataType: type, // 9359
										data: data, // 9360
										success: callback // 9361
									}); // 9362
								}; // 9363
							}); // 9364
							// 9365
							// 9366
							jQuery._evalUrl = function (url) {
								// 9367
								return jQuery.ajax({ // 9368
									url: url, // 9369
									type: "GET", // 9370
									dataType: "script", // 9371
									async: false, // 9372
									global: false, // 9373
									"throws": true // 9374
								}); // 9375
							}; // 9376
							// 9377
							// 9378
							jQuery.fn.extend({ // 9379
								wrapAll: function (html) {
									// 9380
									if (jQuery.isFunction(html)) {
										// 9381
										return this.each(function (i) {
											// 9382
											jQuery(this).wrapAll(html.call(this, i)); // 9383
										}); // 9384
									} // 9385
									// 9386
									if (this[0]) {
										// 9387
										// The elements to wrap the target around                                                                         // 9388
										var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true); // 9389
										// 9390
										if (this[0].parentNode) {
											// 9391
											wrap.insertBefore(this[0]); // 9392
										} // 9393
										// 9394
										wrap.map(function () {
											// 9395
											var elem = this; // 9396
											// 9397
											while (elem.firstChild && elem.firstChild.nodeType === 1) {
												// 9398
												elem = elem.firstChild; // 9399
											} // 9400
											// 9401
											return elem; // 9402
										}).append(this); // 9403
									} // 9404
									// 9405
									return this; // 9406
								}, // 9407
								// 9408
								wrapInner: function (html) {
									// 9409
									if (jQuery.isFunction(html)) {
										// 9410
										return this.each(function (i) {
											// 9411
											jQuery(this).wrapInner(html.call(this, i)); // 9412
										}); // 9413
									} // 9414
									// 9415
									return this.each(function () {
										// 9416
										var self = jQuery(this),
										    // 9417
										contents = self.contents(); // 9418
										// 9419
										if (contents.length) {
											// 9420
											contents.wrapAll(html); // 9421
											// 9422
										} else {
											// 9423
											self.append(html); // 9424
										} // 9425
									}); // 9426
								}, // 9427
								// 9428
								wrap: function (html) {
									// 9429
									var isFunction = jQuery.isFunction(html); // 9430
									// 9431
									return this.each(function (i) {
										// 9432
										jQuery(this).wrapAll(isFunction ? html.call(this, i) : html); // 9433
									}); // 9434
								}, // 9435
								// 9436
								unwrap: function () {
									// 9437
									return this.parent().each(function () {
										// 9438
										if (!jQuery.nodeName(this, "body")) {
											// 9439
											jQuery(this).replaceWith(this.childNodes); // 9440
										} // 9441
									}).end(); // 9442
								} // 9443
							}); // 9444
							// 9445
							// 9446
							jQuery.expr.filters.hidden = function (elem) {
								// 9447
								// Support: Opera <= 12.12                                                                                          // 9448
								// Opera reports offsetWidths and offsetHeights less than zero on some elements                                     // 9449
								return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || // 9450
								!support.reliableHiddenOffsets() && // 9451
								(elem.style && elem.style.display || jQuery.css(elem, "display")) === "none"; // 9452
							}; // 9453
							// 9454
							jQuery.expr.filters.visible = function (elem) {
								// 9455
								return !jQuery.expr.filters.hidden(elem); // 9456
							}; // 9457
							// 9458
							// 9459
							// 9460
							// 9461
							var r20 = /%20/g,
							    // 9462
							rbracket = /\[\]$/,
							    // 9463
							rCRLF = /\r?\n/g,
							    // 9464
							rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
							    // 9465
							rsubmittable = /^(?:input|select|textarea|keygen)/i; // 9466
							// 9467
							function buildParams(prefix, obj, traditional, add) {
								// 9468
								var name; // 9469
								// 9470
								if (jQuery.isArray(obj)) {
									// 9471
									// Serialize array item.                                                                                           // 9472
									jQuery.each(obj, function (i, v) {
										// 9473
										if (traditional || rbracket.test(prefix)) {
											// 9474
											// Treat each array item as a scalar.                                                                            // 9475
											add(prefix, v); // 9476
											// 9477
										} else {
											// 9478
											// Item is non-scalar (array or object), encode its numeric index.                                               // 9479
											buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add); // 9480
										} // 9481
									}); // 9482
									// 9483
								} else if (!traditional && jQuery.type(obj) === "object") {
									// 9484
									// Serialize object item.                                                                                          // 9485
									for (name in obj) {
										// 9486
										buildParams(prefix + "[" + name + "]", obj[name], traditional, add); // 9487
									} // 9488
									// 9489
								} else {
									// 9490
									// Serialize scalar item.                                                                                          // 9491
									add(prefix, obj); // 9492
								} // 9493
							} // 9494
							// 9495
							// Serialize an array of form elements or a set of                                                                   // 9496
							// key/values into a query string                                                                                    // 9497
							jQuery.param = function (a, traditional) {
								// 9498
								var prefix,
								    // 9499
								s = [],
								    // 9500
								add = function (key, value) {
									// 9501
									// If value is a function, invoke it and return its value                                                         // 9502
									value = jQuery.isFunction(value) ? value() : value == null ? "" : value; // 9503
									s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value); // 9504
								}; // 9505
								// 9506
								// Set traditional to true for jQuery <= 1.3.2 behavior.                                                            // 9507
								if (traditional === undefined) {
									// 9508
									traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional; // 9509
								} // 9510
								// 9511
								// If an array was passed in, assume that it is an array of form elements.                                          // 9512
								if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
									// 9513
									// Serialize the form elements                                                                                     // 9514
									jQuery.each(a, function () {
										// 9515
										add(this.name, this.value); // 9516
									}); // 9517
									// 9518
								} else {
									// 9519
									// If traditional, encode the "old" way (the way 1.3.2 or older                                                    // 9520
									// did it), otherwise encode params recursively.                                                                   // 9521
									for (prefix in a) {
										// 9522
										buildParams(prefix, a[prefix], traditional, add); // 9523
									} // 9524
								} // 9525
								// 9526
								// Return the resulting serialization                                                                               // 9527
								return s.join("&").replace(r20, "+"); // 9528
							}; // 9529
							// 9530
							jQuery.fn.extend({ // 9531
								serialize: function () {
									// 9532
									return jQuery.param(this.serializeArray()); // 9533
								}, // 9534
								serializeArray: function () {
									// 9535
									return this.map(function () {
										// 9536
										// Can add propHook for "elements" to filter or add form elements                                                 // 9537
										var elements = jQuery.prop(this, "elements"); // 9538
										return elements ? jQuery.makeArray(elements) : this; // 9539
									}) // 9540
									.filter(function () {
										// 9541
										var type = this.type; // 9542
										// Use .is(":disabled") so that fieldset[disabled] works                                                          // 9543
										return this.name && !jQuery(this).is(":disabled") && // 9544
										rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && ( // 9545
										this.checked || !rcheckableType.test(type)); // 9546
									}) // 9547
									.map(function (i, elem) {
										// 9548
										var val = jQuery(this).val(); // 9549
										// 9550
										return val == null ? // 9551
										null : // 9552
										jQuery.isArray(val) ? // 9553
										jQuery.map(val, function (val) {
											// 9554
											return { name: elem.name, value: val.replace(rCRLF, "\r\n") }; // 9555
										}) : // 9556
										{ name: elem.name, value: val.replace(rCRLF, "\r\n") }; // 9557
									}).get(); // 9558
								} // 9559
							}); // 9560
							// 9561
							// 9562
							// Create the request object                                                                                         // 9563
							// (This is still attached to ajaxSettings for backward compatibility)                                               // 9564
							jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? // 9565
							// Support: IE6+                                                                                                    // 9566
							function () {
								// 9567
								// 9568
								// XHR cannot access local files, always use ActiveX for that case                                                 // 9569
								return !this.isLocal && // 9570
								// 9571
								// Support: IE7-8                                                                                                 // 9572
								// oldIE XHR does not support non-RFC2616 methods (#13240)                                                        // 9573
								// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx                                          // 9574
								// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9                                                 // 9575
								// Although this check for six methods instead of eight                                                           // 9576
								// since IE also does not support "trace" and "connect"                                                           // 9577
								/^(get|post|head|put|delete|options)$/i.test(this.type) && // 9578
								// 9579
								createStandardXHR() || createActiveXHR(); // 9580
							} : // 9581
							// For all other browsers, use the standard XMLHttpRequest object                                                   // 9582
							createStandardXHR; // 9583
							// 9584
							var xhrId = 0,
							    // 9585
							xhrCallbacks = {},
							    // 9586
							xhrSupported = jQuery.ajaxSettings.xhr(); // 9587
							// 9588
							// Support: IE<10                                                                                                    // 9589
							// Open requests must be manually aborted on unload (#5280)                                                          // 9590
							// See https://support.microsoft.com/kb/2856746 for more info                                                        // 9591
							if (window.attachEvent) {
								// 9592
								window.attachEvent("onunload", function () {
									// 9593
									for (var key in xhrCallbacks) {
										// 9594
										xhrCallbacks[key](undefined, true); // 9595
									} // 9596
								}); // 9597
							} // 9598
							// 9599
							// Determine support properties                                                                                      // 9600
							support.cors = !!xhrSupported && "withCredentials" in xhrSupported; // 9601
							xhrSupported = support.ajax = !!xhrSupported; // 9602
							// 9603
							// Create transport if the browser can provide an xhr                                                                // 9604
							if (xhrSupported) {
								// 9605
								// 9606
								jQuery.ajaxTransport(function (options) {
									// 9607
									// Cross domain only allowed if supported through XMLHttpRequest                                                   // 9608
									if (!options.crossDomain || support.cors) {
										// 9609
										// 9610
										var callback; // 9611
										// 9612
										return { // 9613
											send: function (headers, complete) {
												// 9614
												var i,
												    // 9615
												xhr = options.xhr(),
												    // 9616
												id = ++xhrId; // 9617
												// 9618
												// Open the socket                                                                                              // 9619
												xhr.open(options.type, options.url, options.async, options.username, options.password); // 9620
												// 9621
												// Apply custom fields if provided                                                                              // 9622
												if (options.xhrFields) {
													// 9623
													for (i in options.xhrFields) {
														// 9624
														xhr[i] = options.xhrFields[i]; // 9625
													} // 9626
												} // 9627
												// 9628
												// Override mime type if needed                                                                                 // 9629
												if (options.mimeType && xhr.overrideMimeType) {
													// 9630
													xhr.overrideMimeType(options.mimeType); // 9631
												} // 9632
												// 9633
												// X-Requested-With header                                                                                      // 9634
												// For cross-domain requests, seeing as conditions for a preflight are                                          // 9635
												// akin to a jigsaw puzzle, we simply never set it to be sure.                                                  // 9636
												// (it can always be set on a per-request basis or even using ajaxSetup)                                        // 9637
												// For same-domain requests, won't change header if already provided.                                           // 9638
												if (!options.crossDomain && !headers["X-Requested-With"]) {
													// 9639
													headers["X-Requested-With"] = "XMLHttpRequest"; // 9640
												} // 9641
												// 9642
												// Set headers                                                                                                  // 9643
												for (i in headers) {
													// 9644
													// Support: IE<9                                                                                               // 9645
													// IE's ActiveXObject throws a 'Type Mismatch' exception when setting                                          // 9646
													// request header to a null-value.                                                                             // 9647
													//                                                                                                             // 9648
													// To keep consistent with other XHR implementations, cast the value                                           // 9649
													// to string and ignore `undefined`.                                                                           // 9650
													if (headers[i] !== undefined) {
														// 9651
														xhr.setRequestHeader(i, headers[i] + ""); // 9652
													} // 9653
												} // 9654
												// 9655
												// Do send the request                                                                                          // 9656
												// This may raise an exception which is actually                                                                // 9657
												// handled in jQuery.ajax (so no try/catch here)                                                                // 9658
												xhr.send(options.hasContent && options.data || null); // 9659
												// 9660
												// Listener                                                                                                     // 9661
												callback = function (_, isAbort) {
													// 9662
													var status, statusText, responses; // 9663
													// 9664
													// Was never called and is aborted or complete                                                                 // 9665
													if (callback && (isAbort || xhr.readyState === 4)) {
														// 9666
														// Clean up                                                                                                   // 9667
														delete xhrCallbacks[id]; // 9668
														callback = undefined; // 9669
														xhr.onreadystatechange = jQuery.noop; // 9670
														// 9671
														// Abort manually if needed                                                                                   // 9672
														if (isAbort) {
															// 9673
															if (xhr.readyState !== 4) {
																// 9674
																xhr.abort(); // 9675
															} // 9676
														} else {
															// 9677
															responses = {}; // 9678
															status = xhr.status; // 9679
															// 9680
															// Support: IE<10                                                                                            // 9681
															// Accessing binary-data responseText throws an exception                                                    // 9682
															// (#11426)                                                                                                  // 9683
															if (typeof xhr.responseText === "string") {
																// 9684
																responses.text = xhr.responseText; // 9685
															} // 9686
															// 9687
															// Firefox throws an exception when accessing                                                                // 9688
															// statusText for faulty cross-domain requests                                                               // 9689
															try {
																// 9690
																statusText = xhr.statusText; // 9691
															} catch (e) {
																// 9692
																// We normalize with Webkit giving an empty statusText                                                      // 9693
																statusText = ""; // 9694
															} // 9695
															// 9696
															// Filter status for non standard behaviors                                                                  // 9697
															// 9698
															// If the request is local and we have data: assume a success                                                // 9699
															// (success with no data won't get notified, that's the best we                                              // 9700
															// can do given current implementations)                                                                     // 9701
															if (!status && options.isLocal && !options.crossDomain) {
																// 9702
																status = responses.text ? 200 : 404; // 9703
																// IE - #1450: sometimes returns 1223 when it should be 204                                                  // 9704
															} else if (status === 1223) {
																// 9705
																status = 204; // 9706
															} // 9707
														} // 9708
													} // 9709
													// 9710
													// Call complete if needed                                                                                     // 9711
													if (responses) {
														// 9712
														complete(status, statusText, responses, xhr.getAllResponseHeaders()); // 9713
													} // 9714
												}; // 9715
												// 9716
												if (!options.async) {
													// 9717
													// if we're in sync mode we fire the callback                                                                  // 9718
													callback(); // 9719
												} else if (xhr.readyState === 4) {
													// 9720
													// (IE6 & IE7) if it's in cache and has been                                                                   // 9721
													// retrieved directly we need to fire the callback                                                             // 9722
													setTimeout(callback); // 9723
												} else {
													// 9724
													// Add to the list of active xhr callbacks                                                                     // 9725
													xhr.onreadystatechange = xhrCallbacks[id] = callback; // 9726
												} // 9727
											}, // 9728
											// 9729
											abort: function () {
												// 9730
												if (callback) {
													// 9731
													callback(undefined, true); // 9732
												} // 9733
											} // 9734
										}; // 9735
									} // 9736
								}); // 9737
							} // 9738
							// 9739
							// Functions to create xhrs                                                                                          // 9740
							function createStandardXHR() {
								// 9741
								try {
									// 9742
									return new window.XMLHttpRequest(); // 9743
								} catch (e) {} // 9744
							} // 9745
							// 9746
							function createActiveXHR() {
								// 9747
								try {
									// 9748
									return new window.ActiveXObject("Microsoft.XMLHTTP"); // 9749
								} catch (e) {} // 9750
							} // 9751
							// 9752
							// 9753
							// 9754
							// 9755
							// Install script dataType                                                                                           // 9756
							jQuery.ajaxSetup({ // 9757
								accepts: { // 9758
									script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" // 9759
								}, // 9760
								contents: { // 9761
									script: /(?:java|ecma)script/ // 9762
								}, // 9763
								converters: { // 9764
									"text script": function (text) {
										// 9765
										jQuery.globalEval(text); // 9766
										return text; // 9767
									} // 9768
									// 9769
								} }); // 9770
							// 9771
							// Handle cache's special case and global                                                                            // 9772
							jQuery.ajaxPrefilter("script", function (s) {
								// 9773
								if (s.cache === undefined) {
									// 9774
									s.cache = false; // 9775
								} // 9776
								if (s.crossDomain) {
									// 9777
									s.type = "GET"; // 9778
									s.global = false; // 9779
								} // 9780
							}); // 9781
							// 9782
							// Bind script tag hack transport                                                                                    // 9783
							jQuery.ajaxTransport("script", function (s) {
								// 9784
								// 9785
								// This transport only deals with cross domain requests                                                             // 9786
								if (s.crossDomain) {
									// 9787
									// 9788
									var script,
									    // 9789
									head = document.head || jQuery("head")[0] || document.documentElement; // 9790
									// 9791
									return { // 9792
										// 9793
										send: function (_, callback) {
											// 9794
											// 9795
											script = document.createElement("script"); // 9796
											// 9797
											script.async = true; // 9798
											// 9799
											if (s.scriptCharset) {
												// 9800
												script.charset = s.scriptCharset; // 9801
											} // 9802
											// 9803
											script.src = s.url; // 9804
											// 9805
											// Attach handlers for all browsers                                                                              // 9806
											script.onload = script.onreadystatechange = function (_, isAbort) {
												// 9807
												// 9808
												if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
													// 9809
													// 9810
													// Handle memory leak in IE                                                                                    // 9811
													script.onload = script.onreadystatechange = null; // 9812
													// 9813
													// Remove the script                                                                                           // 9814
													if (script.parentNode) {
														// 9815
														script.parentNode.removeChild(script); // 9816
													} // 9817
													// 9818
													// Dereference the script                                                                                      // 9819
													script = null; // 9820
													// 9821
													// Callback if not abort                                                                                       // 9822
													if (!isAbort) {
														// 9823
														callback(200, "success"); // 9824
													} // 9825
												} // 9826
											}; // 9827
											// 9828
											// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending                                        // 9829
											// Use native DOM manipulation to avoid our domManip AJAX trickery                                               // 9830
											head.insertBefore(script, head.firstChild); // 9831
										}, // 9832
										// 9833
										abort: function () {
											// 9834
											if (script) {
												// 9835
												script.onload(undefined, true); // 9836
											} // 9837
										} // 9838
									}; // 9839
								} // 9840
							}); // 9841
							// 9842
							// 9843
							// 9844
							// 9845
							var oldCallbacks = [],
							    // 9846
							rjsonp = /(=)\?(?=&|$)|\?\?/; // 9847
							// 9848
							// Default jsonp settings                                                                                            // 9849
							jQuery.ajaxSetup({ // 9850
								jsonp: "callback", // 9851
								jsonpCallback: function () {
									// 9852
									var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++; // 9853
									this[callback] = true; // 9854
									return callback; // 9855
								} // 9856
							}); // 9857
							// 9858
							// Detect, normalize options and install callbacks for jsonp requests                                                // 9859
							jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
								// 9860
								// 9861
								var callbackName,
								    overwritten,
								    responseContainer,
								    // 9862
								jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? // 9863
								"url" : // 9864
								typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"); // 9866
								// 9867
								// Handle iff the expected data type is "jsonp" or we have a parameter to set                                       // 9868
								if (jsonProp || s.dataTypes[0] === "jsonp") {
									// 9869
									// 9870
									// Get callback name, remembering preexisting value associated with it                                             // 9871
									callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? // 9872
									s.jsonpCallback() : // 9873
									s.jsonpCallback; // 9874
									// 9875
									// Insert callback into url or form data                                                                           // 9876
									if (jsonProp) {
										// 9877
										s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName); // 9878
									} else if (s.jsonp !== false) {
										// 9879
										s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName; // 9880
									} // 9881
									// 9882
									// Use data converter to retrieve json after script execution                                                      // 9883
									s.converters["script json"] = function () {
										// 9884
										if (!responseContainer) {
											// 9885
											jQuery.error(callbackName + " was not called"); // 9886
										} // 9887
										return responseContainer[0]; // 9888
									}; // 9889
									// 9890
									// force json dataType                                                                                             // 9891
									s.dataTypes[0] = "json"; // 9892
									// 9893
									// Install callback                                                                                                // 9894
									overwritten = window[callbackName]; // 9895
									window[callbackName] = function () {
										// 9896
										responseContainer = arguments; // 9897
									}; // 9898
									// 9899
									// Clean-up function (fires after converters)                                                                      // 9900
									jqXHR.always(function () {
										// 9901
										// Restore preexisting value                                                                                      // 9902
										window[callbackName] = overwritten; // 9903
										// 9904
										// Save back as free                                                                                              // 9905
										if (s[callbackName]) {
											// 9906
											// make sure that re-using the options doesn't screw things around                                               // 9907
											s.jsonpCallback = originalSettings.jsonpCallback; // 9908
											// 9909
											// save the callback name for future use                                                                         // 9910
											oldCallbacks.push(callbackName); // 9911
										} // 9912
										// 9913
										// Call if it was a function and we have a response                                                               // 9914
										if (responseContainer && jQuery.isFunction(overwritten)) {
											// 9915
											overwritten(responseContainer[0]); // 9916
										} // 9917
										// 9918
										responseContainer = overwritten = undefined; // 9919
									}); // 9920
									// 9921
									// Delegate to script                                                                                              // 9922
									return "script"; // 9923
								} // 9924
							}); // 9925
							// 9926
							// 9927
							// 9928
							// 9929
							// data: string of html                                                                                              // 9930
							// context (optional): If specified, the fragment will be created in this context, defaults to document              // 9931
							// keepScripts (optional): If true, will include scripts passed in the html string                                   // 9932
							jQuery.parseHTML = function (data, context, keepScripts) {
								// 9933
								if (!data || typeof data !== "string") {
									// 9934
									return null; // 9935
								} // 9936
								if (typeof context === "boolean") {
									// 9937
									keepScripts = context; // 9938
									context = false; // 9939
								} // 9940
								context = context || document; // 9941
								// 9942
								var parsed = rsingleTag.exec(data),
								    // 9943
								scripts = !keepScripts && []; // 9944
								// 9945
								// Single tag                                                                                                       // 9946
								if (parsed) {
									// 9947
									return [context.createElement(parsed[1])]; // 9948
								} // 9949
								// 9950
								parsed = jQuery.buildFragment([data], context, scripts); // 9951
								// 9952
								if (scripts && scripts.length) {
									// 9953
									jQuery(scripts).remove(); // 9954
								} // 9955
								// 9956
								return jQuery.merge([], parsed.childNodes); // 9957
							}; // 9958
							// 9959
							// 9960
							// Keep a copy of the old load method                                                                                // 9961
							var _load = jQuery.fn.load; // 9962
							// 9963
							/**                                                                                                                  // 9964
        * Load a url into a page                                                                                            // 9965
        */ // 9966
							jQuery.fn.load = function (url, params, callback) {
								// 9967
								if (typeof url !== "string" && _load) {
									// 9968
									return _load.apply(this, arguments); // 9969
								} // 9970
								// 9971
								var selector,
								    response,
								    type,
								    // 9972
								self = this,
								    // 9973
								off = url.indexOf(" "); // 9974
								// 9975
								if (off >= 0) {
									// 9976
									selector = jQuery.trim(url.slice(off, url.length)); // 9977
									url = url.slice(0, off); // 9978
								} // 9979
								// 9980
								// If it's a function                                                                                               // 9981
								if (jQuery.isFunction(params)) {
									// 9982
									// 9983
									// We assume that it's the callback                                                                                // 9984
									callback = params; // 9985
									params = undefined; // 9986
									// 9987
									// Otherwise, build a param string                                                                                  // 9988
								} else if (params && typeof params === "object") {
									// 9989
									type = "POST"; // 9990
								} // 9991
								// 9992
								// If we have elements to modify, make the request                                                                  // 9993
								if (self.length > 0) {
									// 9994
									jQuery.ajax({ // 9995
										url: url, // 9996
										// 9997
										// if "type" variable is undefined, then "GET" method will be used                                                // 9998
										type: type, // 9999
										dataType: "html", // 10000
										data: params // 10001
									}).done(function (responseText) {
										// 10002
										// 10003
										// Save response for use in complete callback                                                                     // 10004
										response = arguments; // 10005
										// 10006
										self.html(selector ? // 10007
										// 10008
										// If a selector was specified, locate the right elements in a dummy div                                         // 10009
										// Exclude scripts to avoid IE 'Permission Denied' errors                                                        // 10010
										jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // 10011
										// 10012
										// Otherwise use the full result                                                                                 // 10013
										responseText); // 10014
										// 10015
									}).complete(callback && function (jqXHR, status) {
										// 10016
										self.each(callback, response || [jqXHR.responseText, status, jqXHR]); // 10017
									}); // 10018
								} // 10019
								// 10020
								return this; // 10021
							}; // 10022
							// 10023
							// 10024
							// 10025
							// 10026
							// Attach a bunch of functions for handling common AJAX events                                                       // 10027
							jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
								jQuery.fn[type] = function (fn) {
									// 10029
									return this.on(type, fn); // 10030
								}; // 10031
							}); // 10032
							// 10033
							// 10034
							// 10035
							// 10036
							jQuery.expr.filters.animated = function (elem) {
								// 10037
								return jQuery.grep(jQuery.timers, function (fn) {
									// 10038
									return elem === fn.elem; // 10039
								}).length; // 10040
							}; // 10041
							// 10042
							// 10043
							// 10044
							// 10045
							// 10046
							var docElem = window.document.documentElement; // 10047
							// 10048
							/**                                                                                                                  // 10049
        * Gets a window from an element                                                                                     // 10050
        */ // 10051
							function getWindow(elem) {
								// 10052
								return jQuery.isWindow(elem) ? // 10053
								elem : // 10054
								elem.nodeType === 9 ? // 10055
								elem.defaultView || elem.parentWindow : // 10056
								false; // 10057
							} // 10058
							// 10059
							jQuery.offset = { // 10060
								setOffset: function (elem, options, i) {
									// 10061
									var curPosition,
									    curLeft,
									    curCSSTop,
									    curTop,
									    curOffset,
									    curCSSLeft,
									    calculatePosition,
									    // 10062
									position = jQuery.css(elem, "position"),
									    // 10063
									curElem = jQuery(elem),
									    // 10064
									props = {}; // 10065
									// 10066
									// set position first, in-case top/left are set even on static elem                                                // 10067
									if (position === "static") {
										// 10068
										elem.style.position = "relative"; // 10069
									} // 10070
									// 10071
									curOffset = curElem.offset(); // 10072
									curCSSTop = jQuery.css(elem, "top"); // 10073
									curCSSLeft = jQuery.css(elem, "left"); // 10074
									calculatePosition = (position === "absolute" || position === "fixed") && // 10075
									jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1; // 10076
									// 10077
									// need to be able to calculate position if either top or left is auto and position is either absolute or fixed    // 10078
									if (calculatePosition) {
										// 10079
										curPosition = curElem.position(); // 10080
										curTop = curPosition.top; // 10081
										curLeft = curPosition.left; // 10082
									} else {
										// 10083
										curTop = parseFloat(curCSSTop) || 0; // 10084
										curLeft = parseFloat(curCSSLeft) || 0; // 10085
									} // 10086
									// 10087
									if (jQuery.isFunction(options)) {
										// 10088
										options = options.call(elem, i, curOffset); // 10089
									} // 10090
									// 10091
									if (options.top != null) {
										// 10092
										props.top = options.top - curOffset.top + curTop; // 10093
									} // 10094
									if (options.left != null) {
										// 10095
										props.left = options.left - curOffset.left + curLeft; // 10096
									} // 10097
									// 10098
									if ("using" in options) {
										// 10099
										options.using.call(elem, props); // 10100
									} else {
										// 10101
										curElem.css(props); // 10102
									} // 10103
								} // 10104
							}; // 10105
							// 10106
							jQuery.fn.extend({ // 10107
								offset: function (options) {
									// 10108
									if (arguments.length) {
										// 10109
										return options === undefined ? // 10110
										this : // 10111
										this.each(function (i) {
											// 10112
											jQuery.offset.setOffset(this, options, i); // 10113
										}); // 10114
									} // 10115
									// 10116
									var docElem,
									    win,
									    // 10117
									box = { top: 0, left: 0 },
									    // 10118
									elem = this[0],
									    // 10119
									doc = elem && elem.ownerDocument; // 10120
									// 10121
									if (!doc) {
										// 10122
										return; // 10123
									} // 10124
									// 10125
									docElem = doc.documentElement; // 10126
									// 10127
									// Make sure it's not a disconnected DOM node                                                                      // 10128
									if (!jQuery.contains(docElem, elem)) {
										// 10129
										return box; // 10130
									} // 10131
									// 10132
									// If we don't have gBCR, just use 0,0 rather than error                                                           // 10133
									// BlackBerry 5, iOS 3 (original iPhone)                                                                           // 10134
									if (typeof elem.getBoundingClientRect !== strundefined) {
										// 10135
										box = elem.getBoundingClientRect(); // 10136
									} // 10137
									win = getWindow(doc); // 10138
									return { // 10139
										top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0), // 10140
										left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0) // 10141
									}; // 10142
								}, // 10143
								// 10144
								position: function () {
									// 10145
									if (!this[0]) {
										// 10146
										return; // 10147
									} // 10148
									// 10149
									var offsetParent,
									    offset,
									    // 10150
									parentOffset = { top: 0, left: 0 },
									    // 10151
									elem = this[0]; // 10152
									// 10153
									// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent    // 10154
									if (jQuery.css(elem, "position") === "fixed") {
										// 10155
										// we assume that getBoundingClientRect is available when computed position is fixed                              // 10156
										offset = elem.getBoundingClientRect(); // 10157
									} else {
										// 10158
										// Get *real* offsetParent                                                                                        // 10159
										offsetParent = this.offsetParent(); // 10160
										// 10161
										// Get correct offsets                                                                                            // 10162
										offset = this.offset(); // 10163
										if (!jQuery.nodeName(offsetParent[0], "html")) {
											// 10164
											parentOffset = offsetParent.offset(); // 10165
										} // 10166
										// 10167
										// Add offsetParent borders                                                                                       // 10168
										parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true); // 10169
										parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true); // 10170
									} // 10171
									// 10172
									// Subtract parent offsets and element margins                                                                     // 10173
									// note: when an element has margin: auto the offsetLeft and marginLeft                                            // 10174
									// are the same in Safari causing offset.left to incorrectly be 0                                                  // 10175
									return { // 10176
										top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true), // 10177
										left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true) // 10178
									}; // 10179
								}, // 10180
								// 10181
								offsetParent: function () {
									// 10182
									return this.map(function () {
										// 10183
										var offsetParent = this.offsetParent || docElem; // 10184
										// 10185
										while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
											offsetParent = offsetParent.offsetParent; // 10187
										} // 10188
										return offsetParent || docElem; // 10189
									}); // 10190
								} // 10191
							}); // 10192
							// 10193
							// Create scrollLeft and scrollTop methods                                                                           // 10194
							jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
								// 10195
								var top = /Y/.test(prop); // 10196
								// 10197
								jQuery.fn[method] = function (val) {
									// 10198
									return access(this, function (elem, method, val) {
										// 10199
										var win = getWindow(elem); // 10200
										// 10201
										if (val === undefined) {
											// 10202
											return win ? prop in win ? win[prop] : // 10203
											win.document.documentElement[method] : // 10204
											elem[method]; // 10205
										} // 10206
										// 10207
										if (win) {
											// 10208
											win.scrollTo( // 10209
											!top ? val : jQuery(win).scrollLeft(), // 10210
											top ? val : jQuery(win).scrollTop() // 10211
											); // 10212
											// 10213
										} else {
											// 10214
											elem[method] = val; // 10215
										} // 10216
									}, method, val, arguments.length, null); // 10217
								}; // 10218
							}); // 10219
							// 10220
							// Add the top/left cssHooks using jQuery.fn.position                                                                // 10221
							// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                         // 10222
							// getComputedStyle returns percent when specified for top/left/bottom/right                                         // 10223
							// rather than make the css module depend on the offset module, we just check for it here                            // 10224
							jQuery.each(["top", "left"], function (i, prop) {
								// 10225
								jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, // 10226
								function (elem, computed) {
									// 10227
									if (computed) {
										// 10228
										computed = curCSS(elem, prop); // 10229
										// if curCSS returns percentage, fallback to offset                                                              // 10230
										return rnumnonpx.test(computed) ? // 10231
										jQuery(elem).position()[prop] + "px" : // 10232
										computed; // 10233
									} // 10234
								} // 10235
								); // 10236
							}); // 10237
							// 10238
							// 10239
							// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                                 // 10240
							jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
								// 10241
								jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
									// 10242
									// margin is only for outerHeight, outerWidth                                                                      // 10243
									jQuery.fn[funcName] = function (margin, value) {
										// 10244
										var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
										    // 10245
										extra = defaultExtra || (margin === true || value === true ? "margin" : "border"); // 10246
										// 10247
										return access(this, function (elem, type, value) {
											// 10248
											var doc; // 10249
											// 10250
											if (jQuery.isWindow(elem)) {
												// 10251
												// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                                // 10252
												// isn't a whole lot we can do. See pull request at this URL for discussion:                                    // 10253
												// https://github.com/jquery/jquery/pull/764                                                                    // 10254
												return elem.document.documentElement["client" + name]; // 10255
											} // 10256
											// 10257
											// Get document width or height                                                                                  // 10258
											if (elem.nodeType === 9) {
												// 10259
												doc = elem.documentElement; // 10260
												// 10261
												// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest           // 10262
												// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.     // 10263
												return Math.max( // 10264
												elem.body["scroll" + name], doc["scroll" + name], // 10265
												elem.body["offset" + name], doc["offset" + name], // 10266
												doc["client" + name] // 10267
												); // 10268
											} // 10269
											// 10270
											return value === undefined ? // 10271
											// Get width or height on the element, requesting but not forcing parseFloat                                    // 10272
											jQuery.css(elem, type, extra) : // 10273
											// 10274
											// Set width or height on the element                                                                           // 10275
											jQuery.style(elem, type, value, extra); // 10276
										}, type, chainable ? margin : undefined, chainable, null); // 10277
									}; // 10278
								}); // 10279
							}); // 10280
							// 10281
							// 10282
							// The number of elements contained in the matched element set                                                       // 10283
							jQuery.fn.size = function () {
								// 10284
								return this.length; // 10285
							}; // 10286
							// 10287
							jQuery.fn.andSelf = jQuery.fn.addBack; // 10288
							// 10289
							// 10290
							// 10291
							// 10292
							// Register as a named AMD module, since jQuery can be concatenated with other                                       // 10293
							// files that may use define, but not via a proper concatenation script that                                         // 10294
							// understands anonymous AMD modules. A named AMD is safest and most robust                                          // 10295
							// way to register. Lowercase jquery is used because AMD module names are                                            // 10296
							// derived from file names, and jQuery is normally delivered in a lowercase                                          // 10297
							// file name. Do this after creating the global so that if an AMD module wants                                       // 10298
							// to call noConflict to hide this version of jQuery, it will work.                                                  // 10299
							// 10300
							// Note that for maximum portability, libraries that are not jQuery should                                           // 10301
							// declare themselves as anonymous modules, and avoid setting a global if an                                         // 10302
							// AMD loader is present. jQuery is a special case. For more information, see                                        // 10303
							// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon                                   // 10304
							// 10305
							if (typeof define === "function" && define.amd) {
								// 10306
								define("jquery", [], function () {
									// 10307
									return jQuery; // 10308
								}); // 10309
							} // 10310
							// 10311
							// 10312
							// 10313
							// 10314
							var // 10315
							// Map over jQuery in case of overwrite                                                                             // 10316
							_jQuery = window.jQuery,
							    // 10317
							// 10318
							// Map over the $ in case of overwrite                                                                              // 10319
							_$ = window.$; // 10320
							// 10321
							jQuery.noConflict = function (deep) {
								// 10322
								if (window.$ === jQuery) {
									// 10323
									window.$ = _$; // 10324
								} // 10325
								// 10326
								if (deep && window.jQuery === jQuery) {
									// 10327
									window.jQuery = _jQuery; // 10328
								} // 10329
								// 10330
								return jQuery; // 10331
							}; // 10332
							// 10333
							// Expose jQuery and $ identifiers, even in                                                                          // 10334
							// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)                                                 // 10335
							// and CommonJS for browser emulators (#13566)                                                                       // 10336
							if (typeof noGlobal === strundefined) {
								// 10337
								window.jQuery = window.$ = jQuery; // 10338
							} // 10339
							// 10340
							// 10341
							// 10342
							// 10343
							return jQuery; // 10344
							// 10345
						}); // 10346
						// 10347
						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					} } } } }, {
		"extensions": [".js", ".json"]
	});
	var _exports2 = _require2("./node_modules/meteor/jquery/main.js");

	/* Exports */
	if (typeof Package === 'undefined') Package = {};
	(function (pkg, symbols) {
		for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
	})(Package.jquery = _exports2, {
		$: $,
		jQuery: jQuery
	});
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var MongoID = Package['mongo-id'].MongoID;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var _ = Package.underscore._;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var ObserveSequence, seqChangedToEmpty, seqChangedToArray, seqChangedToCursor;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/observe-sequence/observe_sequence.js                                 //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    var warn = function () {
      // 1
      if (ObserveSequence._suppressWarnings) {
        // 2
        ObserveSequence._suppressWarnings--; // 3
      } else {
        // 4
        if (typeof console !== 'undefined' && console.warn) // 5
          console.warn.apply(console, arguments); // 6
        // 7
        ObserveSequence._loggedWarnings++; // 8
      } // 9
    }; // 10
    // 11
    // isArray returns true for arrays of these types:                               // 12
    // standard arrays: instanceof Array === true, _.isArray(arr) === true           // 13
    // vm generated arrays: instanceOf Array === false, _.isArray(arr) === true      // 14
    // subclassed arrays: instanceof Array === true, _.isArray(arr) === false        // 15
    // see specific tests                                                            // 16
    function isArray(arr) {
      // 17
      return arr instanceof Array || _.isArray(arr); // 18
    } // 19
    // 20
    var idStringify = MongoID.idStringify; // 21
    var idParse = MongoID.idParse; // 22
    // 23
    ObserveSequence = { // 24
      _suppressWarnings: 0, // 25
      _loggedWarnings: 0, // 26
      // 27
      // A mechanism similar to cursor.observe which receives a reactive             // 28
      // function returning a sequence type and firing appropriate callbacks         // 29
      // when the value changes.                                                     // 30
      //                                                                             // 31
      // @param sequenceFunc {Function} a reactive function returning a              // 32
      //     sequence type. The currently supported sequence types are:              // 33
      //     Array, Cursor, and null.                                                // 34
      //                                                                             // 35
      // @param callbacks {Object} similar to a specific subset of                   // 36
      //     callbacks passed to `cursor.observe`                                    // 37
      //     (http://docs.meteor.com/#observe), with minor variations to             // 38
      //     support the fact that not all sequences contain objects with            // 39
      //     _id fields.  Specifically:                                              // 40
      //                                                                             // 41
      //     * addedAt(id, item, atIndex, beforeId)                                  // 42
      //     * changedAt(id, newItem, oldItem, atIndex)                              // 43
      //     * removedAt(id, oldItem, atIndex)                                       // 44
      //     * movedTo(id, item, fromIndex, toIndex, beforeId)                       // 45
      //                                                                             // 46
      // @returns {Object(stop: Function)} call 'stop' on the return value           // 47
      //     to stop observing this sequence function.                               // 48
      //                                                                             // 49
      // We don't make any assumptions about our ability to compare sequence         // 50
      // elements (ie, we don't assume EJSON.equals works; maybe there is extra      // 51
      // state/random methods on the objects) so unlike cursor.observe, we may       // 52
      // sometimes call changedAt() when nothing actually changed.                   // 53
      // XXX consider if we *can* make the stronger assumption and avoid             // 54
      //     no-op changedAt calls (in some cases?)                                  // 55
      //                                                                             // 56
      // XXX currently only supports the callbacks used by our                       // 57
      // implementation of {{#each}}, but this can be expanded.                      // 58
      //                                                                             // 59
      // XXX #each doesn't use the indices (though we'll eventually need             // 60
      // a way to get them when we support `@index`), but calling                    // 61
      // `cursor.observe` causes the index to be calculated on every                 // 62
      // callback using a linear scan (unless you turn it off by passing             // 63
      // `_no_indices`).  Any way to avoid calculating indices on a pure             // 64
      // cursor observe like we used to?                                             // 65
      observe: function (sequenceFunc, callbacks) {
        // 66
        var lastSeq = null; // 67
        var activeObserveHandle = null; // 68
        // 69
        // 'lastSeqArray' contains the previous value of the sequence                // 70
        // we're observing. It is an array of objects with '_id' and                 // 71
        // 'item' fields.  'item' is the element in the array, or the                // 72
        // document in the cursor.                                                   // 73
        //                                                                           // 74
        // '_id' is whichever of the following is relevant, unless it has            // 75
        // already appeared -- in which case it's randomly generated.                // 76
        //                                                                           // 77
        // * if 'item' is an object:                                                 // 78
        //   * an '_id' field, if present                                            // 79
        //   * otherwise, the index in the array                                     // 80
        //                                                                           // 81
        // * if 'item' is a number or string, use that value                         // 82
        //                                                                           // 83
        // XXX this can be generalized by allowing {{#each}} to accept a             // 84
        // general 'key' argument which could be a function, a dotted                // 85
        // field name, or the special @index value.                                  // 86
        var lastSeqArray = []; // elements are objects of form {_id, item}           // 87
        var computation = Tracker.autorun(function () {
          // 88
          var seq = sequenceFunc(); // 89
          // 90
          Tracker.nonreactive(function () {
            // 91
            var seqArray; // same structure as `lastSeqArray` above.                 // 92
            // 93
            if (activeObserveHandle) {
              // 94
              // If we were previously observing a cursor, replace lastSeqArray with
              // more up-to-date information.  Then stop the old observe.            // 96
              lastSeqArray = _.map(lastSeq.fetch(), function (doc) {
                // 97
                return { _id: doc._id, item: doc }; // 98
              }); // 99
              activeObserveHandle.stop(); // 100
              activeObserveHandle = null; // 101
            } // 102
            // 103
            if (!seq) {
              // 104
              seqArray = seqChangedToEmpty(lastSeqArray, callbacks); // 105
            } else if (isArray(seq)) {
              // 106
              seqArray = seqChangedToArray(lastSeqArray, seq, callbacks); // 107
            } else if (isStoreCursor(seq)) {
              // 108
              var result /* [seqArray, activeObserveHandle] */ = // 109
              seqChangedToCursor(lastSeqArray, seq, callbacks); // 110
              seqArray = result[0]; // 111
              activeObserveHandle = result[1]; // 112
            } else {
              // 113
              throw badSequenceError(); // 114
            } // 115
            // 116
            diffArray(lastSeqArray, seqArray, callbacks); // 117
            lastSeq = seq; // 118
            lastSeqArray = seqArray; // 119
          }); // 120
        }); // 121
        // 122
        return { // 123
          stop: function () {
            // 124
            computation.stop(); // 125
            if (activeObserveHandle) // 126
              activeObserveHandle.stop(); // 127
          } // 128
        }; // 129
      }, // 130
      // 131
      // Fetch the items of `seq` into an array, where `seq` is of one of the        // 132
      // sequence types accepted by `observe`.  If `seq` is a cursor, a              // 133
      // dependency is established.                                                  // 134
      fetch: function (seq) {
        // 135
        if (!seq) {
          // 136
          return []; // 137
        } else if (isArray(seq)) {
          // 138
          return seq; // 139
        } else if (isStoreCursor(seq)) {
          // 140
          return seq.fetch(); // 141
        } else {
          // 142
          throw badSequenceError(); // 143
        } // 144
      } // 145
    }; // 146
    // 147
    var badSequenceError = function () {
      // 148
      return new Error("{{#each}} currently only accepts " + // 149
      "arrays, cursors or falsey values."); // 150
    }; // 151
    // 152
    var isStoreCursor = function (cursor) {
      // 153
      return cursor && _.isObject(cursor) && // 154
      _.isFunction(cursor.observe) && _.isFunction(cursor.fetch); // 155
    }; // 156
    // 157
    // Calculates the differences between `lastSeqArray` and                         // 158
    // `seqArray` and calls appropriate functions from `callbacks`.                  // 159
    // Reuses Minimongo's diff algorithm implementation.                             // 160
    var diffArray = function (lastSeqArray, seqArray, callbacks) {
      // 161
      var diffFn = Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges; // 162
      var oldIdObjects = []; // 163
      var newIdObjects = []; // 164
      var posOld = {}; // maps from idStringify'd ids                                // 165
      var posNew = {}; // ditto                                                      // 166
      var posCur = {}; // 167
      var lengthCur = lastSeqArray.length; // 168
      // 169
      _.each(seqArray, function (doc, i) {
        // 170
        newIdObjects.push({ _id: doc._id }); // 171
        posNew[idStringify(doc._id)] = i; // 172
      }); // 173
      _.each(lastSeqArray, function (doc, i) {
        // 174
        oldIdObjects.push({ _id: doc._id }); // 175
        posOld[idStringify(doc._id)] = i; // 176
        posCur[idStringify(doc._id)] = i; // 177
      }); // 178
      // 179
      // Arrays can contain arbitrary objects. We don't diff the                     // 180
      // objects. Instead we always fire 'changedAt' callback on every               // 181
      // object. The consumer of `observe-sequence` should deal with                 // 182
      // it appropriately.                                                           // 183
      diffFn(oldIdObjects, newIdObjects, { // 184
        addedBefore: function (id, doc, before) {
          // 185
          var position = before ? posCur[idStringify(before)] : lengthCur; // 186
          // 187
          if (before) {
            // 188
            // If not adding at the end, we need to update indexes.                  // 189
            // XXX this can still be improved greatly!                               // 190
            _.each(posCur, function (pos, id) {
              // 191
              if (pos >= position) // 192
                posCur[id]++; // 193
            }); // 194
          } // 195
          // 196
          lengthCur++; // 197
          posCur[idStringify(id)] = position; // 198
          // 199
          callbacks.addedAt( // 200
          id, // 201
          seqArray[posNew[idStringify(id)]].item, // 202
          position, // 203
          before); // 204
        }, // 205
        movedBefore: function (id, before) {
          // 206
          if (id === before) // 207
            return; // 208
          // 209
          var oldPosition = posCur[idStringify(id)]; // 210
          var newPosition = before ? posCur[idStringify(before)] : lengthCur; // 211
          // 212
          // Moving the item forward. The new element is losing one position as it   // 213
          // was removed from the old position before being inserted at the new      // 214
          // position.                                                               // 215
          // Ex.:   0  *1*  2   3   4                                                // 216
          //        0   2   3  *1*  4                                                // 217
          // The original issued callback is "1" before "4".                         // 218
          // The position of "1" is 1, the position of "4" is 4.                     // 219
          // The generated move is (1) -> (3)                                        // 220
          if (newPosition > oldPosition) {
            // 221
            newPosition--; // 222
          } // 223
          // 224
          // Fix up the positions of elements between the old and the new positions  // 225
          // of the moved element.                                                   // 226
          //                                                                         // 227
          // There are two cases:                                                    // 228
          //   1. The element is moved forward. Then all the positions in between    // 229
          //   are moved back.                                                       // 230
          //   2. The element is moved back. Then the positions in between *and* the
          //   element that is currently standing on the moved element's future      // 232
          //   position are moved forward.                                           // 233
          _.each(posCur, function (elCurPosition, id) {
            // 234
            if (oldPosition < elCurPosition && elCurPosition < newPosition) // 235
              posCur[id]--; // 236
            else if (newPosition <= elCurPosition && elCurPosition < oldPosition) // 237
                posCur[id]++; // 238
          }); // 239
          // 240
          // Finally, update the position of the moved element.                      // 241
          posCur[idStringify(id)] = newPosition; // 242
          // 243
          callbacks.movedTo( // 244
          id, // 245
          seqArray[posNew[idStringify(id)]].item, // 246
          oldPosition, // 247
          newPosition, // 248
          before); // 249
        }, // 250
        removed: function (id) {
          // 251
          var prevPosition = posCur[idStringify(id)]; // 252
          // 253
          _.each(posCur, function (pos, id) {
            // 254
            if (pos >= prevPosition) // 255
              posCur[id]--; // 256
          }); // 257
          // 258
          delete posCur[idStringify(id)]; // 259
          lengthCur--; // 260
          // 261
          callbacks.removedAt( // 262
          id, // 263
          lastSeqArray[posOld[idStringify(id)]].item, // 264
          prevPosition); // 265
        } // 266
      }); // 267
      // 268
      _.each(posNew, function (pos, idString) {
        // 269
        var id = idParse(idString); // 270
        if (_.has(posOld, idString)) {
          // 271
          // specifically for primitive types, compare equality before               // 272
          // firing the 'changedAt' callback. otherwise, always fire it              // 273
          // because doing a deep EJSON comparison is not guaranteed to              // 274
          // work (an array can contain arbitrary objects, and 'transform'           // 275
          // can be used on cursors). also, deep diffing is not                      // 276
          // necessarily the most efficient (if only a specific subfield             // 277
          // of the object is later accessed).                                       // 278
          var newItem = seqArray[pos].item; // 279
          var oldItem = lastSeqArray[posOld[idString]].item; // 280
          // 281
          if (typeof newItem === 'object' || newItem !== oldItem) // 282
            callbacks.changedAt(id, newItem, oldItem, pos); // 283
        } // 284
      }); // 285
    }; // 286
    // 287
    seqChangedToEmpty = function (lastSeqArray, callbacks) {
      // 288
      return []; // 289
    }; // 290
    // 291
    seqChangedToArray = function (lastSeqArray, array, callbacks) {
      // 292
      var idsUsed = {}; // 293
      var seqArray = _.map(array, function (item, index) {
        // 294
        var id; // 295
        if (typeof item === 'string') {
          // 296
          // ensure not empty, since other layers (eg DomRange) assume this as well  // 297
          id = "-" + item; // 298
        } else if (typeof item === 'number' || // 299
        typeof item === 'boolean' || // 300
        item === undefined || // 301
        item === null) {
          // 302
          id = item; // 303
        } else if (typeof item === 'object') {
          // 304
          id = item && '_id' in item ? item._id : index; // 305
        } else {
          // 306
          throw new Error("{{#each}} doesn't support arrays with " + // 307
          "elements of type " + typeof item); // 308
        } // 309
        // 310
        var idString = idStringify(id); // 311
        if (idsUsed[idString]) {
          // 312
          if (item && typeof item === 'object' && '_id' in item) // 313
            warn("duplicate id " + id + " in", array); // 314
          id = Random.id(); // 315
        } else {
          // 316
          idsUsed[idString] = true; // 317
        } // 318
        // 319
        return { _id: id, item: item }; // 320
      }); // 321
      // 322
      return seqArray; // 323
    }; // 324
    // 325
    seqChangedToCursor = function (lastSeqArray, cursor, callbacks) {
      // 326
      var initial = true; // are we observing initial data from cursor?              // 327
      var seqArray = []; // 328
      // 329
      var observeHandle = cursor.observe({ // 330
        addedAt: function (document, atIndex, before) {
          // 331
          if (initial) {
            // 332
            // keep track of initial data so that we can diff once                   // 333
            // we exit `observe`.                                                    // 334
            if (before !== null) // 335
              throw new Error("Expected initial data from observe in order"); // 336
            seqArray.push({ _id: document._id, item: document }); // 337
          } else {
            // 338
            callbacks.addedAt(document._id, document, atIndex, before); // 339
          } // 340
        }, // 341
        changedAt: function (newDocument, oldDocument, atIndex) {
          // 342
          callbacks.changedAt(newDocument._id, newDocument, oldDocument, // 343
          atIndex); // 344
        }, // 345
        removedAt: function (oldDocument, atIndex) {
          // 346
          callbacks.removedAt(oldDocument._id, oldDocument, atIndex); // 347
        }, // 348
        movedTo: function (document, fromIndex, toIndex, before) {
          // 349
          callbacks.movedTo( // 350
          document._id, document, fromIndex, toIndex, before); // 351
        } // 352
      }); // 353
      initial = false; // 354
      // 355
      return [seqArray, observeHandle]; // 356
    }; // 357
    // 358
    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['observe-sequence'] = {}, {
    ObserveSequence: ObserveSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.deps = {}, {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var HTML, IDENTITY, SLICE;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/preamble.js                                                        //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    HTML = {}; // 1
    // 2
    IDENTITY = function (x) {
      return x;
    }; // 3
    SLICE = Array.prototype.slice; // 4
    // 5
    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/visitors.js                                                        //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////// VISITORS                                               // 1
    // 2
    // _assign is like _.extend or the upcoming Object.assign.                            // 3
    // Copy src's own, enumerable properties onto tgt and return                          // 4
    // tgt.                                                                               // 5
    var _hasOwnProperty = Object.prototype.hasOwnProperty; // 6
    var _assign = function (tgt, src) {
      // 7
      for (var k in src) {
        // 8
        if (_hasOwnProperty.call(src, k)) // 9
          tgt[k] = src[k]; // 10
      } // 11
      return tgt; // 12
    }; // 13
    // 14
    HTML.Visitor = function (props) {
      // 15
      _assign(this, props); // 16
    }; // 17
    // 18
    HTML.Visitor.def = function (options) {
      // 19
      _assign(this.prototype, options); // 20
    }; // 21
    // 22
    HTML.Visitor.extend = function (options) {
      // 23
      var curType = this; // 24
      var subType = function HTMLVisitorSubtype() /*arguments*/{
        // 25
        HTML.Visitor.apply(this, arguments); // 26
      }; // 27
      subType.prototype = new curType(); // 28
      subType.extend = curType.extend; // 29
      subType.def = curType.def; // 30
      if (options) // 31
        _assign(subType.prototype, options); // 32
      return subType; // 33
    }; // 34
    // 35
    HTML.Visitor.def({ // 36
      visit: function (content /*, ...*/) {
        // 37
        if (content == null) // 38
          // null or undefined.                                                           // 39
          return this.visitNull.apply(this, arguments); // 40
        // 41
        if (typeof content === 'object') {
          // 42
          if (content.htmljsType) {
            // 43
            switch (content.htmljsType) {// 44
              case HTML.Tag.htmljsType:
                // 45
                return this.visitTag.apply(this, arguments); // 46
              case HTML.CharRef.htmljsType:
                // 47
                return this.visitCharRef.apply(this, arguments); // 48
              case HTML.Comment.htmljsType:
                // 49
                return this.visitComment.apply(this, arguments); // 50
              case HTML.Raw.htmljsType:
                // 51
                return this.visitRaw.apply(this, arguments); // 52
              default:
                // 53
                throw new Error("Unknown htmljs type: " + content.htmljsType); // 54
            } // 55
          } // 56
          // 57
          if (HTML.isArray(content)) // 58
            return this.visitArray.apply(this, arguments); // 59
          // 60
          return this.visitObject.apply(this, arguments); // 61
          // 62
        } else if (typeof content === 'string' || // 63
        typeof content === 'boolean' || // 64
        typeof content === 'number') {
          // 65
          return this.visitPrimitive.apply(this, arguments); // 66
          // 67
        } else if (typeof content === 'function') {
          // 68
          return this.visitFunction.apply(this, arguments); // 69
        } // 70
        // 71
        throw new Error("Unexpected object in htmljs: " + content); // 72
        // 73
      }, // 74
      visitNull: function (nullOrUndefined /*, ...*/) {}, // 75
      visitPrimitive: function (stringBooleanOrNumber /*, ...*/) {}, // 76
      visitArray: function (array /*, ...*/) {}, // 77
      visitComment: function (comment /*, ...*/) {}, // 78
      visitCharRef: function (charRef /*, ...*/) {}, // 79
      visitRaw: function (raw /*, ...*/) {}, // 80
      visitTag: function (tag /*, ...*/) {}, // 81
      visitObject: function (obj /*, ...*/) {
        // 82
        throw new Error("Unexpected object in htmljs: " + obj); // 83
      }, // 84
      visitFunction: function (fn /*, ...*/) {
        // 85
        throw new Error("Unexpected function in htmljs: " + fn); // 86
      } // 87
    }); // 88
    // 89
    HTML.TransformingVisitor = HTML.Visitor.extend(); // 90
    HTML.TransformingVisitor.def({ // 91
      visitNull: IDENTITY, // 92
      visitPrimitive: IDENTITY, // 93
      visitArray: function (array /*, ...*/) {
        // 94
        var argsCopy = SLICE.call(arguments); // 95
        var result = array; // 96
        for (var i = 0; i < array.length; i++) {
          // 97
          var oldItem = array[i]; // 98
          argsCopy[0] = oldItem; // 99
          var newItem = this.visit.apply(this, argsCopy); // 100
          if (newItem !== oldItem) {
            // 101
            // copy `array` on write                                                      // 102
            if (result === array) // 103
              result = array.slice(); // 104
            result[i] = newItem; // 105
          } // 106
        } // 107
        return result; // 108
      }, // 109
      visitComment: IDENTITY, // 110
      visitCharRef: IDENTITY, // 111
      visitRaw: IDENTITY, // 112
      visitObject: IDENTITY, // 113
      visitFunction: IDENTITY, // 114
      visitTag: function (tag /*, ...*/) {
        // 115
        var oldChildren = tag.children; // 116
        var argsCopy = SLICE.call(arguments); // 117
        argsCopy[0] = oldChildren; // 118
        var newChildren = this.visitChildren.apply(this, argsCopy); // 119
        // 120
        var oldAttrs = tag.attrs; // 121
        argsCopy[0] = oldAttrs; // 122
        var newAttrs = this.visitAttributes.apply(this, argsCopy); // 123
        // 124
        if (newAttrs === oldAttrs && newChildren === oldChildren) // 125
          return tag; // 126
        // 127
        var newTag = HTML.getTag(tag.tagName).apply(null, newChildren); // 128
        newTag.attrs = newAttrs; // 129
        return newTag; // 130
      }, // 131
      visitChildren: function (children /*, ...*/) {
        // 132
        return this.visitArray.apply(this, arguments); // 133
      }, // 134
      // Transform the `.attrs` property of a tag, which may be a dictionary,             // 135
      // an array, or in some uses, a foreign object (such as                             // 136
      // a template tag).                                                                 // 137
      visitAttributes: function (attrs /*, ...*/) {
        // 138
        if (HTML.isArray(attrs)) {
          // 139
          var argsCopy = SLICE.call(arguments); // 140
          var result = attrs; // 141
          for (var i = 0; i < attrs.length; i++) {
            // 142
            var oldItem = attrs[i]; // 143
            argsCopy[0] = oldItem; // 144
            var newItem = this.visitAttributes.apply(this, argsCopy); // 145
            if (newItem !== oldItem) {
              // 146
              // copy on write                                                            // 147
              if (result === attrs) // 148
                result = attrs.slice(); // 149
              result[i] = newItem; // 150
            } // 151
          } // 152
          return result; // 153
        } // 154
        // 155
        if (attrs && HTML.isConstructedObject(attrs)) {
          // 156
          throw new Error("The basic HTML.TransformingVisitor does not support " + // 157
          "foreign objects in attributes.  Define a custom " + // 158
          "visitAttributes for this case."); // 159
        } // 160
        // 161
        var oldAttrs = attrs; // 162
        var newAttrs = oldAttrs; // 163
        if (oldAttrs) {
          // 164
          var attrArgs = [null, null]; // 165
          attrArgs.push.apply(attrArgs, arguments); // 166
          for (var k in oldAttrs) {
            // 167
            var oldValue = oldAttrs[k]; // 168
            attrArgs[0] = k; // 169
            attrArgs[1] = oldValue; // 170
            var newValue = this.visitAttribute.apply(this, attrArgs); // 171
            if (newValue !== oldValue) {
              // 172
              // copy on write                                                            // 173
              if (newAttrs === oldAttrs) // 174
                newAttrs = _assign({}, oldAttrs); // 175
              newAttrs[k] = newValue; // 176
            } // 177
          } // 178
        } // 179
        // 180
        return newAttrs; // 181
      }, // 182
      // Transform the value of one attribute name/value in an                            // 183
      // attributes dictionary.                                                           // 184
      visitAttribute: function (name, value, tag /*, ...*/) {
        // 185
        var args = SLICE.call(arguments, 2); // 186
        args[0] = value; // 187
        return this.visit.apply(this, args); // 188
      } // 189
    }); // 190
    // 191
    // 192
    HTML.ToTextVisitor = HTML.Visitor.extend(); // 193
    HTML.ToTextVisitor.def({ // 194
      visitNull: function (nullOrUndefined) {
        // 195
        return ''; // 196
      }, // 197
      visitPrimitive: function (stringBooleanOrNumber) {
        // 198
        var str = String(stringBooleanOrNumber); // 199
        if (this.textMode === HTML.TEXTMODE.RCDATA) {
          // 200
          return str.replace(/&/g, '&amp;').replace(/</g, '&lt;'); // 201
        } else if (this.textMode === HTML.TEXTMODE.ATTRIBUTE) {
          // 202
          // escape `&` and `"` this time, not `&` and `<`                                // 203
          return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;'); // 204
        } else {
          // 205
          return str; // 206
        } // 207
      }, // 208
      visitArray: function (array) {
        // 209
        var parts = []; // 210
        for (var i = 0; i < array.length; i++) // 211
        parts.push(this.visit(array[i])); // 212
        return parts.join(''); // 213
      }, // 214
      visitComment: function (comment) {
        // 215
        throw new Error("Can't have a comment here"); // 216
      }, // 217
      visitCharRef: function (charRef) {
        // 218
        if (this.textMode === HTML.TEXTMODE.RCDATA || // 219
        this.textMode === HTML.TEXTMODE.ATTRIBUTE) {
          // 220
          return charRef.html; // 221
        } else {
          // 222
          return charRef.str; // 223
        } // 224
      }, // 225
      visitRaw: function (raw) {
        // 226
        return raw.value; // 227
      }, // 228
      visitTag: function (tag) {
        // 229
        // Really we should just disallow Tags here.  However, at the                     // 230
        // moment it's useful to stringify any HTML we find.  In                          // 231
        // particular, when you include a template within `{{#markdown}}`,                // 232
        // we render the template as text, and since there's currently                    // 233
        // no way to make the template be *parsed* as text (e.g. `<template               // 234
        // type="text">`), we hackishly support HTML tags in markdown                     // 235
        // in templates by parsing them and stringifying them.                            // 236
        return this.visit(this.toHTML(tag)); // 237
      }, // 238
      visitObject: function (x) {
        // 239
        throw new Error("Unexpected object in htmljs in toText: " + x); // 240
      }, // 241
      toHTML: function (node) {
        // 242
        return HTML.toHTML(node); // 243
      } // 244
    }); // 245
    // 246
    // 247
    // 248
    HTML.ToHTMLVisitor = HTML.Visitor.extend(); // 249
    HTML.ToHTMLVisitor.def({ // 250
      visitNull: function (nullOrUndefined) {
        // 251
        return ''; // 252
      }, // 253
      visitPrimitive: function (stringBooleanOrNumber) {
        // 254
        var str = String(stringBooleanOrNumber); // 255
        return str.replace(/&/g, '&amp;').replace(/</g, '&lt;'); // 256
      }, // 257
      visitArray: function (array) {
        // 258
        var parts = []; // 259
        for (var i = 0; i < array.length; i++) // 260
        parts.push(this.visit(array[i])); // 261
        return parts.join(''); // 262
      }, // 263
      visitComment: function (comment) {
        // 264
        return '<!--' + comment.sanitizedValue + '-->'; // 265
      }, // 266
      visitCharRef: function (charRef) {
        // 267
        return charRef.html; // 268
      }, // 269
      visitRaw: function (raw) {
        // 270
        return raw.value; // 271
      }, // 272
      visitTag: function (tag) {
        // 273
        var attrStrs = []; // 274
        // 275
        var tagName = tag.tagName; // 276
        var children = tag.children; // 277
        // 278
        var attrs = tag.attrs; // 279
        if (attrs) {
          // 280
          attrs = HTML.flattenAttributes(attrs); // 281
          for (var k in attrs) {
            // 282
            if (k === 'value' && tagName === 'textarea') {
              // 283
              children = [attrs[k], children]; // 284
            } else {
              // 285
              var v = this.toText(attrs[k], HTML.TEXTMODE.ATTRIBUTE); // 286
              attrStrs.push(' ' + k + '="' + v + '"'); // 287
            } // 288
          } // 289
        } // 290
        // 291
        var startTag = '<' + tagName + attrStrs.join('') + '>'; // 292
        // 293
        var childStrs = []; // 294
        var content; // 295
        if (tagName === 'textarea') {
          // 296
          // 297
          for (var i = 0; i < children.length; i++) // 298
          childStrs.push(this.toText(children[i], HTML.TEXTMODE.RCDATA)); // 299
          // 300
          content = childStrs.join(''); // 301
          if (content.slice(0, 1) === '\n') // 302
            // TEXTAREA will absorb a newline, so if we see one, add                      // 303
            // another one.                                                               // 304
            content = '\n' + content; // 305
          // 306
        } else {
          // 307
          for (var i = 0; i < children.length; i++) // 308
          childStrs.push(this.visit(children[i])); // 309
          // 310
          content = childStrs.join(''); // 311
        } // 312
        // 313
        var result = startTag + content; // 314
        // 315
        if (children.length || !HTML.isVoidElement(tagName)) {
          // 316
          // "Void" elements like BR are the only ones that don't get a close             // 317
          // tag in HTML5.  They shouldn't have contents, either, so we could             // 318
          // throw an error upon seeing contents here.                                    // 319
          result += '</' + tagName + '>'; // 320
        } // 321
        // 322
        return result; // 323
      }, // 324
      visitObject: function (x) {
        // 325
        throw new Error("Unexpected object in htmljs in toHTML: " + x); // 326
      }, // 327
      toText: function (node, textMode) {
        // 328
        return HTML.toText(node, textMode); // 329
      } // 330
    }); // 331
    // 332
    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/html.js                                                            //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    // 1
    // 2
    HTML.Tag = function () {}; // 3
    HTML.Tag.prototype.tagName = ''; // this will be set per Tag subclass                 // 4
    HTML.Tag.prototype.attrs = null; // 5
    HTML.Tag.prototype.children = Object.freeze ? Object.freeze([]) : []; // 6
    HTML.Tag.prototype.htmljsType = HTML.Tag.htmljsType = ['Tag']; // 7
    // 8
    // Given "p" create the function `HTML.P`.                                            // 9
    var makeTagConstructor = function (tagName) {
      // 10
      // HTMLTag is the per-tagName constructor of a HTML.Tag subclass                    // 11
      var HTMLTag = function () /*arguments*/{
        // 12
        // Work with or without `new`.  If not called with `new`,                         // 13
        // perform instantiation by recursively calling this constructor.                 // 14
        // We can't pass varargs, so pass no args.                                        // 15
        var instance = this instanceof HTML.Tag ? this : new HTMLTag(); // 16
        // 17
        var i = 0; // 18
        var attrs = arguments.length && arguments[0]; // 19
        if (attrs && typeof attrs === 'object') {
          // 20
          // Treat vanilla JS object as an attributes dictionary.                         // 21
          if (!HTML.isConstructedObject(attrs)) {
            // 22
            instance.attrs = attrs; // 23
            i++; // 24
          } else if (attrs instanceof HTML.Attrs) {
            // 25
            var array = attrs.value; // 26
            if (array.length === 1) {
              // 27
              instance.attrs = array[0]; // 28
            } else if (array.length > 1) {
              // 29
              instance.attrs = array; // 30
            } // 31
            i++; // 32
          } // 33
        } // 34
        // 35
        // 36
        // If no children, don't create an array at all, use the prototype's              // 37
        // (frozen, empty) array.  This way we don't create an empty array                // 38
        // every time someone creates a tag without `new` and this constructor            // 39
        // calls itself with no arguments (above).                                        // 40
        if (i < arguments.length) // 41
          instance.children = SLICE.call(arguments, i); // 42
        // 43
        return instance; // 44
      }; // 45
      HTMLTag.prototype = new HTML.Tag(); // 46
      HTMLTag.prototype.constructor = HTMLTag; // 47
      HTMLTag.prototype.tagName = tagName; // 48
      // 49
      return HTMLTag; // 50
    }; // 51
    // 52
    // Not an HTMLjs node, but a wrapper to pass multiple attrs dictionaries              // 53
    // to a tag (for the purpose of implementing dynamic attributes).                     // 54
    var Attrs = HTML.Attrs = function () /*attrs dictionaries*/{
      // 55
      // Work with or without `new`.  If not called with `new`,                           // 56
      // perform instantiation by recursively calling this constructor.                   // 57
      // We can't pass varargs, so pass no args.                                          // 58
      var instance = this instanceof Attrs ? this : new Attrs(); // 59
      // 60
      instance.value = SLICE.call(arguments); // 61
      // 62
      return instance; // 63
    }; // 64
    // 65
    ////////////////////////////// KNOWN ELEMENTS                                         // 66
    // 67
    HTML.getTag = function (tagName) {
      // 68
      var symbolName = HTML.getSymbolName(tagName); // 69
      if (symbolName === tagName) // all-caps tagName                                     // 70
        throw new Error("Use the lowercase or camelCase form of '" + tagName + "' here");
      // 72
      if (!HTML[symbolName]) // 73
        HTML[symbolName] = makeTagConstructor(tagName); // 74
      // 75
      return HTML[symbolName]; // 76
    }; // 77
    // 78
    HTML.ensureTag = function (tagName) {
      // 79
      HTML.getTag(tagName); // don't return it                                            // 80
    }; // 81
    // 82
    HTML.isTagEnsured = function (tagName) {
      // 83
      return HTML.isKnownElement(tagName); // 84
    }; // 85
    // 86
    HTML.getSymbolName = function (tagName) {
      // 87
      // "foo-bar" -> "FOO_BAR"                                                           // 88
      return tagName.toUpperCase().replace(/-/g, '_'); // 89
    }; // 90
    // 91
    HTML.knownElementNames = 'a abbr acronym address applet area article aside audio b base basefont bdi bdo big blockquote body br button canvas caption center cite code col colgroup command data datagrid datalist dd del details dfn dir div dl dt em embed eventsource fieldset figcaption figure font footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins isindex kbd keygen label legend li link main map mark menu meta meter nav noframes noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr track tt u ul var video wbr'.split(' ');
    // (we add the SVG ones below)                                                        // 93
    // 94
    HTML.knownSVGElementNames = 'altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform circle clipPath color-profile cursor defs desc ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph path pattern polygon polyline radialGradient rect set stop style svg switch symbol text textPath title tref tspan use view vkern'.split(' ');
    // Append SVG element names to list of known element names                            // 96
    HTML.knownElementNames = HTML.knownElementNames.concat(HTML.knownSVGElementNames); // 97
    // 98
    HTML.voidElementNames = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');
    // 100
    // Speed up search through lists of known elements by creating internal "sets"        // 101
    // of strings.                                                                        // 102
    var YES = { yes: true }; // 103
    var makeSet = function (array) {
      // 104
      var set = {}; // 105
      for (var i = 0; i < array.length; i++) // 106
      set[array[i]] = YES; // 107
      return set; // 108
    }; // 109
    var voidElementSet = makeSet(HTML.voidElementNames); // 110
    var knownElementSet = makeSet(HTML.knownElementNames); // 111
    var knownSVGElementSet = makeSet(HTML.knownSVGElementNames); // 112
    // 113
    HTML.isKnownElement = function (tagName) {
      // 114
      return knownElementSet[tagName] === YES; // 115
    }; // 116
    // 117
    HTML.isKnownSVGElement = function (tagName) {
      // 118
      return knownSVGElementSet[tagName] === YES; // 119
    }; // 120
    // 121
    HTML.isVoidElement = function (tagName) {
      // 122
      return voidElementSet[tagName] === YES; // 123
    }; // 124
    // 125
    // 126
    // Ensure tags for all known elements                                                 // 127
    for (var i = 0; i < HTML.knownElementNames.length; i++) // 128
    HTML.ensureTag(HTML.knownElementNames[i]); // 129
    // 130
    // 131
    var CharRef = HTML.CharRef = function (attrs) {
      // 132
      if (!(this instanceof CharRef)) // 133
        // called without `new`                                                           // 134
        return new CharRef(attrs); // 135
      // 136
      if (!(attrs && attrs.html && attrs.str)) // 137
        throw new Error( // 138
        "HTML.CharRef must be constructed with ({html:..., str:...})"); // 139
      // 140
      this.html = attrs.html; // 141
      this.str = attrs.str; // 142
    }; // 143
    CharRef.prototype.htmljsType = CharRef.htmljsType = ['CharRef']; // 144
    // 145
    var Comment = HTML.Comment = function (value) {
      // 146
      if (!(this instanceof Comment)) // 147
        // called without `new`                                                           // 148
        return new Comment(value); // 149
      // 150
      if (typeof value !== 'string') // 151
        throw new Error('HTML.Comment must be constructed with a string'); // 152
      // 153
      this.value = value; // 154
      // Kill illegal hyphens in comment value (no way to escape them in HTML)            // 155
      this.sanitizedValue = value.replace(/^-|--+|-$/g, ''); // 156
    }; // 157
    Comment.prototype.htmljsType = Comment.htmljsType = ['Comment']; // 158
    // 159
    var Raw = HTML.Raw = function (value) {
      // 160
      if (!(this instanceof Raw)) // 161
        // called without `new`                                                           // 162
        return new Raw(value); // 163
      // 164
      if (typeof value !== 'string') // 165
        throw new Error('HTML.Raw must be constructed with a string'); // 166
      // 167
      this.value = value; // 168
    }; // 169
    Raw.prototype.htmljsType = Raw.htmljsType = ['Raw']; // 170
    // 171
    // 172
    HTML.isArray = function (x) {
      // 173
      // could change this to use the more convoluted Object.prototype.toString           // 174
      // approach that works when objects are passed between frames, but does             // 175
      // it matter?                                                                       // 176
      return x instanceof Array; // 177
    }; // 178
    // 179
    HTML.isConstructedObject = function (x) {
      // 180
      // Figure out if `x` is "an instance of some class" or just a plain                 // 181
      // object literal.  It correctly treats an object literal like                      // 182
      // `{ constructor: ... }` as an object literal.  It won't detect                    // 183
      // instances of classes that lack a `constructor` property (e.g.                    // 184
      // if you assign to a prototype when setting up the class as in:                    // 185
      // `Foo = function () { ... }; Foo.prototype = { ... }`, then                       // 186
      // `(new Foo).constructor` is `Object`, not `Foo`).                                 // 187
      return x && typeof x === 'object' && // 188
      x.constructor !== Object && // 189
      typeof x.constructor === 'function' && // 190
      x instanceof x.constructor; // 191
    }; // 192
    // 193
    HTML.isNully = function (node) {
      // 194
      if (node == null) // 195
        // null or undefined                                                              // 196
        return true; // 197
      // 198
      if (HTML.isArray(node)) {
        // 199
        // is it an empty array or an array of all nully items?                           // 200
        for (var i = 0; i < node.length; i++) // 201
        if (!HTML.isNully(node[i])) // 202
          return false; // 203
        return true; // 204
      } // 205
      // 206
      return false; // 207
    }; // 208
    // 209
    HTML.isValidAttributeName = function (name) {
      // 210
      return (/^[:_A-Za-z][:_A-Za-z0-9.\-]*/.test(name)
      ); // 211
    }; // 212
    // 213
    // If `attrs` is an array of attributes dictionaries, combines them                   // 214
    // into one.  Removes attributes that are "nully."                                    // 215
    HTML.flattenAttributes = function (attrs) {
      // 216
      if (!attrs) // 217
        return attrs; // 218
      // 219
      var isArray = HTML.isArray(attrs); // 220
      if (isArray && attrs.length === 0) // 221
        return null; // 222
      // 223
      var result = {}; // 224
      for (var i = 0, N = isArray ? attrs.length : 1; i < N; i++) {
        // 225
        var oneAttrs = isArray ? attrs[i] : attrs; // 226
        if (typeof oneAttrs !== 'object' || // 227
        HTML.isConstructedObject(oneAttrs)) // 228
          throw new Error("Expected plain JS object as attrs, found: " + oneAttrs); // 229
        for (var name in oneAttrs) {
          // 230
          if (!HTML.isValidAttributeName(name)) // 231
            throw new Error("Illegal HTML attribute name: " + name); // 232
          var value = oneAttrs[name]; // 233
          if (!HTML.isNully(value)) // 234
            result[name] = value; // 235
        } // 236
      } // 237
      // 238
      return result; // 239
    }; // 240
    // 241
    // 242
    // 243
    ////////////////////////////// TOHTML                                                 // 244
    // 245
    HTML.toHTML = function (content) {
      // 246
      return new HTML.ToHTMLVisitor().visit(content); // 247
    }; // 248
    // 249
    // Escaping modes for outputting text when generating HTML.                           // 250
    HTML.TEXTMODE = { // 251
      STRING: 1, // 252
      RCDATA: 2, // 253
      ATTRIBUTE: 3 // 254
    }; // 255
    // 256
    // 257
    HTML.toText = function (content, textMode) {
      // 258
      if (!textMode) // 259
        throw new Error("textMode required for HTML.toText"); // 260
      if (!(textMode === HTML.TEXTMODE.STRING || // 261
      textMode === HTML.TEXTMODE.RCDATA || // 262
      textMode === HTML.TEXTMODE.ATTRIBUTE)) // 263
        throw new Error("Unknown textMode: " + textMode); // 264
      // 265
      var visitor = new HTML.ToTextVisitor({ textMode: textMode });; // 266
      return visitor.visit(content); // 267
    }; // 268
    // 269
    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.htmljs = {}, {
    HTML: HTML
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var $ = Package.jquery.$;
  var jQuery = Package.jquery.jQuery;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var _ = Package.underscore._;
  var ObserveSequence = Package['observe-sequence'].ObserveSequence;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var HTML = Package.htmljs.HTML;

  /* Package-scope variables */
  var Blaze, AttributeHandler, ElementAttributesUpdater, UI, Handlebars;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/preamble.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                                    // 1
     * @namespace Blaze                                                                                                    // 2
     * @summary The namespace for all Blaze-related methods and classes.                                                   // 3
     */ // 4
    Blaze = {}; // 5
    // 6
    // Utility to HTML-escape a string.  Included for legacy reasons.                                                      // 7
    // TODO: Should be replaced with _.escape once underscore is upgraded to a newer                                       // 8
    //       version which escapes ` (backtick) as well. Underscore 1.5.2 does not.                                        // 9
    Blaze._escape = function () {
      // 10
      var escape_map = { // 11
        "<": "&lt;", // 12
        ">": "&gt;", // 13
        '"': "&quot;", // 14
        "'": "&#x27;", // 15
        "/": "&#x2F;", // 16
        "`": "&#x60;", /* IE allows backtick-delimited attributes?? */ // 17
        "&": "&amp;" // 18
      }; // 19
      var escape_one = function (c) {
        // 20
        return escape_map[c]; // 21
      }; // 22
      // 23
      return function (x) {
        // 24
        return x.replace(/[&<>"'`]/g, escape_one); // 25
      }; // 26
    }(); // 27
    // 28
    Blaze._warn = function (msg) {
      // 29
      msg = 'Warning: ' + msg; // 30
      // 31
      if (typeof console !== 'undefined' && console.warn) {
        // 32
        console.warn(msg); // 33
      } // 34
    }; // 35
    // 36
    var nativeBind = Function.prototype.bind; // 37
    // 38
    // An implementation of _.bind which allows better optimization.                                                       // 39
    // See: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments                        // 40
    if (nativeBind) {
      // 41
      Blaze._bind = function (func, obj) {
        // 42
        if (arguments.length === 2) {
          // 43
          return nativeBind.call(func, obj); // 44
        } // 45
        // 46
        // Copy the arguments so this function can be optimized.                                                           // 47
        var args = new Array(arguments.length); // 48
        for (var i = 0; i < args.length; i++) {
          // 49
          args[i] = arguments[i]; // 50
        } // 51
        // 52
        return nativeBind.apply(func, args.slice(1)); // 53
      }; // 54
    } // 55
    else {
        // 56
        // A slower but backwards compatible version.                                                                        // 57
        Blaze._bind = _.bind; // 58
      } // 59
    // 60
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/dombackend.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var DOMBackend = {}; // 1
    Blaze._DOMBackend = DOMBackend; // 2
    // 3
    var $jq = typeof jQuery !== 'undefined' ? jQuery : // 4
    typeof Package !== 'undefined' ? // 5
    Package.jquery && Package.jquery.jQuery : null; // 6
    if (!$jq) // 7
      throw new Error("jQuery not found"); // 8
    // 9
    DOMBackend._$jq = $jq; // 10
    // 11
    DOMBackend.parseHTML = function (html) {
      // 12
      // Return an array of nodes.                                                                                         // 13
      //                                                                                                                   // 14
      // jQuery does fancy stuff like creating an appropriate                                                              // 15
      // container element and setting innerHTML on it, as well                                                            // 16
      // as working around various IE quirks.                                                                              // 17
      return $jq.parseHTML(html) || []; // 18
    }; // 19
    // 20
    DOMBackend.Events = { // 21
      // `selector` is non-null.  `type` is one type (but                                                                  // 22
      // may be in backend-specific form, e.g. have namespaces).                                                           // 23
      // Order fired must be order bound.                                                                                  // 24
      delegateEvents: function (elem, type, selector, handler) {
        // 25
        $jq(elem).on(type, selector, handler); // 26
      }, // 27
      // 28
      undelegateEvents: function (elem, type, handler) {
        // 29
        $jq(elem).off(type, '**', handler); // 30
      }, // 31
      // 32
      bindEventCapturer: function (elem, type, selector, handler) {
        // 33
        var $elem = $jq(elem); // 34
        // 35
        var wrapper = function (event) {
          // 36
          event = $jq.event.fix(event); // 37
          event.currentTarget = event.target; // 38
          // 39
          // Note: It might improve jQuery interop if we called into jQuery                                                // 40
          // here somehow.  Since we don't use jQuery to dispatch the event,                                               // 41
          // we don't fire any of jQuery's event hooks or anything.  However,                                              // 42
          // since jQuery can't bind capturing handlers, it's not clear                                                    // 43
          // where we would hook in.  Internal jQuery functions like `dispatch`                                            // 44
          // are too high-level.                                                                                           // 45
          var $target = $jq(event.currentTarget); // 46
          if ($target.is($elem.find(selector))) // 47
            handler.call(elem, event); // 48
        }; // 49
        // 50
        handler._meteorui_wrapper = wrapper; // 51
        // 52
        type = DOMBackend.Events.parseEventType(type); // 53
        // add *capturing* event listener                                                                                  // 54
        elem.addEventListener(type, wrapper, true); // 55
      }, // 56
      // 57
      unbindEventCapturer: function (elem, type, handler) {
        // 58
        type = DOMBackend.Events.parseEventType(type); // 59
        elem.removeEventListener(type, handler._meteorui_wrapper, true); // 60
      }, // 61
      // 62
      parseEventType: function (type) {
        // 63
        // strip off namespaces                                                                                            // 64
        var dotLoc = type.indexOf('.'); // 65
        if (dotLoc >= 0) // 66
          return type.slice(0, dotLoc); // 67
        return type; // 68
      } // 69
    }; // 70
    // 71
    // 72
    ///// Removal detection and interoperability.                                                                          // 73
    // 74
    // For an explanation of this technique, see:                                                                          // 75
    // http://bugs.jquery.com/ticket/12213#comment:23 .                                                                    // 76
    //                                                                                                                     // 77
    // In short, an element is considered "removed" when jQuery                                                            // 78
    // cleans up its *private* userdata on the element,                                                                    // 79
    // which we can detect using a custom event with a teardown                                                            // 80
    // hook.                                                                                                               // 81
    // 82
    var NOOP = function () {}; // 83
    // 84
    // Circular doubly-linked list                                                                                         // 85
    var TeardownCallback = function (func) {
      // 86
      this.next = this; // 87
      this.prev = this; // 88
      this.func = func; // 89
    }; // 90
    // 91
    // Insert newElt before oldElt in the circular list                                                                    // 92
    TeardownCallback.prototype.linkBefore = function (oldElt) {
      // 93
      this.prev = oldElt.prev; // 94
      this.next = oldElt; // 95
      oldElt.prev.next = this; // 96
      oldElt.prev = this; // 97
    }; // 98
    // 99
    TeardownCallback.prototype.unlink = function () {
      // 100
      this.prev.next = this.next; // 101
      this.next.prev = this.prev; // 102
    }; // 103
    // 104
    TeardownCallback.prototype.go = function () {
      // 105
      var func = this.func; // 106
      func && func(); // 107
    }; // 108
    // 109
    TeardownCallback.prototype.stop = TeardownCallback.prototype.unlink; // 110
    // 111
    DOMBackend.Teardown = { // 112
      _JQUERY_EVENT_NAME: 'blaze_teardown_watcher', // 113
      _CB_PROP: '$blaze_teardown_callbacks', // 114
      // Registers a callback function to be called when the given element or                                              // 115
      // one of its ancestors is removed from the DOM via the backend library.                                             // 116
      // The callback function is called at most once, and it receives the element                                         // 117
      // in question as an argument.                                                                                       // 118
      onElementTeardown: function (elem, func) {
        // 119
        var elt = new TeardownCallback(func); // 120
        // 121
        var propName = DOMBackend.Teardown._CB_PROP; // 122
        if (!elem[propName]) {
          // 123
          // create an empty node that is never unlinked                                                                   // 124
          elem[propName] = new TeardownCallback(); // 125
          // 126
          // Set up the event, only the first time.                                                                        // 127
          $jq(elem).on(DOMBackend.Teardown._JQUERY_EVENT_NAME, NOOP); // 128
        } // 129
        // 130
        elt.linkBefore(elem[propName]); // 131
        // 132
        return elt; // so caller can call stop()                                                                           // 133
      }, // 134
      // Recursively call all teardown hooks, in the backend and registered                                                // 135
      // through DOMBackend.onElementTeardown.                                                                             // 136
      tearDownElement: function (elem) {
        // 137
        var elems = []; // 138
        // Array.prototype.slice.call doesn't work when given a NodeList in                                                // 139
        // IE8 ("JScript object expected").                                                                                // 140
        var nodeList = elem.getElementsByTagName('*'); // 141
        for (var i = 0; i < nodeList.length; i++) {
          // 142
          elems.push(nodeList[i]); // 143
        } // 144
        elems.push(elem); // 145
        $jq.cleanData(elems); // 146
      } // 147
    }; // 148
    // 149
    $jq.event.special[DOMBackend.Teardown._JQUERY_EVENT_NAME] = { // 150
      setup: function () {// 151
        // This "setup" callback is important even though it is empty!                                                     // 152
        // Without it, jQuery will call addEventListener, which is a                                                       // 153
        // performance hit, especially with Chrome's async stack trace                                                     // 154
        // feature enabled.                                                                                                // 155
      }, // 156
      teardown: function () {
        // 157
        var elem = this; // 158
        var callbacks = elem[DOMBackend.Teardown._CB_PROP]; // 159
        if (callbacks) {
          // 160
          var elt = callbacks.next; // 161
          while (elt !== callbacks) {
            // 162
            elt.go(); // 163
            elt = elt.next; // 164
          } // 165
          callbacks.go(); // 166
          // 167
          elem[DOMBackend.Teardown._CB_PROP] = null; // 168
        } // 169
      } // 170
    }; // 171
    // 172
    // 173
    // Must use jQuery semantics for `context`, not                                                                        // 174
    // querySelectorAll's.  In other words, all the parts                                                                  // 175
    // of `selector` must be found under `context`.                                                                        // 176
    DOMBackend.findBySelector = function (selector, context) {
      // 177
      return $jq(selector, context); // 178
    }; // 179
    // 180
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/domrange.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // 1
    // A constant empty array (frozen if the JS engine supports it).                                                       // 2
    var _emptyArray = Object.freeze ? Object.freeze([]) : []; // 3
    // 4
    // `[new] Blaze._DOMRange([nodeAndRangeArray])`                                                                        // 5
    //                                                                                                                     // 6
    // A DOMRange consists of an array of consecutive nodes and DOMRanges,                                                 // 7
    // which may be replaced at any time with a new array.  If the DOMRange                                                // 8
    // has been attached to the DOM at some location, then updating                                                        // 9
    // the array will cause the DOM to be updated at that location.                                                        // 10
    Blaze._DOMRange = function (nodeAndRangeArray) {
      // 11
      if (!(this instanceof DOMRange)) // 12
        // called without `new`                                                                                            // 13
        return new DOMRange(nodeAndRangeArray); // 14
      // 15
      var members = nodeAndRangeArray || _emptyArray; // 16
      if (!(members && typeof members.length === 'number')) // 17
        throw new Error("Expected array"); // 18
      // 19
      for (var i = 0; i < members.length; i++) // 20
      this._memberIn(members[i]); // 21
      // 22
      this.members = members; // 23
      this.emptyRangePlaceholder = null; // 24
      this.attached = false; // 25
      this.parentElement = null; // 26
      this.parentRange = null; // 27
      this.attachedCallbacks = _emptyArray; // 28
    }; // 29
    var DOMRange = Blaze._DOMRange; // 30
    // 31
    // In IE 8, don't use empty text nodes as placeholders                                                                 // 32
    // in empty DOMRanges, use comment nodes instead.  Using                                                               // 33
    // empty text nodes in modern browsers is great because                                                                // 34
    // it doesn't clutter the web inspector.  In IE 8, however,                                                            // 35
    // it seems to lead in some roundabout way to the OAuth                                                                // 36
    // pop-up crashing the browser completely.  In the past,                                                               // 37
    // we didn't use empty text nodes on IE 8 because they                                                                 // 38
    // don't accept JS properties, so just use the same logic                                                              // 39
    // even though we don't need to set properties on the                                                                  // 40
    // placeholder anymore.                                                                                                // 41
    DOMRange._USE_COMMENT_PLACEHOLDERS = function () {
      // 42
      var result = false; // 43
      var textNode = document.createTextNode(""); // 44
      try {
        // 45
        textNode.someProp = true; // 46
      } catch (e) {
        // 47
        // IE 8                                                                                                            // 48
        result = true; // 49
      } // 50
      return result; // 51
    }(); // 52
    // 53
    // static methods                                                                                                      // 54
    DOMRange._insert = function (rangeOrNode, parentElement, nextNode, _isMove) {
      // 55
      var m = rangeOrNode; // 56
      if (m instanceof DOMRange) {
        // 57
        m.attach(parentElement, nextNode, _isMove); // 58
      } else {
        // 59
        if (_isMove) // 60
          DOMRange._moveNodeWithHooks(m, parentElement, nextNode); // 61
        else // 62
          DOMRange._insertNodeWithHooks(m, parentElement, nextNode); // 63
      } // 64
    }; // 65
    // 66
    DOMRange._remove = function (rangeOrNode) {
      // 67
      var m = rangeOrNode; // 68
      if (m instanceof DOMRange) {
        // 69
        m.detach(); // 70
      } else {
        // 71
        DOMRange._removeNodeWithHooks(m); // 72
      } // 73
    }; // 74
    // 75
    DOMRange._removeNodeWithHooks = function (n) {
      // 76
      if (!n.parentNode) // 77
        return; // 78
      if (n.nodeType === 1 && // 79
      n.parentNode._uihooks && n.parentNode._uihooks.removeElement) {
        // 80
        n.parentNode._uihooks.removeElement(n); // 81
      } else {
        // 82
        n.parentNode.removeChild(n); // 83
      } // 84
    }; // 85
    // 86
    DOMRange._insertNodeWithHooks = function (n, parent, next) {
      // 87
      // `|| null` because IE throws an error if 'next' is undefined                                                       // 88
      next = next || null; // 89
      if (n.nodeType === 1 && // 90
      parent._uihooks && parent._uihooks.insertElement) {
        // 91
        parent._uihooks.insertElement(n, next); // 92
      } else {
        // 93
        parent.insertBefore(n, next); // 94
      } // 95
    }; // 96
    // 97
    DOMRange._moveNodeWithHooks = function (n, parent, next) {
      // 98
      if (n.parentNode !== parent) // 99
        return; // 100
      // `|| null` because IE throws an error if 'next' is undefined                                                       // 101
      next = next || null; // 102
      if (n.nodeType === 1 && // 103
      parent._uihooks && parent._uihooks.moveElement) {
        // 104
        parent._uihooks.moveElement(n, next); // 105
      } else {
        // 106
        parent.insertBefore(n, next); // 107
      } // 108
    }; // 109
    // 110
    DOMRange.forElement = function (elem) {
      // 111
      if (elem.nodeType !== 1) // 112
        throw new Error("Expected element, found: " + elem); // 113
      var range = null; // 114
      while (elem && !range) {
        // 115
        range = elem.$blaze_range || null; // 116
        if (!range) // 117
          elem = elem.parentNode; // 118
      } // 119
      return range; // 120
    }; // 121
    // 122
    DOMRange.prototype.attach = function (parentElement, nextNode, _isMove, _isReplace) {
      // 123
      // This method is called to insert the DOMRange into the DOM for                                                     // 124
      // the first time, but it's also used internally when                                                                // 125
      // updating the DOM.                                                                                                 // 126
      //                                                                                                                   // 127
      // If _isMove is true, move this attached range to a different                                                       // 128
      // location under the same parentElement.                                                                            // 129
      if (_isMove || _isReplace) {
        // 130
        if (!(this.parentElement === parentElement && // 131
        this.attached)) // 132
          throw new Error("Can only move or replace an attached DOMRange, and only under the same parent element"); // 133
      } // 134
      // 135
      var members = this.members; // 136
      if (members.length) {
        // 137
        this.emptyRangePlaceholder = null; // 138
        for (var i = 0; i < members.length; i++) {
          // 139
          DOMRange._insert(members[i], parentElement, nextNode, _isMove); // 140
        } // 141
      } else {
        // 142
        var placeholder = // 143
        DOMRange._USE_COMMENT_PLACEHOLDERS ? // 144
        document.createComment("") : // 145
        document.createTextNode(""); // 146
        this.emptyRangePlaceholder = placeholder; // 147
        parentElement.insertBefore(placeholder, nextNode || null); // 148
      } // 149
      this.attached = true; // 150
      this.parentElement = parentElement; // 151
      // 152
      if (!(_isMove || _isReplace)) {
        // 153
        for (var i = 0; i < this.attachedCallbacks.length; i++) {
          // 154
          var obj = this.attachedCallbacks[i]; // 155
          obj.attached && obj.attached(this, parentElement); // 156
        } // 157
      } // 158
    }; // 159
    // 160
    DOMRange.prototype.setMembers = function (newNodeAndRangeArray) {
      // 161
      var newMembers = newNodeAndRangeArray; // 162
      if (!(newMembers && typeof newMembers.length === 'number')) // 163
        throw new Error("Expected array"); // 164
      // 165
      var oldMembers = this.members; // 166
      // 167
      for (var i = 0; i < oldMembers.length; i++) // 168
      this._memberOut(oldMembers[i]); // 169
      for (var i = 0; i < newMembers.length; i++) // 170
      this._memberIn(newMembers[i]); // 171
      // 172
      if (!this.attached) {
        // 173
        this.members = newMembers; // 174
      } else {
        // 175
        // don't do anything if we're going from empty to empty                                                            // 176
        if (newMembers.length || oldMembers.length) {
          // 177
          // detach the old members and insert the new members                                                             // 178
          var nextNode = this.lastNode().nextSibling; // 179
          var parentElement = this.parentElement; // 180
          // Use detach/attach, but don't fire attached/detached hooks                                                     // 181
          this.detach(true /*_isReplace*/); // 182
          this.members = newMembers; // 183
          this.attach(parentElement, nextNode, false, true /*_isReplace*/); // 184
        } // 185
      } // 186
    }; // 187
    // 188
    DOMRange.prototype.firstNode = function () {
      // 189
      if (!this.attached) // 190
        throw new Error("Must be attached"); // 191
      // 192
      if (!this.members.length) // 193
        return this.emptyRangePlaceholder; // 194
      // 195
      var m = this.members[0]; // 196
      return m instanceof DOMRange ? m.firstNode() : m; // 197
    }; // 198
    // 199
    DOMRange.prototype.lastNode = function () {
      // 200
      if (!this.attached) // 201
        throw new Error("Must be attached"); // 202
      // 203
      if (!this.members.length) // 204
        return this.emptyRangePlaceholder; // 205
      // 206
      var m = this.members[this.members.length - 1]; // 207
      return m instanceof DOMRange ? m.lastNode() : m; // 208
    }; // 209
    // 210
    DOMRange.prototype.detach = function (_isReplace) {
      // 211
      if (!this.attached) // 212
        throw new Error("Must be attached"); // 213
      // 214
      var oldParentElement = this.parentElement; // 215
      var members = this.members; // 216
      if (members.length) {
        // 217
        for (var i = 0; i < members.length; i++) {
          // 218
          DOMRange._remove(members[i]); // 219
        } // 220
      } else {
        // 221
        var placeholder = this.emptyRangePlaceholder; // 222
        this.parentElement.removeChild(placeholder); // 223
        this.emptyRangePlaceholder = null; // 224
      } // 225
      // 226
      if (!_isReplace) {
        // 227
        this.attached = false; // 228
        this.parentElement = null; // 229
        // 230
        for (var i = 0; i < this.attachedCallbacks.length; i++) {
          // 231
          var obj = this.attachedCallbacks[i]; // 232
          obj.detached && obj.detached(this, oldParentElement); // 233
        } // 234
      } // 235
    }; // 236
    // 237
    DOMRange.prototype.addMember = function (newMember, atIndex, _isMove) {
      // 238
      var members = this.members; // 239
      if (!(atIndex >= 0 && atIndex <= members.length)) // 240
        throw new Error("Bad index in range.addMember: " + atIndex); // 241
      // 242
      if (!_isMove) // 243
        this._memberIn(newMember); // 244
      // 245
      if (!this.attached) {
        // 246
        // currently detached; just updated members                                                                        // 247
        members.splice(atIndex, 0, newMember); // 248
      } else if (members.length === 0) {
        // 249
        // empty; use the empty-to-nonempty handling of setMembers                                                         // 250
        this.setMembers([newMember]); // 251
      } else {
        // 252
        var nextNode; // 253
        if (atIndex === members.length) {
          // 254
          // insert at end                                                                                                 // 255
          nextNode = this.lastNode().nextSibling; // 256
        } else {
          // 257
          var m = members[atIndex]; // 258
          nextNode = m instanceof DOMRange ? m.firstNode() : m; // 259
        } // 260
        members.splice(atIndex, 0, newMember); // 261
        DOMRange._insert(newMember, this.parentElement, nextNode, _isMove); // 262
      } // 263
    }; // 264
    // 265
    DOMRange.prototype.removeMember = function (atIndex, _isMove) {
      // 266
      var members = this.members; // 267
      if (!(atIndex >= 0 && atIndex < members.length)) // 268
        throw new Error("Bad index in range.removeMember: " + atIndex); // 269
      // 270
      if (_isMove) {
        // 271
        members.splice(atIndex, 1); // 272
      } else {
        // 273
        var oldMember = members[atIndex]; // 274
        this._memberOut(oldMember); // 275
        // 276
        if (members.length === 1) {
          // 277
          // becoming empty; use the logic in setMembers                                                                   // 278
          this.setMembers(_emptyArray); // 279
        } else {
          // 280
          members.splice(atIndex, 1); // 281
          if (this.attached) // 282
            DOMRange._remove(oldMember); // 283
        } // 284
      } // 285
    }; // 286
    // 287
    DOMRange.prototype.moveMember = function (oldIndex, newIndex) {
      // 288
      var member = this.members[oldIndex]; // 289
      this.removeMember(oldIndex, true /*_isMove*/); // 290
      this.addMember(member, newIndex, true /*_isMove*/); // 291
    }; // 292
    // 293
    DOMRange.prototype.getMember = function (atIndex) {
      // 294
      var members = this.members; // 295
      if (!(atIndex >= 0 && atIndex < members.length)) // 296
        throw new Error("Bad index in range.getMember: " + atIndex); // 297
      return this.members[atIndex]; // 298
    }; // 299
    // 300
    DOMRange.prototype._memberIn = function (m) {
      // 301
      if (m instanceof DOMRange) // 302
        m.parentRange = this; // 303
      else if (m.nodeType === 1) // DOM Element                                                                            // 304
          m.$blaze_range = this; // 305
    }; // 306
    // 307
    DOMRange._destroy = function (m, _skipNodes) {
      // 308
      if (m instanceof DOMRange) {
        // 309
        if (m.view) // 310
          Blaze._destroyView(m.view, _skipNodes); // 311
      } else if (!_skipNodes && m.nodeType === 1) {
        // 312
        // DOM Element                                                                                                     // 313
        if (m.$blaze_range) {
          // 314
          Blaze._destroyNode(m); // 315
          m.$blaze_range = null; // 316
        } // 317
      } // 318
    }; // 319
    // 320
    DOMRange.prototype._memberOut = DOMRange._destroy; // 321
    // 322
    // Tear down, but don't remove, the members.  Used when chunks                                                         // 323
    // of DOM are being torn down or replaced.                                                                             // 324
    DOMRange.prototype.destroyMembers = function (_skipNodes) {
      // 325
      var members = this.members; // 326
      for (var i = 0; i < members.length; i++) // 327
      this._memberOut(members[i], _skipNodes); // 328
    }; // 329
    // 330
    DOMRange.prototype.destroy = function (_skipNodes) {
      // 331
      DOMRange._destroy(this, _skipNodes); // 332
    }; // 333
    // 334
    DOMRange.prototype.containsElement = function (elem) {
      // 335
      if (!this.attached) // 336
        throw new Error("Must be attached"); // 337
      // 338
      // An element is contained in this DOMRange if it's possible to                                                      // 339
      // reach it by walking parent pointers, first through the DOM and                                                    // 340
      // then parentRange pointers.  In other words, the element or some                                                   // 341
      // ancestor of it is at our level of the DOM (a child of our                                                         // 342
      // parentElement), and this element is one of our members or                                                         // 343
      // is a member of a descendant Range.                                                                                // 344
      // 345
      // First check that elem is a descendant of this.parentElement,                                                      // 346
      // according to the DOM.                                                                                             // 347
      if (!Blaze._elementContains(this.parentElement, elem)) // 348
        return false; // 349
      // 350
      // If elem is not an immediate child of this.parentElement,                                                          // 351
      // walk up to its ancestor that is.                                                                                  // 352
      while (elem.parentNode !== this.parentElement) // 353
      elem = elem.parentNode; // 354
      // 355
      var range = elem.$blaze_range; // 356
      while (range && range !== this) // 357
      range = range.parentRange; // 358
      // 359
      return range === this; // 360
    }; // 361
    // 362
    DOMRange.prototype.containsRange = function (range) {
      // 363
      if (!this.attached) // 364
        throw new Error("Must be attached"); // 365
      // 366
      if (!range.attached) // 367
        return false; // 368
      // 369
      // A DOMRange is contained in this DOMRange if it's possible                                                         // 370
      // to reach this range by following parent pointers.  If the                                                         // 371
      // DOMRange has the same parentElement, then it should be                                                            // 372
      // a member, or a member of a member etc.  Otherwise, we must                                                        // 373
      // contain its parentElement.                                                                                        // 374
      // 375
      if (range.parentElement !== this.parentElement) // 376
        return this.containsElement(range.parentElement); // 377
      // 378
      if (range === this) // 379
        return false; // don't contain self                                                                                // 380
      // 381
      while (range && range !== this) // 382
      range = range.parentRange; // 383
      // 384
      return range === this; // 385
    }; // 386
    // 387
    DOMRange.prototype.onAttached = function (attached) {
      // 388
      this.onAttachedDetached({ attached: attached }); // 389
    }; // 390
    // 391
    // callbacks are `attached(range, element)` and                                                                        // 392
    // `detached(range, element)`, and they may                                                                            // 393
    // access the `callbacks` object in `this`.                                                                            // 394
    // The arguments to `detached` are the same                                                                            // 395
    // range and element that were passed to `attached`.                                                                   // 396
    DOMRange.prototype.onAttachedDetached = function (callbacks) {
      // 397
      if (this.attachedCallbacks === _emptyArray) // 398
        this.attachedCallbacks = []; // 399
      this.attachedCallbacks.push(callbacks); // 400
    }; // 401
    // 402
    DOMRange.prototype.$ = function (selector) {
      // 403
      var self = this; // 404
      // 405
      var parentNode = this.parentElement; // 406
      if (!parentNode) // 407
        throw new Error("Can't select in removed DomRange"); // 408
      // 409
      // Strategy: Find all selector matches under parentNode,                                                             // 410
      // then filter out the ones that aren't in this DomRange                                                             // 411
      // using `DOMRange#containsElement`.  This is                                                                        // 412
      // asymptotically slow in the presence of O(N) sibling                                                               // 413
      // content that is under parentNode but not in our range,                                                            // 414
      // so if performance is an issue, the selector should be                                                             // 415
      // run on a child element.                                                                                           // 416
      // 417
      // Since jQuery can't run selectors on a DocumentFragment,                                                           // 418
      // we don't expect findBySelector to work.                                                                           // 419
      if (parentNode.nodeType === 11 /* DocumentFragment */) // 420
        throw new Error("Can't use $ on an offscreen range"); // 421
      // 422
      var results = Blaze._DOMBackend.findBySelector(selector, parentNode); // 423
      // 424
      // We don't assume `results` has jQuery API; a plain array                                                           // 425
      // should do just as well.  However, if we do have a jQuery                                                          // 426
      // array, we want to end up with one also, so we use                                                                 // 427
      // `.filter`.                                                                                                        // 428
      // 429
      // Function that selects only elements that are actually                                                             // 430
      // in this DomRange, rather than simply descending from                                                              // 431
      // `parentNode`.                                                                                                     // 432
      var filterFunc = function (elem) {
        // 433
        // handle jQuery's arguments to filter, where the node                                                             // 434
        // is in `this` and the index is the first argument.                                                               // 435
        if (typeof elem === 'number') // 436
          elem = this; // 437
        // 438
        return self.containsElement(elem); // 439
      }; // 440
      // 441
      if (!results.filter) {
        // 442
        // not a jQuery array, and not a browser with                                                                      // 443
        // Array.prototype.filter (e.g. IE <9)                                                                             // 444
        var newResults = []; // 445
        for (var i = 0; i < results.length; i++) {
          // 446
          var x = results[i]; // 447
          if (filterFunc(x)) // 448
            newResults.push(x); // 449
        } // 450
        results = newResults; // 451
      } else {
        // 452
        // `results.filter` is either jQuery's or ECMAScript's `filter`                                                    // 453
        results = results.filter(filterFunc); // 454
      } // 455
      // 456
      return results; // 457
    }; // 458
    // 459
    // Returns true if element a contains node b and is not node b.                                                        // 460
    //                                                                                                                     // 461
    // The restriction that `a` be an element (not a document fragment,                                                    // 462
    // say) is based on what's easy to implement cross-browser.                                                            // 463
    Blaze._elementContains = function (a, b) {
      // 464
      if (a.nodeType !== 1) // ELEMENT                                                                                     // 465
        return false; // 466
      if (a === b) // 467
        return false; // 468
      // 469
      if (a.compareDocumentPosition) {
        // 470
        return a.compareDocumentPosition(b) & 0x10; // 471
      } else {
        // 472
        // Should be only old IE and maybe other old browsers here.                                                        // 473
        // Modern Safari has both functions but seems to get contains() wrong.                                             // 474
        // IE can't handle b being a text node.  We work around this                                                       // 475
        // by doing a direct parent test now.                                                                              // 476
        b = b.parentNode; // 477
        if (!(b && b.nodeType === 1)) // ELEMENT                                                                          // 478
          return false; // 479
        if (a === b) // 480
          return true; // 481
        // 482
        return a.contains(b); // 483
      } // 484
    }; // 485
    // 486
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/events.js                                                                                            //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var EventSupport = Blaze._EventSupport = {}; // 1
    // 2
    var DOMBackend = Blaze._DOMBackend; // 3
    // 4
    // List of events to always delegate, never capture.                                                                   // 5
    // Since jQuery fakes bubbling for certain events in                                                                   // 6
    // certain browsers (like `submit`), we don't want to                                                                  // 7
    // get in its way.                                                                                                     // 8
    //                                                                                                                     // 9
    // We could list all known bubbling                                                                                    // 10
    // events here to avoid creating speculative capturers                                                                 // 11
    // for them, but it would only be an optimization.                                                                     // 12
    var eventsToDelegate = EventSupport.eventsToDelegate = { // 13
      blur: 1, change: 1, click: 1, focus: 1, focusin: 1, // 14
      focusout: 1, reset: 1, submit: 1 // 15
    }; // 16
    // 17
    var EVENT_MODE = EventSupport.EVENT_MODE = { // 18
      TBD: 0, // 19
      BUBBLING: 1, // 20
      CAPTURING: 2 // 21
    }; // 22
    // 23
    var NEXT_HANDLERREC_ID = 1; // 24
    // 25
    var HandlerRec = function (elem, type, selector, handler, recipient) {
      // 26
      this.elem = elem; // 27
      this.type = type; // 28
      this.selector = selector; // 29
      this.handler = handler; // 30
      this.recipient = recipient; // 31
      this.id = NEXT_HANDLERREC_ID++; // 32
      // 33
      this.mode = EVENT_MODE.TBD; // 34
      // 35
      // It's important that delegatedHandler be a different                                                               // 36
      // instance for each handlerRecord, because its identity                                                             // 37
      // is used to remove it.                                                                                             // 38
      //                                                                                                                   // 39
      // It's also important that the closure have access to                                                               // 40
      // `this` when it is not called with it set.                                                                         // 41
      this.delegatedHandler = function (h) {
        // 42
        return function (evt) {
          // 43
          if (!h.selector && evt.currentTarget !== evt.target) // 44
            // no selector means only fire on target                                                                       // 45
            return; // 46
          return h.handler.apply(h.recipient, arguments); // 47
        }; // 48
      }(this); // 49
      // 50
      // WHY CAPTURE AND DELEGATE: jQuery can't delegate                                                                   // 51
      // non-bubbling events, because                                                                                      // 52
      // event capture doesn't work in IE 8.  However, there                                                               // 53
      // are all sorts of new-fangled non-bubbling events                                                                  // 54
      // like "play" and "touchenter".  We delegate these                                                                  // 55
      // events using capture in all browsers except IE 8.                                                                 // 56
      // IE 8 doesn't support these events anyway.                                                                         // 57
      // 58
      var tryCapturing = elem.addEventListener && // 59
      !_.has(eventsToDelegate, // 60
      DOMBackend.Events.parseEventType(type)); // 61
      // 62
      if (tryCapturing) {
        // 63
        this.capturingHandler = function (h) {
          // 64
          return function (evt) {
            // 65
            if (h.mode === EVENT_MODE.TBD) {
              // 66
              // must be first time we're called.                                                                          // 67
              if (evt.bubbles) {
                // 68
                // this type of event bubbles, so don't                                                                    // 69
                // get called again.                                                                                       // 70
                h.mode = EVENT_MODE.BUBBLING; // 71
                DOMBackend.Events.unbindEventCapturer( // 72
                h.elem, h.type, h.capturingHandler); // 73
                return; // 74
              } else {
                // 75
                // this type of event doesn't bubble,                                                                      // 76
                // so unbind the delegation, preventing                                                                    // 77
                // it from ever firing.                                                                                    // 78
                h.mode = EVENT_MODE.CAPTURING; // 79
                DOMBackend.Events.undelegateEvents( // 80
                h.elem, h.type, h.delegatedHandler); // 81
              } // 82
            } // 83
            // 84
            h.delegatedHandler(evt); // 85
          }; // 86
        }(this); // 87
        // 88
      } else {
        // 89
        this.mode = EVENT_MODE.BUBBLING; // 90
      } // 91
    }; // 92
    EventSupport.HandlerRec = HandlerRec; // 93
    // 94
    HandlerRec.prototype.bind = function () {
      // 95
      // `this.mode` may be EVENT_MODE_TBD, in which case we bind both. in                                                 // 96
      // this case, 'capturingHandler' is in charge of detecting the                                                       // 97
      // correct mode and turning off one or the other handlers.                                                           // 98
      if (this.mode !== EVENT_MODE.BUBBLING) {
        // 99
        DOMBackend.Events.bindEventCapturer( // 100
        this.elem, this.type, this.selector || '*', // 101
        this.capturingHandler); // 102
      } // 103
      // 104
      if (this.mode !== EVENT_MODE.CAPTURING) // 105
        DOMBackend.Events.delegateEvents( // 106
        this.elem, this.type, // 107
        this.selector || '*', this.delegatedHandler); // 108
    }; // 109
    // 110
    HandlerRec.prototype.unbind = function () {
      // 111
      if (this.mode !== EVENT_MODE.BUBBLING) // 112
        DOMBackend.Events.unbindEventCapturer(this.elem, this.type, // 113
        this.capturingHandler); // 114
      // 115
      if (this.mode !== EVENT_MODE.CAPTURING) // 116
        DOMBackend.Events.undelegateEvents(this.elem, this.type, // 117
        this.delegatedHandler); // 118
    }; // 119
    // 120
    EventSupport.listen = function (element, events, selector, handler, recipient, getParentRecipient) {
      // 121
      // 122
      // Prevent this method from being JITed by Safari.  Due to a                                                         // 123
      // presumed JIT bug in Safari -- observed in Version 7.0.6                                                           // 124
      // (9537.78.2) -- this method may crash the Safari render process if                                                 // 125
      // it is JITed.                                                                                                      // 126
      // Repro: https://github.com/dgreensp/public/tree/master/safari-crash                                                // 127
      try {
        element = element;
      } finally {} // 128
      // 129
      var eventTypes = []; // 130
      events.replace(/[^ /]+/g, function (e) {
        // 131
        eventTypes.push(e); // 132
      }); // 133
      // 134
      var newHandlerRecs = []; // 135
      for (var i = 0, N = eventTypes.length; i < N; i++) {
        // 136
        var type = eventTypes[i]; // 137
        // 138
        var eventDict = element.$blaze_events; // 139
        if (!eventDict) // 140
          eventDict = element.$blaze_events = {}; // 141
        // 142
        var info = eventDict[type]; // 143
        if (!info) {
          // 144
          info = eventDict[type] = {}; // 145
          info.handlers = []; // 146
        } // 147
        var handlerList = info.handlers; // 148
        var handlerRec = new HandlerRec( // 149
        element, type, selector, handler, recipient); // 150
        newHandlerRecs.push(handlerRec); // 151
        handlerRec.bind(); // 152
        handlerList.push(handlerRec); // 153
        // Move handlers of enclosing ranges to end, by unbinding and rebinding                                            // 154
        // them.  In jQuery (or other DOMBackend) this causes them to fire                                                 // 155
        // later when the backend dispatches event handlers.                                                               // 156
        if (getParentRecipient) {
          // 157
          for (var r = getParentRecipient(recipient); r; // 158
          r = getParentRecipient(r)) {
            // 159
            // r is an enclosing range (recipient)                                                                         // 160
            for (var j = 0, Nj = handlerList.length; // 161
            j < Nj; j++) {
              // 162
              var h = handlerList[j]; // 163
              if (h.recipient === r) {
                // 164
                h.unbind(); // 165
                h.bind(); // 166
                handlerList.splice(j, 1); // remove handlerList[j]                                                         // 167
                handlerList.push(h); // 168
                j--; // account for removed handler                                                                        // 169
                Nj--; // don't visit appended handlers                                                                     // 170
              } // 171
            } // 172
          } // 173
        } // 174
      } // 175
      // 176
      return { // 177
        // closes over just `element` and `newHandlerRecs`                                                                 // 178
        stop: function () {
          // 179
          var eventDict = element.$blaze_events; // 180
          if (!eventDict) // 181
            return; // 182
          // newHandlerRecs has only one item unless you specify multiple                                                  // 183
          // event types.  If this code is slow, it's because we have to                                                   // 184
          // iterate over handlerList here.  Clearing a whole handlerList                                                  // 185
          // via stop() methods is O(N^2) in the number of handlers on                                                     // 186
          // an element.                                                                                                   // 187
          for (var i = 0; i < newHandlerRecs.length; i++) {
            // 188
            var handlerToRemove = newHandlerRecs[i]; // 189
            var info = eventDict[handlerToRemove.type]; // 190
            if (!info) // 191
              continue; // 192
            var handlerList = info.handlers; // 193
            for (var j = handlerList.length - 1; j >= 0; j--) {
              // 194
              if (handlerList[j] === handlerToRemove) {
                // 195
                handlerToRemove.unbind(); // 196
                handlerList.splice(j, 1); // remove handlerList[j]                                                         // 197
              } // 198
            } // 199
          } // 200
          newHandlerRecs.length = 0; // 201
        } // 202
      }; // 203
    }; // 204
    // 205
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/attrs.js                                                                                             //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var jsUrlsAllowed = false; // 1
    Blaze._allowJavascriptUrls = function () {
      // 2
      jsUrlsAllowed = true; // 3
    }; // 4
    Blaze._javascriptUrlsAllowed = function () {
      // 5
      return jsUrlsAllowed; // 6
    }; // 7
    // 8
    // An AttributeHandler object is responsible for updating a particular attribute                                       // 9
    // of a particular element.  AttributeHandler subclasses implement                                                     // 10
    // browser-specific logic for dealing with particular attributes across                                                // 11
    // different browsers.                                                                                                 // 12
    //                                                                                                                     // 13
    // To define a new type of AttributeHandler, use                                                                       // 14
    // `var FooHandler = AttributeHandler.extend({ update: function ... })`                                                // 15
    // where the `update` function takes arguments `(element, oldValue, value)`.                                           // 16
    // The `element` argument is always the same between calls to `update` on                                              // 17
    // the same instance.  `oldValue` and `value` are each either `null` or                                                // 18
    // a Unicode string of the type that might be passed to the value argument                                             // 19
    // of `setAttribute` (i.e. not an HTML string with character references).                                              // 20
    // When an AttributeHandler is installed, an initial call to `update` is                                               // 21
    // always made with `oldValue = null`.  The `update` method can access                                                 // 22
    // `this.name` if the AttributeHandler class is a generic one that applies                                             // 23
    // to multiple attribute names.                                                                                        // 24
    //                                                                                                                     // 25
    // AttributeHandlers can store custom properties on `this`, as long as they                                            // 26
    // don't use the names `element`, `name`, `value`, and `oldValue`.                                                     // 27
    //                                                                                                                     // 28
    // AttributeHandlers can't influence how attributes appear in rendered HTML,                                           // 29
    // only how they are updated after materialization as DOM.                                                             // 30
    // 31
    AttributeHandler = function (name, value) {
      // 32
      this.name = name; // 33
      this.value = value; // 34
    }; // 35
    Blaze._AttributeHandler = AttributeHandler; // 36
    // 37
    AttributeHandler.prototype.update = function (element, oldValue, value) {
      // 38
      if (value === null) {
        // 39
        if (oldValue !== null) // 40
          element.removeAttribute(this.name); // 41
      } else {
        // 42
        element.setAttribute(this.name, value); // 43
      } // 44
    }; // 45
    // 46
    AttributeHandler.extend = function (options) {
      // 47
      var curType = this; // 48
      var subType = function AttributeHandlerSubtype() /*arguments*/{
        // 49
        AttributeHandler.apply(this, arguments); // 50
      }; // 51
      subType.prototype = new curType(); // 52
      subType.extend = curType.extend; // 53
      if (options) // 54
        _.extend(subType.prototype, options); // 55
      return subType; // 56
    }; // 57
    // 58
    /// Apply the diff between the attributes of "oldValue" and "value" to "element."                                      // 59
    //                                                                                                                     // 60
    // Each subclass must implement a parseValue method which takes a string                                               // 61
    // as an input and returns an ordered dict of attributes. The keys of the dict                                         // 62
    // are unique identifiers (ie. css properties in the case of styles), and the                                          // 63
    // values are the entire attribute which will be injected into the element.                                            // 64
    //                                                                                                                     // 65
    // Extended below to support classes, SVG elements and styles.                                                         // 66
    // 67
    Blaze._DiffingAttributeHandler = AttributeHandler.extend({ // 68
      update: function (element, oldValue, value) {
        // 69
        if (!this.getCurrentValue || !this.setValue || !this.parseValue || !this.joinValues) // 70
          throw new Error("Missing methods in subclass of 'DiffingAttributeHandler'"); // 71
        // 72
        var oldAttrsMap = oldValue ? this.parseValue(oldValue) : new OrderedDict(); // 73
        var attrsMap = value ? this.parseValue(value) : new OrderedDict(); // 74
        // 75
        // the current attributes on the element, which we will mutate.                                                    // 76
        // 77
        var currentAttrString = this.getCurrentValue(element); // 78
        var currentAttrsMap = currentAttrString ? this.parseValue(currentAttrString) : new OrderedDict(); // 79
        // 80
        // Any outside changes to attributes we add at the end.                                                            // 81
        currentAttrsMap.forEach(function (value, key, i) {
          // 82
          // If the key already exists, we do not use the current value, but the new value.                                // 83
          if (attrsMap.has(key)) {
            // 84
            return; // 85
          } // 86
          // 87
          // Key does not already exist, but it existed before. Which means it was explicitly                              // 88
          // removed, so we do not add it.                                                                                 // 89
          if (oldAttrsMap.has(key)) {
            // 90
            return; // 91
          } // 92
          // 93
          attrsMap.append(key, value); // 94
        }); // 95
        // 96
        var values = []; // 97
        attrsMap.forEach(function (value, key, i) {
          // 98
          values.push(value); // 99
        }); // 100
        // 101
        this.setValue(element, this.joinValues(values)); // 102
      } // 103
    }); // 104
    // 105
    var ClassHandler = Blaze._DiffingAttributeHandler.extend({ // 106
      // @param rawValue {String}                                                                                          // 107
      getCurrentValue: function (element) {
        // 108
        return element.className; // 109
      }, // 110
      setValue: function (element, className) {
        // 111
        element.className = className; // 112
      }, // 113
      parseValue: function (attrString) {
        // 114
        var tokens = new OrderedDict(); // 115
        // 116
        _.each(attrString.split(' '), function (token) {
          // 117
          if (token) {
            // 118
            // Ordered dict requires unique keys.                                                                          // 119
            if (!tokens.has(token)) {
              // 120
              tokens.append(token, token); // 121
            } // 122
          } // 123
        }); // 124
        return tokens; // 125
      }, // 126
      joinValues: function (values) {
        // 127
        return values.join(' '); // 128
      } // 129
    }); // 130
    // 131
    var SVGClassHandler = ClassHandler.extend({ // 132
      getCurrentValue: function (element) {
        // 133
        return element.className.baseVal; // 134
      }, // 135
      setValue: function (element, className) {
        // 136
        element.setAttribute('class', className); // 137
      } // 138
    }); // 139
    // 140
    var StyleHandler = Blaze._DiffingAttributeHandler.extend({ // 141
      getCurrentValue: function (element) {
        // 142
        return element.getAttribute('style'); // 143
      }, // 144
      setValue: function (element, style) {
        // 145
        if (style === '') {
          // 146
          element.removeAttribute('style'); // 147
        } else {
          // 148
          element.setAttribute('style', style); // 149
        } // 150
      }, // 151
      // 152
      // Parse a string to produce a map from property to attribute string.                                                // 153
      //                                                                                                                   // 154
      // Example:                                                                                                          // 155
      // "color:red; foo:12px" produces a token {color: "color:red", foo:"foo:12px"}                                       // 156
      parseValue: function (attrString) {
        // 157
        var tokens = new OrderedDict(); // 158
        // 159
        // Regex for parsing a css attribute declaration, taken from css-parse:                                            // 160
        // https://github.com/reworkcss/css-parse/blob/7cef3658d0bba872cde05a85339034b187cb3397/index.js#L219              // 161
        var regex = /(\*?[-#\/\*\\\w]+(?:\[[0-9a-z_-]+\])?)\s*:\s*(?:\'(?:\\\'|.)*?\'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+[;\s]*/g;
        var match = regex.exec(attrString); // 163
        while (match) {
          // 164
          // match[0] = entire matching string                                                                             // 165
          // match[1] = css property                                                                                       // 166
          // Prefix the token to prevent conflicts with existing properties.                                               // 167
          // 168
          // We use the last value for the same key.                                                                       // 169
          if (tokens.has(match[1])) {
            // 170
            tokens.remove(match[1]); // 171
          } // 172
          // 173
          // XXX No `String.trim` on Safari 4. Swap out $.trim if we want to                                               // 174
          // remove strong dep on jquery.                                                                                  // 175
          tokens.append(match[1], match[0].trim ? match[0].trim() : $.trim(match[0])); // 176
          // 177
          match = regex.exec(attrString); // 178
        } // 179
        // 180
        return tokens; // 181
      }, // 182
      // 183
      joinValues: function (values) {
        // 184
        // TODO: Assure that there is always ; between values. But what is an example where it breaks?                     // 185
        return values.join(' '); // 186
      } // 187
    }); // 188
    // 189
    var BooleanHandler = AttributeHandler.extend({ // 190
      update: function (element, oldValue, value) {
        // 191
        var name = this.name; // 192
        if (value == null) {
          // 193
          if (oldValue != null) // 194
            element[name] = false; // 195
        } else {
          // 196
          element[name] = true; // 197
        } // 198
      } // 199
    }); // 200
    // 201
    var DOMPropertyHandler = AttributeHandler.extend({ // 202
      update: function (element, oldValue, value) {
        // 203
        var name = this.name; // 204
        if (value !== element[name]) // 205
          element[name] = value; // 206
      } // 207
    }); // 208
    // 209
    // attributes of the type 'xlink:something' should be set using                                                        // 210
    // the correct namespace in order to work                                                                              // 211
    var XlinkHandler = AttributeHandler.extend({ // 212
      update: function (element, oldValue, value) {
        // 213
        var NS = 'http://www.w3.org/1999/xlink'; // 214
        if (value === null) {
          // 215
          if (oldValue !== null) // 216
            element.removeAttributeNS(NS, this.name); // 217
        } else {
          // 218
          element.setAttributeNS(NS, this.name, this.value); // 219
        } // 220
      } // 221
    }); // 222
    // 223
    // cross-browser version of `instanceof SVGElement`                                                                    // 224
    var isSVGElement = function (elem) {
      // 225
      return 'ownerSVGElement' in elem; // 226
    }; // 227
    // 228
    var isUrlAttribute = function (tagName, attrName) {
      // 229
      // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html                                               // 230
      // and                                                                                                               // 231
      // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1                                              // 232
      var urlAttrs = { // 233
        FORM: ['action'], // 234
        BODY: ['background'], // 235
        BLOCKQUOTE: ['cite'], // 236
        Q: ['cite'], // 237
        DEL: ['cite'], // 238
        INS: ['cite'], // 239
        OBJECT: ['classid', 'codebase', 'data', 'usemap'], // 240
        APPLET: ['codebase'], // 241
        A: ['href'], // 242
        AREA: ['href'], // 243
        LINK: ['href'], // 244
        BASE: ['href'], // 245
        IMG: ['longdesc', 'src', 'usemap'], // 246
        FRAME: ['longdesc', 'src'], // 247
        IFRAME: ['longdesc', 'src'], // 248
        HEAD: ['profile'], // 249
        SCRIPT: ['src'], // 250
        INPUT: ['src', 'usemap', 'formaction'], // 251
        BUTTON: ['formaction'], // 252
        BASE: ['href'], // 253
        MENUITEM: ['icon'], // 254
        HTML: ['manifest'], // 255
        VIDEO: ['poster'] // 256
      }; // 257
      // 258
      if (attrName === 'itemid') {
        // 259
        return true; // 260
      } // 261
      // 262
      var urlAttrNames = urlAttrs[tagName] || []; // 263
      return _.contains(urlAttrNames, attrName); // 264
    }; // 265
    // 266
    // To get the protocol for a URL, we let the browser normalize it for                                                  // 267
    // us, by setting it as the href for an anchor tag and then reading out                                                // 268
    // the 'protocol' property.                                                                                            // 269
    if (Meteor.isClient) {
      // 270
      var anchorForNormalization = document.createElement('A'); // 271
    } // 272
    // 273
    var getUrlProtocol = function (url) {
      // 274
      if (Meteor.isClient) {
        // 275
        anchorForNormalization.href = url; // 276
        return (anchorForNormalization.protocol || "").toLowerCase(); // 277
      } else {
        // 278
        throw new Error('getUrlProtocol not implemented on the server'); // 279
      } // 280
    }; // 281
    // 282
    // UrlHandler is an attribute handler for all HTML attributes that take                                                // 283
    // URL values. It disallows javascript: URLs, unless                                                                   // 284
    // Blaze._allowJavascriptUrls() has been called. To detect javascript:                                                 // 285
    // urls, we set the attribute on a dummy anchor element and then read                                                  // 286
    // out the 'protocol' property of the attribute.                                                                       // 287
    var origUpdate = AttributeHandler.prototype.update; // 288
    var UrlHandler = AttributeHandler.extend({ // 289
      update: function (element, oldValue, value) {
        // 290
        var self = this; // 291
        var args = arguments; // 292
        // 293
        if (Blaze._javascriptUrlsAllowed()) {
          // 294
          origUpdate.apply(self, args); // 295
        } else {
          // 296
          var isJavascriptProtocol = getUrlProtocol(value) === "javascript:"; // 297
          var isVBScriptProtocol = getUrlProtocol(value) === "vbscript:"; // 298
          if (isJavascriptProtocol || isVBScriptProtocol) {
            // 299
            Blaze._warn("URLs that use the 'javascript:' or 'vbscript:' protocol are not " + // 300
            "allowed in URL attribute values. " + // 301
            "Call Blaze._allowJavascriptUrls() " + // 302
            "to enable them."); // 303
            origUpdate.apply(self, [element, oldValue, null]); // 304
          } else {
            // 305
            origUpdate.apply(self, args); // 306
          } // 307
        } // 308
      } // 309
    }); // 310
    // 311
    // XXX make it possible for users to register attribute handlers!                                                      // 312
    Blaze._makeAttributeHandler = function (elem, name, value) {
      // 313
      // generally, use setAttribute but certain attributes need to be set                                                 // 314
      // by directly setting a JavaScript property on the DOM element.                                                     // 315
      if (name === 'class') {
        // 316
        if (isSVGElement(elem)) {
          // 317
          return new SVGClassHandler(name, value); // 318
        } else {
          // 319
          return new ClassHandler(name, value); // 320
        } // 321
      } else if (name === 'style') {
        // 322
        return new StyleHandler(name, value); // 323
      } else if (elem.tagName === 'OPTION' && name === 'selected' || // 324
      elem.tagName === 'INPUT' && name === 'checked' || // 325
      elem.tagName === 'VIDEO' && name === 'muted') {
        // 326
        return new BooleanHandler(name, value); // 327
      } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT') && // 328
      name === 'value') {
        // 329
        // internally, TEXTAREAs tracks their value in the 'value'                                                         // 330
        // attribute just like INPUTs.                                                                                     // 331
        return new DOMPropertyHandler(name, value); // 332
      } else if (name.substring(0, 6) === 'xlink:') {
        // 333
        return new XlinkHandler(name.substring(6), value); // 334
      } else if (isUrlAttribute(elem.tagName, name)) {
        // 335
        return new UrlHandler(name, value); // 336
      } else {
        // 337
        return new AttributeHandler(name, value); // 338
      } // 339
      // 340
      // XXX will need one for 'style' on IE, though modern browsers                                                       // 341
      // seem to handle setAttribute ok.                                                                                   // 342
    }; // 343
    // 344
    // 345
    ElementAttributesUpdater = function (elem) {
      // 346
      this.elem = elem; // 347
      this.handlers = {}; // 348
    }; // 349
    // 350
    // Update attributes on `elem` to the dictionary `attrs`, whose                                                        // 351
    // values are strings.                                                                                                 // 352
    ElementAttributesUpdater.prototype.update = function (newAttrs) {
      // 353
      var elem = this.elem; // 354
      var handlers = this.handlers; // 355
      // 356
      for (var k in handlers) {
        // 357
        if (!_.has(newAttrs, k)) {
          // 358
          // remove attributes (and handlers) for attribute names                                                          // 359
          // that don't exist as keys of `newAttrs` and so won't                                                           // 360
          // be visited when traversing it.  (Attributes that                                                              // 361
          // exist in the `newAttrs` object but are `null`                                                                 // 362
          // are handled later.)                                                                                           // 363
          var handler = handlers[k]; // 364
          var oldValue = handler.value; // 365
          handler.value = null; // 366
          handler.update(elem, oldValue, null); // 367
          delete handlers[k]; // 368
        } // 369
      } // 370
      // 371
      for (var k in newAttrs) {
        // 372
        var handler = null; // 373
        var oldValue = null; // 374
        var value = newAttrs[k]; // 375
        if (!_.has(handlers, k)) {
          // 376
          if (value !== null) {
            // 377
            // make new handler                                                                                            // 378
            handler = Blaze._makeAttributeHandler(elem, k, value); // 379
            handlers[k] = handler; // 380
          } // 381
        } else {
          // 382
          handler = handlers[k]; // 383
          oldValue = handler.value; // 384
        } // 385
        if (oldValue !== value) {
          // 386
          handler.value = value; // 387
          handler.update(elem, oldValue, value); // 388
          if (value === null) // 389
            delete handlers[k]; // 390
        } // 391
      } // 392
    }; // 393
    // 394
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/materializer.js                                                                                      //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Turns HTMLjs into DOM nodes and DOMRanges.                                                                          // 1
    //                                                                                                                     // 2
    // - `htmljs`: the value to materialize, which may be any of the htmljs                                                // 3
    //   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,                                                // 4
    //   null, or undefined) or a View or Template (which will be used to                                                  // 5
    //   construct a View).                                                                                                // 6
    // - `intoArray`: the array of DOM nodes and DOMRanges to push the output                                              // 7
    //   into (required)                                                                                                   // 8
    // - `parentView`: the View we are materializing content for (optional)                                                // 9
    // - `_existingWorkStack`: optional argument, only used for recursive                                                  // 10
    //   calls when there is some other _materializeDOM on the call stack.                                                 // 11
    //   If _materializeDOM called your function and passed in a workStack,                                                // 12
    //   pass it back when you call _materializeDOM (such as from a workStack                                              // 13
    //   task).                                                                                                            // 14
    //                                                                                                                     // 15
    // Returns `intoArray`, which is especially useful if you pass in `[]`.                                                // 16
    Blaze._materializeDOM = function (htmljs, intoArray, parentView, // 17
    _existingWorkStack) {
      // 18
      // In order to use fewer stack frames, materializeDOMInner can push                                                  // 19
      // tasks onto `workStack`, and they will be popped off                                                               // 20
      // and run, last first, after materializeDOMInner returns.  The                                                      // 21
      // reason we use a stack instead of a queue is so that we recurse                                                    // 22
      // depth-first, doing newer tasks first.                                                                             // 23
      var workStack = _existingWorkStack || []; // 24
      materializeDOMInner(htmljs, intoArray, parentView, workStack); // 25
      // 26
      if (!_existingWorkStack) {
        // 27
        // We created the work stack, so we are responsible for finishing                                                  // 28
        // the work.  Call each "task" function, starting with the top                                                     // 29
        // of the stack.                                                                                                   // 30
        while (workStack.length) {
          // 31
          // Note that running task() may push new items onto workStack.                                                   // 32
          var task = workStack.pop(); // 33
          task(); // 34
        } // 35
      } // 36
      // 37
      return intoArray; // 38
    }; // 39
    // 40
    var materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {
      // 41
      if (htmljs == null) {
        // 42
        // null or undefined                                                                                               // 43
        return; // 44
      } // 45
      // 46
      switch (typeof htmljs) {// 47
        case 'string':case 'boolean':case 'number':
          // 48
          intoArray.push(document.createTextNode(String(htmljs))); // 49
          return; // 50
        case 'object':
          // 51
          if (htmljs.htmljsType) {
            // 52
            switch (htmljs.htmljsType) {// 53
              case HTML.Tag.htmljsType:
                // 54
                intoArray.push(materializeTag(htmljs, parentView, workStack)); // 55
                return; // 56
              case HTML.CharRef.htmljsType:
                // 57
                intoArray.push(document.createTextNode(htmljs.str)); // 58
                return; // 59
              case HTML.Comment.htmljsType:
                // 60
                intoArray.push(document.createComment(htmljs.sanitizedValue)); // 61
                return; // 62
              case HTML.Raw.htmljsType:
                // 63
                // Get an array of DOM nodes by using the browser's HTML parser                                                // 64
                // (like innerHTML).                                                                                           // 65
                var nodes = Blaze._DOMBackend.parseHTML(htmljs.value); // 66
                for (var i = 0; i < nodes.length; i++) // 67
                intoArray.push(nodes[i]); // 68
                return; // 69
            } // 70
          } else if (HTML.isArray(htmljs)) {
            // 71
            for (var i = htmljs.length - 1; i >= 0; i--) {
              // 72
              workStack.push(Blaze._bind(Blaze._materializeDOM, null, // 73
              htmljs[i], intoArray, parentView, workStack)); // 74
            } // 75
            return; // 76
          } else {
            // 77
            if (htmljs instanceof Blaze.Template) {
              // 78
              htmljs = htmljs.constructView(); // 79
              // fall through to Blaze.View case below                                                                       // 80
            } // 81
            if (htmljs instanceof Blaze.View) {
              // 82
              Blaze._materializeView(htmljs, parentView, workStack, intoArray); // 83
              return; // 84
            } // 85
          } // 86
      } // 87
      // 88
      throw new Error("Unexpected object in htmljs: " + htmljs); // 89
    }; // 90
    // 91
    var materializeTag = function (tag, parentView, workStack) {
      // 92
      var tagName = tag.tagName; // 93
      var elem; // 94
      if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag)) && // 95
      document.createElementNS) {
        // 96
        // inline SVG                                                                                                      // 97
        elem = document.createElementNS('http://www.w3.org/2000/svg', tagName); // 98
      } else {
        // 99
        // normal elements                                                                                                 // 100
        elem = document.createElement(tagName); // 101
      } // 102
      // 103
      var rawAttrs = tag.attrs; // 104
      var children = tag.children; // 105
      if (tagName === 'textarea' && tag.children.length && // 106
      !(rawAttrs && 'value' in rawAttrs)) {
        // 107
        // Provide very limited support for TEXTAREA tags with children                                                    // 108
        // rather than a "value" attribute.                                                                                // 109
        // Reactivity in the form of Views nested in the tag's children                                                    // 110
        // won't work.  Compilers should compile textarea contents into                                                    // 111
        // the "value" attribute of the tag, wrapped in a function if there                                                // 112
        // is reactivity.                                                                                                  // 113
        if (typeof rawAttrs === 'function' || // 114
        HTML.isArray(rawAttrs)) {
          // 115
          throw new Error("Can't have reactive children of TEXTAREA node; " + // 116
          "use the 'value' attribute instead."); // 117
        } // 118
        rawAttrs = _.extend({}, rawAttrs || null); // 119
        rawAttrs.value = Blaze._expand(children, parentView); // 120
        children = []; // 121
      } // 122
      // 123
      if (rawAttrs) {
        // 124
        var attrUpdater = new ElementAttributesUpdater(elem); // 125
        var updateAttributes = function () {
          // 126
          var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView); // 127
          var flattenedAttrs = HTML.flattenAttributes(expandedAttrs); // 128
          var stringAttrs = {}; // 129
          for (var attrName in flattenedAttrs) {
            // 130
            // map `null`, `undefined`, and `false` to null, which is important                                            // 131
            // so that attributes with nully values are considered absent.                                                 // 132
            // stringify anything else (e.g. strings, booleans, numbers including 0).                                      // 133
            if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false) // 134
              stringAttrs[attrName] = null; // 135
            else // 136
              stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName], // 137
              parentView, // 138
              HTML.TEXTMODE.STRING); // 139
          } // 140
          attrUpdater.update(stringAttrs); // 141
        }; // 142
        var updaterComputation; // 143
        if (parentView) {
          // 144
          updaterComputation = // 145
          parentView.autorun(updateAttributes, undefined, 'updater'); // 146
        } else {
          // 147
          updaterComputation = Tracker.nonreactive(function () {
            // 148
            return Tracker.autorun(function () {
              // 149
              Tracker._withCurrentView(parentView, updateAttributes); // 150
            }); // 151
          }); // 152
        } // 153
        Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {
          // 154
          updaterComputation.stop(); // 155
        }); // 156
      } // 157
      // 158
      if (children.length) {
        // 159
        var childNodesAndRanges = []; // 160
        // push this function first so that it's done last                                                                 // 161
        workStack.push(function () {
          // 162
          for (var i = 0; i < childNodesAndRanges.length; i++) {
            // 163
            var x = childNodesAndRanges[i]; // 164
            if (x instanceof Blaze._DOMRange) // 165
              x.attach(elem); // 166
            else // 167
              elem.appendChild(x); // 168
          } // 169
        }); // 170
        // now push the task that calculates childNodesAndRanges                                                           // 171
        workStack.push(Blaze._bind(Blaze._materializeDOM, null, // 172
        children, childNodesAndRanges, parentView, // 173
        workStack)); // 174
      } // 175
      // 176
      return elem; // 177
    }; // 178
    // 179
    // 180
    var isSVGAnchor = function (node) {
      // 181
      // We generally aren't able to detect SVG <a> elements because                                                       // 182
      // if "A" were in our list of known svg element names, then all                                                      // 183
      // <a> nodes would be created using                                                                                  // 184
      // `document.createElementNS`. But in the special case of <a                                                         // 185
      // xlink:href="...">, we can at least detect that attribute and                                                      // 186
      // create an SVG <a> tag in that case.                                                                               // 187
      //                                                                                                                   // 188
      // However, we still have a general problem of knowing when to                                                       // 189
      // use document.createElementNS and when to use                                                                      // 190
      // document.createElement; for example, font tags will always                                                        // 191
      // be created as SVG elements which can cause other                                                                  // 192
      // problems. #1977                                                                                                   // 193
      return node.tagName === "a" && // 194
      node.attrs && // 195
      node.attrs["xlink:href"] !== undefined; // 196
    }; // 197
    // 198
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/exceptions.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var debugFunc; // 1
    // 2
    // We call into user code in many places, and it's nice to catch exceptions                                            // 3
    // propagated from user code immediately so that the whole system doesn't just                                         // 4
    // break.  Catching exceptions is easy; reporting them is hard.  This helper                                           // 5
    // reports exceptions.                                                                                                 // 6
    //                                                                                                                     // 7
    // Usage:                                                                                                              // 8
    //                                                                                                                     // 9
    // ```                                                                                                                 // 10
    // try {                                                                                                               // 11
    //   // ... someStuff ...                                                                                              // 12
    // } catch (e) {                                                                                                       // 13
    //   reportUIException(e);                                                                                             // 14
    // }                                                                                                                   // 15
    // ```                                                                                                                 // 16
    //                                                                                                                     // 17
    // An optional second argument overrides the default message.                                                          // 18
    // 19
    // Set this to `true` to cause `reportException` to throw                                                              // 20
    // the next exception rather than reporting it.  This is                                                               // 21
    // useful in unit tests that test error messages.                                                                      // 22
    Blaze._throwNextException = false; // 23
    // 24
    Blaze._reportException = function (e, msg) {
      // 25
      if (Blaze._throwNextException) {
        // 26
        Blaze._throwNextException = false; // 27
        throw e; // 28
      } // 29
      // 30
      if (!debugFunc) // 31
        // adapted from Tracker                                                                                            // 32
        debugFunc = function () {
          // 33
          return typeof Meteor !== "undefined" ? Meteor._debug : // 34
          typeof console !== "undefined" && console.log ? console.log : // 35
          function () {}; // 36
        }; // 37
      // 38
      // In Chrome, `e.stack` is a multiline string that starts with the message                                           // 39
      // and contains a stack trace.  Furthermore, `console.log` makes it clickable.                                       // 40
      // `console.log` supplies the space between the two arguments.                                                       // 41
      debugFunc()(msg || 'Exception caught in template:', e.stack || e.message || e); // 42
    }; // 43
    // 44
    Blaze._wrapCatchingExceptions = function (f, where) {
      // 45
      if (typeof f !== 'function') // 46
        return f; // 47
      // 48
      return function () {
        // 49
        try {
          // 50
          return f.apply(this, arguments); // 51
        } catch (e) {
          // 52
          Blaze._reportException(e, 'Exception in ' + where + ':'); // 53
        } // 54
      }; // 55
    }; // 56
    // 57
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/view.js                                                                                              //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /// [new] Blaze.View([name], renderMethod)                                                                             // 1
    ///                                                                                                                    // 2
    /// Blaze.View is the building block of reactive DOM.  Views have                                                      // 3
    /// the following features:                                                                                            // 4
    ///                                                                                                                    // 5
    /// * lifecycle callbacks - Views are created, rendered, and destroyed,                                                // 6
    ///   and callbacks can be registered to fire when these things happen.                                                // 7
    ///                                                                                                                    // 8
    /// * parent pointer - A View points to its parentView, which is the                                                   // 9
    ///   View that caused it to be rendered.  These pointers form a                                                       // 10
    ///   hierarchy or tree of Views.                                                                                      // 11
    ///                                                                                                                    // 12
    /// * render() method - A View's render() method specifies the DOM                                                     // 13
    ///   (or HTML) content of the View.  If the method establishes                                                        // 14
    ///   reactive dependencies, it may be re-run.                                                                         // 15
    ///                                                                                                                    // 16
    /// * a DOMRange - If a View is rendered to DOM, its position and                                                      // 17
    ///   extent in the DOM are tracked using a DOMRange object.                                                           // 18
    ///                                                                                                                    // 19
    /// When a View is constructed by calling Blaze.View, the View is                                                      // 20
    /// not yet considered "created."  It doesn't have a parentView yet,                                                   // 21
    /// and no logic has been run to initialize the View.  All real                                                        // 22
    /// work is deferred until at least creation time, when the onViewCreated                                              // 23
    /// callbacks are fired, which happens when the View is "used" in                                                      // 24
    /// some way that requires it to be rendered.                                                                          // 25
    ///                                                                                                                    // 26
    /// ...more lifecycle stuff                                                                                            // 27
    ///                                                                                                                    // 28
    /// `name` is an optional string tag identifying the View.  The only                                                   // 29
    /// time it's used is when looking in the View tree for a View of a                                                    // 30
    /// particular name; for example, data contexts are stored on Views                                                    // 31
    /// of name "with".  Names are also useful when debugging, so in                                                       // 32
    /// general it's good for functions that create Views to set the name.                                                 // 33
    /// Views associated with templates have names of the form "Template.foo".                                             // 34
    // 35
    /**                                                                                                                    // 36
     * @class                                                                                                              // 37
     * @summary Constructor for a View, which represents a reactive region of DOM.                                         // 38
     * @locus Client                                                                                                       // 39
     * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).                     // 40
     * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  In this function, `this` is bound to the View.
     */ // 42
    Blaze.View = function (name, render) {
      // 43
      if (!(this instanceof Blaze.View)) // 44
        // called without `new`                                                                                            // 45
        return new Blaze.View(name, render); // 46
      // 47
      if (typeof name === 'function') {
        // 48
        // omitted "name" argument                                                                                         // 49
        render = name; // 50
        name = ''; // 51
      } // 52
      this.name = name; // 53
      this._render = render; // 54
      // 55
      this._callbacks = { // 56
        created: null, // 57
        rendered: null, // 58
        destroyed: null // 59
      }; // 60
      // 61
      // Setting all properties here is good for readability,                                                              // 62
      // and also may help Chrome optimize the code by keeping                                                             // 63
      // the View object from changing shape too much.                                                                     // 64
      this.isCreated = false; // 65
      this._isCreatedForExpansion = false; // 66
      this.isRendered = false; // 67
      this._isAttached = false; // 68
      this.isDestroyed = false; // 69
      this._isInRender = false; // 70
      this.parentView = null; // 71
      this._domrange = null; // 72
      // This flag is normally set to false except for the cases when view's parent                                        // 73
      // was generated as part of expanding some syntactic sugar expressions or                                            // 74
      // methods.                                                                                                          // 75
      // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular                                        // 76
      // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the                                         // 77
      // users don't know anything about these generated parent views, Blaze needs                                         // 78
      // this information to be available on views to make smarter decisions. For                                          // 79
      // example: removing the generated parent view with the view on Blaze.remove.                                        // 80
      this._hasGeneratedParent = false; // 81
      // Bindings accessible to children views (via view.lookup('name')) within the                                        // 82
      // closest template view.                                                                                            // 83
      this._scopeBindings = {}; // 84
      // 85
      this.renderCount = 0; // 86
    }; // 87
    // 88
    Blaze.View.prototype._render = function () {
      return null;
    }; // 89
    // 90
    Blaze.View.prototype.onViewCreated = function (cb) {
      // 91
      this._callbacks.created = this._callbacks.created || []; // 92
      this._callbacks.created.push(cb); // 93
    }; // 94
    // 95
    Blaze.View.prototype._onViewRendered = function (cb) {
      // 96
      this._callbacks.rendered = this._callbacks.rendered || []; // 97
      this._callbacks.rendered.push(cb); // 98
    }; // 99
    // 100
    Blaze.View.prototype.onViewReady = function (cb) {
      // 101
      var self = this; // 102
      var fire = function () {
        // 103
        Tracker.afterFlush(function () {
          // 104
          if (!self.isDestroyed) {
            // 105
            Blaze._withCurrentView(self, function () {
              // 106
              cb.call(self); // 107
            }); // 108
          } // 109
        }); // 110
      }; // 111
      self._onViewRendered(function onViewRendered() {
        // 112
        if (self.isDestroyed) // 113
          return; // 114
        if (!self._domrange.attached) // 115
          self._domrange.onAttached(fire); // 116
        else // 117
          fire(); // 118
      }); // 119
    }; // 120
    // 121
    Blaze.View.prototype.onViewDestroyed = function (cb) {
      // 122
      this._callbacks.destroyed = this._callbacks.destroyed || []; // 123
      this._callbacks.destroyed.push(cb); // 124
    }; // 125
    Blaze.View.prototype.removeViewDestroyedListener = function (cb) {
      // 126
      var destroyed = this._callbacks.destroyed; // 127
      if (!destroyed) // 128
        return; // 129
      var index = _.lastIndexOf(destroyed, cb); // 130
      if (index !== -1) {
        // 131
        // XXX You'd think the right thing to do would be splice, but _fireCallbacks                                       // 132
        // gets sad if you remove callbacks while iterating over the list.  Should                                         // 133
        // change this to use callback-hook or EventEmitter or something else that                                         // 134
        // properly supports removal.                                                                                      // 135
        destroyed[index] = null; // 136
      } // 137
    }; // 138
    // 139
    /// View#autorun(func)                                                                                                 // 140
    ///                                                                                                                    // 141
    /// Sets up a Tracker autorun that is "scoped" to this View in two                                                     // 142
    /// important ways: 1) Blaze.currentView is automatically set                                                          // 143
    /// on every re-run, and 2) the autorun is stopped when the                                                            // 144
    /// View is destroyed.  As with Tracker.autorun, the first run of                                                      // 145
    /// the function is immediate, and a Computation object that can                                                       // 146
    /// be used to stop the autorun is returned.                                                                           // 147
    ///                                                                                                                    // 148
    /// View#autorun is meant to be called from View callbacks like                                                        // 149
    /// onViewCreated, or from outside the rendering process.  It may not                                                  // 150
    /// be called before the onViewCreated callbacks are fired (too early),                                                // 151
    /// or from a render() method (too confusing).                                                                         // 152
    ///                                                                                                                    // 153
    /// Typically, autoruns that update the state                                                                          // 154
    /// of the View (as in Blaze.With) should be started from an onViewCreated                                             // 155
    /// callback.  Autoruns that update the DOM should be started                                                          // 156
    /// from either onViewCreated (guarded against the absence of                                                          // 157
    /// view._domrange), or onViewReady.                                                                                   // 158
    Blaze.View.prototype.autorun = function (f, _inViewScope, displayName) {
      // 159
      var self = this; // 160
      // 161
      // The restrictions on when View#autorun can be called are in order                                                  // 162
      // to avoid bad patterns, like creating a Blaze.View and immediately                                                 // 163
      // calling autorun on it.  A freshly created View is not ready to                                                    // 164
      // have logic run on it; it doesn't have a parentView, for example.                                                  // 165
      // It's when the View is materialized or expanded that the onViewCreated                                             // 166
      // handlers are fired and the View starts up.                                                                        // 167
      //                                                                                                                   // 168
      // Letting the render() method call `this.autorun()` is problematic                                                  // 169
      // because of re-render.  The best we can do is to stop the old                                                      // 170
      // autorun and start a new one for each render, but that's a pattern                                                 // 171
      // we try to avoid internally because it leads to helpers being                                                      // 172
      // called extra times, in the case where the autorun causes the                                                      // 173
      // view to re-render (and thus the autorun to be torn down and a                                                     // 174
      // new one established).                                                                                             // 175
      //                                                                                                                   // 176
      // We could lift these restrictions in various ways.  One interesting                                                // 177
      // idea is to allow you to call `view.autorun` after instantiating                                                   // 178
      // `view`, and automatically wrap it in `view.onViewCreated`, deferring                                              // 179
      // the autorun so that it starts at an appropriate time.  However,                                                   // 180
      // then we can't return the Computation object to the caller, because                                                // 181
      // it doesn't exist yet.                                                                                             // 182
      if (!self.isCreated) {
        // 183
        throw new Error("View#autorun must be called from the created callback at the earliest"); // 184
      } // 185
      if (this._isInRender) {
        // 186
        throw new Error("Can't call View#autorun from inside render(); try calling it from the created or rendered callback");
      } // 188
      // 189
      var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc; // 190
      // 191
      var func = function viewAutorun(c) {
        // 192
        return Blaze._withCurrentView(_inViewScope || self, function () {
          // 193
          return Blaze.Template._withTemplateInstanceFunc( // 194
          templateInstanceFunc, function () {
            // 195
            return f.call(self, c); // 196
          }); // 197
        }); // 198
      }; // 199
      // 200
      // Give the autorun function a better name for debugging and profiling.                                              // 201
      // The `displayName` property is not part of the spec but browsers like Chrome                                       // 202
      // and Firefox prefer it in debuggers over the name function was declared by.                                        // 203
      func.displayName = // 204
      (self.name || 'anonymous') + ':' + (displayName || 'anonymous'); // 205
      var comp = Tracker.autorun(func); // 206
      // 207
      var stopComputation = function () {
        comp.stop();
      }; // 208
      self.onViewDestroyed(stopComputation); // 209
      comp.onStop(function () {
        // 210
        self.removeViewDestroyedListener(stopComputation); // 211
      }); // 212
      // 213
      return comp; // 214
    }; // 215
    // 216
    Blaze.View.prototype._errorIfShouldntCallSubscribe = function () {
      // 217
      var self = this; // 218
      // 219
      if (!self.isCreated) {
        // 220
        throw new Error("View#subscribe must be called from the created callback at the earliest"); // 221
      } // 222
      if (self._isInRender) {
        // 223
        throw new Error("Can't call View#subscribe from inside render(); try calling it from the created or rendered callback");
      } // 225
      if (self.isDestroyed) {
        // 226
        throw new Error("Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.");
      } // 228
    }; // 229
    // 230
    /**                                                                                                                    // 231
     * Just like Blaze.View#autorun, but with Meteor.subscribe instead of                                                  // 232
     * Tracker.autorun. Stop the subscription when the view is destroyed.                                                  // 233
     * @return {SubscriptionHandle} A handle to the subscription so that you can                                           // 234
     * see if it is ready, or stop it manually                                                                             // 235
     */ // 236
    Blaze.View.prototype.subscribe = function (args, options) {
      // 237
      var self = this; // 238
      options = options || {}; // 239
      // 240
      self._errorIfShouldntCallSubscribe(); // 241
      // 242
      var subHandle; // 243
      if (options.connection) {
        // 244
        subHandle = options.connection.subscribe.apply(options.connection, args); // 245
      } else {
        // 246
        subHandle = Meteor.subscribe.apply(Meteor, args); // 247
      } // 248
      // 249
      self.onViewDestroyed(function () {
        // 250
        subHandle.stop(); // 251
      }); // 252
      // 253
      return subHandle; // 254
    }; // 255
    // 256
    Blaze.View.prototype.firstNode = function () {
      // 257
      if (!this._isAttached) // 258
        throw new Error("View must be attached before accessing its DOM"); // 259
      // 260
      return this._domrange.firstNode(); // 261
    }; // 262
    // 263
    Blaze.View.prototype.lastNode = function () {
      // 264
      if (!this._isAttached) // 265
        throw new Error("View must be attached before accessing its DOM"); // 266
      // 267
      return this._domrange.lastNode(); // 268
    }; // 269
    // 270
    Blaze._fireCallbacks = function (view, which) {
      // 271
      Blaze._withCurrentView(view, function () {
        // 272
        Tracker.nonreactive(function fireCallbacks() {
          // 273
          var cbs = view._callbacks[which]; // 274
          for (var i = 0, N = cbs && cbs.length; i < N; i++) // 275
          cbs[i] && cbs[i].call(view); // 276
        }); // 277
      }); // 278
    }; // 279
    // 280
    Blaze._createView = function (view, parentView, forExpansion) {
      // 281
      if (view.isCreated) // 282
        throw new Error("Can't render the same View twice"); // 283
      // 284
      view.parentView = parentView || null; // 285
      view.isCreated = true; // 286
      if (forExpansion) // 287
        view._isCreatedForExpansion = true; // 288
      // 289
      Blaze._fireCallbacks(view, 'created'); // 290
    }; // 291
    // 292
    var doFirstRender = function (view, initialContent) {
      // 293
      var domrange = new Blaze._DOMRange(initialContent); // 294
      view._domrange = domrange; // 295
      domrange.view = view; // 296
      view.isRendered = true; // 297
      Blaze._fireCallbacks(view, 'rendered'); // 298
      // 299
      var teardownHook = null; // 300
      // 301
      domrange.onAttached(function attached(range, element) {
        // 302
        view._isAttached = true; // 303
        // 304
        teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown( // 305
        element, function teardown() {
          // 306
          Blaze._destroyView(view, true /* _skipNodes */); // 307
        }); // 308
      }); // 309
      // 310
      // tear down the teardown hook                                                                                       // 311
      view.onViewDestroyed(function () {
        // 312
        teardownHook && teardownHook.stop(); // 313
        teardownHook = null; // 314
      }); // 315
      // 316
      return domrange; // 317
    }; // 318
    // 319
    // Take an uncreated View `view` and create and render it to DOM,                                                      // 320
    // setting up the autorun that updates the View.  Returns a new                                                        // 321
    // DOMRange, which has been associated with the View.                                                                  // 322
    //                                                                                                                     // 323
    // The private arguments `_workStack` and `_intoArray` are passed in                                                   // 324
    // by Blaze._materializeDOM and are only present for recursive calls                                                   // 325
    // (when there is some other _materializeView on the stack).  If                                                       // 326
    // provided, then we avoid the mutual recursion of calling back into                                                   // 327
    // Blaze._materializeDOM so that deep View hierarchies don't blow the                                                  // 328
    // stack.  Instead, we push tasks onto workStack for the initial                                                       // 329
    // rendering and subsequent setup of the View, and they are done after                                                 // 330
    // we return.  When there is a _workStack, we do not return the new                                                    // 331
    // DOMRange, but instead push it into _intoArray from a _workStack                                                     // 332
    // task.                                                                                                               // 333
    Blaze._materializeView = function (view, parentView, _workStack, _intoArray) {
      // 334
      Blaze._createView(view, parentView); // 335
      // 336
      var domrange; // 337
      var lastHtmljs; // 338
      // We don't expect to be called in a Computation, but just in case,                                                  // 339
      // wrap in Tracker.nonreactive.                                                                                      // 340
      Tracker.nonreactive(function () {
        // 341
        view.autorun(function doRender(c) {
          // 342
          // `view.autorun` sets the current view.                                                                         // 343
          view.renderCount++; // 344
          view._isInRender = true; // 345
          // Any dependencies that should invalidate this Computation come                                                 // 346
          // from this line:                                                                                               // 347
          var htmljs = view._render(); // 348
          view._isInRender = false; // 349
          // 350
          if (!c.firstRun && !Blaze._isContentEqual(lastHtmljs, htmljs)) {
            // 351
            Tracker.nonreactive(function doMaterialize() {
              // 352
              // re-render                                                                                                 // 353
              var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view); // 354
              domrange.setMembers(rangesAndNodes); // 355
              Blaze._fireCallbacks(view, 'rendered'); // 356
            }); // 357
          } // 358
          lastHtmljs = htmljs; // 359
          // 360
          // Causes any nested views to stop immediately, not when we call                                                 // 361
          // `setMembers` the next time around the autorun.  Otherwise,                                                    // 362
          // helpers in the DOM tree to be replaced might be scheduled                                                     // 363
          // to re-run before we have a chance to stop them.                                                               // 364
          Tracker.onInvalidate(function () {
            // 365
            if (domrange) {
              // 366
              domrange.destroyMembers(); // 367
            } // 368
          }); // 369
        }, undefined, 'materialize'); // 370
        // 371
        // first render.  lastHtmljs is the first htmljs.                                                                  // 372
        var initialContents; // 373
        if (!_workStack) {
          // 374
          initialContents = Blaze._materializeDOM(lastHtmljs, [], view); // 375
          domrange = doFirstRender(view, initialContents); // 376
          initialContents = null; // help GC because we close over this scope a lot                                        // 377
        } else {
          // 378
          // We're being called from Blaze._materializeDOM, so to avoid                                                    // 379
          // recursion and save stack space, provide a description of the                                                  // 380
          // work to be done instead of doing it.  Tasks pushed onto                                                       // 381
          // _workStack will be done in LIFO order after we return.                                                        // 382
          // The work will still be done within a Tracker.nonreactive,                                                     // 383
          // because it will be done by some call to Blaze._materializeDOM                                                 // 384
          // (which is always called in a Tracker.nonreactive).                                                            // 385
          initialContents = []; // 386
          // push this function first so that it happens last                                                              // 387
          _workStack.push(function () {
            // 388
            domrange = doFirstRender(view, initialContents); // 389
            initialContents = null; // help GC because of all the closures here                                            // 390
            _intoArray.push(domrange); // 391
          }); // 392
          // now push the task that calculates initialContents                                                             // 393
          _workStack.push(Blaze._bind(Blaze._materializeDOM, null, // 394
          lastHtmljs, initialContents, view, _workStack)); // 395
        } // 396
      }); // 397
      // 398
      if (!_workStack) {
        // 399
        return domrange; // 400
      } else {
        // 401
        return null; // 402
      } // 403
    }; // 404
    // 405
    // Expands a View to HTMLjs, calling `render` recursively on all                                                       // 406
    // Views and evaluating any dynamic attributes.  Calls the `created`                                                   // 407
    // callback, but not the `materialized` or `rendered` callbacks.                                                       // 408
    // Destroys the view immediately, unless called in a Tracker Computation,                                              // 409
    // in which case the view will be destroyed when the Computation is                                                    // 410
    // invalidated.  If called in a Tracker Computation, the result is a                                                   // 411
    // reactive string; that is, the Computation will be invalidated                                                       // 412
    // if any changes are made to the view or subviews that might affect                                                   // 413
    // the HTML.                                                                                                           // 414
    Blaze._expandView = function (view, parentView) {
      // 415
      Blaze._createView(view, parentView, true /*forExpansion*/); // 416
      // 417
      view._isInRender = true; // 418
      var htmljs = Blaze._withCurrentView(view, function () {
        // 419
        return view._render(); // 420
      }); // 421
      view._isInRender = false; // 422
      // 423
      var result = Blaze._expand(htmljs, view); // 424
      // 425
      if (Tracker.active) {
        // 426
        Tracker.onInvalidate(function () {
          // 427
          Blaze._destroyView(view); // 428
        }); // 429
      } else {
        // 430
        Blaze._destroyView(view); // 431
      } // 432
      // 433
      return result; // 434
    }; // 435
    // 436
    // Options: `parentView`                                                                                               // 437
    Blaze._HTMLJSExpander = HTML.TransformingVisitor.extend(); // 438
    Blaze._HTMLJSExpander.def({ // 439
      visitObject: function (x) {
        // 440
        if (x instanceof Blaze.Template) // 441
          x = x.constructView(); // 442
        if (x instanceof Blaze.View) // 443
          return Blaze._expandView(x, this.parentView); // 444
        // 445
        // this will throw an error; other objects are not allowed!                                                        // 446
        return HTML.TransformingVisitor.prototype.visitObject.call(this, x); // 447
      }, // 448
      visitAttributes: function (attrs) {
        // 449
        // expand dynamic attributes                                                                                       // 450
        if (typeof attrs === 'function') // 451
          attrs = Blaze._withCurrentView(this.parentView, attrs); // 452
        // 453
        // call super (e.g. for case where `attrs` is an array)                                                            // 454
        return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs); // 455
      }, // 456
      visitAttribute: function (name, value, tag) {
        // 457
        // expand attribute values that are functions.  Any attribute value                                                // 458
        // that contains Views must be wrapped in a function.                                                              // 459
        if (typeof value === 'function') // 460
          value = Blaze._withCurrentView(this.parentView, value); // 461
        // 462
        return HTML.TransformingVisitor.prototype.visitAttribute.call( // 463
        this, name, value, tag); // 464
      } // 465
    }); // 466
    // 467
    // Return Blaze.currentView, but only if it is being rendered                                                          // 468
    // (i.e. we are in its render() method).                                                                               // 469
    var currentViewIfRendering = function () {
      // 470
      var view = Blaze.currentView; // 471
      return view && view._isInRender ? view : null; // 472
    }; // 473
    // 474
    Blaze._expand = function (htmljs, parentView) {
      // 475
      parentView = parentView || currentViewIfRendering(); // 476
      return new Blaze._HTMLJSExpander( // 477
      { parentView: parentView }).visit(htmljs); // 478
    }; // 479
    // 480
    Blaze._expandAttributes = function (attrs, parentView) {
      // 481
      parentView = parentView || currentViewIfRendering(); // 482
      return new Blaze._HTMLJSExpander( // 483
      { parentView: parentView }).visitAttributes(attrs); // 484
    }; // 485
    // 486
    Blaze._destroyView = function (view, _skipNodes) {
      // 487
      if (view.isDestroyed) // 488
        return; // 489
      view.isDestroyed = true; // 490
      // 491
      Blaze._fireCallbacks(view, 'destroyed'); // 492
      // 493
      // Destroy views and elements recursively.  If _skipNodes,                                                           // 494
      // only recurse up to views, not elements, for the case where                                                        // 495
      // the backend (jQuery) is recursing over the elements already.                                                      // 496
      // 497
      if (view._domrange) // 498
        view._domrange.destroyMembers(_skipNodes); // 499
    }; // 500
    // 501
    Blaze._destroyNode = function (node) {
      // 502
      if (node.nodeType === 1) // 503
        Blaze._DOMBackend.Teardown.tearDownElement(node); // 504
    }; // 505
    // 506
    // Are the HTMLjs entities `a` and `b` the same?  We could be                                                          // 507
    // more elaborate here but the point is to catch the most basic                                                        // 508
    // cases.                                                                                                              // 509
    Blaze._isContentEqual = function (a, b) {
      // 510
      if (a instanceof HTML.Raw) {
        // 511
        return b instanceof HTML.Raw && a.value === b.value; // 512
      } else if (a == null) {
        // 513
        return b == null; // 514
      } else {
        // 515
        return a === b && ( // 516
        typeof a === 'number' || typeof a === 'boolean' || // 517
        typeof a === 'string'); // 518
      } // 519
    }; // 520
    // 521
    /**                                                                                                                    // 522
     * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
     * @locus Client                                                                                                       // 524
     * @type {Blaze.View}                                                                                                  // 525
     */ // 526
    Blaze.currentView = null; // 527
    // 528
    Blaze._withCurrentView = function (view, func) {
      // 529
      var oldView = Blaze.currentView; // 530
      try {
        // 531
        Blaze.currentView = view; // 532
        return func(); // 533
      } finally {
        // 534
        Blaze.currentView = oldView; // 535
      } // 536
    }; // 537
    // 538
    // Blaze.render publicly takes a View or a Template.                                                                   // 539
    // Privately, it takes any HTMLJS (extended with Views and Templates)                                                  // 540
    // except null or undefined, or a function that returns any extended                                                   // 541
    // HTMLJS.                                                                                                             // 542
    var checkRenderContent = function (content) {
      // 543
      if (content === null) // 544
        throw new Error("Can't render null"); // 545
      if (typeof content === 'undefined') // 546
        throw new Error("Can't render undefined"); // 547
      // 548
      if (content instanceof Blaze.View || // 549
      content instanceof Blaze.Template || // 550
      typeof content === 'function') // 551
        return; // 552
      // 553
      try {
        // 554
        // Throw if content doesn't look like HTMLJS at the top level                                                      // 555
        // (i.e. verify that this is an HTML.Tag, or an array,                                                             // 556
        // or a primitive, etc.)                                                                                           // 557
        new HTML.Visitor().visit(content); // 558
      } catch (e) {
        // 559
        // Make error message suitable for public API                                                                      // 560
        throw new Error("Expected Template or View"); // 561
      } // 562
    }; // 563
    // 564
    // For Blaze.render and Blaze.toHTML, take content and                                                                 // 565
    // wrap it in a View, unless it's a single View or                                                                     // 566
    // Template already.                                                                                                   // 567
    var contentAsView = function (content) {
      // 568
      checkRenderContent(content); // 569
      // 570
      if (content instanceof Blaze.Template) {
        // 571
        return content.constructView(); // 572
      } else if (content instanceof Blaze.View) {
        // 573
        return content; // 574
      } else {
        // 575
        var func = content; // 576
        if (typeof func !== 'function') {
          // 577
          func = function () {
            // 578
            return content; // 579
          }; // 580
        } // 581
        return Blaze.View('render', func); // 582
      } // 583
    }; // 584
    // 585
    // For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content                                                     // 586
    // in a function, if necessary, so it can be a content arg to                                                          // 587
    // a Blaze.With.                                                                                                       // 588
    var contentAsFunc = function (content) {
      // 589
      checkRenderContent(content); // 590
      // 591
      if (typeof content !== 'function') {
        // 592
        return function () {
          // 593
          return content; // 594
        }; // 595
      } else {
        // 596
        return content; // 597
      } // 598
    }; // 599
    // 600
    /**                                                                                                                    // 601
     * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#blaze_view) which can be passed to [`Blaze.remove`](#blaze_remove).
     * @locus Client                                                                                                       // 603
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.
     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
     */ // 608
    Blaze.render = function (content, parentElement, nextNode, parentView) {
      // 609
      if (!parentElement) {
        // 610
        Blaze._warn("Blaze.render without a parent element is deprecated. " + // 611
        "You must specify where to insert the rendered content."); // 612
      } // 613
      // 614
      if (nextNode instanceof Blaze.View) {
        // 615
        // handle omitted nextNode                                                                                         // 616
        parentView = nextNode; // 617
        nextNode = null; // 618
      } // 619
      // 620
      // parentElement must be a DOM node. in particular, can't be the                                                     // 621
      // result of a call to `$`. Can't check if `parentElement instanceof                                                 // 622
      // Node` since 'Node' is undefined in IE8.                                                                           // 623
      if (parentElement && typeof parentElement.nodeType !== 'number') // 624
        throw new Error("'parentElement' must be a DOM node"); // 625
      if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional                                     // 626
        throw new Error("'nextNode' must be a DOM node"); // 627
      // 628
      parentView = parentView || currentViewIfRendering(); // 629
      // 630
      var view = contentAsView(content); // 631
      Blaze._materializeView(view, parentView); // 632
      // 633
      if (parentElement) {
        // 634
        view._domrange.attach(parentElement, nextNode); // 635
      } // 636
      // 637
      return view; // 638
    }; // 639
    // 640
    Blaze.insert = function (view, parentElement, nextNode) {
      // 641
      Blaze._warn("Blaze.insert has been deprecated.  Specify where to insert the " + // 642
      "rendered content in the call to Blaze.render."); // 643
      // 644
      if (!(view && view._domrange instanceof Blaze._DOMRange)) // 645
        throw new Error("Expected template rendered with Blaze.render"); // 646
      // 647
      view._domrange.attach(parentElement, nextNode); // 648
    }; // 649
    // 650
    /**                                                                                                                    // 651
     * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.       // 652
     * @locus Client                                                                                                       // 653
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.     // 654
     * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.
     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
     */ // 659
    Blaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {
      // 660
      // We defer the handling of optional arguments to Blaze.render.  At this point,                                      // 661
      // `nextNode` may actually be `parentView`.                                                                          // 662
      return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)), // 663
      parentElement, nextNode, parentView); // 664
    }; // 665
    // 666
    /**                                                                                                                    // 667
     * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.
     * @locus Client                                                                                                       // 669
     * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.
     */ // 671
    Blaze.remove = function (view) {
      // 672
      if (!(view && view._domrange instanceof Blaze._DOMRange)) // 673
        throw new Error("Expected template rendered with Blaze.render"); // 674
      // 675
      while (view) {
        // 676
        if (!view.isDestroyed) {
          // 677
          var range = view._domrange; // 678
          if (range.attached && !range.parentRange) // 679
            range.detach(); // 680
          range.destroy(); // 681
        } // 682
        // 683
        view = view._hasGeneratedParent && view.parentView; // 684
      } // 685
    }; // 686
    // 687
    /**                                                                                                                    // 688
     * @summary Renders a template or View to a string of HTML.                                                            // 689
     * @locus Client                                                                                                       // 690
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
     */ // 692
    Blaze.toHTML = function (content, parentView) {
      // 693
      parentView = parentView || currentViewIfRendering(); // 694
      // 695
      return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView)); // 696
    }; // 697
    // 698
    /**                                                                                                                    // 699
     * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.            // 700
     * @locus Client                                                                                                       // 701
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
     * @param {Object|Function} data The data context to use, or a function returning a data context.                      // 703
     */ // 704
    Blaze.toHTMLWithData = function (content, data, parentView) {
      // 705
      parentView = parentView || currentViewIfRendering(); // 706
      // 707
      return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith( // 708
      data, contentAsFunc(content)), parentView)); // 709
    }; // 710
    // 711
    Blaze._toText = function (htmljs, parentView, textMode) {
      // 712
      if (typeof htmljs === 'function') // 713
        throw new Error("Blaze._toText doesn't take a function, just HTMLjs"); // 714
      // 715
      if (parentView != null && !(parentView instanceof Blaze.View)) {
        // 716
        // omitted parentView argument                                                                                     // 717
        textMode = parentView; // 718
        parentView = null; // 719
      } // 720
      parentView = parentView || currentViewIfRendering(); // 721
      // 722
      if (!textMode) // 723
        throw new Error("textMode required"); // 724
      if (!(textMode === HTML.TEXTMODE.STRING || // 725
      textMode === HTML.TEXTMODE.RCDATA || // 726
      textMode === HTML.TEXTMODE.ATTRIBUTE)) // 727
        throw new Error("Unknown textMode: " + textMode); // 728
      // 729
      return HTML.toText(Blaze._expand(htmljs, parentView), textMode); // 730
    }; // 731
    // 732
    /**                                                                                                                    // 733
     * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.
     * @locus Client                                                                                                       // 735
     * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.      // 736
     */ // 737
    Blaze.getData = function (elementOrView) {
      // 738
      var theWith; // 739
      // 740
      if (!elementOrView) {
        // 741
        theWith = Blaze.getView('with'); // 742
      } else if (elementOrView instanceof Blaze.View) {
        // 743
        var view = elementOrView; // 744
        theWith = view.name === 'with' ? view : // 745
        Blaze.getView(view, 'with'); // 746
      } else if (typeof elementOrView.nodeType === 'number') {
        // 747
        if (elementOrView.nodeType !== 1) // 748
          throw new Error("Expected DOM element"); // 749
        theWith = Blaze.getView(elementOrView, 'with'); // 750
      } else {
        // 751
        throw new Error("Expected DOM element or View"); // 752
      } // 753
      // 754
      return theWith ? theWith.dataVar.get() : null; // 755
    }; // 756
    // 757
    // For back-compat                                                                                                     // 758
    Blaze.getElementData = function (element) {
      // 759
      Blaze._warn("Blaze.getElementData has been deprecated.  Use " + // 760
      "Blaze.getData(element) instead."); // 761
      // 762
      if (element.nodeType !== 1) // 763
        throw new Error("Expected DOM element"); // 764
      // 765
      return Blaze.getData(element); // 766
    }; // 767
    // 768
    // Both arguments are optional.                                                                                        // 769
    // 770
    /**                                                                                                                    // 771
     * @summary Gets either the current View, or the View enclosing the given DOM element.                                 // 772
     * @locus Client                                                                                                       // 773
     * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.                    // 774
     */ // 775
    Blaze.getView = function (elementOrView, _viewName) {
      // 776
      var viewName = _viewName; // 777
      // 778
      if (typeof elementOrView === 'string') {
        // 779
        // omitted elementOrView; viewName present                                                                         // 780
        viewName = elementOrView; // 781
        elementOrView = null; // 782
      } // 783
      // 784
      // We could eventually shorten the code by folding the logic                                                         // 785
      // from the other methods into this method.                                                                          // 786
      if (!elementOrView) {
        // 787
        return Blaze._getCurrentView(viewName); // 788
      } else if (elementOrView instanceof Blaze.View) {
        // 789
        return Blaze._getParentView(elementOrView, viewName); // 790
      } else if (typeof elementOrView.nodeType === 'number') {
        // 791
        return Blaze._getElementView(elementOrView, viewName); // 792
      } else {
        // 793
        throw new Error("Expected DOM element or View"); // 794
      } // 795
    }; // 796
    // 797
    // Gets the current view or its nearest ancestor of name                                                               // 798
    // `name`.                                                                                                             // 799
    Blaze._getCurrentView = function (name) {
      // 800
      var view = Blaze.currentView; // 801
      // Better to fail in cases where it doesn't make sense                                                               // 802
      // to use Blaze._getCurrentView().  There will be a current                                                          // 803
      // view anywhere it does.  You can check Blaze.currentView                                                           // 804
      // if you want to know whether there is one or not.                                                                  // 805
      if (!view) // 806
        throw new Error("There is no current view"); // 807
      // 808
      if (name) {
        // 809
        while (view && view.name !== name) // 810
        view = view.parentView; // 811
        return view || null; // 812
      } else {
        // 813
        // Blaze._getCurrentView() with no arguments just returns                                                          // 814
        // Blaze.currentView.                                                                                              // 815
        return view; // 816
      } // 817
    }; // 818
    // 819
    Blaze._getParentView = function (view, name) {
      // 820
      var v = view.parentView; // 821
      // 822
      if (name) {
        // 823
        while (v && v.name !== name) // 824
        v = v.parentView; // 825
      } // 826
      // 827
      return v || null; // 828
    }; // 829
    // 830
    Blaze._getElementView = function (elem, name) {
      // 831
      var range = Blaze._DOMRange.forElement(elem); // 832
      var view = null; // 833
      while (range && !view) {
        // 834
        view = range.view || null; // 835
        if (!view) {
          // 836
          if (range.parentRange) // 837
            range = range.parentRange; // 838
          else // 839
            range = Blaze._DOMRange.forElement(range.parentElement); // 840
        } // 841
      } // 842
      // 843
      if (name) {
        // 844
        while (view && view.name !== name) // 845
        view = view.parentView; // 846
        return view || null; // 847
      } else {
        // 848
        return view; // 849
      } // 850
    }; // 851
    // 852
    Blaze._addEventMap = function (view, eventMap, thisInHandler) {
      // 853
      thisInHandler = thisInHandler || null; // 854
      var handles = []; // 855
      // 856
      if (!view._domrange) // 857
        throw new Error("View must have a DOMRange"); // 858
      // 859
      view._domrange.onAttached(function attached_eventMaps(range, element) {
        // 860
        _.each(eventMap, function (handler, spec) {
          // 861
          var clauses = spec.split(/,\s+/); // 862
          // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                               // 863
          _.each(clauses, function (clause) {
            // 864
            var parts = clause.split(/\s+/); // 865
            if (parts.length === 0) // 866
              return; // 867
            // 868
            var newEvents = parts.shift(); // 869
            var selector = parts.join(' '); // 870
            handles.push(Blaze._EventSupport.listen( // 871
            element, newEvents, selector, // 872
            function (evt) {
              // 873
              if (!range.containsElement(evt.currentTarget)) // 874
                return null; // 875
              var handlerThis = thisInHandler || this; // 876
              var handlerArgs = arguments; // 877
              return Blaze._withCurrentView(view, function () {
                // 878
                return handler.apply(handlerThis, handlerArgs); // 879
              }); // 880
            }, // 881
            range, function (r) {
              // 882
              return r.parentRange; // 883
            })); // 884
          }); // 885
        }); // 886
      }); // 887
      // 888
      view.onViewDestroyed(function () {
        // 889
        _.each(handles, function (h) {
          // 890
          h.stop(); // 891
        }); // 892
        handles.length = 0; // 893
      }); // 894
    }; // 895
    // 896
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/builtins.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    Blaze._calculateCondition = function (cond) {
      // 1
      if (cond instanceof Array && cond.length === 0) // 2
        cond = false; // 3
      return !!cond; // 4
    }; // 5
    // 6
    /**                                                                                                                    // 7
     * @summary Constructs a View that renders content with a data context.                                                // 8
     * @locus Client                                                                                                       // 9
     * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 11
     */ // 12
    Blaze.With = function (data, contentFunc) {
      // 13
      var view = Blaze.View('with', contentFunc); // 14
      // 15
      view.dataVar = new ReactiveVar(); // 16
      // 17
      view.onViewCreated(function () {
        // 18
        if (typeof data === 'function') {
          // 19
          // `data` is a reactive function                                                                                 // 20
          view.autorun(function () {
            // 21
            view.dataVar.set(data()); // 22
          }, view.parentView, 'setData'); // 23
        } else {
          // 24
          view.dataVar.set(data); // 25
        } // 26
      }); // 27
      // 28
      return view; // 29
    }; // 30
    // 31
    /**                                                                                                                    // 32
     * Attaches bindings to the instantiated view.                                                                         // 33
     * @param {Object} bindings A dictionary of bindings, each binding name                                                // 34
     * corresponds to a value or a function that will be reactively re-run.                                                // 35
     * @param {View} view The target.                                                                                      // 36
     */ // 37
    Blaze._attachBindingsToView = function (bindings, view) {
      // 38
      view.onViewCreated(function () {
        // 39
        _.each(bindings, function (binding, name) {
          // 40
          view._scopeBindings[name] = new ReactiveVar(); // 41
          if (typeof binding === 'function') {
            // 42
            view.autorun(function () {
              // 43
              view._scopeBindings[name].set(binding()); // 44
            }, view.parentView); // 45
          } else {
            // 46
            view._scopeBindings[name].set(binding); // 47
          } // 48
        }); // 49
      }); // 50
    }; // 51
    // 52
    /**                                                                                                                    // 53
     * @summary Constructs a View setting the local lexical scope in the block.                                            // 54
     * @param {Function} bindings Dictionary mapping names of bindings to                                                  // 55
     * values or computations to reactively re-run.                                                                        // 56
     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 57
     */ // 58
    Blaze.Let = function (bindings, contentFunc) {
      // 59
      var view = Blaze.View('let', contentFunc); // 60
      Blaze._attachBindingsToView(bindings, view); // 61
      // 62
      return view; // 63
    }; // 64
    // 65
    /**                                                                                                                    // 66
     * @summary Constructs a View that renders content conditionally.                                                      // 67
     * @locus Client                                                                                                       // 68
     * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 70
     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
     */ // 72
    Blaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {
      // 73
      var conditionVar = new ReactiveVar(); // 74
      // 75
      var view = Blaze.View(_not ? 'unless' : 'if', function () {
        // 76
        return conditionVar.get() ? contentFunc() : // 77
        elseFunc ? elseFunc() : null; // 78
      }); // 79
      view.__conditionVar = conditionVar; // 80
      view.onViewCreated(function () {
        // 81
        this.autorun(function () {
          // 82
          var cond = Blaze._calculateCondition(conditionFunc()); // 83
          conditionVar.set(_not ? !cond : cond); // 84
        }, this.parentView, 'condition'); // 85
      }); // 86
      // 87
      return view; // 88
    }; // 89
    // 90
    /**                                                                                                                    // 91
     * @summary An inverted [`Blaze.If`](#blaze_if).                                                                       // 92
     * @locus Client                                                                                                       // 93
     * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 95
     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
     */ // 97
    Blaze.Unless = function (conditionFunc, contentFunc, elseFunc) {
      // 98
      return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/); // 99
    }; // 100
    // 101
    /**                                                                                                                    // 102
     * @summary Constructs a View that renders `contentFunc` for each item in a sequence.                                  // 103
     * @locus Client                                                                                                       // 104
     * @param {Function} argFunc A function to reactively re-run. The function can                                         // 105
     * return one of two options:                                                                                          // 106
     *                                                                                                                     // 107
     * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over                                       // 108
     *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the                                         // 109
     *   Each body you will be able to get the current item from the sequence using                                        // 110
     *   the name specified in the '_variable' field.                                                                      // 111
     *                                                                                                                     // 112
     * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an                                          // 113
     *   object. Inside the Each body, the current item will be set as the data                                            // 114
     *   context.                                                                                                          // 115
     * @param {Function} contentFunc A Function that returns  [*renderable                                                 // 116
     * content*](#renderable_content).                                                                                     // 117
     * @param {Function} [elseFunc] A Function that returns [*renderable                                                   // 118
     * content*](#renderable_content) to display in the case when there are no items                                       // 119
     * in the sequence.                                                                                                    // 120
     */ // 121
    Blaze.Each = function (argFunc, contentFunc, elseFunc) {
      // 122
      var eachView = Blaze.View('each', function () {
        // 123
        var subviews = this.initialSubviews; // 124
        this.initialSubviews = null; // 125
        if (this._isCreatedForExpansion) {
          // 126
          this.expandedValueDep = new Tracker.Dependency(); // 127
          this.expandedValueDep.depend(); // 128
        } // 129
        return subviews; // 130
      }); // 131
      eachView.initialSubviews = []; // 132
      eachView.numItems = 0; // 133
      eachView.inElseMode = false; // 134
      eachView.stopHandle = null; // 135
      eachView.contentFunc = contentFunc; // 136
      eachView.elseFunc = elseFunc; // 137
      eachView.argVar = new ReactiveVar(); // 138
      eachView.variableName = null; // 139
      // 140
      // update the @index value in the scope of all subviews in the range                                                 // 141
      var updateIndices = function (from, to) {
        // 142
        if (to === undefined) {
          // 143
          to = eachView.numItems - 1; // 144
        } // 145
        // 146
        for (var i = from; i <= to; i++) {
          // 147
          var view = eachView._domrange.members[i].view; // 148
          view._scopeBindings['@index'].set(i); // 149
        } // 150
      }; // 151
      // 152
      eachView.onViewCreated(function () {
        // 153
        // We evaluate argFunc in an autorun to make sure                                                                  // 154
        // Blaze.currentView is always set when it runs (rather than                                                       // 155
        // passing argFunc straight to ObserveSequence).                                                                   // 156
        eachView.autorun(function () {
          // 157
          // argFunc can return either a sequence as is or a wrapper object with a                                         // 158
          // _sequence and _variable fields set.                                                                           // 159
          var arg = argFunc(); // 160
          if (_.isObject(arg) && _.has(arg, '_sequence')) {
            // 161
            eachView.variableName = arg._variable || null; // 162
            arg = arg._sequence; // 163
          } // 164
          // 165
          eachView.argVar.set(arg); // 166
        }, eachView.parentView, 'collection'); // 167
        // 168
        eachView.stopHandle = ObserveSequence.observe(function () {
          // 169
          return eachView.argVar.get(); // 170
        }, { // 171
          addedAt: function (id, item, index) {
            // 172
            Tracker.nonreactive(function () {
              // 173
              var newItemView; // 174
              if (eachView.variableName) {
                // 175
                // new-style #each (as in {{#each item in items}})                                                         // 176
                // doesn't create a new data context                                                                       // 177
                newItemView = Blaze.View('item', eachView.contentFunc); // 178
              } else {
                // 179
                newItemView = Blaze.With(item, eachView.contentFunc); // 180
              } // 181
              // 182
              eachView.numItems++; // 183
              // 184
              var bindings = {}; // 185
              bindings['@index'] = index; // 186
              if (eachView.variableName) {
                // 187
                bindings[eachView.variableName] = item; // 188
              } // 189
              Blaze._attachBindingsToView(bindings, newItemView); // 190
              // 191
              if (eachView.expandedValueDep) {
                // 192
                eachView.expandedValueDep.changed(); // 193
              } else if (eachView._domrange) {
                // 194
                if (eachView.inElseMode) {
                  // 195
                  eachView._domrange.removeMember(0); // 196
                  eachView.inElseMode = false; // 197
                } // 198
                // 199
                var range = Blaze._materializeView(newItemView, eachView); // 200
                eachView._domrange.addMember(range, index); // 201
                updateIndices(index); // 202
              } else {
                // 203
                eachView.initialSubviews.splice(index, 0, newItemView); // 204
              } // 205
            }); // 206
          }, // 207
          removedAt: function (id, item, index) {
            // 208
            Tracker.nonreactive(function () {
              // 209
              eachView.numItems--; // 210
              if (eachView.expandedValueDep) {
                // 211
                eachView.expandedValueDep.changed(); // 212
              } else if (eachView._domrange) {
                // 213
                eachView._domrange.removeMember(index); // 214
                updateIndices(index); // 215
                if (eachView.elseFunc && eachView.numItems === 0) {
                  // 216
                  eachView.inElseMode = true; // 217
                  eachView._domrange.addMember( // 218
                  Blaze._materializeView( // 219
                  Blaze.View('each_else', eachView.elseFunc), // 220
                  eachView), 0); // 221
                } // 222
              } else {
                // 223
                eachView.initialSubviews.splice(index, 1); // 224
              } // 225
            }); // 226
          }, // 227
          changedAt: function (id, newItem, oldItem, index) {
            // 228
            Tracker.nonreactive(function () {
              // 229
              if (eachView.expandedValueDep) {
                // 230
                eachView.expandedValueDep.changed(); // 231
              } else {
                // 232
                var itemView; // 233
                if (eachView._domrange) {
                  // 234
                  itemView = eachView._domrange.getMember(index).view; // 235
                } else {
                  // 236
                  itemView = eachView.initialSubviews[index]; // 237
                } // 238
                if (eachView.variableName) {
                  // 239
                  itemView._scopeBindings[eachView.variableName].set(newItem); // 240
                } else {
                  // 241
                  itemView.dataVar.set(newItem); // 242
                } // 243
              } // 244
            }); // 245
          }, // 246
          movedTo: function (id, item, fromIndex, toIndex) {
            // 247
            Tracker.nonreactive(function () {
              // 248
              if (eachView.expandedValueDep) {
                // 249
                eachView.expandedValueDep.changed(); // 250
              } else if (eachView._domrange) {
                // 251
                eachView._domrange.moveMember(fromIndex, toIndex); // 252
                updateIndices( // 253
                Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex)); // 254
              } else {
                // 255
                var subviews = eachView.initialSubviews; // 256
                var itemView = subviews[fromIndex]; // 257
                subviews.splice(fromIndex, 1); // 258
                subviews.splice(toIndex, 0, itemView); // 259
              } // 260
            }); // 261
          } // 262
        }); // 263
        // 264
        if (eachView.elseFunc && eachView.numItems === 0) {
          // 265
          eachView.inElseMode = true; // 266
          eachView.initialSubviews[0] = // 267
          Blaze.View('each_else', eachView.elseFunc); // 268
        } // 269
      }); // 270
      // 271
      eachView.onViewDestroyed(function () {
        // 272
        if (eachView.stopHandle) // 273
          eachView.stopHandle.stop(); // 274
      }); // 275
      // 276
      return eachView; // 277
    }; // 278
    // 279
    Blaze._TemplateWith = function (arg, contentFunc) {
      // 280
      var w; // 281
      // 282
      var argFunc = arg; // 283
      if (typeof arg !== 'function') {
        // 284
        argFunc = function () {
          // 285
          return arg; // 286
        }; // 287
      } // 288
      // 289
      // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we                                        // 290
      // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate                                          // 291
      // parent Views in the current template.  However, when there's an argument                                          // 292
      // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated                                           // 293
      // in the original scope.  There's no good order to nest                                                             // 294
      // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,                                           // 295
      // so we wrap argFunc to run it in the "original parentView" of the                                                  // 296
      // Blaze._InOuterTemplateScope.                                                                                      // 297
      //                                                                                                                   // 298
      // To make this better, reconsider _InOuterTemplateScope as a primitive.                                             // 299
      // Longer term, evaluate expressions in the proper lexical scope.                                                    // 300
      var wrappedArgFunc = function () {
        // 301
        var viewToEvaluateArg = null; // 302
        if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {
          // 303
          viewToEvaluateArg = w.parentView.originalParentView; // 304
        } // 305
        if (viewToEvaluateArg) {
          // 306
          return Blaze._withCurrentView(viewToEvaluateArg, argFunc); // 307
        } else {
          // 308
          return argFunc(); // 309
        } // 310
      }; // 311
      // 312
      var wrappedContentFunc = function () {
        // 313
        var content = contentFunc.call(this); // 314
        // 315
        // Since we are generating the Blaze._TemplateWith view for the                                                    // 316
        // user, set the flag on the child view.  If `content` is a template,                                              // 317
        // construct the View so that we can set the flag.                                                                 // 318
        if (content instanceof Blaze.Template) {
          // 319
          content = content.constructView(); // 320
        } // 321
        if (content instanceof Blaze.View) {
          // 322
          content._hasGeneratedParent = true; // 323
        } // 324
        // 325
        return content; // 326
      }; // 327
      // 328
      w = Blaze.With(wrappedArgFunc, wrappedContentFunc); // 329
      w.__isTemplateWith = true; // 330
      return w; // 331
    }; // 332
    // 333
    Blaze._InOuterTemplateScope = function (templateView, contentFunc) {
      // 334
      var view = Blaze.View('InOuterTemplateScope', contentFunc); // 335
      var parentView = templateView.parentView; // 336
      // 337
      // Hack so that if you call `{{> foo bar}}` and it expands into                                                      // 338
      // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template                                                   // 339
      // that inserts `{{> Template.contentBlock}}`, the data context for                                                  // 340
      // `Template.contentBlock` is not `bar` but the one enclosing that.                                                  // 341
      if (parentView.__isTemplateWith) // 342
        parentView = parentView.parentView; // 343
      // 344
      view.onViewCreated(function () {
        // 345
        this.originalParentView = this.parentView; // 346
        this.parentView = parentView; // 347
        this.__childDoesntStartNewLexicalScope = true; // 348
      }); // 349
      return view; // 350
    }; // 351
    // 352
    // XXX COMPAT WITH 0.9.0                                                                                               // 353
    Blaze.InOuterTemplateScope = Blaze._InOuterTemplateScope; // 354
    // 355
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/lookup.js                                                                                            //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    Blaze._globalHelpers = {}; // 1
    // 2
    // Documented as Template.registerHelper.                                                                              // 3
    // This definition also provides back-compat for `UI.registerHelper`.                                                  // 4
    Blaze.registerHelper = function (name, func) {
      // 5
      Blaze._globalHelpers[name] = func; // 6
    }; // 7
    // 8
    // Also documented as Template.deregisterHelper                                                                        // 9
    Blaze.deregisterHelper = function (name) {
      // 10
      delete Blaze._globalHelpers[name]; // 11
    }; // 12
    // 13
    var bindIfIsFunction = function (x, target) {
      // 14
      if (typeof x !== 'function') // 15
        return x; // 16
      return Blaze._bind(x, target); // 17
    }; // 18
    // 19
    // If `x` is a function, binds the value of `this` for that function                                                   // 20
    // to the current data context.                                                                                        // 21
    var bindDataContext = function (x) {
      // 22
      if (typeof x === 'function') {
        // 23
        return function () {
          // 24
          var data = Blaze.getData(); // 25
          if (data == null) // 26
            data = {}; // 27
          return x.apply(data, arguments); // 28
        }; // 29
      } // 30
      return x; // 31
    }; // 32
    // 33
    Blaze._OLDSTYLE_HELPER = {}; // 34
    // 35
    Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {
      // 36
      // XXX COMPAT WITH 0.9.3                                                                                             // 37
      var isKnownOldStyleHelper = false; // 38
      // 39
      if (template.__helpers.has(name)) {
        // 40
        var helper = template.__helpers.get(name); // 41
        if (helper === Blaze._OLDSTYLE_HELPER) {
          // 42
          isKnownOldStyleHelper = true; // 43
        } else if (helper != null) {
          // 44
          return wrapHelper(bindDataContext(helper), tmplInstanceFunc); // 45
        } else {
          // 46
          return null; // 47
        } // 48
      } // 49
      // 50
      // old-style helper                                                                                                  // 51
      if (name in template) {
        // 52
        // Only warn once per helper                                                                                       // 53
        if (!isKnownOldStyleHelper) {
          // 54
          template.__helpers.set(name, Blaze._OLDSTYLE_HELPER); // 55
          if (!template._NOWARN_OLDSTYLE_HELPERS) {
            // 56
            Blaze._warn('Assigning helper with `' + template.viewName + '.' + // 57
            name + ' = ...` is deprecated.  Use `' + template.viewName + // 58
            '.helpers(...)` instead.'); // 59
          } // 60
        } // 61
        if (template[name] != null) {
          // 62
          return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc); // 63
        } // 64
      } // 65
      // 66
      return null; // 67
    }; // 68
    // 69
    var wrapHelper = function (f, templateFunc) {
      // 70
      if (typeof f !== "function") {
        // 71
        return f; // 72
      } // 73
      // 74
      return function () {
        // 75
        var self = this; // 76
        var args = arguments; // 77
        // 78
        return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {
          // 79
          return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args); // 80
        }); // 81
      }; // 82
    }; // 83
    // 84
    Blaze._lexicalBindingLookup = function (view, name) {
      // 85
      var currentView = view; // 86
      var blockHelpersStack = []; // 87
      // 88
      // walk up the views stopping at a Spacebars.include or Template view that                                           // 89
      // doesn't have an InOuterTemplateScope view as a parent                                                             // 90
      do {
        // 91
        // skip block helpers views                                                                                        // 92
        // if we found the binding on the scope, return it                                                                 // 93
        if (_.has(currentView._scopeBindings, name)) {
          // 94
          var bindingReactiveVar = currentView._scopeBindings[name]; // 95
          return function () {
            // 96
            return bindingReactiveVar.get(); // 97
          }; // 98
        } // 99
      } while (!(currentView.__startsNewLexicalScope && // 100
      !(currentView.parentView && // 101
      currentView.parentView.__childDoesntStartNewLexicalScope)) // 102
      && (currentView = currentView.parentView)); // 103
      // 104
      return null; // 105
    }; // 106
    // 107
    // templateInstance argument is provided to be available for possible                                                  // 108
    // alternative implementations of this function by 3rd party packages.                                                 // 109
    Blaze._getTemplate = function (name, templateInstance) {
      // 110
      if (name in Blaze.Template && Blaze.Template[name] instanceof Blaze.Template) {
        // 111
        return Blaze.Template[name]; // 112
      } // 113
      return null; // 114
    }; // 115
    // 116
    Blaze._getGlobalHelper = function (name, templateInstance) {
      // 117
      if (Blaze._globalHelpers[name] != null) {
        // 118
        return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance); // 119
      } // 120
      return null; // 121
    }; // 122
    // 123
    // Looks up a name, like "foo" or "..", as a helper of the                                                             // 124
    // current template; the name of a template; a global helper;                                                          // 125
    // or a property of the data context.  Called on the View of                                                           // 126
    // a template (i.e. a View with a `.template` property,                                                                // 127
    // where the helpers are).  Used for the first name in a                                                               // 128
    // "path" in a template tag, like "foo" in `{{foo.bar}}` or                                                            // 129
    // ".." in `{{frobulate ../blah}}`.                                                                                    // 130
    //                                                                                                                     // 131
    // Returns a function, a non-function value, or null.  If                                                              // 132
    // a function is found, it is bound appropriately.                                                                     // 133
    //                                                                                                                     // 134
    // NOTE: This function must not establish any reactive                                                                 // 135
    // dependencies itself.  If there is any reactivity in the                                                             // 136
    // value, lookup should return a function.                                                                             // 137
    Blaze.View.prototype.lookup = function (name, _options) {
      // 138
      var template = this.template; // 139
      var lookupTemplate = _options && _options.template; // 140
      var helper; // 141
      var binding; // 142
      var boundTmplInstance; // 143
      var foundTemplate; // 144
      // 145
      if (this.templateInstance) {
        // 146
        boundTmplInstance = Blaze._bind(this.templateInstance, this); // 147
      } // 148
      // 149
      // 0. looking up the parent data context with the special "../" syntax                                               // 150
      if (/^\./.test(name)) {
        // 151
        // starts with a dot. must be a series of dots which maps to an                                                    // 152
        // ancestor of the appropriate height.                                                                             // 153
        if (!/^(\.)+$/.test(name)) // 154
          throw new Error("id starting with dot must be a series of dots"); // 155
        // 156
        return Blaze._parentData(name.length - 1, true /*_functionWrapped*/); // 157
        // 158
      } // 159
      // 160
      // 1. look up a helper on the current template                                                                       // 161
      if (template && (helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null) {
        // 162
        return helper; // 163
      } // 164
      // 165
      // 2. look up a binding by traversing the lexical view hierarchy inside the                                          // 166
      // current template                                                                                                  // 167
      if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {
        // 168
        return binding; // 169
      } // 170
      // 171
      // 3. look up a template by name                                                                                     // 172
      if (lookupTemplate && (foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null) {
        // 173
        return foundTemplate; // 174
      } // 175
      // 176
      // 4. look up a global helper                                                                                        // 177
      if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {
        // 178
        return helper; // 179
      } // 180
      // 181
      // 5. look up in a data context                                                                                      // 182
      return function () {
        // 183
        var isCalledAsFunction = arguments.length > 0; // 184
        var data = Blaze.getData(); // 185
        var x = data && data[name]; // 186
        if (!x) {
          // 187
          if (lookupTemplate) {
            // 188
            throw new Error("No such template: " + name); // 189
          } else if (isCalledAsFunction) {
            // 190
            throw new Error("No such function: " + name); // 191
          } else if (name.charAt(0) === '@' && (x === null || // 192
          x === undefined)) {
            // 193
            // Throw an error if the user tries to use a `@directive`                                                      // 194
            // that doesn't exist.  We don't implement all directives                                                      // 195
            // from Handlebars, so there's a potential for confusion                                                       // 196
            // if we fail silently.  On the other hand, we want to                                                         // 197
            // throw late in case some app or package wants to provide                                                     // 198
            // a missing directive.                                                                                        // 199
            throw new Error("Unsupported directive: " + name); // 200
          } // 201
        } // 202
        if (!data) {
          // 203
          return null; // 204
        } // 205
        if (typeof x !== 'function') {
          // 206
          if (isCalledAsFunction) {
            // 207
            throw new Error("Can't call non-function: " + x); // 208
          } // 209
          return x; // 210
        } // 211
        return x.apply(data, arguments); // 212
      }; // 213
    }; // 214
    // 215
    // Implement Spacebars' {{../..}}.                                                                                     // 216
    // @param height {Number} The number of '..'s                                                                          // 217
    Blaze._parentData = function (height, _functionWrapped) {
      // 218
      // If height is null or undefined, we default to 1, the first parent.                                                // 219
      if (height == null) {
        // 220
        height = 1; // 221
      } // 222
      var theWith = Blaze.getView('with'); // 223
      for (var i = 0; i < height && theWith; i++) {
        // 224
        theWith = Blaze.getView(theWith, 'with'); // 225
      } // 226
      // 227
      if (!theWith) // 228
        return null; // 229
      if (_functionWrapped) // 230
        return function () {
          return theWith.dataVar.get();
        }; // 231
      return theWith.dataVar.get(); // 232
    }; // 233
    // 234
    // 235
    Blaze.View.prototype.lookupTemplate = function (name) {
      // 236
      return this.lookup(name, { template: true }); // 237
    }; // 238
    // 239
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/template.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // [new] Blaze.Template([viewName], renderFunction)                                                                    // 1
    //                                                                                                                     // 2
    // `Blaze.Template` is the class of templates, like `Template.foo` in                                                  // 3
    // Meteor, which is `instanceof Template`.                                                                             // 4
    //                                                                                                                     // 5
    // `viewKind` is a string that looks like "Template.foo" for templates                                                 // 6
    // defined by the compiler.                                                                                            // 7
    // 8
    /**                                                                                                                    // 9
     * @class                                                                                                              // 10
     * @summary Constructor for a Template, which is used to construct Views with particular name and content.             // 11
     * @locus Client                                                                                                       // 12
     * @param {String} [viewName] Optional.  A name for Views constructed by this Template.  See [`view.name`](#view_name).
     * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  This function is used as the `renderFunction` for Views constructed by this Template.
     */ // 15
    Blaze.Template = function (viewName, renderFunction) {
      // 16
      if (!(this instanceof Blaze.Template)) // 17
        // called without `new`                                                                                            // 18
        return new Blaze.Template(viewName, renderFunction); // 19
      // 20
      if (typeof viewName === 'function') {
        // 21
        // omitted "viewName" argument                                                                                     // 22
        renderFunction = viewName; // 23
        viewName = ''; // 24
      } // 25
      if (typeof viewName !== 'string') // 26
        throw new Error("viewName must be a String (or omitted)"); // 27
      if (typeof renderFunction !== 'function') // 28
        throw new Error("renderFunction must be a function"); // 29
      // 30
      this.viewName = viewName; // 31
      this.renderFunction = renderFunction; // 32
      // 33
      this.__helpers = new HelperMap(); // 34
      this.__eventMaps = []; // 35
      // 36
      this._callbacks = { // 37
        created: [], // 38
        rendered: [], // 39
        destroyed: [] // 40
      }; // 41
    }; // 42
    var Template = Blaze.Template; // 43
    // 44
    var HelperMap = function () {}; // 45
    HelperMap.prototype.get = function (name) {
      // 46
      return this[' ' + name]; // 47
    }; // 48
    HelperMap.prototype.set = function (name, helper) {
      // 49
      this[' ' + name] = helper; // 50
    }; // 51
    HelperMap.prototype.has = function (name) {
      // 52
      return ' ' + name in this; // 53
    }; // 54
    // 55
    /**                                                                                                                    // 56
     * @summary Returns true if `value` is a template object like `Template.myTemplate`.                                   // 57
     * @locus Client                                                                                                       // 58
     * @param {Any} value The value to test.                                                                               // 59
     */ // 60
    Blaze.isTemplate = function (t) {
      // 61
      return t instanceof Blaze.Template; // 62
    }; // 63
    // 64
    /**                                                                                                                    // 65
     * @name  onCreated                                                                                                    // 66
     * @instance                                                                                                           // 67
     * @memberOf Template                                                                                                  // 68
     * @summary Register a function to be called when an instance of this template is created.                             // 69
     * @param {Function} callback A function to be added as a callback.                                                    // 70
     * @locus Client                                                                                                       // 71
     * @importFromPackage templating                                                                                       // 72
     */ // 73
    Template.prototype.onCreated = function (cb) {
      // 74
      this._callbacks.created.push(cb); // 75
    }; // 76
    // 77
    /**                                                                                                                    // 78
     * @name  onRendered                                                                                                   // 79
     * @instance                                                                                                           // 80
     * @memberOf Template                                                                                                  // 81
     * @summary Register a function to be called when an instance of this template is inserted into the DOM.               // 82
     * @param {Function} callback A function to be added as a callback.                                                    // 83
     * @locus Client                                                                                                       // 84
     * @importFromPackage templating                                                                                       // 85
     */ // 86
    Template.prototype.onRendered = function (cb) {
      // 87
      this._callbacks.rendered.push(cb); // 88
    }; // 89
    // 90
    /**                                                                                                                    // 91
     * @name  onDestroyed                                                                                                  // 92
     * @instance                                                                                                           // 93
     * @memberOf Template                                                                                                  // 94
     * @summary Register a function to be called when an instance of this template is removed from the DOM and destroyed.  // 95
     * @param {Function} callback A function to be added as a callback.                                                    // 96
     * @locus Client                                                                                                       // 97
     * @importFromPackage templating                                                                                       // 98
     */ // 99
    Template.prototype.onDestroyed = function (cb) {
      // 100
      this._callbacks.destroyed.push(cb); // 101
    }; // 102
    // 103
    Template.prototype._getCallbacks = function (which) {
      // 104
      var self = this; // 105
      var callbacks = self[which] ? [self[which]] : []; // 106
      // Fire all callbacks added with the new API (Template.onRendered())                                                 // 107
      // as well as the old-style callback (e.g. Template.rendered) for                                                    // 108
      // backwards-compatibility.                                                                                          // 109
      callbacks = callbacks.concat(self._callbacks[which]); // 110
      return callbacks; // 111
    }; // 112
    // 113
    var fireCallbacks = function (callbacks, template) {
      // 114
      Template._withTemplateInstanceFunc( // 115
      function () {
        return template;
      }, // 116
      function () {
        // 117
        for (var i = 0, N = callbacks.length; i < N; i++) {
          // 118
          callbacks[i].call(template); // 119
        } // 120
      }); // 121
    }; // 122
    // 123
    Template.prototype.constructView = function (contentFunc, elseFunc) {
      // 124
      var self = this; // 125
      var view = Blaze.View(self.viewName, self.renderFunction); // 126
      view.template = self; // 127
      // 128
      view.templateContentBlock = // 129
      contentFunc ? new Template('(contentBlock)', contentFunc) : null; // 130
      view.templateElseBlock = // 131
      elseFunc ? new Template('(elseBlock)', elseFunc) : null; // 132
      // 133
      if (self.__eventMaps || typeof self.events === 'object') {
        // 134
        view._onViewRendered(function () {
          // 135
          if (view.renderCount !== 1) // 136
            return; // 137
          // 138
          if (!self.__eventMaps.length && typeof self.events === "object") {
            // 139
            // Provide limited back-compat support for `.events = {...}`                                                   // 140
            // syntax.  Pass `template.events` to the original `.events(...)`                                              // 141
            // function.  This code must run only once per template, in                                                    // 142
            // order to not bind the handlers more than once, which is                                                     // 143
            // ensured by the fact that we only do this when `__eventMaps`                                                 // 144
            // is falsy, and we cause it to be set now.                                                                    // 145
            Template.prototype.events.call(self, self.events); // 146
          } // 147
          // 148
          _.each(self.__eventMaps, function (m) {
            // 149
            Blaze._addEventMap(view, m, view); // 150
          }); // 151
        }); // 152
      } // 153
      // 154
      view._templateInstance = new Blaze.TemplateInstance(view); // 155
      view.templateInstance = function () {
        // 156
        // Update data, firstNode, and lastNode, and return the TemplateInstance                                           // 157
        // object.                                                                                                         // 158
        var inst = view._templateInstance; // 159
        // 160
        /**                                                                                                                // 161
         * @instance                                                                                                       // 162
         * @memberOf Blaze.TemplateInstance                                                                                // 163
         * @name  data                                                                                                     // 164
         * @summary The data context of this instance's latest invocation.                                                 // 165
         * @locus Client                                                                                                   // 166
         */ // 167
        inst.data = Blaze.getData(view); // 168
        // 169
        if (view._domrange && !view.isDestroyed) {
          // 170
          inst.firstNode = view._domrange.firstNode(); // 171
          inst.lastNode = view._domrange.lastNode(); // 172
        } else {
          // 173
          // on 'created' or 'destroyed' callbacks we don't have a DomRange                                                // 174
          inst.firstNode = null; // 175
          inst.lastNode = null; // 176
        } // 177
        // 178
        return inst; // 179
      }; // 180
      // 181
      /**                                                                                                                  // 182
       * @name  created                                                                                                    // 183
       * @instance                                                                                                         // 184
       * @memberOf Template                                                                                                // 185
       * @summary Provide a callback when an instance of a template is created.                                            // 186
       * @locus Client                                                                                                     // 187
       * @deprecated in 1.1                                                                                                // 188
       */ // 189
      // To avoid situations when new callbacks are added in between view                                                  // 190
      // instantiation and event being fired, decide on all callbacks to fire                                              // 191
      // immediately and then fire them on the event.                                                                      // 192
      var createdCallbacks = self._getCallbacks('created'); // 193
      view.onViewCreated(function () {
        // 194
        fireCallbacks(createdCallbacks, view.templateInstance()); // 195
      }); // 196
      // 197
      /**                                                                                                                  // 198
       * @name  rendered                                                                                                   // 199
       * @instance                                                                                                         // 200
       * @memberOf Template                                                                                                // 201
       * @summary Provide a callback when an instance of a template is rendered.                                           // 202
       * @locus Client                                                                                                     // 203
       * @deprecated in 1.1                                                                                                // 204
       */ // 205
      var renderedCallbacks = self._getCallbacks('rendered'); // 206
      view.onViewReady(function () {
        // 207
        fireCallbacks(renderedCallbacks, view.templateInstance()); // 208
      }); // 209
      // 210
      /**                                                                                                                  // 211
       * @name  destroyed                                                                                                  // 212
       * @instance                                                                                                         // 213
       * @memberOf Template                                                                                                // 214
       * @summary Provide a callback when an instance of a template is destroyed.                                          // 215
       * @locus Client                                                                                                     // 216
       * @deprecated in 1.1                                                                                                // 217
       */ // 218
      var destroyedCallbacks = self._getCallbacks('destroyed'); // 219
      view.onViewDestroyed(function () {
        // 220
        fireCallbacks(destroyedCallbacks, view.templateInstance()); // 221
      }); // 222
      // 223
      return view; // 224
    }; // 225
    // 226
    /**                                                                                                                    // 227
     * @class                                                                                                              // 228
     * @summary The class for template instances                                                                           // 229
     * @param {Blaze.View} view                                                                                            // 230
     * @instanceName template                                                                                              // 231
     */ // 232
    Blaze.TemplateInstance = function (view) {
      // 233
      if (!(this instanceof Blaze.TemplateInstance)) // 234
        // called without `new`                                                                                            // 235
        return new Blaze.TemplateInstance(view); // 236
      // 237
      if (!(view instanceof Blaze.View)) // 238
        throw new Error("View required"); // 239
      // 240
      view._templateInstance = this; // 241
      // 242
      /**                                                                                                                  // 243
       * @name view                                                                                                        // 244
       * @memberOf Blaze.TemplateInstance                                                                                  // 245
       * @instance                                                                                                         // 246
       * @summary The [View](#blaze_view) object for this invocation of the template.                                      // 247
       * @locus Client                                                                                                     // 248
       * @type {Blaze.View}                                                                                                // 249
       */ // 250
      this.view = view; // 251
      this.data = null; // 252
      // 253
      /**                                                                                                                  // 254
       * @name firstNode                                                                                                   // 255
       * @memberOf Blaze.TemplateInstance                                                                                  // 256
       * @instance                                                                                                         // 257
       * @summary The first top-level DOM node in this template instance.                                                  // 258
       * @locus Client                                                                                                     // 259
       * @type {DOMNode}                                                                                                   // 260
       */ // 261
      this.firstNode = null; // 262
      // 263
      /**                                                                                                                  // 264
       * @name lastNode                                                                                                    // 265
       * @memberOf Blaze.TemplateInstance                                                                                  // 266
       * @instance                                                                                                         // 267
       * @summary The last top-level DOM node in this template instance.                                                   // 268
       * @locus Client                                                                                                     // 269
       * @type {DOMNode}                                                                                                   // 270
       */ // 271
      this.lastNode = null; // 272
      // 273
      // This dependency is used to identify state transitions in                                                          // 274
      // _subscriptionHandles which could cause the result of                                                              // 275
      // TemplateInstance#subscriptionsReady to change. Basically this is triggered                                        // 276
      // whenever a new subscription handle is added or when a subscription handle                                         // 277
      // is removed and they are not ready.                                                                                // 278
      this._allSubsReadyDep = new Tracker.Dependency(); // 279
      this._allSubsReady = false; // 280
      // 281
      this._subscriptionHandles = {}; // 282
    }; // 283
    // 284
    /**                                                                                                                    // 285
     * @summary Find all elements matching `selector` in this template instance, and return them as a JQuery object.       // 286
     * @locus Client                                                                                                       // 287
     * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 288
     * @returns {DOMNode[]}                                                                                                // 289
     */ // 290
    Blaze.TemplateInstance.prototype.$ = function (selector) {
      // 291
      var view = this.view; // 292
      if (!view._domrange) // 293
        throw new Error("Can't use $ on template instance with no DOM"); // 294
      return view._domrange.$(selector); // 295
    }; // 296
    // 297
    /**                                                                                                                    // 298
     * @summary Find all elements matching `selector` in this template instance.                                           // 299
     * @locus Client                                                                                                       // 300
     * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 301
     * @returns {DOMElement[]}                                                                                             // 302
     */ // 303
    Blaze.TemplateInstance.prototype.findAll = function (selector) {
      // 304
      return Array.prototype.slice.call(this.$(selector)); // 305
    }; // 306
    // 307
    /**                                                                                                                    // 308
     * @summary Find one element matching `selector` in this template instance.                                            // 309
     * @locus Client                                                                                                       // 310
     * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 311
     * @returns {DOMElement}                                                                                               // 312
     */ // 313
    Blaze.TemplateInstance.prototype.find = function (selector) {
      // 314
      var result = this.$(selector); // 315
      return result[0] || null; // 316
    }; // 317
    // 318
    /**                                                                                                                    // 319
     * @summary A version of [Tracker.autorun](#tracker_autorun) that is stopped when the template is destroyed.           // 320
     * @locus Client                                                                                                       // 321
     * @param {Function} runFunc The function to run. It receives one argument: a Tracker.Computation object.              // 322
     */ // 323
    Blaze.TemplateInstance.prototype.autorun = function (f) {
      // 324
      return this.view.autorun(f); // 325
    }; // 326
    // 327
    /**                                                                                                                    // 328
     * @summary A version of [Meteor.subscribe](#meteor_subscribe) that is stopped                                         // 329
     * when the template is destroyed.                                                                                     // 330
     * @return {SubscriptionHandle} The subscription handle to the newly made                                              // 331
     * subscription. Call `handle.stop()` to manually stop the subscription, or                                            // 332
     * `handle.ready()` to find out if this particular subscription has loaded all                                         // 333
     * of its inital data.                                                                                                 // 334
     * @locus Client                                                                                                       // 335
     * @param {String} name Name of the subscription.  Matches the name of the                                             // 336
     * server's `publish()` call.                                                                                          // 337
     * @param {Any} [arg1,arg2...] Optional arguments passed to publisher function                                         // 338
     * on server.                                                                                                          // 339
     * @param {Function|Object} [options] If a function is passed instead of an                                            // 340
     * object, it is interpreted as an `onReady` callback.                                                                 // 341
     * @param {Function} [options.onReady] Passed to [`Meteor.subscribe`](#meteor_subscribe).                              // 342
     * @param {Function} [options.onStop] Passed to [`Meteor.subscribe`](#meteor_subscribe).                               // 343
     * @param {DDP.Connection} [options.connection] The connection on which to make the                                    // 344
     * subscription.                                                                                                       // 345
     */ // 346
    Blaze.TemplateInstance.prototype.subscribe = function () /* arguments */{
      // 347
      var self = this; // 348
      // 349
      var subHandles = self._subscriptionHandles; // 350
      var args = _.toArray(arguments); // 351
      // 352
      // Duplicate logic from Meteor.subscribe                                                                             // 353
      var options = {}; // 354
      if (args.length) {
        // 355
        var lastParam = _.last(args); // 356
        // 357
        // Match pattern to check if the last arg is an options argument                                                   // 358
        var lastParamOptionsPattern = { // 359
          onReady: Match.Optional(Function), // 360
          // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                                 // 361
          // onStop with an error callback instead.                                                                        // 362
          onError: Match.Optional(Function), // 363
          onStop: Match.Optional(Function), // 364
          connection: Match.Optional(Match.Any) // 365
        }; // 366
        // 367
        if (_.isFunction(lastParam)) {
          // 368
          options.onReady = args.pop(); // 369
        } else if (lastParam && !_.isEmpty(lastParam) && Match.test(lastParam, lastParamOptionsPattern)) {
          // 370
          options = args.pop(); // 371
        } // 372
      } // 373
      // 374
      var subHandle; // 375
      var oldStopped = options.onStop; // 376
      options.onStop = function (error) {
        // 377
        // When the subscription is stopped, remove it from the set of tracked                                             // 378
        // subscriptions to avoid this list growing without bound                                                          // 379
        delete subHandles[subHandle.subscriptionId]; // 380
        // 381
        // Removing a subscription can only change the result of subscriptionsReady                                        // 382
        // if we are not ready (that subscription could be the one blocking us being                                       // 383
        // ready).                                                                                                         // 384
        if (!self._allSubsReady) {
          // 385
          self._allSubsReadyDep.changed(); // 386
        } // 387
        // 388
        if (oldStopped) {
          // 389
          oldStopped(error); // 390
        } // 391
      }; // 392
      // 393
      var connection = options.connection; // 394
      var callbacks = _.pick(options, ["onReady", "onError", "onStop"]); // 395
      // 396
      // The callbacks are passed as the last item in the arguments array passed to                                        // 397
      // View#subscribe                                                                                                    // 398
      args.push(callbacks); // 399
      // 400
      // View#subscribe takes the connection as one of the options in the last                                             // 401
      // argument                                                                                                          // 402
      subHandle = self.view.subscribe.call(self.view, args, { // 403
        connection: connection // 404
      }); // 405
      // 406
      if (!_.has(subHandles, subHandle.subscriptionId)) {
        // 407
        subHandles[subHandle.subscriptionId] = subHandle; // 408
        // 409
        // Adding a new subscription will always cause us to transition from ready                                         // 410
        // to not ready, but if we are already not ready then this can't make us                                           // 411
        // ready.                                                                                                          // 412
        if (self._allSubsReady) {
          // 413
          self._allSubsReadyDep.changed(); // 414
        } // 415
      } // 416
      // 417
      return subHandle; // 418
    }; // 419
    // 420
    /**                                                                                                                    // 421
     * @summary A reactive function that returns true when all of the subscriptions                                        // 422
     * called with [this.subscribe](#TemplateInstance-subscribe) are ready.                                                // 423
     * @return {Boolean} True if all subscriptions on this template instance are                                           // 424
     * ready.                                                                                                              // 425
     */ // 426
    Blaze.TemplateInstance.prototype.subscriptionsReady = function () {
      // 427
      this._allSubsReadyDep.depend(); // 428
      // 429
      this._allSubsReady = _.all(this._subscriptionHandles, function (handle) {
        // 430
        return handle.ready(); // 431
      }); // 432
      // 433
      return this._allSubsReady; // 434
    }; // 435
    // 436
    /**                                                                                                                    // 437
     * @summary Specify template helpers available to this template.                                                       // 438
     * @locus Client                                                                                                       // 439
     * @param {Object} helpers Dictionary of helper functions by name.                                                     // 440
     * @importFromPackage templating                                                                                       // 441
     */ // 442
    Template.prototype.helpers = function (dict) {
      // 443
      if (!_.isObject(dict)) {
        // 444
        throw new Error("Helpers dictionary has to be an object"); // 445
      } // 446
      // 447
      for (var k in dict) // 448
      this.__helpers.set(k, dict[k]); // 449
    }; // 450
    // 451
    // Kind of like Blaze.currentView but for the template instance.                                                       // 452
    // This is a function, not a value -- so that not all helpers                                                          // 453
    // are implicitly dependent on the current template instance's `data` property,                                        // 454
    // which would make them dependenct on the data context of the template                                                // 455
    // inclusion.                                                                                                          // 456
    Template._currentTemplateInstanceFunc = null; // 457
    // 458
    Template._withTemplateInstanceFunc = function (templateInstanceFunc, func) {
      // 459
      if (typeof func !== 'function') // 460
        throw new Error("Expected function, got: " + func); // 461
      var oldTmplInstanceFunc = Template._currentTemplateInstanceFunc; // 462
      try {
        // 463
        Template._currentTemplateInstanceFunc = templateInstanceFunc; // 464
        return func(); // 465
      } finally {
        // 466
        Template._currentTemplateInstanceFunc = oldTmplInstanceFunc; // 467
      } // 468
    }; // 469
    // 470
    /**                                                                                                                    // 471
     * @summary Specify event handlers for this template.                                                                  // 472
     * @locus Client                                                                                                       // 473
     * @param {EventMap} eventMap Event handlers to associate with this template.                                          // 474
     * @importFromPackage templating                                                                                       // 475
     */ // 476
    Template.prototype.events = function (eventMap) {
      // 477
      if (!_.isObject(eventMap)) {
        // 478
        throw new Error("Event map has to be an object"); // 479
      } // 480
      // 481
      var template = this; // 482
      var eventMap2 = {}; // 483
      for (var k in eventMap) {
        // 484
        eventMap2[k] = function (k, v) {
          // 485
          return function (event /*, ...*/) {
            // 486
            var view = this; // passed by EventAugmenter                                                                   // 487
            var data = Blaze.getData(event.currentTarget); // 488
            if (data == null) // 489
              data = {}; // 490
            var args = Array.prototype.slice.call(arguments); // 491
            var tmplInstanceFunc = Blaze._bind(view.templateInstance, view); // 492
            args.splice(1, 0, tmplInstanceFunc()); // 493
            // 494
            return Template._withTemplateInstanceFunc(tmplInstanceFunc, function () {
              // 495
              return v.apply(data, args); // 496
            }); // 497
          }; // 498
        }(k, eventMap[k]); // 499
      } // 500
      // 501
      template.__eventMaps.push(eventMap2); // 502
    }; // 503
    // 504
    /**                                                                                                                    // 505
     * @function                                                                                                           // 506
     * @name instance                                                                                                      // 507
     * @memberOf Template                                                                                                  // 508
     * @summary The [template instance](#template_inst) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
     * @locus Client                                                                                                       // 510
     * @returns {Blaze.TemplateInstance}                                                                                   // 511
     * @importFromPackage templating                                                                                       // 512
     */ // 513
    Template.instance = function () {
      // 514
      return Template._currentTemplateInstanceFunc // 515
      && Template._currentTemplateInstanceFunc(); // 516
    }; // 517
    // 518
    // Note: Template.currentData() is documented to take zero arguments,                                                  // 519
    // while Blaze.getData takes up to one.                                                                                // 520
    // 521
    /**                                                                                                                    // 522
     * @summary                                                                                                            // 523
     *                                                                                                                     // 524
     * - Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns                                           // 525
     * the data context of the template.                                                                                   // 526
     * - Inside an event handler, returns the data context of the template on which                                        // 527
     * this event handler was defined.                                                                                     // 528
     * - Inside a helper, returns the data context of the DOM node where the helper                                        // 529
     * was used.                                                                                                           // 530
     *                                                                                                                     // 531
     * Establishes a reactive dependency on the result.                                                                    // 532
     * @locus Client                                                                                                       // 533
     * @function                                                                                                           // 534
     * @importFromPackage templating                                                                                       // 535
     */ // 536
    Template.currentData = Blaze.getData; // 537
    // 538
    /**                                                                                                                    // 539
     * @summary Accesses other data contexts that enclose the current data context.                                        // 540
     * @locus Client                                                                                                       // 541
     * @function                                                                                                           // 542
     * @param {Integer} [numLevels] The number of levels beyond the current data context to look. Defaults to 1.           // 543
     * @importFromPackage templating                                                                                       // 544
     */ // 545
    Template.parentData = Blaze._parentData; // 546
    // 547
    /**                                                                                                                    // 548
     * @summary Defines a [helper function](#template_helpers) which can be used from all templates.                       // 549
     * @locus Client                                                                                                       // 550
     * @function                                                                                                           // 551
     * @param {String} name The name of the helper function you are defining.                                              // 552
     * @param {Function} function The helper function itself.                                                              // 553
     * @importFromPackage templating                                                                                       // 554
     */ // 555
    Template.registerHelper = Blaze.registerHelper; // 556
    // 557
    /**                                                                                                                    // 558
     * @summary Removes a global [helper function](#template_helpers).                                                     // 559
     * @locus Client                                                                                                       // 560
     * @function                                                                                                           // 561
     * @param {String} name The name of the helper function you are defining.                                              // 562
     * @importFromPackage templating                                                                                       // 563
     */ // 564
    Template.deregisterHelper = Blaze.deregisterHelper; // 565
    // 566
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/backcompat.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    UI = Blaze; // 1
    // 2
    Blaze.ReactiveVar = ReactiveVar; // 3
    UI._templateInstance = Blaze.Template.instance; // 4
    // 5
    Handlebars = {}; // 6
    Handlebars.registerHelper = Blaze.registerHelper; // 7
    // 8
    Handlebars._escape = Blaze._escape; // 9
    // 10
    // Return these from {{...}} helpers to achieve the same as returning                                                  // 11
    // strings from {{{...}}} helpers                                                                                      // 12
    Handlebars.SafeString = function (string) {
      // 13
      this.string = string; // 14
    }; // 15
    Handlebars.SafeString.prototype.toString = function () {
      // 16
      return this.string.toString(); // 17
    }; // 18
    // 19
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.blaze = {}, {
    Blaze: Blaze,
    UI: UI,
    Handlebars: Handlebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var ObserveSequence = Package['observe-sequence'].ObserveSequence;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var HTML = Package.htmljs.HTML;
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;

  /* Package-scope variables */
  var Spacebars;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/spacebars/spacebars-runtime.js                                       //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    Spacebars = {}; // 1
    // 2
    var tripleEquals = function (a, b) {
      return a === b;
    }; // 3
    // 4
    Spacebars.include = function (templateOrFunction, contentFunc, elseFunc) {
      // 5
      if (!templateOrFunction) // 6
        return null; // 7
      // 8
      if (typeof templateOrFunction !== 'function') {
        // 9
        var template = templateOrFunction; // 10
        if (!Blaze.isTemplate(template)) // 11
          throw new Error("Expected template or null, found: " + template); // 12
        var view = templateOrFunction.constructView(contentFunc, elseFunc); // 13
        view.__startsNewLexicalScope = true; // 14
        return view; // 15
      } // 16
      // 17
      var templateVar = Blaze.ReactiveVar(null, tripleEquals); // 18
      var view = Blaze.View('Spacebars.include', function () {
        // 19
        var template = templateVar.get(); // 20
        if (template === null) // 21
          return null; // 22
        // 23
        if (!Blaze.isTemplate(template)) // 24
          throw new Error("Expected template or null, found: " + template); // 25
        // 26
        return template.constructView(contentFunc, elseFunc); // 27
      }); // 28
      view.__templateVar = templateVar; // 29
      view.onViewCreated(function () {
        // 30
        this.autorun(function () {
          // 31
          templateVar.set(templateOrFunction()); // 32
        }); // 33
      }); // 34
      view.__startsNewLexicalScope = true; // 35
      // 36
      return view; // 37
    }; // 38
    // 39
    // Executes `{{foo bar baz}}` when called on `(foo, bar, baz)`.                  // 40
    // If `bar` and `baz` are functions, they are called before                      // 41
    // `foo` is called on them.                                                      // 42
    //                                                                               // 43
    // This is the shared part of Spacebars.mustache and                             // 44
    // Spacebars.attrMustache, which differ in how they post-process the             // 45
    // result.                                                                       // 46
    Spacebars.mustacheImpl = function (value /*, args*/) {
      // 47
      var args = arguments; // 48
      // if we have any arguments (pos or kw), add an options argument               // 49
      // if there isn't one.                                                         // 50
      if (args.length > 1) {
        // 51
        var kw = args[args.length - 1]; // 52
        if (!(kw instanceof Spacebars.kw)) {
          // 53
          kw = Spacebars.kw(); // 54
          // clone arguments into an actual array, then push                         // 55
          // the empty kw object.                                                    // 56
          args = Array.prototype.slice.call(arguments); // 57
          args.push(kw); // 58
        } else {
          // 59
          // For each keyword arg, call it if it's a function                        // 60
          var newHash = {}; // 61
          for (var k in kw.hash) {
            // 62
            var v = kw.hash[k]; // 63
            newHash[k] = typeof v === 'function' ? v() : v; // 64
          } // 65
          args[args.length - 1] = Spacebars.kw(newHash); // 66
        } // 67
      } // 68
      // 69
      return Spacebars.call.apply(null, args); // 70
    }; // 71
    // 72
    Spacebars.mustache = function (value /*, args*/) {
      // 73
      var result = Spacebars.mustacheImpl.apply(null, arguments); // 74
      // 75
      if (result instanceof Spacebars.SafeString) // 76
        return HTML.Raw(result.toString()); // 77
      else // 78
        // map `null`, `undefined`, and `false` to null, which is important          // 79
        // so that attributes with nully values are considered absent.               // 80
        // stringify anything else (e.g. strings, booleans, numbers including 0).    // 81
        return result == null || result === false ? null : String(result); // 82
    }; // 83
    // 84
    Spacebars.attrMustache = function (value /*, args*/) {
      // 85
      var result = Spacebars.mustacheImpl.apply(null, arguments); // 86
      // 87
      if (result == null || result === '') {
        // 88
        return null; // 89
      } else if (typeof result === 'object') {
        // 90
        return result; // 91
      } else if (typeof result === 'string' && HTML.isValidAttributeName(result)) {
        // 92
        var obj = {}; // 93
        obj[result] = ''; // 94
        return obj; // 95
      } else {
        // 96
        throw new Error("Expected valid attribute name, '', null, or object"); // 97
      } // 98
    }; // 99
    // 100
    Spacebars.dataMustache = function (value /*, args*/) {
      // 101
      var result = Spacebars.mustacheImpl.apply(null, arguments); // 102
      // 103
      return result; // 104
    }; // 105
    // 106
    // Idempotently wrap in `HTML.Raw`.                                              // 107
    //                                                                               // 108
    // Called on the return value from `Spacebars.mustache` in case the              // 109
    // template uses triple-stache (`{{{foo bar baz}}}`).                            // 110
    Spacebars.makeRaw = function (value) {
      // 111
      if (value == null) // null or undefined                                        // 112
        return null; // 113
      else if (value instanceof HTML.Raw) // 114
          return value; // 115
        else // 116
          return HTML.Raw(value); // 117
    }; // 118
    // 119
    // If `value` is a function, evaluate its `args` (by calling them, if they       // 120
    // are functions), and then call it on them. Otherwise, return `value`.          // 121
    //                                                                               // 122
    // If `value` is not a function and is not null, then this method will assert    // 123
    // that there are no args. We check for null before asserting because a user     // 124
    // may write a template like {{user.fullNameWithPrefix 'Mr.'}}, where the        // 125
    // function will be null until data is ready.                                    // 126
    Spacebars.call = function (value /*, args*/) {
      // 127
      if (typeof value === 'function') {
        // 128
        // Evaluate arguments by calling them if they are functions.                 // 129
        var newArgs = []; // 130
        for (var i = 1; i < arguments.length; i++) {
          // 131
          var arg = arguments[i]; // 132
          newArgs[i - 1] = typeof arg === 'function' ? arg() : arg; // 133
        } // 134
        // 135
        return value.apply(null, newArgs); // 136
      } else {
        // 137
        if (value != null && arguments.length > 1) {
          // 138
          throw new Error("Can't call non-function: " + value); // 139
        } // 140
        return value; // 141
      } // 142
    }; // 143
    // 144
    // Call this as `Spacebars.kw({ ... })`.  The return value                       // 145
    // is `instanceof Spacebars.kw`.                                                 // 146
    Spacebars.kw = function (hash) {
      // 147
      if (!(this instanceof Spacebars.kw)) // 148
        // called without new; call with new                                         // 149
        return new Spacebars.kw(hash); // 150
      // 151
      this.hash = hash || {}; // 152
    }; // 153
    // 154
    // Call this as `Spacebars.SafeString("some HTML")`.  The return value           // 155
    // is `instanceof Spacebars.SafeString` (and `instanceof Handlebars.SafeString).
    Spacebars.SafeString = function (html) {
      // 157
      if (!(this instanceof Spacebars.SafeString)) // 158
        // called without new; call with new                                         // 159
        return new Spacebars.SafeString(html); // 160
      // 161
      return new Handlebars.SafeString(html); // 162
    }; // 163
    Spacebars.SafeString.prototype = Handlebars.SafeString.prototype; // 164
    // 165
    // `Spacebars.dot(foo, "bar", "baz")` performs a special kind                    // 166
    // of `foo.bar.baz` that allows safe indexing of `null` and                      // 167
    // indexing of functions (which calls the function).  If the                     // 168
    // result is a function, it is always a bound function (e.g.                     // 169
    // a wrapped version of `baz` that always uses `foo.bar` as                      // 170
    // `this`).                                                                      // 171
    //                                                                               // 172
    // In `Spacebars.dot(foo, "bar")`, `foo` is assumed to be either                 // 173
    // a non-function value or a "fully-bound" function wrapping a value,            // 174
    // where fully-bound means it takes no arguments and ignores `this`.             // 175
    //                                                                               // 176
    // `Spacebars.dot(foo, "bar")` performs the following steps:                     // 177
    //                                                                               // 178
    // * If `foo` is falsy, return `foo`.                                            // 179
    //                                                                               // 180
    // * If `foo` is a function, call it (set `foo` to `foo()`).                     // 181
    //                                                                               // 182
    // * If `foo` is falsy now, return `foo`.                                        // 183
    //                                                                               // 184
    // * Return `foo.bar`, binding it to `foo` if it's a function.                   // 185
    Spacebars.dot = function (value, id1 /*, id2, ...*/) {
      // 186
      if (arguments.length > 2) {
        // 187
        // Note: doing this recursively is probably less efficient than              // 188
        // doing it in an iterative loop.                                            // 189
        var argsForRecurse = []; // 190
        argsForRecurse.push(Spacebars.dot(value, id1)); // 191
        argsForRecurse.push.apply(argsForRecurse, // 192
        Array.prototype.slice.call(arguments, 2)); // 193
        return Spacebars.dot.apply(null, argsForRecurse); // 194
      } // 195
      // 196
      if (typeof value === 'function') // 197
        value = value(); // 198
      // 199
      if (!value) // 200
        return value; // falsy, don't index, pass through                            // 201
      // 202
      var result = value[id1]; // 203
      if (typeof result !== 'function') // 204
        return result; // 205
      // `value[id1]` (or `value()[id1]`) is a function.                             // 206
      // Bind it so that when called, `value` will be placed in `this`.              // 207
      return function () /*arguments*/{
        // 208
        return result.apply(value, arguments); // 209
      }; // 210
    }; // 211
    // 212
    // Spacebars.With implements the conditional logic of rendering                  // 213
    // the `{{else}}` block if the argument is falsy.  It combines                   // 214
    // a Blaze.If with a Blaze.With (the latter only in the truthy                   // 215
    // case, since the else block is evaluated without entering                      // 216
    // a new data context).                                                          // 217
    Spacebars.With = function (argFunc, contentFunc, elseFunc) {
      // 218
      var argVar = new Blaze.ReactiveVar(); // 219
      var view = Blaze.View('Spacebars_with', function () {
        // 220
        return Blaze.If(function () {
          return argVar.get();
        }, // 221
        function () {
          return Blaze.With(function () {
            // 222
            return argVar.get();
          }, contentFunc);
        }, // 223
        elseFunc); // 224
      }); // 225
      view.onViewCreated(function () {
        // 226
        this.autorun(function () {
          // 227
          argVar.set(argFunc()); // 228
          // 229
          // This is a hack so that autoruns inside the body                         // 230
          // of the #with get stopped sooner.  It reaches inside                     // 231
          // our ReactiveVar to access its dep.                                      // 232
          // 233
          Tracker.onInvalidate(function () {
            // 234
            argVar.dep.changed(); // 235
          }); // 236
          // 237
          // Take the case of `{{#with A}}{{B}}{{/with}}`.  The goal                 // 238
          // is to not re-render `B` if `A` changes to become falsy                  // 239
          // and `B` is simultaneously invalidated.                                  // 240
          //                                                                         // 241
          // A series of autoruns are involved:                                      // 242
          //                                                                         // 243
          // 1. This autorun (argument to Spacebars.With)                            // 244
          // 2. Argument to Blaze.If                                                 // 245
          // 3. Blaze.If view re-render                                              // 246
          // 4. Argument to Blaze.With                                               // 247
          // 5. The template tag `{{B}}`                                             // 248
          //                                                                         // 249
          // When (3) is invalidated, it immediately stops (4) and (5)               // 250
          // because of a Tracker.onInvalidate built into materializeView.           // 251
          // (When a View's render method is invalidated, it immediately             // 252
          // tears down all the subviews, via a Tracker.onInvalidate much            // 253
          // like this one.                                                          // 254
          //                                                                         // 255
          // Suppose `A` changes to become falsy, and `B` changes at the             // 256
          // same time (i.e. without an intervening flush).                          // 257
          // Without the code above, this happens:                                   // 258
          //                                                                         // 259
          // - (1) and (5) are invalidated.                                          // 260
          // - (1) runs, invalidating (2) and (4).                                   // 261
          // - (5) runs.                                                             // 262
          // - (2) runs, invalidating (3), stopping (4) and (5).                     // 263
          //                                                                         // 264
          // With the code above:                                                    // 265
          //                                                                         // 266
          // - (1) and (5) are invalidated, invalidating (2) and (4).                // 267
          // - (1) runs.                                                             // 268
          // - (2) runs, invalidating (3), stopping (4) and (5).                     // 269
          //                                                                         // 270
          // If the re-run of (5) is originally enqueued before (1), all             // 271
          // bets are off, but typically that doesn't seem to be the                 // 272
          // case.  Anyway, doing this is always better than not doing it,           // 273
          // because it might save a bunch of DOM from being updated                 // 274
          // needlessly.                                                             // 275
        }); // 276
      }); // 277
      // 278
      return view; // 279
    }; // 280
    // 281
    // XXX COMPAT WITH 0.9.0                                                         // 282
    Spacebars.TemplateWith = Blaze._TemplateWith; // 283
    // 284
    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.spacebars = {}, {
    Spacebars: Spacebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['templating-compiler'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;
  var Spacebars = Package.spacebars.Spacebars;
  var HTML = Package.htmljs.HTML;

  /* Package-scope variables */
  var Template;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/templating.js                                                                    //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // 1
    // Packages and apps add templates on to this object.                                                           // 2
    // 3
    /**                                                                                                             // 4
     * @summary The class for defining templates                                                                    // 5
     * @class                                                                                                       // 6
     * @instanceName Template.myTemplate                                                                            // 7
     */ // 8
    Template = Blaze.Template; // 9
    // 10
    var RESERVED_TEMPLATE_NAMES = "__proto__ name".split(" "); // 11
    // 12
    // Check for duplicate template names and illegal names that won't work.                                        // 13
    Template.__checkName = function (name) {
      // 14
      // Some names can't be used for Templates. These include:                                                     // 15
      //  - Properties Blaze sets on the Template object.                                                           // 16
      //  - Properties that some browsers don't let the code to set.                                                // 17
      //    These are specified in RESERVED_TEMPLATE_NAMES.                                                         // 18
      if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {
        // 19
        if (Template[name] instanceof Template && name !== "body") // 20
          throw new Error("There are multiple templates named '" + name + "'. Each template needs a unique name.");
        throw new Error("This template name is reserved: " + name); // 22
      } // 23
    }; // 24
    // 25
    // XXX COMPAT WITH 0.8.3                                                                                        // 26
    Template.__define__ = function (name, renderFunc) {
      // 27
      Template.__checkName(name); // 28
      Template[name] = new Template("Template." + name, renderFunc); // 29
      // Exempt packages built pre-0.9.0 from warnings about using old                                              // 30
      // helper syntax, because we can.  It's not very useful to get a                                              // 31
      // warning about someone else's code (like a package on Atmosphere),                                          // 32
      // and this should at least put a bit of a dent in number of warnings                                         // 33
      // that come from packages that haven't been updated lately.                                                  // 34
      Template[name]._NOWARN_OLDSTYLE_HELPERS = true; // 35
    }; // 36
    // 37
    // Define a template `Template.body` that renders its                                                           // 38
    // `contentRenderFuncs`.  `<body>` tags (of which there may be                                                  // 39
    // multiple) will have their contents added to it.                                                              // 40
    // 41
    /**                                                                                                             // 42
     * @summary The [template object](#templates_api) representing your `<body>`                                    // 43
     * tag.                                                                                                         // 44
     * @locus Client                                                                                                // 45
     */ // 46
    Template.body = new Template('body', function () {
      // 47
      var view = this; // 48
      return _.map(Template.body.contentRenderFuncs, function (func) {
        // 49
        return func.apply(view); // 50
      }); // 51
    }); // 52
    Template.body.contentRenderFuncs = []; // array of Blaze.Views                                                  // 53
    Template.body.view = null; // 54
    // 55
    Template.body.addContent = function (renderFunc) {
      // 56
      Template.body.contentRenderFuncs.push(renderFunc); // 57
    }; // 58
    // 59
    // This function does not use `this` and so it may be called                                                    // 60
    // as `Meteor.startup(Template.body.renderIntoDocument)`.                                                       // 61
    Template.body.renderToDocument = function () {
      // 62
      // Only do it once.                                                                                           // 63
      if (Template.body.view) // 64
        return; // 65
      // 66
      var view = Blaze.render(Template.body, document.body); // 67
      Template.body.view = view; // 68
    }; // 69
    // 70
    // XXX COMPAT WITH 0.9.0                                                                                        // 71
    UI.body = Template.body; // 72
    // 73
    // XXX COMPAT WITH 0.9.0                                                                                        // 74
    // (<body> tags in packages built with 0.9.0)                                                                   // 75
    Template.__body__ = Template.body; // 76
    Template.__body__.__contentParts = Template.body.contentViews; // 77
    Template.__body__.__instantiate = Template.body.renderToDocument; // 78
    // 79
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/template.dynamic.js                                                              //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // 1
    Template.__checkName("__dynamic"); // 2
    Template["__dynamic"] = new Template("Template.__dynamic", function () {
      // 3
      var view = this; // 4
      return [Blaze.View("lookup:checkContext", function () {
        // 5
        return Spacebars.mustache(view.lookup("checkContext")); // 6
      }), "\n  ", Blaze.If(function () {
        // 7
        return Spacebars.call(view.lookup("dataContextPresent")); // 8
      }, function () {
        // 9
        return ["\n    ", Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function () {
          // 10
          return Blaze._InOuterTemplateScope(view, function () {
            // 11
            return Spacebars.include(function () {
              // 12
              return Spacebars.call(view.templateContentBlock); // 13
            }); // 14
          }); // 15
        }), "\n  "]; // 16
      }, function () {
        // 17
        return ["\n    \n    ", Blaze._TemplateWith(function () {
          // 18
          return { // 19
            template: Spacebars.call(view.lookup("template")), // 20
            data: Spacebars.call(view.lookup("..")) // 21
          }; // 22
        }, function () {
          // 23
          return Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function () {
            // 24
            return Blaze._InOuterTemplateScope(view, function () {
              // 25
              return Spacebars.include(function () {
                // 26
                return Spacebars.call(view.templateContentBlock); // 27
              }); // 28
            }); // 29
          }); // 30
        }), "\n  "]; // 31
      })]; // 32
    }); // 33
    // 34
    Template.__checkName("__dynamicWithDataContext"); // 35
    Template["__dynamicWithDataContext"] = new Template("Template.__dynamicWithDataContext", function () {
      // 36
      var view = this; // 37
      return Spacebars.With(function () {
        // 38
        return Spacebars.dataMustache(view.lookup("chooseTemplate"), view.lookup("template")); // 39
      }, function () {
        // 40
        return ["\n    \n    ", Blaze._TemplateWith(function () {
          // 41
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "data")); // 42
        }, function () {
          // 43
          return Spacebars.include(view.lookupTemplate(".."), function () {
            // 44
            return Blaze._InOuterTemplateScope(view, function () {
              // 45
              return Spacebars.include(function () {
                // 46
                return Spacebars.call(view.templateContentBlock); // 47
              }); // 48
            }); // 49
          }); // 50
        }), "\n  "]; // 51
      }); // 52
    }); // 53
    // 54
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/dynamic.js                                                                       //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var Template = Blaze.Template; // 1
    // 2
    /**                                                                                                             // 3
     * @isTemplate true                                                                                             // 4
     * @memberOf Template                                                                                           // 5
     * @function dynamic                                                                                            // 6
     * @summary Choose a template to include dynamically, by name.                                                  // 7
     * @locus Templates                                                                                             // 8
     * @param {String} template The name of the template to include.                                                // 9
     * @param {Object} [data] Optional. The data context in which to include the                                    // 10
     * template.                                                                                                    // 11
     */ // 12
    // 13
    Template.__dynamicWithDataContext.helpers({ // 14
      chooseTemplate: function (name) {
        // 15
        return Blaze._getTemplate(name, function () {
          // 16
          return Template.instance(); // 17
        }); // 18
      } // 19
    }); // 20
    // 21
    Template.__dynamic.helpers({ // 22
      dataContextPresent: function () {
        // 23
        return _.has(this, "data"); // 24
      }, // 25
      checkContext: function () {
        // 26
        if (!_.has(this, "template")) {
          // 27
          throw new Error("Must specify name in the 'template' argument " + // 28
          "to {{> Template.dynamic}}."); // 29
        } // 30
        // 31
        _.each(this, function (v, k) {
          // 32
          if (k !== "template" && k !== "data") {
            // 33
            throw new Error("Invalid argument to {{> Template.dynamic}}: " + // 34
            k); // 35
          } // 36
        }); // 37
      } // 38
    }); // 39
    // 40
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['templating-runtime'] = {}, {
    Template: Template
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Template = Package['templating-runtime'].Template;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.templating = {}, {
    Template: Template
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var LaunchScreen;

  (function () {

    ////////////////////////////////////////////////////////////////////////////
    //                                                                        //
    // packages/launch-screen/mobile-launch-screen.js                         //
    //                                                                        //
    ////////////////////////////////////////////////////////////////////////////
    //
    // XXX This currently implements loading screens for mobile apps only,    // 1
    // but in the future can be expanded to all apps.                         // 2
    // 3
    var holdCount = 0; // 4
    var alreadyHidden = false; // 5
    // 6
    LaunchScreen = { // 7
      hold: function () {
        // 8
        if (!Meteor.isCordova) {
          // 9
          return { // 10
            release: function () {} /* noop */ // 11
          }; // 12
        } // 13
        // 14
        if (alreadyHidden) {
          // 15
          throw new Error("Can't show launch screen once it's hidden"); // 16
        } // 17
        // 18
        holdCount++; // 19
        // 20
        var released = false; // 21
        var release = function () {
          // 22
          if (!Meteor.isCordova) // 23
            return; // 24
          // 25
          if (!released) {
            // 26
            released = true; // 27
            holdCount--; // 28
            if (holdCount === 0 && // 29
            typeof navigator !== 'undefined' && navigator.splashscreen) {
              alreadyHidden = true; // 31
              navigator.splashscreen.hide(); // 32
            } // 33
          } // 34
        }; // 35
        // 36
        // Returns a launch screen handle with a release method               // 37
        return { // 38
          release: release // 39
        }; // 40
      } // 41
    }; // 42
    // 43
    ////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////
    //                                                                        //
    // packages/launch-screen/default-behavior.js                             //
    //                                                                        //
    ////////////////////////////////////////////////////////////////////////////
    //
    // Hold launch screen on app load. This reflects the fact that Meteor     // 1
    // mobile apps that use this package always start with a launch screen    // 2
    // visible. (see XXX comment at the top of package.js for more            // 3
    // details)                                                               // 4
    var handle = LaunchScreen.hold(); // 5
    // 6
    var Template = Package.templating && Package.templating.Template; // 7
    // 8
    Meteor.startup(function () {
      // 9
      if (!Template) {
        // 10
        handle.release(); // 11
      } else if (Package['iron:router']) {
        // 12
        // XXX Instead of doing this here, this code should be in             // 13
        // iron:router directly. Note that since we're in a                   // 14
        // `Meteor.startup` block it's ok that we don't have a                // 15
        // weak dependency on iron:router in package.js.                      // 16
        Package['iron:router'].Router.onAfterAction(function () {
          // 17
          handle.release(); // 18
        }); // 19
      } else {
        // 20
        Template.body.onRendered(function () {
          // 21
          handle.release(); // 22
        }); // 23
        // 24
        // In case `Template.body` never gets rendered (due to some bug),     // 25
        // hide the launch screen after 6 seconds. This matches the           // 26
        // observed timeout that Cordova apps on Android (but not iOS)        // 27
        // have on hiding the launch screen (even if you don't call           // 28
        // `navigator.splashscreen.hide()`)                                   // 29
        setTimeout(function () {
          // 30
          handle.release(); // 31
        }, 6000); // 32
      } // 33
    }); // 34
    // 35
    ////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['launch-screen'] = {}, {
    LaunchScreen: LaunchScreen
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.ui = {}, {
    Blaze: Blaze,
    UI: UI,
    Handlebars: Handlebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var meteorInstall = Package.modules.meteorInstall;
    var process = Package.modules.process;
    var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
    var Promise = Package.promise.Promise;
    var Symbol = Package['ecmascript-runtime-client'].Symbol;
    var Map = Package['ecmascript-runtime-client'].Map;
    var Set = Package['ecmascript-runtime-client'].Set;

    /* Package-scope variables */
    var __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "barbatus:typescript-runtime": { "typescript-helpers.js": function (_require, _exports, _module) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/barbatus_typescript-runtime/typescript-helpers.js                                                          //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var tslib = void 0; // 1
                        _module.watch(_require("tslib"), { // 1
                            "default": function (v) {
                                // 1
                                tslib = v; // 1
                            } // 1
                        }, 0); // 1
                        __extends = tslib.__extends; // 3
                        __assign = tslib.__assign; // 5
                        __rest = tslib.__rest; // 7
                        __decorate = tslib.__decorate; // 9
                        __param = tslib.__param; // 11
                        __metadata = tslib.__metadata; // 13
                        __awaiter = tslib.__awaiter; // 15
                        __generator = tslib.__generator; // 17
                        __exportStar = tslib.__exportStar; // 19
                        __values = tslib.__values; // 21
                        __read = tslib.__read; // 23
                        __spread = tslib.__spread; // 25
                        __await = tslib.__await; // 27
                        __asyncGenerator = tslib.__asyncGenerator; // 29
                        __asyncDelegator = tslib.__asyncDelegator; // 31
                        __asyncValues = tslib.__asyncValues; // 33
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "node_modules": { "tslib": { "package.json": function (_require3, _exports2) {

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                     //
                                // ../npm/node_modules/tslib/package.json                                                                              //
                                //                                                                                                                     //
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                _exports2.name = "tslib"; // 1
                                _exports2.version = "1.7.0"; // 2
                                _exports2.main = "tslib.js"; // 3
                                // 4
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            }, "tslib.js": function (_require4, _exports3, _module2) {

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                     //
                                // node_modules/meteor/barbatus_typescript-runtime/node_modules/tslib/tslib.js                                         //
                                //                                                                                                                     //
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                /*! *****************************************************************************                                      // 1
                                Copyright (c) Microsoft Corporation. All rights reserved.                                                              // 2
                                Licensed under the Apache License, Version 2.0 (the "License"); you may not use                                        // 3
                                this file except in compliance with the License. You may obtain a copy of the                                          // 4
                                License at http://www.apache.org/licenses/LICENSE-2.0                                                                  // 5
                                                                                                                                                       // 6
                                THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                                     // 7
                                KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED                                              // 8
                                WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,                                                   // 9
                                MERCHANTABLITY OR NON-INFRINGEMENT.                                                                                    // 10
                                                                                                                                                       // 11
                                See the Apache Version 2.0 License for specific language governing permissions                                         // 12
                                and limitations under the License.                                                                                     // 13
                                ***************************************************************************** */ // 14
                                /* global global, define, System, Reflect, Promise */ // 15
                                var __extends; // 16
                                var __assign; // 17
                                var __rest; // 18
                                var __decorate; // 19
                                var __param; // 20
                                var __metadata; // 21
                                var __awaiter; // 22
                                var __generator; // 23
                                var __exportStar; // 24
                                var __values; // 25
                                var __read; // 26
                                var __spread; // 27
                                var __await; // 28
                                var __asyncGenerator; // 29
                                var __asyncDelegator; // 30
                                var __asyncValues; // 31
                                (function (factory) {
                                    // 32
                                    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
                                    if (typeof define === "function" && define.amd) {
                                        // 34
                                        define("tslib", ["exports"], function (_exports4) {
                                            factory(createExporter(root, createExporter(_exports4)));
                                        }); // 35
                                    } // 36
                                    else if (typeof _module2 === "object" && typeof _module2.exports === "object") {
                                            // 37
                                            factory(createExporter(root, createExporter(_module2.exports))); // 38
                                        } // 39
                                        else {
                                                // 40
                                                factory(createExporter(root)); // 41
                                            } // 42
                                    function createExporter(exports, previous) {
                                        // 43
                                        return function (id, v) {
                                            return exports[id] = previous ? previous(id, v) : v;
                                        }; // 44
                                    } // 45
                                })( // 46
                                function (exporter) {
                                    // 47
                                    var extendStatics = Object.setPrototypeOf || // 48
                                    { __proto__: [] } instanceof Array && function (d, b) {
                                        d.__proto__ = b;
                                    } || // 49
                                    function (d, b) {
                                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                                    }; // 50
                                    // 51
                                    __extends = function (d, b) {
                                        // 52
                                        extendStatics(d, b); // 53
                                        function __() {
                                            this.constructor = d;
                                        } // 54
                                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __()); // 55
                                    }; // 56
                                    // 57
                                    __assign = Object.assign || function (t) {
                                        // 58
                                        for (var s, i = 1, n = arguments.length; i < n; i++) {
                                            // 59
                                            s = arguments[i]; // 60
                                            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p]; // 61
                                        } // 62
                                        return t; // 63
                                    }; // 64
                                    // 65
                                    __rest = function (s, e) {
                                        // 66
                                        var t = {}; // 67
                                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) // 68
                                            t[p] = s[p]; // 69
                                        if (s != null && typeof Object.getOwnPropertySymbols === "function") // 70
                                            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) // 71
                                                t[p[i]] = s[p[i]]; // 72
                                        return t; // 73
                                    }; // 74
                                    // 75
                                    __decorate = function (decorators, target, key, desc) {
                                        // 76
                                        var c = arguments.length,
                                            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                                            d;
                                        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                                        return c > 3 && r && Object.defineProperty(target, key, r), r; // 80
                                    }; // 81
                                    // 82
                                    __param = function (paramIndex, decorator) {
                                        // 83
                                        return function (target, key) {
                                            decorator(target, key, paramIndex);
                                        }; // 84
                                    }; // 85
                                    // 86
                                    __metadata = function (metadataKey, metadataValue) {
                                        // 87
                                        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
                                    }; // 89
                                    // 90
                                    __awaiter = function (thisArg, _arguments, P, generator) {
                                        // 91
                                        return new (P || (P = Promise))(function (resolve, reject) {
                                            // 92
                                            function fulfilled(value) {
                                                try {
                                                    step(generator.next(value));
                                                } catch (e) {
                                                    reject(e);
                                                }
                                            } // 93
                                            function rejected(value) {
                                                try {
                                                    step(generator["throw"](value));
                                                } catch (e) {
                                                    reject(e);
                                                }
                                            } // 94
                                            function step(result) {
                                                result.done ? resolve(result.value) : new P(function (resolve) {
                                                    resolve(result.value);
                                                }).then(fulfilled, rejected);
                                            }
                                            step((generator = generator.apply(thisArg, _arguments || [])).next()); // 96
                                        }); // 97
                                    }; // 98
                                    // 99
                                    __generator = function (thisArg, body) {
                                        // 100
                                        var _ = { label: 0, sent: function () {
                                                if (t[0] & 1) throw t[1];return t[1];
                                            }, trys: [], ops: [] },
                                            f,
                                            y,
                                            t,
                                            g;
                                        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
                                            return this;
                                        }), g;
                                        function verb(n) {
                                            return function (v) {
                                                return step([n, v]);
                                            };
                                        } // 103
                                        function step(op) {
                                            // 104
                                            if (f) throw new TypeError("Generator is already executing."); // 105
                                            while (_) try {
                                                // 106
                                                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                                                if (y = 0, t) op = [0, t.value]; // 108
                                                switch (op[0]) {// 109
                                                    case 0:case 1:
                                                        t = op;break; // 110
                                                    case 4:
                                                        _.label++;return { value: op[1], done: false }; // 111
                                                    case 5:
                                                        _.label++;y = op[1];op = [0];continue; // 112
                                                    case 7:
                                                        op = _.ops.pop();_.trys.pop();continue; // 113
                                                    default:
                                                        // 114
                                                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                                            _ = 0;continue;
                                                        }
                                                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                                                            _.label = op[1];break;
                                                        } // 116
                                                        if (op[0] === 6 && _.label < t[1]) {
                                                            _.label = t[1];t = op;break;
                                                        } // 117
                                                        if (t && _.label < t[2]) {
                                                            _.label = t[2];_.ops.push(op);break;
                                                        } // 118
                                                        if (t[2]) _.ops.pop(); // 119
                                                        _.trys.pop();continue; // 120
                                                } // 121
                                                op = body.call(thisArg, _); // 122
                                            } catch (e) {
                                                op = [6, e];y = 0;
                                            } finally {
                                                f = t = 0;
                                            } // 123
                                            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true }; // 124
                                        } // 125
                                    }; // 126
                                    // 127
                                    __exportStar = function (m, _exports5) {
                                        // 128
                                        for (var p in m) if (!_exports5.hasOwnProperty(p)) _exports5[p] = m[p]; // 129
                                    }; // 130
                                    // 131
                                    __values = function (o) {
                                        // 132
                                        var m = typeof Symbol === "function" && o[Symbol.iterator],
                                            i = 0; // 133
                                        if (m) return m.call(o); // 134
                                        return { // 135
                                            next: function () {
                                                // 136
                                                if (o && i >= o.length) o = void 0; // 137
                                                return { value: o && o[i++], done: !o }; // 138
                                            } // 139
                                        }; // 140
                                    }; // 141
                                    // 142
                                    __read = function (o, n) {
                                        // 143
                                        var m = typeof Symbol === "function" && o[Symbol.iterator]; // 144
                                        if (!m) return o; // 145
                                        var i = m.call(o),
                                            r,
                                            ar = [],
                                            e; // 146
                                        try {
                                            // 147
                                            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value); // 148
                                        } // 149
                                        catch (error) {
                                            e = { error: error };
                                        } // 150
                                        finally {
                                            // 151
                                            try {
                                                // 152
                                                if (r && !r.done && (m = i["return"])) m.call(i); // 153
                                            } // 154
                                            finally {
                                                if (e) throw e.error;
                                            } // 155
                                        } // 156
                                        return ar; // 157
                                    }; // 158
                                    // 159
                                    __spread = function () {
                                        // 160
                                        for (var ar = [], i = 0; i < arguments.length; i++) // 161
                                        ar = ar.concat(__read(arguments[i])); // 162
                                        return ar; // 163
                                    }; // 164
                                    // 165
                                    __await = function (v) {
                                        // 166
                                        return this instanceof __await ? (this.v = v, this) : new __await(v); // 167
                                    }; // 168
                                    // 169
                                    __asyncGenerator = function (thisArg, _arguments, generator) {
                                        // 170
                                        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined."); // 171
                                        var g = generator.apply(thisArg, _arguments || []),
                                            i,
                                            q = []; // 172
                                        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
                                            return this;
                                        }, i;
                                        function verb(n) {
                                            if (g[n]) i[n] = function (v) {
                                                return new Promise(function (a, b) {
                                                    q.push([n, v, a, b]) > 1 || resume(n, v);
                                                });
                                            };
                                        }
                                        function resume(n, v) {
                                            try {
                                                step(g[n](v));
                                            } catch (e) {
                                                settle(q[0][3], e);
                                            }
                                        } // 175
                                        function step(r) {
                                            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
                                        }
                                        function fulfill(value) {
                                            resume("next", value);
                                        } // 177
                                        function reject(value) {
                                            resume("throw", value);
                                        } // 178
                                        function settle(f, v) {
                                            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
                                        } // 179
                                    }; // 180
                                    // 181
                                    __asyncDelegator = function (o) {
                                        // 182
                                        var i, p; // 183
                                        return i = {}, verb("next"), verb("throw", function (e) {
                                            throw e;
                                        }), verb("return"), i[Symbol.iterator] = function () {
                                            return this;
                                        }, i;
                                        function verb(n, f) {
                                            if (o[n]) i[n] = function (v) {
                                                return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
                                            };
                                        }
                                    }; // 186
                                    // 187
                                    __asyncValues = function (o) {
                                        // 188
                                        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined."); // 189
                                        var m = o[Symbol.asyncIterator]; // 190
                                        return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator](); // 191
                                    }; // 192
                                    // 193
                                    exporter("__extends", __extends); // 194
                                    exporter("__assign", __assign); // 195
                                    exporter("__rest", __rest); // 196
                                    exporter("__decorate", __decorate); // 197
                                    exporter("__param", __param); // 198
                                    exporter("__metadata", __metadata); // 199
                                    exporter("__awaiter", __awaiter); // 200
                                    exporter("__generator", __generator); // 201
                                    exporter("__exportStar", __exportStar); // 202
                                    exporter("__values", __values); // 203
                                    exporter("__read", __read); // 204
                                    exporter("__spread", __spread); // 205
                                    exporter("__await", __await); // 206
                                    exporter("__asyncGenerator", __asyncGenerator); // 207
                                    exporter("__asyncDelegator", __asyncDelegator); // 208
                                    exporter("__asyncValues", __asyncValues); // 209
                                }); // 210
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            } } } } } } }, {
        "extensions": [".js", ".json"]
    });
    _require2("./node_modules/meteor/barbatus:typescript-runtime/typescript-helpers.js");

    /* Exports */
    if (typeof Package === 'undefined') Package = {};
    (function (pkg, symbols) {
        for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
    })(Package['barbatus:typescript-runtime'] = {}, {
        __extends: __extends,
        __assign: __assign,
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues
    });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var ClientVersions, Autoupdate;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/autoupdate/autoupdate_client.js                                                //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1
    // which contains the set of acceptable client versions.                                   // 2
    //                                                                                         // 3
    // A "hard code push" occurs when the running client version is not in                     // 4
    // the set of acceptable client versions (or the server updates the                        // 5
    // collection, there is a published client version marked `current` and                    // 6
    // the running client version is no longer in the set).                                    // 7
    //                                                                                         // 8
    // When the `reload` package is loaded, a hard code push causes                            // 9
    // the browser to reload, so that it will load the latest client                           // 10
    // version from the server.                                                                // 11
    //                                                                                         // 12
    // A "soft code push" represents the situation when the running client                     // 13
    // version is in the set of acceptable versions, but there is a newer                      // 14
    // version available on the server.                                                        // 15
    //                                                                                         // 16
    // `Autoupdate.newClientAvailable` is a reactive data source which                         // 17
    // becomes `true` if there is a new version of the client is available on                  // 18
    // the server.                                                                             // 19
    //                                                                                         // 20
    // This package doesn't implement a soft code reload process itself,                       // 21
    // but `newClientAvailable` could be used for example to display a                         // 22
    // "click to reload" link to the user.                                                     // 23
    // 24
    // The client version of the client code currently running in the                          // 25
    // browser.                                                                                // 26
    var autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || "unknown"; // 27
    var autoupdateVersionRefreshable = // 28
    __meteor_runtime_config__.autoupdateVersionRefreshable || "unknown"; // 29
    // 30
    // The collection of acceptable client versions.                                           // 31
    ClientVersions = new Mongo.Collection("meteor_autoupdate_clientVersions"); // 32
    // 33
    Autoupdate = {}; // 34
    // 35
    Autoupdate.newClientAvailable = function () {
      // 36
      return !!ClientVersions.findOne({ // 37
        _id: "version", // 38
        version: { $ne: autoupdateVersion } }) || // 39
      !!ClientVersions.findOne({ // 40
        _id: "version-refreshable", // 41
        version: { $ne: autoupdateVersionRefreshable } }); // 42
    }; // 43
    Autoupdate._ClientVersions = ClientVersions; // Used by a self-test                       // 44
    // 45
    var knownToSupportCssOnLoad = false; // 46
    // 47
    var retry = new Retry({ // 48
      // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49
      // in normal operation, this is a wacky failure. We don't want to retry                  // 50
      // right away, we can start slowly.                                                      // 51
      //                                                                                       // 52
      // A better way than timeconstants here might be to use the knowledge                    // 53
      // of when we reconnect to help trigger these retries. Typically, the                    // 54
      // server fixing code will result in a restart and reconnect, but                        // 55
      // potentially the subscription could have a transient error.                            // 56
      minCount: 0, // don't do any immediate retries                                           // 57
      baseTimeout: 30 * 1000 // start with 30s                                                   // 58
    }); // 59
    var failures = 0; // 60
    // 61
    Autoupdate._retrySubscription = function () {
      // 62
      Meteor.subscribe("meteor_autoupdate_clientVersions", { // 63
        onError: function (error) {
          // 64
          Meteor._debug("autoupdate subscription failed:", error); // 65
          failures++; // 66
          retry.retryLater(failures, function () {
            // 67
            // Just retry making the subscription, don't reload the whole                      // 68
            // page. While reloading would catch more cases (for example,                      // 69
            // the server went back a version and is now doing old-style hot                   // 70
            // code push), it would also be more prone to reload loops,                        // 71
            // which look really bad to the user. Just retrying the                            // 72
            // subscription over DDP means it is at least possible to fix by                   // 73
            // updating the server.                                                            // 74
            Autoupdate._retrySubscription(); // 75
          }); // 76
        }, // 77
        onReady: function () {
          // 78
          if (Package.reload) {
            // 79
            var checkNewVersionDocument = function (doc) {
              // 80
              var self = this; // 81
              if (doc._id === 'version-refreshable' && // 82
              doc.version !== autoupdateVersionRefreshable) {
                // 83
                autoupdateVersionRefreshable = doc.version; // 84
                // Switch out old css links for the new css links. Inspired by:                // 85
                // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710
                var newCss = doc.assets && doc.assets.allCss || []; // 87
                var oldLinks = []; // 88
                _.each(document.getElementsByTagName('link'), function (link) {
                  // 89
                  if (link.className === '__meteor-css__') {
                    // 90
                    oldLinks.push(link); // 91
                  } // 92
                }); // 93
                // 94
                var waitUntilCssLoads = function (link, callback) {
                  // 95
                  var executeCallback = _.once(callback); // 96
                  link.onload = function () {
                    // 97
                    knownToSupportCssOnLoad = true; // 98
                    executeCallback(); // 99
                  }; // 100
                  if (!knownToSupportCssOnLoad) {
                    // 101
                    var id = Meteor.setInterval(function () {
                      // 102
                      if (link.sheet) {
                        // 103
                        executeCallback(); // 104
                        Meteor.clearInterval(id); // 105
                      } // 106
                    }, 50); // 107
                  } // 108
                }; // 109
                // 110
                var removeOldLinks = _.after(newCss.length, function () {
                  // 111
                  _.each(oldLinks, function (oldLink) {
                    // 112
                    oldLink.parentNode.removeChild(oldLink); // 113
                  }); // 114
                }); // 115
                // 116
                var attachStylesheetLink = function (newLink) {
                  // 117
                  document.getElementsByTagName("head").item(0).appendChild(newLink); // 118
                  // 119
                  waitUntilCssLoads(newLink, function () {
                    // 120
                    Meteor.setTimeout(removeOldLinks, 200); // 121
                  }); // 122
                }; // 123
                // 124
                if (newCss.length !== 0) {
                  // 125
                  _.each(newCss, function (css) {
                    // 126
                    var newLink = document.createElement("link"); // 127
                    newLink.setAttribute("rel", "stylesheet"); // 128
                    newLink.setAttribute("type", "text/css"); // 129
                    newLink.setAttribute("class", "__meteor-css__"); // 130
                    newLink.setAttribute("href", css.url); // 131
                    attachStylesheetLink(newLink); // 132
                  }); // 133
                } else {
                  // 134
                  removeOldLinks(); // 135
                } // 136
                // 137
              } // 138
              else if (doc._id === 'version' && doc.version !== autoupdateVersion) {
                  // 139
                  handle && handle.stop(); // 140
                  // 141
                  if (Package.reload) {
                    // 142
                    Package.reload.Reload._reload(); // 143
                  } // 144
                } // 145
            }; // 146
            // 147
            var handle = ClientVersions.find().observe({ // 148
              added: checkNewVersionDocument, // 149
              changed: checkNewVersionDocument // 150
            }); // 151
          } // 152
        } // 153
      }); // 154
    }; // 155
    Autoupdate._retrySubscription(); // 156
    // 157
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.autoupdate = {}, {
    Autoupdate: Autoupdate
  });
})();/* Imports for global scope */

Mongo = Package.mongo.Mongo;
ReactiveVar = Package['reactive-var'].ReactiveVar;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
_ = Package.underscore._;
DDP = Package['ddp-client'].DDP;
LaunchScreen = Package['launch-screen'].LaunchScreen;
Blaze = Package.ui.Blaze;
UI = Package.ui.UI;
Handlebars = Package.ui.Handlebars;
Spacebars = Package.spacebars.Spacebars;
Template = Package['templating-runtime'].Template;
meteorInstall = Package.modules.meteorInstall;
process = Package.modules.process;
meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
Promise = Package.promise.Promise;
__extends = Package['barbatus:typescript-runtime'].__extends;
__assign = Package['barbatus:typescript-runtime'].__assign;
__rest = Package['barbatus:typescript-runtime'].__rest;
__decorate = Package['barbatus:typescript-runtime'].__decorate;
__param = Package['barbatus:typescript-runtime'].__param;
__metadata = Package['barbatus:typescript-runtime'].__metadata;
__awaiter = Package['barbatus:typescript-runtime'].__awaiter;
__generator = Package['barbatus:typescript-runtime'].__generator;
__exportStar = Package['barbatus:typescript-runtime'].__exportStar;
__values = Package['barbatus:typescript-runtime'].__values;
__read = Package['barbatus:typescript-runtime'].__read;
__spread = Package['barbatus:typescript-runtime'].__spread;
__await = Package['barbatus:typescript-runtime'].__await;
__asyncGenerator = Package['barbatus:typescript-runtime'].__asyncGenerator;
__asyncDelegator = Package['barbatus:typescript-runtime'].__asyncDelegator;
__asyncValues = Package['barbatus:typescript-runtime'].__asyncValues;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;
HTML = Package.htmljs.HTML;
Symbol = Package['ecmascript-runtime-client'].Symbol;
Map = Package['ecmascript-runtime-client'].Map;
Set = Package['ecmascript-runtime-client'].Set;// Disable hot-code-push
if (Package.reload) {
  Meteor._reload.onMigrate(function () {
    return [false];
  });
}
